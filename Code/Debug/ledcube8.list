
ledcube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009eb0  08009eb0  00019eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a230  0800a230  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a230  0800a230  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a230  0800a230  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000078  0800a2b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800a2b0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011311  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003526  00000000  00000000  000313b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000348d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00035b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0dd  00000000  00000000  00036c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197f7  00000000  00000000  00052d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093706  00000000  00000000  0006c534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffc3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a80  00000000  00000000  000ffc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e94 	.word	0x08009e94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08009e94 	.word	0x08009e94

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if (huart2.Instance == huart ->Instance)
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_UART_RxCpltCallback+0x30>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d108      	bne.n	800103a <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	4907      	ldr	r1, [pc, #28]	; (8001048 <HAL_UART_RxCpltCallback+0x34>)
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_UART_RxCpltCallback+0x30>)
 800102e:	f002 fe28 	bl	8003c82 <HAL_UART_Receive_IT>
		currentEffect = rxData;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_UART_RxCpltCallback+0x34>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_UART_RxCpltCallback+0x38>)
 8001038:	701a      	strb	r2, [r3, #0]
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001a8 	.word	0x200001a8
 8001048:	200001ec 	.word	0x200001ec
 800104c:	20000010 	.word	0x20000010

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fca8 	bl	80019a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 8001058:	2202      	movs	r2, #2
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <main+0x50>)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <main+0x54>)
 800105e:	f003 fb56 	bl	800470e <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f829 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 f997 	bl	8001398 <MX_GPIO_Init>
  MX_SPI1_Init();
 800106a:	f000 f8bf 	bl	80011ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800106e:	f000 f93f 	bl	80012f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001072:	f000 f967 	bl	8001344 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001076:	f000 f87b 	bl	8001170 <MX_ADC1_Init>
  MX_TIM2_Init();
 800107a:	f000 f8ed 	bl	8001258 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <main+0x58>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <main+0x5c>)
 8001084:	f002 fdfd 	bl	8003c82 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <main+0x60>)
 800108a:	f002 f9f9 	bl	8003480 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <main+0x54>)
 8001090:	f003 fab5 	bl	80045fe <Btn_Handle>
	  Led_cube_Handle(currentEffect);
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <main+0x64>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fc05 	bl	80058a8 <Led_cube_Handle>
	  Btn_Handle(&button1);
 800109e:	e7f6      	b.n	800108e <main+0x3e>
 80010a0:	40010800 	.word	0x40010800
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	200001ec 	.word	0x200001ec
 80010ac:	200001a8 	.word	0x200001a8
 80010b0:	2000011c 	.word	0x2000011c
 80010b4:	20000010 	.word	0x20000010

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c2:	2228      	movs	r2, #40	; 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 ffac 	bl	8007024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001104:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001108:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fa30 	bl	8002574 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800111a:	f000 f9a9 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fc9c 	bl	8002a78 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001146:	f000 f993 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	2302      	movs	r3, #2
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800114e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fe26 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001162:	f000 f985 	bl	8001470 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_ADC1_Init+0x74>)
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <MX_ADC1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_ADC1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_ADC1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_ADC1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_ADC1_Init+0x74>)
 800119a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800119e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_ADC1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_ADC1_Init+0x74>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_ADC1_Init+0x74>)
 80011ae:	f000 fc5d 	bl	8001a6c <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 f95a 	bl	8001470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_ADC1_Init+0x74>)
 80011ce:	f000 fd25 	bl	8001c1c <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011d8:	f000 f94a 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000094 	.word	0x20000094
 80011e8:	40012400 	.word	0x40012400

080011ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_SPI1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_SPI1_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_SPI1_Init+0x64>)
 8001220:	2220      	movs	r2, #32
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_SPI1_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_SPI1_Init+0x64>)
 800123e:	f001 fe69 	bl	8002f14 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 f912 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000c4 	.word	0x200000c4
 8001254:	40013000 	.word	0x40013000

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_TIM2_Init+0x94>)
 8001276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_TIM2_Init+0x94>)
 800127e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001282:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_TIM2_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_TIM2_Init+0x94>)
 800128c:	22c7      	movs	r2, #199	; 0xc7
 800128e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_TIM2_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_TIM2_Init+0x94>)
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <MX_TIM2_Init+0x94>)
 800129e:	f002 f89f 	bl	80033e0 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a8:	f000 f8e2 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_TIM2_Init+0x94>)
 80012ba:	f002 fa3b 	bl	8003734 <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c4:	f000 f8d4 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_TIM2_Init+0x94>)
 80012d6:	f002 fc17 	bl	8003b08 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012e0:	f000 f8c6 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000011c 	.word	0x2000011c

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	2204      	movs	r2, #4
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f002 fc5e 	bl	8003be8 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f89d 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000164 	.word	0x20000164
 8001340:	40013800 	.word	0x40013800

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f002 fc34 	bl	8003be8 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f873 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001a8 	.word	0x200001a8
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_GPIO_Init+0xcc>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <MX_GPIO_Init+0xd0>)
 80013fc:	f001 f8a1 	bl	8002542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <MX_GPIO_Init+0xd4>)
 8001406:	f001 f89c 	bl	8002542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_GPIO_Init+0xd0>)
 8001424:	f000 fef2 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0xd4>)
 800143c:	f000 fee6 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_GPIO_Init+0xd4>)
 8001458:	f000 fed8 	bl	800220c <HAL_GPIO_Init>

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	40011000 	.word	0x40011000
 800146c:	40010800 	.word	0x40010800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_MspInit+0x5c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_MspInit+0x5c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_MspInit+0x60>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_MspInit+0x60>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000

080014e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_ADC_MspInit+0x6c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d121      	bne.n	8001544 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0x70>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_ADC_MspInit+0x70>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_ADC_MspInit+0x70>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_ADC_MspInit+0x70>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0x70>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_ADC_MspInit+0x70>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001534:	2303      	movs	r3, #3
 8001536:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_ADC_MspInit+0x74>)
 8001540:	f000 fe64 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40012400 	.word	0x40012400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <HAL_SPI_MspInit+0x70>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d123      	bne.n	80015c0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_SPI_MspInit+0x74>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_SPI_MspInit+0x74>)
 800157e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_SPI_MspInit+0x74>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_SPI_MspInit+0x74>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_SPI_MspInit+0x74>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_SPI_MspInit+0x74>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015a8:	23a0      	movs	r3, #160	; 0xa0
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_SPI_MspInit+0x78>)
 80015bc:	f000 fe26 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d113      	bne.n	800160e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_TIM_Base_MspInit+0x44>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_Base_MspInit+0x44>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2102      	movs	r1, #2
 8001602:	201c      	movs	r0, #28
 8001604:	f000 fd1b 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001608:	201c      	movs	r0, #28
 800160a:	f000 fd34 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <HAL_UART_MspInit+0x118>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d13a      	bne.n	80016b2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_UART_MspInit+0x11c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_UART_MspInit+0x11c>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_UART_MspInit+0x11c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_UART_MspInit+0x11c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a37      	ldr	r2, [pc, #220]	; (8001738 <HAL_UART_MspInit+0x11c>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_UART_MspInit+0x11c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800166c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4619      	mov	r1, r3
 8001680:	482e      	ldr	r0, [pc, #184]	; (800173c <HAL_UART_MspInit+0x120>)
 8001682:	f000 fdc3 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4619      	mov	r1, r3
 800169a:	4828      	ldr	r0, [pc, #160]	; (800173c <HAL_UART_MspInit+0x120>)
 800169c:	f000 fdb6 	bl	800220c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f000 fcca 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f000 fce3 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b0:	e03c      	b.n	800172c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_UART_MspInit+0x124>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d137      	bne.n	800172c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_MspInit+0x11c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ec:	2304      	movs	r3, #4
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <HAL_UART_MspInit+0x120>)
 8001700:	f000 fd84 	bl	800220c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001704:	2308      	movs	r3, #8
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4619      	mov	r1, r3
 8001716:	4809      	ldr	r0, [pc, #36]	; (800173c <HAL_UART_MspInit+0x120>)
 8001718:	f000 fd78 	bl	800220c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2026      	movs	r0, #38	; 0x26
 8001722:	f000 fc8c 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001726:	2026      	movs	r0, #38	; 0x26
 8001728:	f000 fca5 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	40004400 	.word	0x40004400

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f953 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f001 fec3 	bl	8003524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000011c 	.word	0x2000011c

080017a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART1_IRQHandler+0x10>)
 80017ae:	f002 fa99 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000164 	.word	0x20000164

080017bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART2_IRQHandler+0x10>)
 80017c2:	f002 fa8f 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001a8 	.word	0x200001a8

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <_kill>:

int _kill(int pid, int sig)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e8:	f005 fbf2 	bl	8006fd0 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2216      	movs	r2, #22
 80017f0:	601a      	str	r2, [r3, #0]
	return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_exit>:

void _exit (int status)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffe7 	bl	80017de <_kill>
	while (1) {}		/* Make sure we hang here */
 8001810:	e7fe      	b.n	8001810 <_exit+0x12>

08001812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e00a      	b.n	800183a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001824:	f3af 8000 	nop.w
 8001828:	4601      	mov	r1, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf0      	blt.n	8001824 <_read+0x12>
	}

return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e009      	b.n	8001872 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf1      	blt.n	800185e <_write+0x12>
	}
	return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_close>:

int _close(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <_isatty>:

int _isatty(int file)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f005 fb5c 	bl	8006fd0 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20005000 	.word	0x20005000
 8001944:	00000400 	.word	0x00000400
 8001948:	20000208 	.word	0x20000208
 800194c:	200002d0 	.word	0x200002d0

08001950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ffe5 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f005 fb29 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7ff fb61 	bl	8001050 <main>
  bx lr
 800198e:	4770      	bx	lr
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001998:	0800a238 	.word	0x0800a238
  ldr r2, =_sbss
 800199c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019a0:	200002d0 	.word	0x200002d0

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x28>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x28>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 fb35 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fd5a 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb4d 	bl	8002092 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 fb15 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_IncTick+0x20>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000008 	.word	0x20000008
 8001a54:	2000020c 	.word	0x2000020c

08001a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	2000020c 	.word	0x2000020c

08001a6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0be      	b.n	8001c0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fd18 	bl	80014e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f9ab 	bl	8001e0c <ADC_ConversionStop_Disable>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8099 	bne.w	8001bfa <HAL_ADC_Init+0x18e>
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8095 	bne.w	8001bfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ad8:	f023 0302 	bic.w	r3, r3, #2
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001af4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d003      	beq.n	8001b0e <HAL_ADC_Init+0xa2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_ADC_Init+0xa8>
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	e000      	b.n	8001b16 <HAL_ADC_Init+0xaa>
 8001b14:	2300      	movs	r3, #0
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7d1b      	ldrb	r3, [r3, #20]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d119      	bne.n	8001b58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7b1b      	ldrb	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	035a      	lsls	r2, r3, #13
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	e00b      	b.n	8001b58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_ADC_Init+0x1a8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b88:	d003      	beq.n	8001b92 <HAL_ADC_Init+0x126>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d104      	bne.n	8001b9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	051b      	lsls	r3, r3, #20
 8001b9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_ADC_Init+0x1ac>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	f023 0303 	bic.w	r3, r3, #3
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd6:	e018      	b.n	8001c0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	f023 0312 	bic.w	r3, r3, #18
 8001be0:	f043 0210 	orr.w	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf8:	e007      	b.n	8001c0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f043 0210 	orr.w	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	ffe1f7fd 	.word	0xffe1f7fd
 8001c18:	ff1f0efe 	.word	0xff1f0efe

08001c1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0dc      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x1da>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d81c      	bhi.n	8001c86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b05      	subs	r3, #5
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4019      	ands	r1, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b05      	subs	r3, #5
 8001c78:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
 8001c84:	e03c      	b.n	8001d00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d81c      	bhi.n	8001cc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b23      	subs	r3, #35	; 0x23
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4019      	ands	r1, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b23      	subs	r3, #35	; 0x23
 8001cba:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc6:	e01b      	b.n	8001d00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b41      	subs	r3, #65	; 0x41
 8001cda:	221f      	movs	r2, #31
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b41      	subs	r3, #65	; 0x41
 8001cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d91c      	bls.n	8001d42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4019      	ands	r1, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6898      	ldr	r0, [r3, #8]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	3b1e      	subs	r3, #30
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e019      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6919      	ldr	r1, [r3, #16]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d003      	beq.n	8001d86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d82:	2b11      	cmp	r3, #17
 8001d84:	d132      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d125      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d126      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d11a      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_ADC_ConfigChannel+0x1e8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0c9a      	lsrs	r2, r3, #18
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dcc:	e002      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x1b2>
 8001dda:	e007      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40012400 	.word	0x40012400
 8001e04:	20000000 	.word	0x20000000
 8001e08:	431bde83 	.word	0x431bde83

08001e0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d12e      	bne.n	8001e84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e36:	f7ff fe0f 	bl	8001a58 <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3c:	e01b      	b.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e3e:	f7ff fe0b 	bl	8001a58 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d914      	bls.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10d      	bne.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d0dc      	beq.n	8001e3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <__NVIC_EnableIRQ+0x34>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff90 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff2d 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff42 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff35 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e020      	b.n	8002114 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020e 	bic.w	r2, r2, #14
 80020e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002132:	2b02      	cmp	r3, #2
 8002134:	d005      	beq.n	8002142 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2204      	movs	r2, #4
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e051      	b.n	80021e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020e 	bic.w	r2, r2, #14
 8002150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_DMA_Abort_IT+0xd0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d029      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xa0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <HAL_DMA_Abort_IT+0xd4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d022      	beq.n	80021bc <HAL_DMA_Abort_IT+0x9c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_DMA_Abort_IT+0xd8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d01a      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x96>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_DMA_Abort_IT+0xdc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d012      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x90>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_DMA_Abort_IT+0xe0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00a      	beq.n	80021aa <HAL_DMA_Abort_IT+0x8a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_DMA_Abort_IT+0xe4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d102      	bne.n	80021a4 <HAL_DMA_Abort_IT+0x84>
 800219e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a2:	e00e      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	e00b      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ae:	e008      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	e005      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	e002      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021bc:	2310      	movs	r3, #16
 80021be:	e000      	b.n	80021c2 <HAL_DMA_Abort_IT+0xa2>
 80021c0:	2301      	movs	r3, #1
 80021c2:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_DMA_Abort_IT+0xe8>)
 80021c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
    } 
  }
  return status;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40020008 	.word	0x40020008
 80021f4:	4002001c 	.word	0x4002001c
 80021f8:	40020030 	.word	0x40020030
 80021fc:	40020044 	.word	0x40020044
 8002200:	40020058 	.word	0x40020058
 8002204:	4002006c 	.word	0x4002006c
 8002208:	40020000 	.word	0x40020000

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b08b      	sub	sp, #44	; 0x2c
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e169      	b.n	80024f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002220:	2201      	movs	r2, #1
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 8158 	bne.w	80024ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a9a      	ldr	r2, [pc, #616]	; (80024ac <HAL_GPIO_Init+0x2a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d05e      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002248:	4a98      	ldr	r2, [pc, #608]	; (80024ac <HAL_GPIO_Init+0x2a0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d875      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800224e:	4a98      	ldr	r2, [pc, #608]	; (80024b0 <HAL_GPIO_Init+0x2a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d058      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002254:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <HAL_GPIO_Init+0x2a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d86f      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800225a:	4a96      	ldr	r2, [pc, #600]	; (80024b4 <HAL_GPIO_Init+0x2a8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d052      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002260:	4a94      	ldr	r2, [pc, #592]	; (80024b4 <HAL_GPIO_Init+0x2a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d869      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002266:	4a94      	ldr	r2, [pc, #592]	; (80024b8 <HAL_GPIO_Init+0x2ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04c      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 800226c:	4a92      	ldr	r2, [pc, #584]	; (80024b8 <HAL_GPIO_Init+0x2ac>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d863      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002272:	4a92      	ldr	r2, [pc, #584]	; (80024bc <HAL_GPIO_Init+0x2b0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d046      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002278:	4a90      	ldr	r2, [pc, #576]	; (80024bc <HAL_GPIO_Init+0x2b0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d85d      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800227e:	2b12      	cmp	r3, #18
 8002280:	d82a      	bhi.n	80022d8 <HAL_GPIO_Init+0xcc>
 8002282:	2b12      	cmp	r3, #18
 8002284:	d859      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <HAL_GPIO_Init+0x80>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	08002307 	.word	0x08002307
 8002290:	080022e1 	.word	0x080022e1
 8002294:	080022f3 	.word	0x080022f3
 8002298:	08002335 	.word	0x08002335
 800229c:	0800233b 	.word	0x0800233b
 80022a0:	0800233b 	.word	0x0800233b
 80022a4:	0800233b 	.word	0x0800233b
 80022a8:	0800233b 	.word	0x0800233b
 80022ac:	0800233b 	.word	0x0800233b
 80022b0:	0800233b 	.word	0x0800233b
 80022b4:	0800233b 	.word	0x0800233b
 80022b8:	0800233b 	.word	0x0800233b
 80022bc:	0800233b 	.word	0x0800233b
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	0800233b 	.word	0x0800233b
 80022c8:	0800233b 	.word	0x0800233b
 80022cc:	0800233b 	.word	0x0800233b
 80022d0:	080022e9 	.word	0x080022e9
 80022d4:	080022fd 	.word	0x080022fd
 80022d8:	4a79      	ldr	r2, [pc, #484]	; (80024c0 <HAL_GPIO_Init+0x2b4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022de:	e02c      	b.n	800233a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e029      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	3304      	adds	r3, #4
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e024      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	3308      	adds	r3, #8
 80022f8:	623b      	str	r3, [r7, #32]
          break;
 80022fa:	e01f      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	330c      	adds	r3, #12
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e01a      	b.n	800233c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800230e:	2304      	movs	r3, #4
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e013      	b.n	800233c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800231c:	2308      	movs	r3, #8
 800231e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	611a      	str	r2, [r3, #16]
          break;
 8002326:	e009      	b.n	800233c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002328:	2308      	movs	r3, #8
 800232a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	615a      	str	r2, [r3, #20]
          break;
 8002332:	e003      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x130>
          break;
 800233a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d801      	bhi.n	8002346 <HAL_GPIO_Init+0x13a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	e001      	b.n	800234a <HAL_GPIO_Init+0x13e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2bff      	cmp	r3, #255	; 0xff
 8002350:	d802      	bhi.n	8002358 <HAL_GPIO_Init+0x14c>
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x152>
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	3b08      	subs	r3, #8
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	210f      	movs	r1, #15
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	401a      	ands	r2, r3
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80b1 	beq.w	80024ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800238c:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2bc>)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a40      	ldr	r2, [pc, #256]	; (80024cc <HAL_GPIO_Init+0x2c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_GPIO_Init+0x1ec>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <HAL_GPIO_Init+0x2c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00d      	beq.n	80023f4 <HAL_GPIO_Init+0x1e8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <HAL_GPIO_Init+0x2c8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x1e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <HAL_GPIO_Init+0x2cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_GPIO_Init+0x1e0>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023ec:	2304      	movs	r3, #4
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f8:	2300      	movs	r3, #0
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	f002 0203 	and.w	r2, r2, #3
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	4093      	lsls	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240a:	492f      	ldr	r1, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x2bc>)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	492c      	ldr	r1, [pc, #176]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	4928      	ldr	r1, [pc, #160]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800243c:	4013      	ands	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	491e      	ldr	r1, [pc, #120]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002464:	4013      	ands	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4918      	ldr	r1, [pc, #96]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	4914      	ldr	r1, [pc, #80]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d021      	beq.n	80024e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
 80024a8:	e021      	b.n	80024ee <HAL_GPIO_Init+0x2e2>
 80024aa:	bf00      	nop
 80024ac:	10320000 	.word	0x10320000
 80024b0:	10310000 	.word	0x10310000
 80024b4:	10220000 	.word	0x10220000
 80024b8:	10210000 	.word	0x10210000
 80024bc:	10120000 	.word	0x10120000
 80024c0:	10110000 	.word	0x10110000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40010800 	.word	0x40010800
 80024d0:	40010c00 	.word	0x40010c00
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40011400 	.word	0x40011400
 80024dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_GPIO_Init+0x304>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	4909      	ldr	r1, [pc, #36]	; (8002510 <HAL_GPIO_Init+0x304>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f47f ae8e 	bne.w	8002220 <HAL_GPIO_Init+0x14>
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	372c      	adds	r7, #44	; 0x2c
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e001      	b.n	8002536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
 800254e:	4613      	mov	r3, r2
 8002550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002552:	787b      	ldrb	r3, [r7, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800255e:	e003      	b.n	8002568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	041a      	lsls	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
	...

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e272      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8087 	beq.w	80026a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00c      	beq.n	80025ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a0:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d112      	bne.n	80025d2 <HAL_RCC_OscConfig+0x5e>
 80025ac:	4b8c      	ldr	r3, [pc, #560]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ba:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d06c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x12c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d168      	bne.n	80026a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e24c      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x76>
 80025dc:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7f      	ldr	r2, [pc, #508]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e02e      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x98>
 80025f2:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7a      	ldr	r2, [pc, #488]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a77      	ldr	r2, [pc, #476]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0xbc>
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6e      	ldr	r2, [pc, #440]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 8002630:	4b6b      	ldr	r3, [pc, #428]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6a      	ldr	r2, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a67      	ldr	r2, [pc, #412]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fa02 	bl	8001a58 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff f9fe 	bl	8001a58 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e200      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xe4>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f9ee 	bl	8001a58 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff f9ea 	bl	8001a58 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1ec      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x10c>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ae:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d11c      	bne.n	8002700 <HAL_RCC_OscConfig+0x18c>
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d116      	bne.n	8002700 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_RCC_OscConfig+0x176>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c0      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4939      	ldr	r1, [pc, #228]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	e03a      	b.n	8002776 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCC_OscConfig+0x270>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7ff f9a3 	bl	8001a58 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7ff f99f 	bl	8001a58 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1a1      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4927      	ldr	r1, [pc, #156]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_RCC_OscConfig+0x270>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff f982 	bl	8001a58 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002758:	f7ff f97e 	bl	8001a58 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e180      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03a      	beq.n	80027f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d019      	beq.n	80027be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_RCC_OscConfig+0x274>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7ff f962 	bl	8001a58 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7ff f95e 	bl	8001a58 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e160      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 fad8 	bl	8002d6c <RCC_Delay>
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_OscConfig+0x274>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7ff f948 	bl	8001a58 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ca:	e00f      	b.n	80027ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff f944 	bl	8001a58 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d908      	bls.n	80027ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e146      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	42420000 	.word	0x42420000
 80027e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b92      	ldr	r3, [pc, #584]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e9      	bne.n	80027cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a6 	beq.w	8002952 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]
 8002822:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCC_OscConfig+0x4c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x4c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7e      	ldr	r2, [pc, #504]	; (8002a3c <HAL_RCC_OscConfig+0x4c8>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7ff f905 	bl	8001a58 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7ff f901 	bl	8001a58 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e103      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x4c8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x312>
 8002878:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	e02d      	b.n	80028e2 <HAL_RCC_OscConfig+0x36e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x334>
 800288e:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6213      	str	r3, [r2, #32]
 800289a:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a66      	ldr	r2, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	e01c      	b.n	80028e2 <HAL_RCC_OscConfig+0x36e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x356>
 80028b0:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a60      	ldr	r2, [pc, #384]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x36e>
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4a5a      	ldr	r2, [pc, #360]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6213      	str	r3, [r2, #32]
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7ff f8b5 	bl	8001a58 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7ff f8b1 	bl	8001a58 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0b1      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ee      	beq.n	80028f2 <HAL_RCC_OscConfig+0x37e>
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7ff f89f 	bl	8001a58 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7ff f89b 	bl	8001a58 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e09b      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002934:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8087 	beq.w	8002a6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d061      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d146      	bne.n	80029fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x4cc>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7ff f86f 	bl	8001a58 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7ff f86b 	bl	8001a58 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e06d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002990:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d108      	bne.n	80029b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4921      	ldr	r1, [pc, #132]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a19      	ldr	r1, [r3, #32]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	430b      	orrs	r3, r1
 80029ca:	491b      	ldr	r1, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff f83f 	bl	8001a58 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff f83b 	bl	8001a58 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e03d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x46a>
 80029fc:	e035      	b.n	8002a6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_RCC_OscConfig+0x4cc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff f828 	bl	8001a58 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff f824 	bl	8001a58 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e026      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x498>
 8002a2a:	e01e      	b.n	8002a6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e019      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x500>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d0      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d910      	bls.n	8002abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	4965      	ldr	r1, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ade:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002af6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d040      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e073      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06b      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4936      	ldr	r1, [pc, #216]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe ff76 	bl	8001a58 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe ff72 	bl	8001a58 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e053      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d210      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	4922      	ldr	r1, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1cc>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fed4 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08009ec8 	.word	0x08009ec8
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b490      	push	{r4, r7}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c54:	1d3c      	adds	r4, r7, #4
 8002c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c5c:	f240 2301 	movw	r3, #513	; 0x201
 8002c60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x46>
 8002c8a:	e02b      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c8e:	623b      	str	r3, [r7, #32]
      break;
 8002c90:	e02b      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3328      	adds	r3, #40	; 0x28
 8002c9c:	443b      	add	r3, r7
 8002c9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ca2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0c5b      	lsrs	r3, r3, #17
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	3328      	adds	r3, #40	; 0x28
 8002cba:	443b      	add	r3, r7
 8002cbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cc6:	fb03 f202 	mul.w	r2, r3, r2
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e004      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	623b      	str	r3, [r7, #32]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce6:	623b      	str	r3, [r7, #32]
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	6a3b      	ldr	r3, [r7, #32]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc90      	pop	{r4, r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	08009eb0 	.word	0x08009eb0
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	007a1200 	.word	0x007a1200
 8002d04:	003d0900 	.word	0x003d0900

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff2 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08009ed8 	.word	0x08009ed8

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffde 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08009ed8 	.word	0x08009ed8

08002d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <RCC_Delay+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <RCC_Delay+0x38>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a5b      	lsrs	r3, r3, #9
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d88:	bf00      	nop
  }
  while (Delay --);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	60fa      	str	r2, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <RCC_Delay+0x1c>
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000000 	.word	0x20000000
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07d      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10d      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fe26 	bl	8001a58 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	e008      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7fe fe22 	bl	8001a58 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e06d      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02e      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d027      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e62:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fdf1 	bl	8001a58 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fded 	bl	8001a58 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e036      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4917      	ldr	r1, [pc, #92]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	490b      	ldr	r1, [pc, #44]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4904      	ldr	r1, [pc, #16]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420440 	.word	0x42420440

08002f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e076      	b.n	8003014 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	e005      	b.n	8002f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe faf6 	bl	8001558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	ea42 0103 	orr.w	r1, r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	0c1a      	lsrs	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f002 0204 	and.w	r2, r2, #4
 8002ff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_SPI_Transmit+0x22>
 800303a:	2302      	movs	r3, #2
 800303c:	e126      	b.n	800328c <HAL_SPI_Transmit+0x270>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003046:	f7fe fd07 	bl	8001a58 <HAL_GetTick>
 800304a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003060:	e10b      	b.n	800327a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x52>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003072:	e102      	b.n	800327a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ba:	d10f      	bne.n	80030dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d007      	beq.n	80030fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003102:	d14b      	bne.n	800319c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Transmit+0xf6>
 800310c:	8afb      	ldrh	r3, [r7, #22]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d13e      	bne.n	8003190 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	881a      	ldrh	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	1c9a      	adds	r2, r3, #2
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003136:	e02b      	b.n	8003190 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d112      	bne.n	800316c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	; 0x36
 800316a:	e011      	b.n	8003190 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316c:	f7fe fc74 	bl	8001a58 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d803      	bhi.n	8003184 <HAL_SPI_Transmit+0x168>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d102      	bne.n	800318a <HAL_SPI_Transmit+0x16e>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800318e:	e074      	b.n	800327a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ce      	bne.n	8003138 <HAL_SPI_Transmit+0x11c>
 800319a:	e04c      	b.n	8003236 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_Transmit+0x18e>
 80031a4:	8afb      	ldrh	r3, [r7, #22]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d140      	bne.n	800322c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031d0:	e02c      	b.n	800322c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d113      	bne.n	8003208 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	86da      	strh	r2, [r3, #54]	; 0x36
 8003206:	e011      	b.n	800322c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003208:	f7fe fc26 	bl	8001a58 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d803      	bhi.n	8003220 <HAL_SPI_Transmit+0x204>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d102      	bne.n	8003226 <HAL_SPI_Transmit+0x20a>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	77fb      	strb	r3, [r7, #31]
          goto error;
 800322a:	e026      	b.n	800327a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1cd      	bne.n	80031d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f8b2 	bl	80033a4 <SPI_EndRxTxTransaction>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e000      	b.n	800327a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800328a:	7ffb      	ldrb	r3, [r7, #31]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032a4:	f7fe fbd8 	bl	8001a58 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032b4:	f7fe fbd0 	bl	8001a58 <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	0d1b      	lsrs	r3, r3, #20
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ca:	e054      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d050      	beq.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d4:	f7fe fbc0 	bl	8001a58 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d902      	bls.n	80032ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d13d      	bne.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003302:	d111      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	d004      	beq.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003316:	d107      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003330:	d10f      	bne.n	8003352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e017      	b.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	3b01      	subs	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d19b      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff6a 	bl	8003294 <SPI_WaitFlagStateUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e000      	b.n	80033d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe f8e4 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fa7a 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e03a      	b.n	800350e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIM_Base_Start_IT+0x98>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d009      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIM_Base_Start_IT+0x9c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x58>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_TIM_Base_Start_IT+0xa0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d010      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e007      	b.n	800350c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800

08003524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0202 	mvn.w	r2, #2
 8003550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9ba 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9ad 	bl	80038ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f9bc 	bl	80038f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0204 	mvn.w	r2, #4
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f990 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f983 	bl	80038ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f992 	bl	80038f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0208 	mvn.w	r2, #8
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f966 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f959 	bl	80038ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f968 	bl	80038f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b10      	cmp	r3, #16
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b10      	cmp	r3, #16
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0210 	mvn.w	r2, #16
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2208      	movs	r2, #8
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f93c 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f92f 	bl	80038ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f93e 	bl	80038f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0201 	mvn.w	r2, #1
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f90a 	bl	80038bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa81 	bl	8003bd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f902 	bl	8003904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa4c 	bl	8003bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x18>
 8003748:	2302      	movs	r3, #2
 800374a:	e0b3      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x180>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003784:	d03e      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0xd0>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	f200 8087 	bhi.w	800389c <HAL_TIM_ConfigClockSource+0x168>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	f000 8085 	beq.w	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d87f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d01a      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xa2>
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d87b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d050      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x116>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d877      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d03c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xf6>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d873      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d058      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x136>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d86f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x156>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d86b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d060      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x156>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d867      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x168>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x156>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d05a      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037d4:	e062      	b.n	800389c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f000 f970 	bl	8003aca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	609a      	str	r2, [r3, #8]
      break;
 8003802:	e04e      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f000 f959 	bl	8003aca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e03b      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	461a      	mov	r2, r3
 8003838:	f000 f8d0 	bl	80039dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2150      	movs	r1, #80	; 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f927 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003848:	e02b      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 f8ee 	bl	8003a38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2160      	movs	r1, #96	; 0x60
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f917 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003868:	e01b      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 f8b0 	bl	80039dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f907 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003888:	e00b      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 f8fe 	bl	8003a96 <TIM_ITRx_SetConfig>
        break;
 800389a:	e002      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
	...

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00b      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d007      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0xbc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0x30>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0xc0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <TIM_Base_SetConfig+0xbc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <TIM_Base_SetConfig+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <TIM_Base_SetConfig+0xb8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0201 	bic.w	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 030a 	bic.w	r3, r3, #10
 8003a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 0210 	bic.w	r2, r3, #16
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	031b      	lsls	r3, r3, #12
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f043 0307 	orr.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e046      	b.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10c      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800

08003bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e03f      	b.n	8003c7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fd04 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fba9 	bl	8004384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d11d      	bne.n	8003cd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Receive_IT+0x26>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e016      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Receive_IT+0x38>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e00f      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f9cf 	bl	8004072 <UART_Start_Receive_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	e000      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_UART_IRQHandler+0x52>
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa7f 	bl	8004232 <UART_Receive_IT>
      return;
 8003d34:	e17b      	b.n	800402e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80b1 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x1bc>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_UART_IRQHandler+0x70>
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a6 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_UART_IRQHandler+0x90>
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_UART_IRQHandler+0xb0>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f043 0202 	orr.w	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_UART_IRQHandler+0xd0>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00f      	beq.n	8003dde <HAL_UART_IRQHandler+0xfa>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_UART_IRQHandler+0xee>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f043 0208 	orr.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 811e 	beq.w	8004024 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_UART_IRQHandler+0x11e>
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa18 	bl	8004232 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <HAL_UART_IRQHandler+0x146>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d031      	beq.n	8003e8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f95a 	bl	80040e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d013      	beq.n	8003e7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	4a76      	ldr	r2, [pc, #472]	; (8004034 <HAL_UART_IRQHandler+0x350>)
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe f95c 	bl	8002120 <HAL_DMA_Abort_IT>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	e00e      	b.n	8003e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8e3 	bl	800404a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	e00a      	b.n	8003e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f8df 	bl	800404a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	e006      	b.n	8003e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8db 	bl	800404a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e9a:	e0c3      	b.n	8004024 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	bf00      	nop
    return;
 8003e9e:	e0c1      	b.n	8004024 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 80a1 	bne.w	8003fec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 809b 	beq.w	8003fec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8095 	beq.w	8003fec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04e      	beq.n	8003f84 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ef0:	8a3b      	ldrh	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8098 	beq.w	8004028 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efc:	8a3a      	ldrh	r2, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f080 8092 	bcs.w	8004028 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8a3a      	ldrh	r2, [r7, #16]
 8003f08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d02b      	beq.n	8003f6c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f22:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f42:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0210 	bic.w	r2, r2, #16
 8003f60:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe f89f 	bl	80020aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f86d 	bl	800405c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f82:	e051      	b.n	8004028 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d047      	beq.n	800402c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f9c:	8a7b      	ldrh	r3, [r7, #18]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d044      	beq.n	800402c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fb0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0210 	bic.w	r2, r2, #16
 8003fde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f839 	bl	800405c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fea:	e01f      	b.n	800402c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_UART_IRQHandler+0x324>
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8af 	bl	8004164 <UART_Transmit_IT>
    return;
 8004006:	e012      	b.n	800402e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <HAL_UART_IRQHandler+0x34a>
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8f0 	bl	8004202 <UART_EndTransmit_IT>
    return;
 8004022:	e004      	b.n	800402e <HAL_UART_IRQHandler+0x34a>
    return;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <HAL_UART_IRQHandler+0x34a>
      return;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_UART_IRQHandler+0x34a>
      return;
 800402c:	bf00      	nop
  }
}
 800402e:	3728      	adds	r7, #40	; 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	0800413d 	.word	0x0800413d

08004038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	4613      	mov	r3, r2
 800407e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	; 0x22
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	d107      	bne.n	8004124 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0210 	bic.w	r2, r2, #16
 8004122:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ff77 	bl	800404a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b21      	cmp	r3, #33	; 0x21
 8004176:	d13e      	bne.n	80041f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d114      	bne.n	80041ac <UART_Transmit_IT+0x48>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d110      	bne.n	80041ac <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800419e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]
 80041aa:	e008      	b.n	80041be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	1c59      	adds	r1, r3, #1
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6211      	str	r1, [r2, #32]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4619      	mov	r1, r3
 80041cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004218:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff08 	bl	8004038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b22      	cmp	r3, #34	; 0x22
 8004244:	f040 8099 	bne.w	800437a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004250:	d117      	bne.n	8004282 <UART_Receive_IT+0x50>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d113      	bne.n	8004282 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004270:	b29a      	uxth	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
 8004280:	e026      	b.n	80042d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d007      	beq.n	80042a6 <UART_Receive_IT+0x74>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <UART_Receive_IT+0x82>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e008      	b.n	80042c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d148      	bne.n	8004376 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0220 	bic.w	r2, r2, #32
 80042f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004302:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	2b01      	cmp	r3, #1
 8004322:	d123      	bne.n	800436c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0210 	bic.w	r2, r2, #16
 8004338:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d10a      	bne.n	800435e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fe79 	bl	800405c <HAL_UARTEx_RxEventCallback>
 800436a:	e002      	b.n	8004372 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fc fe51 	bl	8001014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e002      	b.n	800437c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043be:	f023 030c 	bic.w	r3, r3, #12
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <UART_SetConfig+0x114>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe fcaa 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	e002      	b.n	80043fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fe fc92 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80043f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <UART_SetConfig+0x118>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	0119      	lsls	r1, r3, #4
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <UART_SetConfig+0x118>)
 8004432:	fba3 0302 	umull	r0, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2064      	movs	r0, #100	; 0x64
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a15      	ldr	r2, [pc, #84]	; (800449c <UART_SetConfig+0x118>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004450:	4419      	add	r1, r3
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009a      	lsls	r2, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	fbb2 f2f3 	udiv	r2, r2, r3
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <UART_SetConfig+0x118>)
 800446a:	fba3 0302 	umull	r0, r3, r3, r2
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2064      	movs	r0, #100	; 0x64
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	3332      	adds	r3, #50	; 0x32
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <UART_SetConfig+0x118>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	440a      	add	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40013800 	.word	0x40013800
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e007      	b.n	80044bc <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b07      	cmp	r3, #7
 80044c0:	ddf4      	ble.n	80044ac <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <AroundEdgeCube_Handle+0xcc>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <AroundEdgeCube_Handle+0xd0>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <AroundEdgeCube_Handle+0x36>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d022      	beq.n	800451a <AroundEdgeCube_Handle+0x7a>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 80044d4:	e043      	b.n	800455e <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x81;
 80044d6:	4b25      	ldr	r3, [pc, #148]	; (800456c <AroundEdgeCube_Handle+0xcc>)
 80044d8:	2281      	movs	r2, #129	; 0x81
 80044da:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	71da      	strb	r2, [r3, #7]
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 80044e4:	79da      	ldrb	r2, [r3, #7]
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 80044e8:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80044ea:	2301      	movs	r3, #1
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	e007      	b.n	8004500 <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4413      	add	r3, r2
 80044f6:	2281      	movs	r2, #129	; 0x81
 80044f8:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b06      	cmp	r3, #6
 8004504:	ddf4      	ble.n	80044f0 <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <AroundEdgeCube_Handle+0xcc>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4816      	ldr	r0, [pc, #88]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 800450e:	f002 fc0b 	bl	8006d28 <TransmitData>
			position_layer = MIDDLE_CUBE;
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <AroundEdgeCube_Handle+0xd0>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
			break;
 8004518:	e021      	b.n	800455e <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x7e;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <AroundEdgeCube_Handle+0xcc>)
 800451c:	227e      	movs	r2, #126	; 0x7e
 800451e:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 8004522:	2281      	movs	r2, #129	; 0x81
 8004524:	71da      	strb	r2, [r3, #7]
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 8004528:	79da      	ldrb	r2, [r3, #7]
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 800452c:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800452e:	2301      	movs	r3, #1
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e007      	b.n	8004544 <AroundEdgeCube_Handle+0xa4>
				column_around_edge[i] = 0;
 8004534:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3301      	adds	r3, #1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b06      	cmp	r3, #6
 8004548:	ddf4      	ble.n	8004534 <AroundEdgeCube_Handle+0x94>
			TransmitData(column_around_edge, layer_around_edge);
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <AroundEdgeCube_Handle+0xcc>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4805      	ldr	r0, [pc, #20]	; (8004568 <AroundEdgeCube_Handle+0xc8>)
 8004552:	f002 fbe9 	bl	8006d28 <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <AroundEdgeCube_Handle+0xd0>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
			break;
 800455c:	bf00      	nop
	}
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000214 	.word	0x20000214
 800456c:	20000210 	.word	0x20000210
 8004570:	2000021c 	.word	0x2000021c

08004574 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <AroundEdgeCube_Set_State+0x3c>)
 800457c:	2205      	movs	r2, #5
 800457e:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <AroundEdgeCube_Set_State+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	e007      	b.n	800459c <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <AroundEdgeCube_Set_State+0x44>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3301      	adds	r3, #1
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b07      	cmp	r3, #7
 80045a0:	ddf4      	ble.n	800458c <AroundEdgeCube_Set_State+0x18>
	}
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000010 	.word	0x20000010
 80045b4:	20000210 	.word	0x20000210
 80045b8:	20000214 	.word	0x20000214

080045bc <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]

}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	807b      	strh	r3, [r7, #2]

}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	807b      	strh	r3, [r7, #2]

}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8a9b      	ldrh	r3, [r3, #20]
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7fd ff7f 	bl	8002514 <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
	if (status != BtnX->Btn_filter)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	7bfa      	ldrb	r2, [r7, #15]
 8004620:	429a      	cmp	r2, r3
 8004622:	d00a      	beq.n	800463a <Btn_Handle+0x3c>
	{
		BtnX->Btn_filter = status;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 8004630:	f7fd fa12 	bl	8001a58 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	78db      	ldrb	r3, [r3, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <Btn_Handle+0x62>
 8004642:	f7fd fa09 	bl	8001a58 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b0e      	cmp	r3, #14
 8004650:	d906      	bls.n	8004660 <Btn_Handle+0x62>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	789a      	ldrb	r2, [r3, #2]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	429a      	cmp	r2, r3
 800466a:	d034      	beq.n	80046d6 <Btn_Handle+0xd8>
	{
		if (BtnX->Btn_current == 0)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d110      	bne.n	8004696 <Btn_Handle+0x98>
		{
			BtnX->Is_press_timeout = 1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8a9b      	ldrh	r3, [r3, #20]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f001 f8c1 	bl	800580c <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 800468a:	f7fd f9e5 	bl	8001a58 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	e01b      	b.n	80046ce <Btn_Handle+0xd0>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 8004696:	f7fd f9df 	bl	8001a58 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a6:	d807      	bhi.n	80046b8 <Btn_Handle+0xba>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8a9b      	ldrh	r3, [r3, #20]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7ff ff82 	bl	80045bc <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8a9b      	ldrh	r3, [r3, #20]
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7ff ff85 	bl	80045d2 <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d013      	beq.n	8004706 <Btn_Handle+0x108>
 80046de:	f7fd f9bb 	bl	8001a58 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046ee:	d30a      	bcc.n	8004706 <Btn_Handle+0x108>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8a9b      	ldrh	r3, [r3, #20]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7ff ff74 	bl	80045e8 <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	711a      	strb	r2, [r3, #4]
	}
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
	BtnX->GPIOx = GPIOx;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	829a      	strh	r2, [r3, #20]

}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 8004738:	2300      	movs	r3, #0
 800473a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i ++)
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e007      	b.n	8004752 <clearCube+0x20>
	{
		column[i] = 0x00;
 8004742:	463a      	mov	r2, r7
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b07      	cmp	r3, #7
 8004756:	ddf4      	ble.n	8004742 <clearCube+0x10>
	}
	TransmitData(column, layer);
 8004758:	7afa      	ldrb	r2, [r7, #11]
 800475a:	463b      	mov	r3, r7
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fae2 	bl	8006d28 <TransmitData>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	switch (w_number)
 8004770:	4b8b      	ldr	r3, [pc, #556]	; (80049a0 <CountDownCube_Handle+0x234>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b09      	cmp	r3, #9
 8004776:	f200 829d 	bhi.w	8004cb4 <CountDownCube_Handle+0x548>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <CountDownCube_Handle+0x14>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004c37 	.word	0x08004c37
 8004784:	08004bb9 	.word	0x08004bb9
 8004788:	08004b2b 	.word	0x08004b2b
 800478c:	08004aad 	.word	0x08004aad
 8004790:	08004a2f 	.word	0x08004a2f
 8004794:	080049b1 	.word	0x080049b1
 8004798:	08004923 	.word	0x08004923
 800479c:	080048a5 	.word	0x080048a5
 80047a0:	08004827 	.word	0x08004827
 80047a4:	080047a9 	.word	0x080047a9
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80047a8:	f7fd f956 	bl	8001a58 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b7d      	ldr	r3, [pc, #500]	; (80049a4 <CountDownCube_Handle+0x238>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2246      	movs	r2, #70	; 0x46
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d32f      	bcc.n	800481a <CountDownCube_Handle+0xae>
			{
				if (direction == 1 && (i < 8))  i++;
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d108      	bne.n	80047d4 <CountDownCube_Handle+0x68>
 80047c2:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <CountDownCube_Handle+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	dc04      	bgt.n	80047d4 <CountDownCube_Handle+0x68>
 80047ca:	4b78      	ldr	r3, [pc, #480]	; (80049ac <CountDownCube_Handle+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a76      	ldr	r2, [pc, #472]	; (80049ac <CountDownCube_Handle+0x240>)
 80047d2:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80047d4:	4b75      	ldr	r3, [pc, #468]	; (80049ac <CountDownCube_Handle+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b07      	cmp	r3, #7
 80047da:	dd02      	ble.n	80047e2 <CountDownCube_Handle+0x76>
 80047dc:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80047e2:	4b71      	ldr	r3, [pc, #452]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <CountDownCube_Handle+0x90>
 80047ea:	4b70      	ldr	r3, [pc, #448]	; (80049ac <CountDownCube_Handle+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dd04      	ble.n	80047fc <CountDownCube_Handle+0x90>
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <CountDownCube_Handle+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4a6c      	ldr	r2, [pc, #432]	; (80049ac <CountDownCube_Handle+0x240>)
 80047fa:	6013      	str	r3, [r2, #0]
				if (i == 0)
 80047fc:	4b6b      	ldr	r3, [pc, #428]	; (80049ac <CountDownCube_Handle+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <CountDownCube_Handle+0xa4>
				{
					direction = 1;
 8004804:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 800480a:	4b65      	ldr	r3, [pc, #404]	; (80049a0 <CountDownCube_Handle+0x234>)
 800480c:	2208      	movs	r2, #8
 800480e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004810:	f7fd f922 	bl	8001a58 <HAL_GetTick>
 8004814:	4603      	mov	r3, r0
 8004816:	4a63      	ldr	r2, [pc, #396]	; (80049a4 <CountDownCube_Handle+0x238>)
 8004818:	6013      	str	r3, [r2, #0]
			}

			DigitNine(i);
 800481a:	4b64      	ldr	r3, [pc, #400]	; (80049ac <CountDownCube_Handle+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa7c 	bl	8004d1c <DigitNine>
		break;
 8004824:	e247      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004826:	f7fd f917 	bl	8001a58 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <CountDownCube_Handle+0x238>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2246      	movs	r2, #70	; 0x46
 8004834:	4293      	cmp	r3, r2
 8004836:	d32f      	bcc.n	8004898 <CountDownCube_Handle+0x12c>
			{

				if (direction == 1 && (i < 8))  i++;
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <CountDownCube_Handle+0x23c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d108      	bne.n	8004852 <CountDownCube_Handle+0xe6>
 8004840:	4b5a      	ldr	r3, [pc, #360]	; (80049ac <CountDownCube_Handle+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b07      	cmp	r3, #7
 8004846:	dc04      	bgt.n	8004852 <CountDownCube_Handle+0xe6>
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <CountDownCube_Handle+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a57      	ldr	r2, [pc, #348]	; (80049ac <CountDownCube_Handle+0x240>)
 8004850:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <CountDownCube_Handle+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b07      	cmp	r3, #7
 8004858:	dd02      	ble.n	8004860 <CountDownCube_Handle+0xf4>
 800485a:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <CountDownCube_Handle+0x23c>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004860:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d108      	bne.n	800487a <CountDownCube_Handle+0x10e>
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <CountDownCube_Handle+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dd04      	ble.n	800487a <CountDownCube_Handle+0x10e>
 8004870:	4b4e      	ldr	r3, [pc, #312]	; (80049ac <CountDownCube_Handle+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <CountDownCube_Handle+0x240>)
 8004878:	6013      	str	r3, [r2, #0]
				if (i == 0)
 800487a:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <CountDownCube_Handle+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <CountDownCube_Handle+0x122>
				{
					direction = 1;
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8004888:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <CountDownCube_Handle+0x234>)
 800488a:	2207      	movs	r2, #7
 800488c:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800488e:	f7fd f8e3 	bl	8001a58 <HAL_GetTick>
 8004892:	4603      	mov	r3, r0
 8004894:	4a43      	ldr	r2, [pc, #268]	; (80049a4 <CountDownCube_Handle+0x238>)
 8004896:	6013      	str	r3, [r2, #0]
			}

			DigitEight(i);
 8004898:	4b44      	ldr	r3, [pc, #272]	; (80049ac <CountDownCube_Handle+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa79 	bl	8004d94 <DigitEight>
		break;
 80048a2:	e208      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80048a4:	f7fd f8d8 	bl	8001a58 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <CountDownCube_Handle+0x238>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2246      	movs	r2, #70	; 0x46
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d32f      	bcc.n	8004916 <CountDownCube_Handle+0x1aa>
			{

				if (direction == 1 && (i < 8))  i++;
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <CountDownCube_Handle+0x164>
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <CountDownCube_Handle+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	dc04      	bgt.n	80048d0 <CountDownCube_Handle+0x164>
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <CountDownCube_Handle+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	4a37      	ldr	r2, [pc, #220]	; (80049ac <CountDownCube_Handle+0x240>)
 80048ce:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <CountDownCube_Handle+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	dd02      	ble.n	80048de <CountDownCube_Handle+0x172>
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80048de:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <CountDownCube_Handle+0x23c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <CountDownCube_Handle+0x18c>
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <CountDownCube_Handle+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd04      	ble.n	80048f8 <CountDownCube_Handle+0x18c>
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <CountDownCube_Handle+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <CountDownCube_Handle+0x240>)
 80048f6:	6013      	str	r3, [r2, #0]
				if (i == 0)
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <CountDownCube_Handle+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <CountDownCube_Handle+0x1a0>
				{
					direction = 1;
 8004900:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <CountDownCube_Handle+0x234>)
 8004908:	2206      	movs	r2, #6
 800490a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800490c:	f7fd f8a4 	bl	8001a58 <HAL_GetTick>
 8004910:	4603      	mov	r3, r0
 8004912:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <CountDownCube_Handle+0x238>)
 8004914:	6013      	str	r3, [r2, #0]
			}

			DigitSeven(i);
 8004916:	4b25      	ldr	r3, [pc, #148]	; (80049ac <CountDownCube_Handle+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fa5c 	bl	8004dd8 <DigitSeven>

			break;
 8004920:	e1c9      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004922:	f7fd f899 	bl	8001a58 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <CountDownCube_Handle+0x238>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2246      	movs	r2, #70	; 0x46
 8004930:	4293      	cmp	r3, r2
 8004932:	d32f      	bcc.n	8004994 <CountDownCube_Handle+0x228>
			{

				if (direction == 1 && (i < 8))  i++;
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d108      	bne.n	800494e <CountDownCube_Handle+0x1e2>
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <CountDownCube_Handle+0x240>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b07      	cmp	r3, #7
 8004942:	dc04      	bgt.n	800494e <CountDownCube_Handle+0x1e2>
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <CountDownCube_Handle+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a18      	ldr	r2, [pc, #96]	; (80049ac <CountDownCube_Handle+0x240>)
 800494c:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800494e:	4b17      	ldr	r3, [pc, #92]	; (80049ac <CountDownCube_Handle+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b07      	cmp	r3, #7
 8004954:	dd02      	ble.n	800495c <CountDownCube_Handle+0x1f0>
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <CountDownCube_Handle+0x23c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <CountDownCube_Handle+0x20a>
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <CountDownCube_Handle+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	dd04      	ble.n	8004976 <CountDownCube_Handle+0x20a>
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <CountDownCube_Handle+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3b01      	subs	r3, #1
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <CountDownCube_Handle+0x240>)
 8004974:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <CountDownCube_Handle+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <CountDownCube_Handle+0x21e>
				{
					direction = 1;
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <CountDownCube_Handle+0x23c>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <CountDownCube_Handle+0x234>)
 8004986:	2205      	movs	r2, #5
 8004988:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800498a:	f7fd f865 	bl	8001a58 <HAL_GetTick>
 800498e:	4603      	mov	r3, r0
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <CountDownCube_Handle+0x238>)
 8004992:	6013      	str	r3, [r2, #0]
			}

			DigitSix(i);
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <CountDownCube_Handle+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fa51 	bl	8004e40 <DigitSix>

			break;
 800499e:	e18a      	b.n	8004cb6 <CountDownCube_Handle+0x54a>
 80049a0:	20000009 	.word	0x20000009
 80049a4:	20000228 	.word	0x20000228
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	2000022c 	.word	0x2000022c

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80049b0:	f7fd f852 	bl	8001a58 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b7c      	ldr	r3, [pc, #496]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2246      	movs	r2, #70	; 0x46
 80049be:	4293      	cmp	r3, r2
 80049c0:	d32f      	bcc.n	8004a22 <CountDownCube_Handle+0x2b6>
			{

				if (direction == 1 && (i < 8))  i++;
 80049c2:	4b7a      	ldr	r3, [pc, #488]	; (8004bac <CountDownCube_Handle+0x440>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <CountDownCube_Handle+0x270>
 80049ca:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b07      	cmp	r3, #7
 80049d0:	dc04      	bgt.n	80049dc <CountDownCube_Handle+0x270>
 80049d2:	4b77      	ldr	r3, [pc, #476]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049da:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80049dc:	4b74      	ldr	r3, [pc, #464]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b07      	cmp	r3, #7
 80049e2:	dd02      	ble.n	80049ea <CountDownCube_Handle+0x27e>
 80049e4:	4b71      	ldr	r3, [pc, #452]	; (8004bac <CountDownCube_Handle+0x440>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80049ea:	4b70      	ldr	r3, [pc, #448]	; (8004bac <CountDownCube_Handle+0x440>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <CountDownCube_Handle+0x298>
 80049f2:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dd04      	ble.n	8004a04 <CountDownCube_Handle+0x298>
 80049fa:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <CountDownCube_Handle+0x444>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4a6b      	ldr	r2, [pc, #428]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a02:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004a04:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <CountDownCube_Handle+0x2ac>
				{
					direction = 1;
 8004a0c:	4b67      	ldr	r3, [pc, #412]	; (8004bac <CountDownCube_Handle+0x440>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8004a12:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <CountDownCube_Handle+0x448>)
 8004a14:	2204      	movs	r2, #4
 8004a16:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004a18:	f7fd f81e 	bl	8001a58 <HAL_GetTick>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4a62      	ldr	r2, [pc, #392]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004a20:	6013      	str	r3, [r2, #0]
			}

			DigitFive(i);
 8004a22:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa50 	bl	8004ecc <DigitFive>
			break;
 8004a2c:	e143      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004a2e:	f7fd f813 	bl	8001a58 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2246      	movs	r2, #70	; 0x46
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d32f      	bcc.n	8004aa0 <CountDownCube_Handle+0x334>
			{

				if (direction == 1 && (i < 8))  i++;
 8004a40:	4b5a      	ldr	r3, [pc, #360]	; (8004bac <CountDownCube_Handle+0x440>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d108      	bne.n	8004a5a <CountDownCube_Handle+0x2ee>
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b07      	cmp	r3, #7
 8004a4e:	dc04      	bgt.n	8004a5a <CountDownCube_Handle+0x2ee>
 8004a50:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	4a56      	ldr	r2, [pc, #344]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a58:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004a5a:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b07      	cmp	r3, #7
 8004a60:	dd02      	ble.n	8004a68 <CountDownCube_Handle+0x2fc>
 8004a62:	4b52      	ldr	r3, [pc, #328]	; (8004bac <CountDownCube_Handle+0x440>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004a68:	4b50      	ldr	r3, [pc, #320]	; (8004bac <CountDownCube_Handle+0x440>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <CountDownCube_Handle+0x316>
 8004a70:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dd04      	ble.n	8004a82 <CountDownCube_Handle+0x316>
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a4c      	ldr	r2, [pc, #304]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a80:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004a82:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <CountDownCube_Handle+0x32a>
				{
					direction = 1;
 8004a8a:	4b48      	ldr	r3, [pc, #288]	; (8004bac <CountDownCube_Handle+0x440>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8004a90:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <CountDownCube_Handle+0x448>)
 8004a92:	2203      	movs	r2, #3
 8004a94:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004a96:	f7fc ffdf 	bl	8001a58 <HAL_GetTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4a42      	ldr	r2, [pc, #264]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004a9e:	6013      	str	r3, [r2, #0]
			}

			DigitFour(i);
 8004aa0:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fa57 	bl	8004f58 <DigitFour>
			break;
 8004aaa:	e104      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004aac:	f7fc ffd4 	bl	8001a58 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2246      	movs	r2, #70	; 0x46
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d32f      	bcc.n	8004b1e <CountDownCube_Handle+0x3b2>
			{

				if (direction == 1 && (i < 8))  i++;
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <CountDownCube_Handle+0x440>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d108      	bne.n	8004ad8 <CountDownCube_Handle+0x36c>
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b07      	cmp	r3, #7
 8004acc:	dc04      	bgt.n	8004ad8 <CountDownCube_Handle+0x36c>
 8004ace:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004ad6:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004ad8:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	dd02      	ble.n	8004ae6 <CountDownCube_Handle+0x37a>
 8004ae0:	4b32      	ldr	r3, [pc, #200]	; (8004bac <CountDownCube_Handle+0x440>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <CountDownCube_Handle+0x440>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <CountDownCube_Handle+0x394>
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	dd04      	ble.n	8004b00 <CountDownCube_Handle+0x394>
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004afe:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <CountDownCube_Handle+0x3a8>
				{
					direction = 1;
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <CountDownCube_Handle+0x440>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <CountDownCube_Handle+0x448>)
 8004b10:	2202      	movs	r2, #2
 8004b12:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004b14:	f7fc ffa0 	bl	8001a58 <HAL_GetTick>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004b1c:	6013      	str	r3, [r2, #0]
			}

			DigitThree(i);
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa5c 	bl	8004fe0 <DigitThree>
			break;
 8004b28:	e0c5      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004b2a:	f7fc ff95 	bl	8001a58 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2246      	movs	r2, #70	; 0x46
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d32f      	bcc.n	8004b9c <CountDownCube_Handle+0x430>
			{

				if (direction == 1 && (i < 8))  i++;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <CountDownCube_Handle+0x440>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d108      	bne.n	8004b56 <CountDownCube_Handle+0x3ea>
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b07      	cmp	r3, #7
 8004b4a:	dc04      	bgt.n	8004b56 <CountDownCube_Handle+0x3ea>
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b54:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	dd02      	ble.n	8004b64 <CountDownCube_Handle+0x3f8>
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <CountDownCube_Handle+0x440>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <CountDownCube_Handle+0x440>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d108      	bne.n	8004b7e <CountDownCube_Handle+0x412>
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dd04      	ble.n	8004b7e <CountDownCube_Handle+0x412>
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	4a0d      	ldr	r2, [pc, #52]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b7c:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <CountDownCube_Handle+0x426>
				{
					direction = 1;
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <CountDownCube_Handle+0x440>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <CountDownCube_Handle+0x448>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004b92:	f7fc ff61 	bl	8001a58 <HAL_GetTick>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <CountDownCube_Handle+0x43c>)
 8004b9a:	6013      	str	r3, [r2, #0]
			}

			DigitTwo(i);
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <CountDownCube_Handle+0x444>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fa51 	bl	8005048 <DigitTwo>
			break;
 8004ba6:	e086      	b.n	8004cb6 <CountDownCube_Handle+0x54a>
 8004ba8:	20000228 	.word	0x20000228
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	2000022c 	.word	0x2000022c
 8004bb4:	20000009 	.word	0x20000009

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004bb8:	f7fc ff4e 	bl	8001a58 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <CountDownCube_Handle+0x550>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2246      	movs	r2, #70	; 0x46
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d32f      	bcc.n	8004c2a <CountDownCube_Handle+0x4be>
			{

				if (direction == 1 && (i < 8))  i++;
 8004bca:	4b3d      	ldr	r3, [pc, #244]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d108      	bne.n	8004be4 <CountDownCube_Handle+0x478>
 8004bd2:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	dc04      	bgt.n	8004be4 <CountDownCube_Handle+0x478>
 8004bda:	4b3a      	ldr	r3, [pc, #232]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	4a38      	ldr	r2, [pc, #224]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004be2:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004be4:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b07      	cmp	r3, #7
 8004bea:	dd02      	ble.n	8004bf2 <CountDownCube_Handle+0x486>
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004bf2:	4b33      	ldr	r3, [pc, #204]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d108      	bne.n	8004c0c <CountDownCube_Handle+0x4a0>
 8004bfa:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd04      	ble.n	8004c0c <CountDownCube_Handle+0x4a0>
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c0a:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004c0c:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <CountDownCube_Handle+0x4b4>
				{
					direction = 1;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <CountDownCube_Handle+0x55c>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004c20:	f7fc ff1a 	bl	8001a58 <HAL_GetTick>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <CountDownCube_Handle+0x550>)
 8004c28:	6013      	str	r3, [r2, #0]
			}

			DigitOne(i);
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa58 	bl	80050e4 <DigitOne>
			break;
 8004c34:	e03f      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004c36:	f7fc ff0f 	bl	8001a58 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <CountDownCube_Handle+0x550>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2246      	movs	r2, #70	; 0x46
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d32f      	bcc.n	8004ca8 <CountDownCube_Handle+0x53c>
			{

				if (direction == 1 && (i < 8))  i++;
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d108      	bne.n	8004c62 <CountDownCube_Handle+0x4f6>
 8004c50:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b07      	cmp	r3, #7
 8004c56:	dc04      	bgt.n	8004c62 <CountDownCube_Handle+0x4f6>
 8004c58:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c60:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b07      	cmp	r3, #7
 8004c68:	dd02      	ble.n	8004c70 <CountDownCube_Handle+0x504>
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d108      	bne.n	8004c8a <CountDownCube_Handle+0x51e>
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd04      	ble.n	8004c8a <CountDownCube_Handle+0x51e>
 8004c80:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	4a0f      	ldr	r2, [pc, #60]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c88:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <CountDownCube_Handle+0x532>
				{
					direction = 1;
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <CountDownCube_Handle+0x554>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <CountDownCube_Handle+0x55c>)
 8004c9a:	2209      	movs	r2, #9
 8004c9c:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004c9e:	f7fc fedb 	bl	8001a58 <HAL_GetTick>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <CountDownCube_Handle+0x550>)
 8004ca6:	6013      	str	r3, [r2, #0]
			}

			DigitZero(i);
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <CountDownCube_Handle+0x558>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fa5f 	bl	8005170 <DigitZero>
			break;
 8004cb2:	e000      	b.n	8004cb6 <CountDownCube_Handle+0x54a>

		default:
			break;
 8004cb4:	bf00      	nop
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000228 	.word	0x20000228
 8004cc0:	2000000c 	.word	0x2000000c
 8004cc4:	2000022c 	.word	0x2000022c
 8004cc8:	20000009 	.word	0x20000009

08004ccc <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <CountDownCube_Set_Sate+0x40>)
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <CountDownCube_Set_Sate+0x44>)
 8004cda:	2209      	movs	r2, #9
 8004cdc:	701a      	strb	r2, [r3, #0]
	direction = 1;
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <CountDownCube_Set_Sate+0x48>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	e007      	b.n	8004cfa <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 8004cea:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <CountDownCube_Set_Sate+0x4c>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	ddf4      	ble.n	8004cea <CountDownCube_Set_Sate+0x1e>
	}
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	20000009 	.word	0x20000009
 8004d14:	2000000c 	.word	0x2000000c
 8004d18:	20000220 	.word	0x20000220

08004d1c <DigitNine>:

void DigitNine(int i)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <DigitNine+0x74>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	227e      	movs	r2, #126	; 0x7e
 8004d2c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004d2e:	2181      	movs	r1, #129	; 0x81
 8004d30:	4817      	ldr	r0, [pc, #92]	; (8004d90 <DigitNine+0x74>)
 8004d32:	f001 fff9 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc3;
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <DigitNine+0x74>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	22c3      	movs	r2, #195	; 0xc3
 8004d3e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 8004d40:	2160      	movs	r1, #96	; 0x60
 8004d42:	4813      	ldr	r0, [pc, #76]	; (8004d90 <DigitNine+0x74>)
 8004d44:	f001 fff0 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x03;
 8004d48:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <DigitNine+0x74>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	2203      	movs	r2, #3
 8004d50:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004d52:	210c      	movs	r1, #12
 8004d54:	480e      	ldr	r0, [pc, #56]	; (8004d90 <DigitNine+0x74>)
 8004d56:	f001 ffe7 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xff;
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <DigitNine+0x74>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4413      	add	r3, r2
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8004d64:	2102      	movs	r1, #2
 8004d66:	480a      	ldr	r0, [pc, #40]	; (8004d90 <DigitNine+0x74>)
 8004d68:	f001 ffde 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x7f;
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <DigitNine+0x74>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	227f      	movs	r2, #127	; 0x7f
 8004d74:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004d76:	2110      	movs	r1, #16
 8004d78:	4805      	ldr	r0, [pc, #20]	; (8004d90 <DigitNine+0x74>)
 8004d7a:	f001 ffd5 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8004d7e:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <DigitNine+0x74>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000220 	.word	0x20000220

08004d94 <DigitEight>:

void DigitEight(int i)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8004d9c:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <DigitEight+0x40>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	22c3      	movs	r2, #195	; 0xc3
 8004da4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 8004da6:	2166      	movs	r1, #102	; 0x66
 8004da8:	480a      	ldr	r0, [pc, #40]	; (8004dd4 <DigitEight+0x40>)
 8004daa:	f001 ffbd 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x7e;
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <DigitEight+0x40>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	227e      	movs	r2, #126	; 0x7e
 8004db6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 8004db8:	2199      	movs	r1, #153	; 0x99
 8004dba:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <DigitEight+0x40>)
 8004dbc:	f001 ffb4 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8004dc0:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <DigitEight+0x40>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000220 	.word	0x20000220

08004dd8 <DigitSeven>:

void DigitSeven(int i)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <DigitSeven+0x64>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 8004dea:	21c0      	movs	r1, #192	; 0xc0
 8004dec:	4813      	ldr	r0, [pc, #76]	; (8004e3c <DigitSeven+0x64>)
 8004dee:	f001 ff9b 	bl	8006d28 <TransmitData>

	for (int j = 0; j < 6; j++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e015      	b.n	8004e24 <DigitSeven+0x4c>
	{
		column_countdown[i] = 0x03 << j;
 8004df8:	2203      	movs	r2, #3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	b2d9      	uxtb	r1, r3
 8004e02:	4a0e      	ldr	r2, [pc, #56]	; (8004e3c <DigitSeven+0x64>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	460a      	mov	r2, r1
 8004e0a:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	fa42 f303 	asr.w	r3, r2, r3
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	4808      	ldr	r0, [pc, #32]	; (8004e3c <DigitSeven+0x64>)
 8004e1a:	f001 ff85 	bl	8006d28 <TransmitData>
	for (int j = 0; j < 6; j++)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	dde6      	ble.n	8004df8 <DigitSeven+0x20>
	}

	column_countdown[i] = 0;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <DigitSeven+0x64>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000220 	.word	0x20000220

08004e40 <DigitSix>:

void DigitSix(int i)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <DigitSix+0x88>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	22ff      	movs	r2, #255	; 0xff
 8004e50:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004e52:	2142      	movs	r1, #66	; 0x42
 8004e54:	481c      	ldr	r0, [pc, #112]	; (8004ec8 <DigitSix+0x88>)
 8004e56:	f001 ff67 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc3;
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <DigitSix+0x88>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	22c3      	movs	r2, #195	; 0xc3
 8004e62:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004e64:	210c      	movs	r1, #12
 8004e66:	4818      	ldr	r0, [pc, #96]	; (8004ec8 <DigitSix+0x88>)
 8004e68:	f001 ff5e 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x7f;
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <DigitSix+0x88>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	227f      	movs	r2, #127	; 0x7f
 8004e74:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	4813      	ldr	r0, [pc, #76]	; (8004ec8 <DigitSix+0x88>)
 8004e7a:	f001 ff55 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc0;
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <DigitSix+0x88>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	22c0      	movs	r2, #192	; 0xc0
 8004e86:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8004e88:	2120      	movs	r1, #32
 8004e8a:	480f      	ldr	r0, [pc, #60]	; (8004ec8 <DigitSix+0x88>)
 8004e8c:	f001 ff4c 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xfe;
 8004e90:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <DigitSix+0x88>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	22fe      	movs	r2, #254	; 0xfe
 8004e98:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	480a      	ldr	r0, [pc, #40]	; (8004ec8 <DigitSix+0x88>)
 8004e9e:	f001 ff43 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x7e;
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <DigitSix+0x88>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	227e      	movs	r2, #126	; 0x7e
 8004eaa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8004eac:	2101      	movs	r1, #1
 8004eae:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <DigitSix+0x88>)
 8004eb0:	f001 ff3a 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8004eb4:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <DigitSix+0x88>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000220 	.word	0x20000220

08004ecc <DigitFive>:

void DigitFive(int i)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <DigitFive+0x88>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 8004ede:	21c0      	movs	r1, #192	; 0xc0
 8004ee0:	481c      	ldr	r0, [pc, #112]	; (8004f54 <DigitFive+0x88>)
 8004ee2:	f001 ff21 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc0;
 8004ee6:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <DigitFive+0x88>)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	22c0      	movs	r2, #192	; 0xc0
 8004eee:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 8004ef0:	2120      	movs	r1, #32
 8004ef2:	4818      	ldr	r0, [pc, #96]	; (8004f54 <DigitFive+0x88>)
 8004ef4:	f001 ff18 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xfe;
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <DigitFive+0x88>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	22fe      	movs	r2, #254	; 0xfe
 8004f00:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 8004f02:	2110      	movs	r1, #16
 8004f04:	4813      	ldr	r0, [pc, #76]	; (8004f54 <DigitFive+0x88>)
 8004f06:	f001 ff0f 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x03;
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <DigitFive+0x88>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	2203      	movs	r2, #3
 8004f12:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 8004f14:	210c      	movs	r1, #12
 8004f16:	480f      	ldr	r0, [pc, #60]	; (8004f54 <DigitFive+0x88>)
 8004f18:	f001 ff06 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x83;
 8004f1c:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <DigitFive+0x88>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	2283      	movs	r2, #131	; 0x83
 8004f24:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 8004f26:	2102      	movs	r1, #2
 8004f28:	480a      	ldr	r0, [pc, #40]	; (8004f54 <DigitFive+0x88>)
 8004f2a:	f001 fefd 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x7e;
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <DigitFive+0x88>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	227e      	movs	r2, #126	; 0x7e
 8004f36:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4806      	ldr	r0, [pc, #24]	; (8004f54 <DigitFive+0x88>)
 8004f3c:	f001 fef4 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8004f40:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <DigitFive+0x88>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000220 	.word	0x20000220

08004f58 <DigitFour>:

void DigitFour(int i)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <DigitFour+0x80>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	2206      	movs	r2, #6
 8004f68:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 8004f6a:	21f3      	movs	r1, #243	; 0xf3
 8004f6c:	481a      	ldr	r0, [pc, #104]	; (8004fd8 <DigitFour+0x80>)
 8004f6e:	f001 fedb 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xff;
 8004f72:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <DigitFour+0x80>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004f7c:	210c      	movs	r1, #12
 8004f7e:	4816      	ldr	r0, [pc, #88]	; (8004fd8 <DigitFour+0x80>)
 8004f80:	f001 fed2 	bl	8006d28 <TransmitData>

	for (int j = 0; j < 4; j++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e019      	b.n	8004fbe <DigitFour+0x66>
	{
	column_countdown[i] = 0x08 << j;
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	b2d9      	uxtb	r1, r3
 8004f94:	4a10      	ldr	r2, [pc, #64]	; (8004fd8 <DigitFour+0x80>)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	fa42 f303 	asr.w	r3, r2, r3
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <DigitFour+0x84>)
 8004faa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <DigitFour+0x84>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <DigitFour+0x80>)
 8004fb4:	f001 feb8 	bl	8006d28 <TransmitData>
	for (int j = 0; j < 4; j++)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	dde2      	ble.n	8004f8a <DigitFour+0x32>
	}

	column_countdown[i] = 0;
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <DigitFour+0x80>)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000220 	.word	0x20000220
 8004fdc:	2000021d 	.word	0x2000021d

08004fe0 <DigitThree>:

void DigitThree(int i)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004fe8:	4a16      	ldr	r2, [pc, #88]	; (8005044 <DigitThree+0x64>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	227e      	movs	r2, #126	; 0x7e
 8004ff0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004ff2:	2181      	movs	r1, #129	; 0x81
 8004ff4:	4813      	ldr	r0, [pc, #76]	; (8005044 <DigitThree+0x64>)
 8004ff6:	f001 fe97 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xe7;
 8004ffa:	4a12      	ldr	r2, [pc, #72]	; (8005044 <DigitThree+0x64>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	22e7      	movs	r2, #231	; 0xe7
 8005002:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8005004:	2142      	movs	r1, #66	; 0x42
 8005006:	480f      	ldr	r0, [pc, #60]	; (8005044 <DigitThree+0x64>)
 8005008:	f001 fe8e 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc3;
 800500c:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <DigitThree+0x64>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	22c3      	movs	r2, #195	; 0xc3
 8005014:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 8005016:	2124      	movs	r1, #36	; 0x24
 8005018:	480a      	ldr	r0, [pc, #40]	; (8005044 <DigitThree+0x64>)
 800501a:	f001 fe85 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x06;
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <DigitThree+0x64>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	2206      	movs	r2, #6
 8005026:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 8005028:	2118      	movs	r1, #24
 800502a:	4806      	ldr	r0, [pc, #24]	; (8005044 <DigitThree+0x64>)
 800502c:	f001 fe7c 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <DigitThree+0x64>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000220 	.word	0x20000220

08005048 <DigitTwo>:

void DigitTwo(int i)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <DigitTwo+0x98>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	227e      	movs	r2, #126	; 0x7e
 8005058:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	4820      	ldr	r0, [pc, #128]	; (80050e0 <DigitTwo+0x98>)
 800505e:	f001 fe63 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc3;
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <DigitTwo+0x98>)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	22c3      	movs	r2, #195	; 0xc3
 800506a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	481c      	ldr	r0, [pc, #112]	; (80050e0 <DigitTwo+0x98>)
 8005070:	f001 fe5a 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x83;
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <DigitTwo+0x98>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	2283      	movs	r2, #131	; 0x83
 800507c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 800507e:	2120      	movs	r1, #32
 8005080:	4817      	ldr	r0, [pc, #92]	; (80050e0 <DigitTwo+0x98>)
 8005082:	f001 fe51 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x0e;
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <DigitTwo+0x98>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	220e      	movs	r2, #14
 800508e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8005090:	2110      	movs	r1, #16
 8005092:	4813      	ldr	r0, [pc, #76]	; (80050e0 <DigitTwo+0x98>)
 8005094:	f001 fe48 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x1c;
 8005098:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <DigitTwo+0x98>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	221c      	movs	r2, #28
 80050a0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 80050a2:	2108      	movs	r1, #8
 80050a4:	480e      	ldr	r0, [pc, #56]	; (80050e0 <DigitTwo+0x98>)
 80050a6:	f001 fe3f 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x70;
 80050aa:	4a0d      	ldr	r2, [pc, #52]	; (80050e0 <DigitTwo+0x98>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	2270      	movs	r2, #112	; 0x70
 80050b2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 80050b4:	2104      	movs	r1, #4
 80050b6:	480a      	ldr	r0, [pc, #40]	; (80050e0 <DigitTwo+0x98>)
 80050b8:	f001 fe36 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xff;
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <DigitTwo+0x98>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	22ff      	movs	r2, #255	; 0xff
 80050c4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 80050c6:	2103      	movs	r1, #3
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <DigitTwo+0x98>)
 80050ca:	f001 fe2d 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 80050ce:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <DigitTwo+0x98>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000220 	.word	0x20000220

080050e4 <DigitOne>:

void DigitOne(int i)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <DigitOne+0x88>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 80050f6:	2101      	movs	r1, #1
 80050f8:	481c      	ldr	r0, [pc, #112]	; (800516c <DigitOne+0x88>)
 80050fa:	f001 fe15 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x98;
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <DigitOne+0x88>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	2298      	movs	r2, #152	; 0x98
 8005106:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 8005108:	2108      	movs	r1, #8
 800510a:	4818      	ldr	r0, [pc, #96]	; (800516c <DigitOne+0x88>)
 800510c:	f001 fe0c 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xd8;
 8005110:	4a16      	ldr	r2, [pc, #88]	; (800516c <DigitOne+0x88>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	22d8      	movs	r2, #216	; 0xd8
 8005118:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 800511a:	2110      	movs	r1, #16
 800511c:	4813      	ldr	r0, [pc, #76]	; (800516c <DigitOne+0x88>)
 800511e:	f001 fe03 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x78;
 8005122:	4a12      	ldr	r2, [pc, #72]	; (800516c <DigitOne+0x88>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	2278      	movs	r2, #120	; 0x78
 800512a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 800512c:	2120      	movs	r1, #32
 800512e:	480f      	ldr	r0, [pc, #60]	; (800516c <DigitOne+0x88>)
 8005130:	f001 fdfa 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x38;
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <DigitOne+0x88>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	2238      	movs	r2, #56	; 0x38
 800513c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 800513e:	2140      	movs	r1, #64	; 0x40
 8005140:	480a      	ldr	r0, [pc, #40]	; (800516c <DigitOne+0x88>)
 8005142:	f001 fdf1 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x18;
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <DigitOne+0x88>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	2218      	movs	r2, #24
 800514e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 8005150:	2186      	movs	r1, #134	; 0x86
 8005152:	4806      	ldr	r0, [pc, #24]	; (800516c <DigitOne+0x88>)
 8005154:	f001 fde8 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <DigitOne+0x88>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4413      	add	r3, r2
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000220 	.word	0x20000220

08005170 <DigitZero>:

void DigitZero(int i)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <DigitZero+0x50>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	223c      	movs	r2, #60	; 0x3c
 8005180:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8005182:	2181      	movs	r1, #129	; 0x81
 8005184:	480e      	ldr	r0, [pc, #56]	; (80051c0 <DigitZero+0x50>)
 8005186:	f001 fdcf 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0x66;
 800518a:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <DigitZero+0x50>)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	2266      	movs	r2, #102	; 0x66
 8005192:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8005194:	2142      	movs	r1, #66	; 0x42
 8005196:	480a      	ldr	r0, [pc, #40]	; (80051c0 <DigitZero+0x50>)
 8005198:	f001 fdc6 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0xc3;
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <DigitZero+0x50>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	22c3      	movs	r2, #195	; 0xc3
 80051a4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 80051a6:	213c      	movs	r1, #60	; 0x3c
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <DigitZero+0x50>)
 80051aa:	f001 fdbd 	bl	8006d28 <TransmitData>

	column_countdown[i] = 0;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <DigitZero+0x50>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000220 	.word	0x20000220

080051c4 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0

	switch (size_layer)
 80051ca:	4b7e      	ldr	r3, [pc, #504]	; (80053c4 <DiagonalCube_Handle+0x200>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	f200 80ea 	bhi.w	80053a8 <DiagonalCube_Handle+0x1e4>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <DiagonalCube_Handle+0x18>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	0800525d 	.word	0x0800525d
 80051e4:	080052cd 	.word	0x080052cd
 80051e8:	0800533b 	.word	0x0800533b
	{
		case SMALLEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80051ec:	f7fc fc34 	bl	8001a58 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b75      	ldr	r3, [pc, #468]	; (80053c8 <DiagonalCube_Handle+0x204>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2296      	movs	r2, #150	; 0x96
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f0c0 80d6 	bcc.w	80053ac <DiagonalCube_Handle+0x1e8>
			{
				layer_diagonal = 0x18;
 8005200:	4b72      	ldr	r3, [pc, #456]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005202:	2218      	movs	r2, #24
 8005204:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8005206:	2303      	movs	r3, #3
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	e007      	b.n	800521c <DiagonalCube_Handle+0x58>
				{
					column_diagonal[i] = 0x18;
 800520c:	4a70      	ldr	r2, [pc, #448]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	2218      	movs	r2, #24
 8005214:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b04      	cmp	r3, #4
 8005220:	ddf4      	ble.n	800520c <DiagonalCube_Handle+0x48>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8005222:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	4869      	ldr	r0, [pc, #420]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 800522a:	f001 fd7d 	bl	8006d28 <TransmitData>
				for (int i = 0; i < 8; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e007      	b.n	8005244 <DiagonalCube_Handle+0x80>
				{
					column_diagonal[i] = 0;
 8005234:	4a66      	ldr	r2, [pc, #408]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4413      	add	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b07      	cmp	r3, #7
 8005248:	ddf4      	ble.n	8005234 <DiagonalCube_Handle+0x70>
				}
				size_layer = MEDIUM;
 800524a:	4b5e      	ldr	r3, [pc, #376]	; (80053c4 <DiagonalCube_Handle+0x200>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8005250:	f7fc fc02 	bl	8001a58 <HAL_GetTick>
 8005254:	4603      	mov	r3, r0
 8005256:	4a5c      	ldr	r2, [pc, #368]	; (80053c8 <DiagonalCube_Handle+0x204>)
 8005258:	6013      	str	r3, [r2, #0]
			}
			break;
 800525a:	e0a7      	b.n	80053ac <DiagonalCube_Handle+0x1e8>
		case MEDIUM:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 800525c:	f7fc fbfc 	bl	8001a58 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	4b59      	ldr	r3, [pc, #356]	; (80053c8 <DiagonalCube_Handle+0x204>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2296      	movs	r2, #150	; 0x96
 800526a:	4293      	cmp	r3, r2
 800526c:	f0c0 80a0 	bcc.w	80053b0 <DiagonalCube_Handle+0x1ec>
			{
				layer_diagonal = 0x24;
 8005270:	4b56      	ldr	r3, [pc, #344]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8005276:	2302      	movs	r3, #2
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e007      	b.n	800528c <DiagonalCube_Handle+0xc8>
				{
					column_diagonal[i] = 0x3c;
 800527c:	4a54      	ldr	r2, [pc, #336]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	223c      	movs	r2, #60	; 0x3c
 8005284:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3301      	adds	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b05      	cmp	r3, #5
 8005290:	ddf4      	ble.n	800527c <DiagonalCube_Handle+0xb8>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8005292:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	484d      	ldr	r0, [pc, #308]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 800529a:	f001 fd45 	bl	8006d28 <TransmitData>
				for (int i = 0; i < 8; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e007      	b.n	80052b4 <DiagonalCube_Handle+0xf0>
				{
					column_diagonal[i] = 0;
 80052a4:	4a4a      	ldr	r2, [pc, #296]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	ddf4      	ble.n	80052a4 <DiagonalCube_Handle+0xe0>
				}
				size_layer = LARGE;
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <DiagonalCube_Handle+0x200>)
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80052c0:	f7fc fbca 	bl	8001a58 <HAL_GetTick>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4a40      	ldr	r2, [pc, #256]	; (80053c8 <DiagonalCube_Handle+0x204>)
 80052c8:	6013      	str	r3, [r2, #0]
			}
			break;
 80052ca:	e071      	b.n	80053b0 <DiagonalCube_Handle+0x1ec>
		case LARGE:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80052cc:	f7fc fbc4 	bl	8001a58 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b3d      	ldr	r3, [pc, #244]	; (80053c8 <DiagonalCube_Handle+0x204>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2296      	movs	r2, #150	; 0x96
 80052da:	4293      	cmp	r3, r2
 80052dc:	d36a      	bcc.n	80053b4 <DiagonalCube_Handle+0x1f0>
			{
				layer_diagonal = 0x42;
 80052de:	4b3b      	ldr	r3, [pc, #236]	; (80053cc <DiagonalCube_Handle+0x208>)
 80052e0:	2242      	movs	r2, #66	; 0x42
 80052e2:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80052e4:	2301      	movs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e007      	b.n	80052fa <DiagonalCube_Handle+0x136>
				{
					column_diagonal[i] = 0x7e;
 80052ea:	4a39      	ldr	r2, [pc, #228]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	227e      	movs	r2, #126	; 0x7e
 80052f2:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	ddf4      	ble.n	80052ea <DiagonalCube_Handle+0x126>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8005300:	4b32      	ldr	r3, [pc, #200]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	4832      	ldr	r0, [pc, #200]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 8005308:	f001 fd0e 	bl	8006d28 <TransmitData>
				for (int i = 0; i < 8; i++)
 800530c:	2300      	movs	r3, #0
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	e007      	b.n	8005322 <DiagonalCube_Handle+0x15e>
				{
					column_diagonal[i] = 0;
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4413      	add	r3, r2
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	3301      	adds	r3, #1
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b07      	cmp	r3, #7
 8005326:	ddf4      	ble.n	8005312 <DiagonalCube_Handle+0x14e>
				}
				size_layer = LARGEST;
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <DiagonalCube_Handle+0x200>)
 800532a:	2203      	movs	r2, #3
 800532c:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800532e:	f7fc fb93 	bl	8001a58 <HAL_GetTick>
 8005332:	4603      	mov	r3, r0
 8005334:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <DiagonalCube_Handle+0x204>)
 8005336:	6013      	str	r3, [r2, #0]
			}
			break;
 8005338:	e03c      	b.n	80053b4 <DiagonalCube_Handle+0x1f0>
		case LARGEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 800533a:	f7fc fb8d 	bl	8001a58 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <DiagonalCube_Handle+0x204>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2296      	movs	r2, #150	; 0x96
 8005348:	4293      	cmp	r3, r2
 800534a:	d335      	bcc.n	80053b8 <DiagonalCube_Handle+0x1f4>
			{
				layer_diagonal= 0x81;
 800534c:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <DiagonalCube_Handle+0x208>)
 800534e:	2281      	movs	r2, #129	; 0x81
 8005350:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	e007      	b.n	8005368 <DiagonalCube_Handle+0x1a4>
				{
					column_diagonal[i] = 0xff;
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	22ff      	movs	r2, #255	; 0xff
 8005360:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3301      	adds	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b07      	cmp	r3, #7
 800536c:	ddf4      	ble.n	8005358 <DiagonalCube_Handle+0x194>
				}
				TransmitData(column_diagonal, layer_diagonal);
 800536e:	4b17      	ldr	r3, [pc, #92]	; (80053cc <DiagonalCube_Handle+0x208>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	4816      	ldr	r0, [pc, #88]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 8005376:	f001 fcd7 	bl	8006d28 <TransmitData>
				for (int i = 0; i < 8; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	e007      	b.n	8005390 <DiagonalCube_Handle+0x1cc>
				{
					column_diagonal[i] = 0;
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <DiagonalCube_Handle+0x20c>)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	4413      	add	r3, r2
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b07      	cmp	r3, #7
 8005394:	ddf4      	ble.n	8005380 <DiagonalCube_Handle+0x1bc>
				}
				size_layer = SMALLEST;
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <DiagonalCube_Handle+0x200>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800539c:	f7fc fb5c 	bl	8001a58 <HAL_GetTick>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <DiagonalCube_Handle+0x204>)
 80053a4:	6013      	str	r3, [r2, #0]
			}
			break;
 80053a6:	e007      	b.n	80053b8 <DiagonalCube_Handle+0x1f4>
		default:
			break;
 80053a8:	bf00      	nop
 80053aa:	e006      	b.n	80053ba <DiagonalCube_Handle+0x1f6>
			break;
 80053ac:	bf00      	nop
 80053ae:	e004      	b.n	80053ba <DiagonalCube_Handle+0x1f6>
			break;
 80053b0:	bf00      	nop
 80053b2:	e002      	b.n	80053ba <DiagonalCube_Handle+0x1f6>
			break;
 80053b4:	bf00      	nop
 80053b6:	e000      	b.n	80053ba <DiagonalCube_Handle+0x1f6>
			break;
 80053b8:	bf00      	nop
	}
}
 80053ba:	bf00      	nop
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000230 	.word	0x20000230
 80053c8:	2000023c 	.word	0x2000023c
 80053cc:	20000231 	.word	0x20000231
 80053d0:	20000234 	.word	0x20000234

080053d4 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <DiagonalCube_Set_State+0x40>)
 80053dc:	2204      	movs	r2, #4
 80053de:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	e007      	b.n	80053f6 <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <DiagonalCube_Set_State+0x44>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3301      	adds	r3, #1
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	ddf4      	ble.n	80053e6 <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <DiagonalCube_Set_State+0x48>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <DiagonalCube_Set_State+0x4c>)
 8005404:	2203      	movs	r2, #3
 8005406:	701a      	strb	r2, [r3, #0]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000010 	.word	0x20000010
 8005418:	20000234 	.word	0x20000234
 800541c:	20000231 	.word	0x20000231
 8005420:	20000230 	.word	0x20000230

08005424 <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
 800542e:	460b      	mov	r3, r1
 8005430:	71bb      	strb	r3, [r7, #6]
 8005432:	4613      	mov	r3, r2
 8005434:	717b      	strb	r3, [r7, #5]
	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 8005436:	797b      	ldrb	r3, [r7, #5]
 8005438:	019a      	lsls	r2, r3, #6
 800543a:	79bb      	ldrb	r3, [r7, #6]
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	441a      	add	r2, r3
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	4413      	add	r3, r2
 8005444:	10db      	asrs	r3, r3, #3
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <DisplayLed+0xf8>)
 800544a:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 800544c:	797b      	ldrb	r3, [r7, #5]
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	b2da      	uxtb	r2, r3
 8005452:	79bb      	ldrb	r3, [r7, #6]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4413      	add	r3, r2
 800545a:	b2da      	uxtb	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	4413      	add	r3, r2
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b2e      	ldr	r3, [pc, #184]	; (800551c <DisplayLed+0xf8>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <DisplayLed+0xfc>)
 8005470:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <DisplayLed+0xf8>)
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	797b      	ldrb	r3, [r7, #5]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <DisplayLed+0x100>)
 8005482:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 8005484:	797b      	ldrb	r3, [r7, #5]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d103      	bne.n	8005492 <DisplayLed+0x6e>
 800548a:	4b27      	ldr	r3, [pc, #156]	; (8005528 <DisplayLed+0x104>)
 800548c:	22ff      	movs	r2, #255	; 0xff
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e006      	b.n	80054a0 <DisplayLed+0x7c>
	else IClayer = 0x01 <<  z;
 8005492:	797b      	ldrb	r3, [r7, #5]
 8005494:	2201      	movs	r2, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	b2da      	uxtb	r2, r3
 800549c:	4b22      	ldr	r3, [pc, #136]	; (8005528 <DisplayLed+0x104>)
 800549e:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <DisplayLed+0xfc>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	2301      	movs	r3, #1
 80054a8:	fa03 f102 	lsl.w	r1, r3, r2
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <DisplayLed+0x100>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	b2c9      	uxtb	r1, r1
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <DisplayLed+0x108>)
 80054b6:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <DisplayLed+0x104>)
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <DisplayLed+0x10c>)
 80054be:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e009      	b.n	80054da <DisplayLed+0xb6>
	{
		dataOut[i] = ICcolumn[i-1];
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	4917      	ldr	r1, [pc, #92]	; (800552c <DisplayLed+0x108>)
 80054ce:	5c89      	ldrb	r1, [r1, r2]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <DisplayLed+0x10c>)
 80054d2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	3301      	adds	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d9f2      	bls.n	80054c6 <DisplayLed+0xa2>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80054e0:	2200      	movs	r2, #0
 80054e2:	2140      	movs	r1, #64	; 0x40
 80054e4:	4813      	ldr	r0, [pc, #76]	; (8005534 <DisplayLed+0x110>)
 80054e6:	f7fd f82c 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 80054ea:	2364      	movs	r3, #100	; 0x64
 80054ec:	2209      	movs	r2, #9
 80054ee:	4910      	ldr	r1, [pc, #64]	; (8005530 <DisplayLed+0x10c>)
 80054f0:	4811      	ldr	r0, [pc, #68]	; (8005538 <DisplayLed+0x114>)
 80054f2:	f7fd fd93 	bl	800301c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80054f6:	2201      	movs	r2, #1
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	480e      	ldr	r0, [pc, #56]	; (8005534 <DisplayLed+0x110>)
 80054fc:	f7fd f821 	bl	8002542 <HAL_GPIO_WritePin>
	IClayer = 0;
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <DisplayLed+0x104>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0;
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <DisplayLed+0x100>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4b07      	ldr	r3, [pc, #28]	; (800552c <DisplayLed+0x108>)
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000249 	.word	0x20000249
 8005520:	2000024a 	.word	0x2000024a
 8005524:	2000024b 	.word	0x2000024b
 8005528:	20000248 	.word	0x20000248
 800552c:	20000240 	.word	0x20000240
 8005530:	2000024c 	.word	0x2000024c
 8005534:	40010800 	.word	0x40010800
 8005538:	200000c4 	.word	0x200000c4

0800553c <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 8005542:	4b93      	ldr	r3, [pc, #588]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	71da      	strb	r2, [r3, #7]
 8005548:	4b91      	ldr	r3, [pc, #580]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800554a:	79da      	ldrb	r2, [r3, #7]
 800554c:	4b90      	ldr	r3, [pc, #576]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800554e:	719a      	strb	r2, [r3, #6]
 8005550:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005552:	799a      	ldrb	r2, [r3, #6]
 8005554:	4b8e      	ldr	r3, [pc, #568]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005556:	715a      	strb	r2, [r3, #5]
 8005558:	4b8d      	ldr	r3, [pc, #564]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800555a:	795a      	ldrb	r2, [r3, #5]
 800555c:	4b8c      	ldr	r3, [pc, #560]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800555e:	711a      	strb	r2, [r3, #4]
 8005560:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005562:	791a      	ldrb	r2, [r3, #4]
 8005564:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005566:	70da      	strb	r2, [r3, #3]
 8005568:	4b89      	ldr	r3, [pc, #548]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800556a:	78da      	ldrb	r2, [r3, #3]
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800556e:	709a      	strb	r2, [r3, #2]
 8005570:	4b87      	ldr	r3, [pc, #540]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005572:	789a      	ldrb	r2, [r3, #2]
 8005574:	4b86      	ldr	r3, [pc, #536]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005576:	705a      	strb	r2, [r3, #1]
 8005578:	4b85      	ldr	r3, [pc, #532]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800557a:	785a      	ldrb	r2, [r3, #1]
 800557c:	4b84      	ldr	r3, [pc, #528]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800557e:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8005580:	4b83      	ldr	r3, [pc, #524]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005582:	227e      	movs	r2, #126	; 0x7e
 8005584:	739a      	strb	r2, [r3, #14]
 8005586:	4b82      	ldr	r3, [pc, #520]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005588:	7b9a      	ldrb	r2, [r3, #14]
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800558c:	735a      	strb	r2, [r3, #13]
 800558e:	4b80      	ldr	r3, [pc, #512]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005590:	7b5a      	ldrb	r2, [r3, #13]
 8005592:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005594:	731a      	strb	r2, [r3, #12]
 8005596:	4b7e      	ldr	r3, [pc, #504]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005598:	7b1a      	ldrb	r2, [r3, #12]
 800559a:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 800559c:	72da      	strb	r2, [r3, #11]
 800559e:	4b7c      	ldr	r3, [pc, #496]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055a0:	7ada      	ldrb	r2, [r3, #11]
 80055a2:	4b7b      	ldr	r3, [pc, #492]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055a4:	729a      	strb	r2, [r3, #10]
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055a8:	7a9a      	ldrb	r2, [r3, #10]
 80055aa:	4b79      	ldr	r3, [pc, #484]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055ac:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 80055ae:	4b78      	ldr	r3, [pc, #480]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055b0:	223c      	movs	r2, #60	; 0x3c
 80055b2:	755a      	strb	r2, [r3, #21]
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055b6:	7d5a      	ldrb	r2, [r3, #21]
 80055b8:	4b75      	ldr	r3, [pc, #468]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055ba:	751a      	strb	r2, [r3, #20]
 80055bc:	4b74      	ldr	r3, [pc, #464]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055be:	7d1a      	ldrb	r2, [r3, #20]
 80055c0:	4b73      	ldr	r3, [pc, #460]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055c2:	74da      	strb	r2, [r3, #19]
 80055c4:	4b72      	ldr	r3, [pc, #456]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055c6:	7cda      	ldrb	r2, [r3, #19]
 80055c8:	4b71      	ldr	r3, [pc, #452]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055ca:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 80055cc:	4b70      	ldr	r3, [pc, #448]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055ce:	2218      	movs	r2, #24
 80055d0:	771a      	strb	r2, [r3, #28]
 80055d2:	4b6f      	ldr	r3, [pc, #444]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055d4:	7f1a      	ldrb	r2, [r3, #28]
 80055d6:	4b6e      	ldr	r3, [pc, #440]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80055d8:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 80055da:	4b6e      	ldr	r3, [pc, #440]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 80055e0:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 80055e2:	227e      	movs	r2, #126	; 0x7e
 80055e4:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 80055e8:	223c      	movs	r2, #60	; 0x3c
 80055ea:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 80055ec:	4b69      	ldr	r3, [pc, #420]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 80055ee:	2218      	movs	r2, #24
 80055f0:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 80055f2:	4b69      	ldr	r3, [pc, #420]	; (8005798 <GrowShrinkCube_Handle+0x25c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	f200 80bc 	bhi.w	8005774 <GrowShrinkCube_Handle+0x238>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <GrowShrinkCube_Handle+0xc8>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005615 	.word	0x08005615
 8005608:	0800566f 	.word	0x0800566f
 800560c:	080056c7 	.word	0x080056c7
 8005610:	0800571f 	.word	0x0800571f
	{
		case TWO_X_TWO_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8005614:	f7fc fa20 	bl	8001a58 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	4b60      	ldr	r3, [pc, #384]	; (800579c <GrowShrinkCube_Handle+0x260>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	22c8      	movs	r2, #200	; 0xc8
 8005622:	4293      	cmp	r3, r2
 8005624:	f0c0 80a8 	bcc.w	8005778 <GrowShrinkCube_Handle+0x23c>
			{
				for (int j = 0; j < 8; j++)
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e013      	b.n	8005656 <GrowShrinkCube_Handle+0x11a>
				{
					temp[j] = column_growshrink[3][j];
 800562e:	4a58      	ldr	r2, [pc, #352]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	3318      	adds	r3, #24
 8005636:	7819      	ldrb	r1, [r3, #0]
 8005638:	463a      	mov	r2, r7
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	460a      	mov	r2, r1
 8005640:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 8005644:	78da      	ldrb	r2, [r3, #3]
 8005646:	463b      	mov	r3, r7
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fb6c 	bl	8006d28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3301      	adds	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b07      	cmp	r3, #7
 800565a:	dde8      	ble.n	800562e <GrowShrinkCube_Handle+0xf2>
				}
				time_start = HAL_GetTick();
 800565c:	f7fc f9fc 	bl	8001a58 <HAL_GetTick>
 8005660:	4603      	mov	r3, r0
 8005662:	4a4e      	ldr	r2, [pc, #312]	; (800579c <GrowShrinkCube_Handle+0x260>)
 8005664:	6013      	str	r3, [r2, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8005666:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <GrowShrinkCube_Handle+0x25c>)
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800566c:	e084      	b.n	8005778 <GrowShrinkCube_Handle+0x23c>
		case FOUR_X_FOUR_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 800566e:	f7fc f9f3 	bl	8001a58 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	4b49      	ldr	r3, [pc, #292]	; (800579c <GrowShrinkCube_Handle+0x260>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	22c8      	movs	r2, #200	; 0xc8
 800567c:	4293      	cmp	r3, r2
 800567e:	d37d      	bcc.n	800577c <GrowShrinkCube_Handle+0x240>
			{
				for (int j = 0; j < 8; j++)
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	e013      	b.n	80056ae <GrowShrinkCube_Handle+0x172>
				{
					temp[j] = column_growshrink[2][j];
 8005686:	4a42      	ldr	r2, [pc, #264]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	3310      	adds	r3, #16
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	463a      	mov	r2, r7
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	460a      	mov	r2, r1
 8005698:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 800569a:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 800569c:	789a      	ldrb	r2, [r3, #2]
 800569e:	463b      	mov	r3, r7
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fb40 	bl	8006d28 <TransmitData>
				for (int j = 0; j < 8; j++)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3301      	adds	r3, #1
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	dde8      	ble.n	8005686 <GrowShrinkCube_Handle+0x14a>
				}
				time_start = HAL_GetTick();
 80056b4:	f7fc f9d0 	bl	8001a58 <HAL_GetTick>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4a38      	ldr	r2, [pc, #224]	; (800579c <GrowShrinkCube_Handle+0x260>)
 80056bc:	6013      	str	r3, [r2, #0]
				size_cube = SIX_X_SIX_CUBE;
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <GrowShrinkCube_Handle+0x25c>)
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80056c4:	e05a      	b.n	800577c <GrowShrinkCube_Handle+0x240>
		case SIX_X_SIX_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 80056c6:	f7fc f9c7 	bl	8001a58 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b33      	ldr	r3, [pc, #204]	; (800579c <GrowShrinkCube_Handle+0x260>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	22c8      	movs	r2, #200	; 0xc8
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d353      	bcc.n	8005780 <GrowShrinkCube_Handle+0x244>
			{
				for (int j = 0; j < 8; j++)
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e013      	b.n	8005706 <GrowShrinkCube_Handle+0x1ca>
				{
					temp[j] = column_growshrink[1][j];
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	3308      	adds	r3, #8
 80056e6:	7819      	ldrb	r1, [r3, #0]
 80056e8:	463a      	mov	r2, r7
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	460a      	mov	r2, r1
 80056f0:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 80056f2:	4b28      	ldr	r3, [pc, #160]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 80056f4:	785a      	ldrb	r2, [r3, #1]
 80056f6:	463b      	mov	r3, r7
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 fb14 	bl	8006d28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b07      	cmp	r3, #7
 800570a:	dde8      	ble.n	80056de <GrowShrinkCube_Handle+0x1a2>
				}
				time_start = HAL_GetTick();
 800570c:	f7fc f9a4 	bl	8001a58 <HAL_GetTick>
 8005710:	4603      	mov	r3, r0
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <GrowShrinkCube_Handle+0x260>)
 8005714:	6013      	str	r3, [r2, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <GrowShrinkCube_Handle+0x25c>)
 8005718:	2203      	movs	r2, #3
 800571a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800571c:	e030      	b.n	8005780 <GrowShrinkCube_Handle+0x244>
		case EIGHT_X_EIGHT_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 800571e:	f7fc f99b 	bl	8001a58 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <GrowShrinkCube_Handle+0x260>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	22c8      	movs	r2, #200	; 0xc8
 800572c:	4293      	cmp	r3, r2
 800572e:	d329      	bcc.n	8005784 <GrowShrinkCube_Handle+0x248>
			{
				for (int j = 0; j < 8; j++)
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	e012      	b.n	800575c <GrowShrinkCube_Handle+0x220>
				{
					temp[j] = column_growshrink[0][j];
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <GrowShrinkCube_Handle+0x254>)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4413      	add	r3, r2
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	463a      	mov	r2, r7
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4413      	add	r3, r2
 8005744:	460a      	mov	r2, r1
 8005746:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 8005748:	4b12      	ldr	r3, [pc, #72]	; (8005794 <GrowShrinkCube_Handle+0x258>)
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	463b      	mov	r3, r7
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fae9 	bl	8006d28 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	3301      	adds	r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b07      	cmp	r3, #7
 8005760:	dde9      	ble.n	8005736 <GrowShrinkCube_Handle+0x1fa>
				}
				time_start = HAL_GetTick();
 8005762:	f7fc f979 	bl	8001a58 <HAL_GetTick>
 8005766:	4603      	mov	r3, r0
 8005768:	4a0c      	ldr	r2, [pc, #48]	; (800579c <GrowShrinkCube_Handle+0x260>)
 800576a:	6013      	str	r3, [r2, #0]
				size_cube = TWO_X_TWO_CUBE;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <GrowShrinkCube_Handle+0x25c>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005772:	e007      	b.n	8005784 <GrowShrinkCube_Handle+0x248>
		default:
			break;
 8005774:	bf00      	nop
 8005776:	e006      	b.n	8005786 <GrowShrinkCube_Handle+0x24a>
			break;
 8005778:	bf00      	nop
 800577a:	e004      	b.n	8005786 <GrowShrinkCube_Handle+0x24a>
			break;
 800577c:	bf00      	nop
 800577e:	e002      	b.n	8005786 <GrowShrinkCube_Handle+0x24a>
			break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <GrowShrinkCube_Handle+0x24a>
			break;
 8005784:	bf00      	nop
	}
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	2000025c 	.word	0x2000025c
 8005794:	2000027c 	.word	0x2000027c
 8005798:	20000255 	.word	0x20000255
 800579c:	20000258 	.word	0x20000258

080057a0 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <GrowShrinkCube_Set_State+0x5c>)
 80057a8:	2203      	movs	r2, #3
 80057aa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	e018      	b.n	80057e4 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <GrowShrinkCube_Set_State+0x60>)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80057bc:	2300      	movs	r3, #0
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	e00a      	b.n	80057d8 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 80057c2:	4a10      	ldr	r2, [pc, #64]	; (8005804 <GrowShrinkCube_Set_State+0x64>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	441a      	add	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	4413      	add	r3, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b07      	cmp	r3, #7
 80057dc:	ddf1      	ble.n	80057c2 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3301      	adds	r3, #1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	dde3      	ble.n	80057b2 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <GrowShrinkCube_Set_State+0x68>)
 80057ec:	2203      	movs	r2, #3
 80057ee:	701a      	strb	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000010 	.word	0x20000010
 8005800:	2000027c 	.word	0x2000027c
 8005804:	2000025c 	.word	0x2000025c
 8005808:	20000255 	.word	0x20000255

0800580c <Btn_press_Callback>:

Cube_Status currentEffect = WAVE_EFFECT;


void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
	switch(currentEffect){
 8005818:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <Btn_press_Callback+0x98>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b0a      	cmp	r3, #10
 800581e:	d83c      	bhi.n	800589a <Btn_press_Callback+0x8e>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <Btn_press_Callback+0x1c>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005855 	.word	0x08005855
 800582c:	0800585d 	.word	0x0800585d
 8005830:	08005863 	.word	0x08005863
 8005834:	08005869 	.word	0x08005869
 8005838:	0800586f 	.word	0x0800586f
 800583c:	08005875 	.word	0x08005875
 8005840:	0800587b 	.word	0x0800587b
 8005844:	08005881 	.word	0x08005881
 8005848:	08005887 	.word	0x08005887
 800584c:	0800588d 	.word	0x0800588d
 8005850:	08005893 	.word	0x08005893
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <Btn_press_Callback+0x98>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
		break;
 800585a:	e01f      	b.n	800589c <Btn_press_Callback+0x90>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 800585c:	f000 fa1e 	bl	8005c9c <PlaneCube_Set_State>
		break;
 8005860:	e01c      	b.n	800589c <Btn_press_Callback+0x90>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8005862:	f7ff ff9d 	bl	80057a0 <GrowShrinkCube_Set_State>
		break;
 8005866:	e019      	b.n	800589c <Btn_press_Callback+0x90>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8005868:	f7ff fdb4 	bl	80053d4 <DiagonalCube_Set_State>
		break;
 800586c:	e016      	b.n	800589c <Btn_press_Callback+0x90>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 800586e:	f7fe fe81 	bl	8004574 <AroundEdgeCube_Set_State>
		break;
 8005872:	e013      	b.n	800589c <Btn_press_Callback+0x90>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8005874:	f7ff fa2a 	bl	8004ccc <CountDownCube_Set_Sate>
		break;
 8005878:	e010      	b.n	800589c <Btn_press_Callback+0x90>
	case COUNT_DOWN_CUBE:
		RandomRainCube_Set_State();
 800587a:	f000 fa9f 	bl	8005dbc <RandomRainCube_Set_State>
		break;
 800587e:	e00d      	b.n	800589c <Btn_press_Callback+0x90>
	case RANDOM_RAIN_CUBE:
		SpiralCube_Set_State();
 8005880:	f001 fa2e 	bl	8006ce0 <SpiralCube_Set_State>
		break;
 8005884:	e00a      	b.n	800589c <Btn_press_Callback+0x90>
	case SPIRAL_CUBE:
		WaveCube_Set_State();
 8005886:	f001 fb79 	bl	8006f7c <WaveCube_Set_State>
		break;
 800588a:	e007      	b.n	800589c <Btn_press_Callback+0x90>
	case WAVE_EFFECT:
		SidewavesEffect_Set_State();
 800588c:	f000 fbfe 	bl	800608c <SidewavesEffect_Set_State>
		break;
 8005890:	e004      	b.n	800589c <Btn_press_Callback+0x90>
	case SIDE_WAVES_EFFECT:
		currentEffect = TURN_OFF_ALL_LEDS;
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <Btn_press_Callback+0x98>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
		break;
 8005898:	e000      	b.n	800589c <Btn_press_Callback+0x90>
	default:
		break;
 800589a:	bf00      	nop
	}
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000010 	.word	0x20000010

080058a8 <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
	switch (cube_state) {
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	2b0a      	cmp	r3, #10
 80058b6:	d83b      	bhi.n	8005930 <Led_cube_Handle+0x88>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <Led_cube_Handle+0x18>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	080058ff 	.word	0x080058ff
 80058d0:	08005905 	.word	0x08005905
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	08005911 	.word	0x08005911
 80058dc:	08005917 	.word	0x08005917
 80058e0:	0800591f 	.word	0x0800591f
 80058e4:	08005925 	.word	0x08005925
 80058e8:	0800592b 	.word	0x0800592b
		case TURN_OFF_ALL_LEDS:
			clearCube();
 80058ec:	f7fe ff21 	bl	8004732 <clearCube>
			break;
 80058f0:	e01f      	b.n	8005932 <Led_cube_Handle+0x8a>
		case TURN_ON_ALL_LEDS:
			lightCube();
 80058f2:	f000 f823 	bl	800593c <lightCube>
			break;
 80058f6:	e01c      	b.n	8005932 <Led_cube_Handle+0x8a>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle();
 80058f8:	f000 f844 	bl	8005984 <PlaneCube_Handle>
			break;
 80058fc:	e019      	b.n	8005932 <Led_cube_Handle+0x8a>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle();
 80058fe:	f7ff fe1d 	bl	800553c <GrowShrinkCube_Handle>
			break;
 8005902:	e016      	b.n	8005932 <Led_cube_Handle+0x8a>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle();
 8005904:	f7ff fc5e 	bl	80051c4 <DiagonalCube_Handle>
			break;
 8005908:	e013      	b.n	8005932 <Led_cube_Handle+0x8a>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle();
 800590a:	f7fe fdc9 	bl	80044a0 <AroundEdgeCube_Handle>
			break;
 800590e:	e010      	b.n	8005932 <Led_cube_Handle+0x8a>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle();
 8005910:	f7fe ff2c 	bl	800476c <CountDownCube_Handle>
			break;
 8005914:	e00d      	b.n	8005932 <Led_cube_Handle+0x8a>
		case RANDOM_RAIN_CUBE:
			RandomRainCube_Handle(10);
 8005916:	200a      	movs	r0, #10
 8005918:	f000 f9f2 	bl	8005d00 <RandomRainCube_Handle>
			break;
 800591c:	e009      	b.n	8005932 <Led_cube_Handle+0x8a>
		case SPIRAL_CUBE:
			SpiralCube_Handle();
 800591e:	f000 fbd5 	bl	80060cc <SpiralCube_Handle>
			break;
 8005922:	e006      	b.n	8005932 <Led_cube_Handle+0x8a>
		case WAVE_EFFECT:
			WaveCube_Handle();
 8005924:	f001 fa38 	bl	8006d98 <WaveCube_Handle>
			break;
 8005928:	e003      	b.n	8005932 <Led_cube_Handle+0x8a>
		case SIDE_WAVES_EFFECT:
			SidewavesEffect_Handle();
 800592a:	f000 fa5d 	bl	8005de8 <SidewavesEffect_Handle>
			break;
 800592e:	e000      	b.n	8005932 <Led_cube_Handle+0x8a>
		default:
			break;
 8005930:	bf00      	nop
	}
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <lightCube>:
#include "light_cube.h"

void lightCube()
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
	uint8_t column[8] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8005942:	4a0f      	ldr	r2, [pc, #60]	; (8005980 <lightCube+0x44>)
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800594a:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0;  i < 8; i++)
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e00c      	b.n	800596e <lightCube+0x32>
	{
		TransmitData(column, 0x80 >> i);
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	fa42 f303 	asr.w	r3, r2, r3
 800595c:	b2da      	uxtb	r2, r3
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f001 f9e0 	bl	8006d28 <TransmitData>
	for (int i = 0;  i < 8; i++)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b07      	cmp	r3, #7
 8005972:	ddef      	ble.n	8005954 <lightCube+0x18>
	}
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	08009ec0 	.word	0x08009ec0

08005984 <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
	switch(way_state){
 800598a:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <PlaneCube_Handle+0x270>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b02      	cmp	r3, #2
 8005990:	f000 80fd 	beq.w	8005b8e <PlaneCube_Handle+0x20a>
 8005994:	2b02      	cmp	r3, #2
 8005996:	f300 8169 	bgt.w	8005c6c <PlaneCube_Handle+0x2e8>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <PlaneCube_Handle+0x20>
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d06a      	beq.n	8005a78 <PlaneCube_Handle+0xf4>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 80059a2:	e163      	b.n	8005c6c <PlaneCube_Handle+0x2e8>
		layer_plane = 0xff;
 80059a4:	4b94      	ldr	r3, [pc, #592]	; (8005bf8 <PlaneCube_Handle+0x274>)
 80059a6:	22ff      	movs	r2, #255	; 0xff
 80059a8:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 80059aa:	f7fc f855 	bl	8001a58 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <PlaneCube_Handle+0x278>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2264      	movs	r2, #100	; 0x64
 80059b8:	4293      	cmp	r3, r2
 80059ba:	f0c0 8159 	bcc.w	8005c70 <PlaneCube_Handle+0x2ec>
			if (way)
 80059be:	4b90      	ldr	r3, [pc, #576]	; (8005c00 <PlaneCube_Handle+0x27c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d026      	beq.n	8005a14 <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 80059c6:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <PlaneCube_Handle+0x280>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a8f      	ldr	r2, [pc, #572]	; (8005c08 <PlaneCube_Handle+0x284>)
 80059cc:	21ff      	movs	r1, #255	; 0xff
 80059ce:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 80059d0:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <PlaneCube_Handle+0x274>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	4619      	mov	r1, r3
 80059d6:	488c      	ldr	r0, [pc, #560]	; (8005c08 <PlaneCube_Handle+0x284>)
 80059d8:	f001 f9a6 	bl	8006d28 <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 80059dc:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <PlaneCube_Handle+0x284>)
 80059de:	79db      	ldrb	r3, [r3, #7]
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	d103      	bne.n	80059ec <PlaneCube_Handle+0x68>
 80059e4:	4b86      	ldr	r3, [pc, #536]	; (8005c00 <PlaneCube_Handle+0x27c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e004      	b.n	80059f6 <PlaneCube_Handle+0x72>
				else i++;
 80059ec:	4b85      	ldr	r3, [pc, #532]	; (8005c04 <PlaneCube_Handle+0x280>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a84      	ldr	r2, [pc, #528]	; (8005c04 <PlaneCube_Handle+0x280>)
 80059f4:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	e007      	b.n	8005a0c <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 80059fc:	4a82      	ldr	r2, [pc, #520]	; (8005c08 <PlaneCube_Handle+0x284>)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b07      	cmp	r3, #7
 8005a10:	ddf4      	ble.n	80059fc <PlaneCube_Handle+0x78>
 8005a12:	e02b      	b.n	8005a6c <PlaneCube_Handle+0xe8>
				column_plane[i] = 0xff;
 8005a14:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <PlaneCube_Handle+0x280>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7b      	ldr	r2, [pc, #492]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a1a:	21ff      	movs	r1, #255	; 0xff
 8005a1c:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8005a1e:	4b76      	ldr	r3, [pc, #472]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	4878      	ldr	r0, [pc, #480]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a26:	f001 f97f 	bl	8006d28 <TransmitData>
				if (column_plane[0] == 0xff)
 8005a2a:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2bff      	cmp	r3, #255	; 0xff
 8005a30:	d109      	bne.n	8005a46 <PlaneCube_Handle+0xc2>
						way = 1;
 8005a32:	4b73      	ldr	r3, [pc, #460]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
						i = 0;
 8005a38:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <PlaneCube_Handle+0x280>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8005a3e:	4b6d      	ldr	r3, [pc, #436]	; (8005bf4 <PlaneCube_Handle+0x270>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e004      	b.n	8005a50 <PlaneCube_Handle+0xcc>
				else i--;
 8005a46:	4b6f      	ldr	r3, [pc, #444]	; (8005c04 <PlaneCube_Handle+0x280>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	4a6d      	ldr	r2, [pc, #436]	; (8005c04 <PlaneCube_Handle+0x280>)
 8005a4e:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e007      	b.n	8005a66 <PlaneCube_Handle+0xe2>
					column_plane[j] = 0;
 8005a56:	4a6c      	ldr	r2, [pc, #432]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	ddf4      	ble.n	8005a56 <PlaneCube_Handle+0xd2>
			timer = HAL_GetTick();
 8005a6c:	f7fb fff4 	bl	8001a58 <HAL_GetTick>
 8005a70:	4603      	mov	r3, r0
 8005a72:	4a62      	ldr	r2, [pc, #392]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005a74:	6013      	str	r3, [r2, #0]
		break;
 8005a76:	e0fb      	b.n	8005c70 <PlaneCube_Handle+0x2ec>
		layer_plane = 0xff;
 8005a78:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8005a7e:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d118      	bne.n	8005ab8 <PlaneCube_Handle+0x134>
			for (int j = 0; j < 8; j++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e007      	b.n	8005a9c <PlaneCube_Handle+0x118>
				column_plane[j] = 1;
 8005a8c:	4a5e      	ldr	r2, [pc, #376]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b07      	cmp	r3, #7
 8005aa0:	ddf4      	ble.n	8005a8c <PlaneCube_Handle+0x108>
			TransmitData(column_plane, layer_plane);
 8005aa2:	4b55      	ldr	r3, [pc, #340]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4857      	ldr	r0, [pc, #348]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005aaa:	f001 f93d 	bl	8006d28 <TransmitData>
			timer = HAL_GetTick();
 8005aae:	f7fb ffd3 	bl	8001a58 <HAL_GetTick>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a51      	ldr	r2, [pc, #324]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005ab6:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8005ab8:	f7fb ffce 	bl	8001a58 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2264      	movs	r2, #100	; 0x64
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f0c0 80d4 	bcc.w	8005c74 <PlaneCube_Handle+0x2f0>
			if (way)
 8005acc:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d021      	beq.n	8005b18 <PlaneCube_Handle+0x194>
				for (int j = 0; j < 8; j++)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e00d      	b.n	8005af6 <PlaneCube_Handle+0x172>
					column_plane[j] <<= 1;
 8005ada:	4a4b      	ldr	r2, [pc, #300]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	b2d9      	uxtb	r1, r3
 8005ae6:	4a48      	ldr	r2, [pc, #288]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4413      	add	r3, r2
 8005aec:	460a      	mov	r2, r1
 8005aee:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	3301      	adds	r3, #1
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b07      	cmp	r3, #7
 8005afa:	ddee      	ble.n	8005ada <PlaneCube_Handle+0x156>
				TransmitData(column_plane, layer_plane);
 8005afc:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	4841      	ldr	r0, [pc, #260]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b04:	f001 f910 	bl	8006d28 <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8005b08:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b80      	cmp	r3, #128	; 0x80
 8005b0e:	d138      	bne.n	8005b82 <PlaneCube_Handle+0x1fe>
 8005b10:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e034      	b.n	8005b82 <PlaneCube_Handle+0x1fe>
				for (int j = 0; j < 8; j++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e00d      	b.n	8005b3a <PlaneCube_Handle+0x1b6>
					column_plane[j] >>= 1;
 8005b1e:	4a3a      	ldr	r2, [pc, #232]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b2d9      	uxtb	r1, r3
 8005b2a:	4a37      	ldr	r2, [pc, #220]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b07      	cmp	r3, #7
 8005b3e:	ddee      	ble.n	8005b1e <PlaneCube_Handle+0x19a>
				TransmitData(column_plane, layer_plane);
 8005b40:	4b2d      	ldr	r3, [pc, #180]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	4830      	ldr	r0, [pc, #192]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b48:	f001 f8ee 	bl	8006d28 <TransmitData>
				if (column_plane[0] == 0x00)
 8005b4c:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d116      	bne.n	8005b82 <PlaneCube_Handle+0x1fe>
					for (int j = 0; j < 8; j++)
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	e007      	b.n	8005b6a <PlaneCube_Handle+0x1e6>
						column_plane[j] = 0xff;
 8005b5a:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4413      	add	r3, r2
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b07      	cmp	r3, #7
 8005b6e:	ddf4      	ble.n	8005b5a <PlaneCube_Handle+0x1d6>
					layer_plane = 0;
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
					way = 1;
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <PlaneCube_Handle+0x270>)
 8005b7e:	2202      	movs	r2, #2
 8005b80:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005b82:	f7fb ff69 	bl	8001a58 <HAL_GetTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005b8a:	6013      	str	r3, [r2, #0]
		break;
 8005b8c:	e072      	b.n	8005c74 <PlaneCube_Handle+0x2f0>
		if(layer_plane == 0)
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <PlaneCube_Handle+0x22e>
			layer_plane = 1;
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4819      	ldr	r0, [pc, #100]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005ba4:	f001 f8c0 	bl	8006d28 <TransmitData>
			timer = HAL_GetTick();
 8005ba8:	f7fb ff56 	bl	8001a58 <HAL_GetTick>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005bb0:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8005bb2:	f7fb ff51 	bl	8001a58 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <PlaneCube_Handle+0x278>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2264      	movs	r2, #100	; 0x64
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d359      	bcc.n	8005c78 <PlaneCube_Handle+0x2f4>
			if(way)
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01f      	beq.n	8005c0c <PlaneCube_Handle+0x288>
				layer_plane <<= 1;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005bd6:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480a      	ldr	r0, [pc, #40]	; (8005c08 <PlaneCube_Handle+0x284>)
 8005be0:	f001 f8a2 	bl	8006d28 <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <PlaneCube_Handle+0x274>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d139      	bne.n	8005c60 <PlaneCube_Handle+0x2dc>
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <PlaneCube_Handle+0x27c>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e035      	b.n	8005c60 <PlaneCube_Handle+0x2dc>
 8005bf4:	20000280 	.word	0x20000280
 8005bf8:	20000288 	.word	0x20000288
 8005bfc:	20000284 	.word	0x20000284
 8005c00:	20000281 	.word	0x20000281
 8005c04:	20000294 	.word	0x20000294
 8005c08:	2000028c 	.word	0x2000028c
				layer_plane >>= 1;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <PlaneCube_Handle+0x300>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <PlaneCube_Handle+0x300>)
 8005c16:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <PlaneCube_Handle+0x300>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	481a      	ldr	r0, [pc, #104]	; (8005c88 <PlaneCube_Handle+0x304>)
 8005c20:	f001 f882 	bl	8006d28 <TransmitData>
				if(layer_plane == 0x01)
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <PlaneCube_Handle+0x300>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d119      	bne.n	8005c60 <PlaneCube_Handle+0x2dc>
					for (int j = 0; j < 8; j++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e007      	b.n	8005c42 <PlaneCube_Handle+0x2be>
						column_plane[j] = 0;
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <PlaneCube_Handle+0x304>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	ddf4      	ble.n	8005c32 <PlaneCube_Handle+0x2ae>
					i = 0;
 8005c48:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <PlaneCube_Handle+0x308>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
					way = 1;
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <PlaneCube_Handle+0x30c>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <PlaneCube_Handle+0x310>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <PlaneCube_Handle+0x300>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005c60:	f7fb fefa 	bl	8001a58 <HAL_GetTick>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <PlaneCube_Handle+0x314>)
 8005c68:	6013      	str	r3, [r2, #0]
		break;
 8005c6a:	e005      	b.n	8005c78 <PlaneCube_Handle+0x2f4>
		break;
 8005c6c:	bf00      	nop
 8005c6e:	e004      	b.n	8005c7a <PlaneCube_Handle+0x2f6>
		break;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <PlaneCube_Handle+0x2f6>
		break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <PlaneCube_Handle+0x2f6>
		break;
 8005c78:	bf00      	nop
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000288 	.word	0x20000288
 8005c88:	2000028c 	.word	0x2000028c
 8005c8c:	20000294 	.word	0x20000294
 8005c90:	20000281 	.word	0x20000281
 8005c94:	20000280 	.word	0x20000280
 8005c98:	20000284 	.word	0x20000284

08005c9c <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8005ca2:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <PlaneCube_Set_State+0x4c>)
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	e007      	b.n	8005cbe <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8005cae:	4a0f      	ldr	r2, [pc, #60]	; (8005cec <PlaneCube_Set_State+0x50>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b07      	cmp	r3, #7
 8005cc2:	ddf4      	ble.n	8005cae <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <PlaneCube_Set_State+0x54>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
	way = 1;
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <PlaneCube_Set_State+0x58>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <PlaneCube_Set_State+0x5c>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <PlaneCube_Set_State+0x60>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000010 	.word	0x20000010
 8005cec:	2000028c 	.word	0x2000028c
 8005cf0:	20000294 	.word	0x20000294
 8005cf4:	20000281 	.word	0x20000281
 8005cf8:	20000288 	.word	0x20000288
 8005cfc:	20000280 	.word	0x20000280

08005d00 <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static uint8_t x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle(uint8_t rain_times)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	71fb      	strb	r3, [r7, #7]
	if (HAL_GetTick() - time_rain >= 50)
 8005d0a:	f7fb fea5 	bl	8001a58 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	4b26      	ldr	r3, [pc, #152]	; (8005dac <RandomRainCube_Handle+0xac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b31      	cmp	r3, #49	; 0x31
 8005d18:	d912      	bls.n	8005d40 <RandomRainCube_Handle+0x40>
	{
			if (z == 0) z = 7;
 8005d1a:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <RandomRainCube_Handle+0x2a>
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e005      	b.n	8005d36 <RandomRainCube_Handle+0x36>
			else z--;
 8005d2a:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d34:	701a      	strb	r2, [r3, #0]
			time_rain = HAL_GetTick();
 8005d36:	f7fb fe8f 	bl	8001a58 <HAL_GetTick>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <RandomRainCube_Handle+0xac>)
 8005d3e:	6013      	str	r3, [r2, #0]
	}

	for (uint8_t n = 0; n < rain_times; n++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e029      	b.n	8005d9a <RandomRainCube_Handle+0x9a>
	{
		if (z == 7)
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b07      	cmp	r3, #7
 8005d4c:	d119      	bne.n	8005d82 <RandomRainCube_Handle+0x82>
		{
			x = rand() % 8;
 8005d4e:	f001 f99f 	bl	8007090 <rand>
 8005d52:	4603      	mov	r3, r0
 8005d54:	425a      	negs	r2, r3
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	f002 0207 	and.w	r2, r2, #7
 8005d5e:	bf58      	it	pl
 8005d60:	4253      	negpl	r3, r2
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <RandomRainCube_Handle+0xb4>)
 8005d66:	701a      	strb	r2, [r3, #0]
			y = rand() % 8;
 8005d68:	f001 f992 	bl	8007090 <rand>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	425a      	negs	r2, r3
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	f002 0207 	and.w	r2, r2, #7
 8005d78:	bf58      	it	pl
 8005d7a:	4253      	negpl	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <RandomRainCube_Handle+0xb8>)
 8005d80:	701a      	strb	r2, [r3, #0]
		}

		DisplayLed(x, y, z);
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <RandomRainCube_Handle+0xb4>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <RandomRainCube_Handle+0xb8>)
 8005d88:	7811      	ldrb	r1, [r2, #0]
 8005d8a:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <RandomRainCube_Handle+0xb0>)
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fb48 	bl	8005424 <DisplayLed>
	for (uint8_t n = 0; n < rain_times; n++)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3d1      	bcc.n	8005d46 <RandomRainCube_Handle+0x46>
	}

}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	2000029c 	.word	0x2000029c
 8005db0:	2000029a 	.word	0x2000029a
 8005db4:	20000298 	.word	0x20000298
 8005db8:	20000299 	.word	0x20000299

08005dbc <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 8005dc0:	f7fb fe4a 	bl	8001a58 <HAL_GetTick>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f934 	bl	8007034 <srand>
	z = 7;
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <RandomRainCube_Set_State+0x20>)
 8005dce:	2207      	movs	r2, #7
 8005dd0:	701a      	strb	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <RandomRainCube_Set_State+0x24>)
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	701a      	strb	r2, [r3, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	2000029a 	.word	0x2000029a
 8005de0:	20000010 	.word	0x20000010
 8005de4:	00000000 	.word	0x00000000

08005de8 <SidewavesEffect_Handle>:
float xo; // Tọa độ điểm gốc O
float yo;
float r;

void SidewavesEffect_Handle()
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8005df0:	4b9b      	ldr	r3, [pc, #620]	; (8006060 <SidewavesEffect_Handle+0x278>)
 8005df2:	4a9c      	ldr	r2, [pc, #624]	; (8006064 <SidewavesEffect_Handle+0x27c>)
 8005df4:	601a      	str	r2, [r3, #0]
	T = 1000; // Chu kỳ
 8005df6:	4b9c      	ldr	r3, [pc, #624]	; (8006068 <SidewavesEffect_Handle+0x280>)
 8005df8:	4a9c      	ldr	r2, [pc, #624]	; (800606c <SidewavesEffect_Handle+0x284>)
 8005dfa:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8005dfc:	4b9c      	ldr	r3, [pc, #624]	; (8006070 <SidewavesEffect_Handle+0x288>)
 8005dfe:	4a9d      	ldr	r2, [pc, #628]	; (8006074 <SidewavesEffect_Handle+0x28c>)
 8005e00:	601a      	str	r2, [r3, #0]
	uint32_t t = HAL_GetTick(); // Lấy thời gian
 8005e02:	f7fb fe29 	bl	8001a58 <HAL_GetTick>
 8005e06:	60b8      	str	r0, [r7, #8]
	xo = ro*cos(2*PI*t/To) + 3.5; // Cho điểm O quay
 8005e08:	4b98      	ldr	r3, [pc, #608]	; (800606c <SidewavesEffect_Handle+0x284>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fa fb04 	bl	8000418 <__aeabi_f2d>
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	68b8      	ldr	r0, [r7, #8]
 8005e16:	f7fa fadd 	bl	80003d4 <__aeabi_ui2d>
 8005e1a:	a38f      	add	r3, pc, #572	; (adr r3, 8006058 <SidewavesEffect_Handle+0x270>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa fb52 	bl	80004c8 <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4690      	mov	r8, r2
 8005e2a:	4699      	mov	r9, r3
 8005e2c:	4b92      	ldr	r3, [pc, #584]	; (8006078 <SidewavesEffect_Handle+0x290>)
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa faf2 	bl	8000418 <__aeabi_f2d>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4640      	mov	r0, r8
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	f7fa fc6e 	bl	800071c <__aeabi_ddiv>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	f002 f960 	bl	800810c <cos>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4620      	mov	r0, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7fa fb38 	bl	80004c8 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	4b85      	ldr	r3, [pc, #532]	; (800607c <SidewavesEffect_Handle+0x294>)
 8005e66:	f7fa f979 	bl	800015c <__adddf3>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fa fe21 	bl	8000ab8 <__aeabi_d2f>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4a81      	ldr	r2, [pc, #516]	; (8006080 <SidewavesEffect_Handle+0x298>)
 8005e7a:	6013      	str	r3, [r2, #0]
	yo = ro*sin(2*PI*t/To) + 3.5;
 8005e7c:	4b7b      	ldr	r3, [pc, #492]	; (800606c <SidewavesEffect_Handle+0x284>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fa faca 	bl	8000418 <__aeabi_f2d>
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	68b8      	ldr	r0, [r7, #8]
 8005e8a:	f7fa faa3 	bl	80003d4 <__aeabi_ui2d>
 8005e8e:	a372      	add	r3, pc, #456	; (adr r3, 8006058 <SidewavesEffect_Handle+0x270>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fb18 	bl	80004c8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4690      	mov	r8, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	4b75      	ldr	r3, [pc, #468]	; (8006078 <SidewavesEffect_Handle+0x290>)
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fa fab8 	bl	8000418 <__aeabi_f2d>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4640      	mov	r0, r8
 8005eae:	4649      	mov	r1, r9
 8005eb0:	f7fa fc34 	bl	800071c <__aeabi_ddiv>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f002 f96c 	bl	8008198 <sin>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fa fafe 	bl	80004c8 <__aeabi_dmul>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	4b68      	ldr	r3, [pc, #416]	; (800607c <SidewavesEffect_Handle+0x294>)
 8005eda:	f7fa f93f 	bl	800015c <__adddf3>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f7fa fde7 	bl	8000ab8 <__aeabi_d2f>
 8005eea:	4603      	mov	r3, r0
 8005eec:	4a65      	ldr	r2, [pc, #404]	; (8006084 <SidewavesEffect_Handle+0x29c>)
 8005eee:	6013      	str	r3, [r2, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e0a3      	b.n	800603e <SidewavesEffect_Handle+0x256>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73bb      	strb	r3, [r7, #14]
 8005efa:	e099      	b.n	8006030 <SidewavesEffect_Handle+0x248>
	    {
//	        r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt(pow(x - xo, 2) + pow(y - yo, 2))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 8005efc:	4b5c      	ldr	r3, [pc, #368]	; (8006070 <SidewavesEffect_Handle+0x288>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fa89 	bl	8000418 <__aeabi_f2d>
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	68b8      	ldr	r0, [r7, #8]
 8005f0c:	f7fa fa62 	bl	80003d4 <__aeabi_ui2d>
 8005f10:	a351      	add	r3, pc, #324	; (adr r3, 8006058 <SidewavesEffect_Handle+0x270>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fad7 	bl	80004c8 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4690      	mov	r8, r2
 8005f20:	4699      	mov	r9, r3
 8005f22:	4b51      	ldr	r3, [pc, #324]	; (8006068 <SidewavesEffect_Handle+0x280>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fa fa76 	bl	8000418 <__aeabi_f2d>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa fbf2 	bl	800071c <__aeabi_ddiv>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4692      	mov	sl, r2
 8005f3e:	469b      	mov	fp, r3
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fa fec2 	bl	8000ccc <__aeabi_i2f>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b4d      	ldr	r3, [pc, #308]	; (8006080 <SidewavesEffect_Handle+0x298>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fa fe05 	bl	8000b60 <__aeabi_fsub>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fa fa5d 	bl	8000418 <__aeabi_f2d>
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f66:	f002 f95d 	bl	8008224 <pow>
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	4689      	mov	r9, r1
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa feab 	bl	8000ccc <__aeabi_i2f>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b42      	ldr	r3, [pc, #264]	; (8006084 <SidewavesEffect_Handle+0x29c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fa fdee 	bl	8000b60 <__aeabi_fsub>
 8005f84:	4603      	mov	r3, r0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fa46 	bl	8000418 <__aeabi_f2d>
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f94:	f002 f946 	bl	8008224 <pow>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa f8dc 	bl	800015c <__adddf3>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f002 f9a2 	bl	80082f4 <sqrt>
 8005fb0:	a329      	add	r3, pc, #164	; (adr r3, 8006058 <SidewavesEffect_Handle+0x270>)
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f7fa fa87 	bl	80004c8 <__aeabi_dmul>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4690      	mov	r8, r2
 8005fc0:	4699      	mov	r9, r3
 8005fc2:	4b27      	ldr	r3, [pc, #156]	; (8006060 <SidewavesEffect_Handle+0x278>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fa fa26 	bl	8000418 <__aeabi_f2d>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa fba2 	bl	800071c <__aeabi_ddiv>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa f8ba 	bl	8000158 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	f002 f88e 	bl	800810c <cos>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	f7fa fa66 	bl	80004c8 <__aeabi_dmul>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4610      	mov	r0, r2
 8006002:	4619      	mov	r1, r3
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <SidewavesEffect_Handle+0x2a0>)
 800600a:	f7fa f8a7 	bl	800015c <__adddf3>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	f7fa fd2f 	bl	8000a78 <__aeabi_d2uiz>
 800601a:	4603      	mov	r3, r0
 800601c:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 800601e:	79fa      	ldrb	r2, [r7, #7]
 8006020:	7bf9      	ldrb	r1, [r7, #15]
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff f9fd 	bl	8005424 <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	3301      	adds	r3, #1
 800602e:	73bb      	strb	r3, [r7, #14]
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b07      	cmp	r3, #7
 8006034:	f67f af62 	bls.w	8005efc <SidewavesEffect_Handle+0x114>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	3301      	adds	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b07      	cmp	r3, #7
 8006042:	f67f af58 	bls.w	8005ef6 <SidewavesEffect_Handle+0x10e>
	    }
	}
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	f3af 8000 	nop.w
 8006058:	51eb851f 	.word	0x51eb851f
 800605c:	40191eb8 	.word	0x40191eb8
 8006060:	200002a0 	.word	0x200002a0
 8006064:	40e00000 	.word	0x40e00000
 8006068:	200002a4 	.word	0x200002a4
 800606c:	447a0000 	.word	0x447a0000
 8006070:	200002a8 	.word	0x200002a8
 8006074:	40600000 	.word	0x40600000
 8006078:	45fa0000 	.word	0x45fa0000
 800607c:	400c0000 	.word	0x400c0000
 8006080:	200002ac 	.word	0x200002ac
 8006084:	200002b0 	.word	0x200002b0
 8006088:	40100000 	.word	0x40100000

0800608c <SidewavesEffect_Set_State>:

void SidewavesEffect_Set_State()
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <SidewavesEffect_Set_State+0x28>)
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <SidewavesEffect_Set_State+0x2c>)
 8006094:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <SidewavesEffect_Set_State+0x30>)
 8006098:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800609c:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <SidewavesEffect_Set_State+0x34>)
 80060a0:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <SidewavesEffect_Set_State+0x38>)
 80060a2:	601a      	str	r2, [r3, #0]
	currentEffect = SIDE_WAVES_EFFECT;
 80060a4:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <SidewavesEffect_Set_State+0x3c>)
 80060a6:	220a      	movs	r2, #10
 80060a8:	701a      	strb	r2, [r3, #0]
	clearCube();
 80060aa:	f7fe fb42 	bl	8004732 <clearCube>
}
 80060ae:	bf00      	nop
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200002a0 	.word	0x200002a0
 80060b8:	40e00000 	.word	0x40e00000
 80060bc:	200002a4 	.word	0x200002a4
 80060c0:	200002a8 	.word	0x200002a8
 80060c4:	40600000 	.word	0x40600000
 80060c8:	20000010 	.word	0x20000010

080060cc <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
	switch (directRotate) {
 80060d0:	4b22      	ldr	r3, [pc, #136]	; (800615c <SpiralCube_Handle+0x90>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01f      	beq.n	8006118 <SpiralCube_Handle+0x4c>
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d13b      	bne.n	8006154 <SpiralCube_Handle+0x88>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 80060dc:	4b20      	ldr	r3, [pc, #128]	; (8006160 <SpiralCube_Handle+0x94>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d817      	bhi.n	8006114 <SpiralCube_Handle+0x48>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <SpiralCube_Handle+0x20>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	08006103 	.word	0x08006103
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800610f 	.word	0x0800610f
			{
				case ROLL_BIGGEST:
					RollBiggestCounterClockWise_Handle();
 80060fc:	f000 f832 	bl	8006164 <RollBiggestCounterClockWise_Handle>
					break;
 8006100:	e009      	b.n	8006116 <SpiralCube_Handle+0x4a>
				case ROLL_BIGGER:
					RollBiggerCounterClockWise_Handle();
 8006102:	f000 f8ef 	bl	80062e4 <RollBiggerCounterClockWise_Handle>
					break;
 8006106:	e006      	b.n	8006116 <SpiralCube_Handle+0x4a>
				case ROLL_MEDIUM:
					RollMediumCounterClockWise_Handle();
 8006108:	f000 f9ac 	bl	8006464 <RollMediumCounterClockWise_Handle>
					break;
 800610c:	e003      	b.n	8006116 <SpiralCube_Handle+0x4a>
				case ROLL_SMALL:
					RollSmallCounterClockWise_Handle();
 800610e:	f000 fa69 	bl	80065e4 <RollSmallCounterClockWise_Handle>
					break;
 8006112:	e000      	b.n	8006116 <SpiralCube_Handle+0x4a>
				default:
					break;
 8006114:	bf00      	nop
			}
			break;
 8006116:	e01e      	b.n	8006156 <SpiralCube_Handle+0x8a>
		case CLOCKWISE:
			switch (rollSize)
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <SpiralCube_Handle+0x94>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d817      	bhi.n	8006150 <SpiralCube_Handle+0x84>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <SpiralCube_Handle+0x5c>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006139 	.word	0x08006139
 800612c:	0800613f 	.word	0x0800613f
 8006130:	08006145 	.word	0x08006145
 8006134:	0800614b 	.word	0x0800614b
			{
				case ROLL_BIGGEST:
					RollBiggestClockWise_Handle();
 8006138:	f000 faf2 	bl	8006720 <RollBiggestClockWise_Handle>
					break;
 800613c:	e009      	b.n	8006152 <SpiralCube_Handle+0x86>
				case ROLL_BIGGER:
					RollBiggerClockWise_Handle();
 800613e:	f000 fbaf 	bl	80068a0 <RollBiggerClockWise_Handle>
					break;
 8006142:	e006      	b.n	8006152 <SpiralCube_Handle+0x86>
				case ROLL_MEDIUM:
					RollMediumClockWise_Handle();
 8006144:	f000 fc6c 	bl	8006a20 <RollMediumClockWise_Handle>
					break;
 8006148:	e003      	b.n	8006152 <SpiralCube_Handle+0x86>
				case ROLL_SMALL:
					RollSmallClockWise_Handle();
 800614a:	f000 fd29 	bl	8006ba0 <RollSmallClockWise_Handle>
					break;
 800614e:	e000      	b.n	8006152 <SpiralCube_Handle+0x86>
				default:
					break;
 8006150:	bf00      	nop
			}
			break;
 8006152:	e000      	b.n	8006156 <SpiralCube_Handle+0x8a>
		default:
			break;
 8006154:	bf00      	nop
	}
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	200002b6 	.word	0x200002b6
 8006160:	200002b4 	.word	0x200002b4

08006164 <RollBiggestCounterClockWise_Handle>:

void RollBiggestCounterClockWise_Handle()
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8006168:	4b59      	ldr	r3, [pc, #356]	; (80062d0 <RollBiggestCounterClockWise_Handle+0x16c>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b03      	cmp	r3, #3
 800616e:	f200 80a3 	bhi.w	80062b8 <RollBiggestCounterClockWise_Handle+0x154>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <RollBiggestCounterClockWise_Handle+0x14>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	080061d5 	.word	0x080061d5
 8006180:	0800621f 	.word	0x0800621f
 8006184:	08006269 	.word	0x08006269
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006188:	f7fb fc66 	bl	8001a58 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	223c      	movs	r2, #60	; 0x3c
 8006196:	4293      	cmp	r3, r2
 8006198:	f0c0 8090 	bcc.w	80062bc <RollBiggestCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800619c:	4b4e      	ldr	r3, [pc, #312]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	4a4e      	ldr	r2, [pc, #312]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 80061a2:	7811      	ldrb	r1, [r2, #0]
 80061a4:	2208      	movs	r2, #8
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f93c 	bl	8005424 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	d103      	bne.n	80061bc <RollBiggestCounterClockWise_Handle+0x58>
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <RollBiggestCounterClockWise_Handle+0x16c>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e005      	b.n	80061c8 <RollBiggestCounterClockWise_Handle+0x64>
				else y++;
 80061bc:	4b47      	ldr	r3, [pc, #284]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	4b45      	ldr	r3, [pc, #276]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 80061c6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80061c8:	f7fb fc46 	bl	8001a58 <HAL_GetTick>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4a41      	ldr	r2, [pc, #260]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 80061d0:	6013      	str	r3, [r2, #0]
			}
			break;
 80061d2:	e073      	b.n	80062bc <RollBiggestCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80061d4:	f7fb fc40 	bl	8001a58 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	223c      	movs	r2, #60	; 0x3c
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d36c      	bcc.n	80062c0 <RollBiggestCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80061e6:	4b3c      	ldr	r3, [pc, #240]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4a3c      	ldr	r2, [pc, #240]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 80061ec:	7811      	ldrb	r1, [r2, #0]
 80061ee:	2208      	movs	r2, #8
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff f917 	bl	8005424 <DisplayLed>
				if (x == 7) axisDirection = Y_AXIS_2;
 80061f6:	4b38      	ldr	r3, [pc, #224]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	d103      	bne.n	8006206 <RollBiggestCounterClockWise_Handle+0xa2>
 80061fe:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <RollBiggestCounterClockWise_Handle+0x16c>)
 8006200:	2202      	movs	r2, #2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e005      	b.n	8006212 <RollBiggestCounterClockWise_Handle+0xae>
				else x++;
 8006206:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b32      	ldr	r3, [pc, #200]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 8006210:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006212:	f7fb fc21 	bl	8001a58 <HAL_GetTick>
 8006216:	4603      	mov	r3, r0
 8006218:	4a2e      	ldr	r2, [pc, #184]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 800621a:	6013      	str	r3, [r2, #0]
			}
			break;
 800621c:	e050      	b.n	80062c0 <RollBiggestCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800621e:	f7fb fc1b 	bl	8001a58 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	223c      	movs	r2, #60	; 0x3c
 800622c:	4293      	cmp	r3, r2
 800622e:	d349      	bcc.n	80062c4 <RollBiggestCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006230:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	4a29      	ldr	r2, [pc, #164]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 8006236:	7811      	ldrb	r1, [r2, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f8f2 	bl	8005424 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 8006240:	4b26      	ldr	r3, [pc, #152]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <RollBiggestCounterClockWise_Handle+0xec>
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <RollBiggestCounterClockWise_Handle+0x16c>)
 800624a:	2203      	movs	r2, #3
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e005      	b.n	800625c <RollBiggestCounterClockWise_Handle+0xf8>
				else y--;
 8006250:	4b22      	ldr	r3, [pc, #136]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 800625a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800625c:	f7fb fbfc 	bl	8001a58 <HAL_GetTick>
 8006260:	4603      	mov	r3, r0
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 8006264:	6013      	str	r3, [r2, #0]
			}
			break;
 8006266:	e02d      	b.n	80062c4 <RollBiggestCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006268:	f7fb fbf6 	bl	8001a58 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	223c      	movs	r2, #60	; 0x3c
 8006276:	4293      	cmp	r3, r2
 8006278:	d326      	bcc.n	80062c8 <RollBiggestCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	4a17      	ldr	r2, [pc, #92]	; (80062dc <RollBiggestCounterClockWise_Handle+0x178>)
 8006280:	7811      	ldrb	r1, [r2, #0]
 8006282:	2208      	movs	r2, #8
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f8cd 	bl	8005424 <DisplayLed>
				if (x == 1)
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d106      	bne.n	80062a0 <RollBiggestCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <RollBiggestCounterClockWise_Handle+0x16c>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <RollBiggestCounterClockWise_Handle+0x17c>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e005      	b.n	80062ac <RollBiggestCounterClockWise_Handle+0x148>
				}
				else x--;
 80062a0:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <RollBiggestCounterClockWise_Handle+0x174>)
 80062aa:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80062ac:	f7fb fbd4 	bl	8001a58 <HAL_GetTick>
 80062b0:	4603      	mov	r3, r0
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <RollBiggestCounterClockWise_Handle+0x170>)
 80062b4:	6013      	str	r3, [r2, #0]
			}
			break;
 80062b6:	e007      	b.n	80062c8 <RollBiggestCounterClockWise_Handle+0x164>
		default:
			break;
 80062b8:	bf00      	nop
 80062ba:	e006      	b.n	80062ca <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80062bc:	bf00      	nop
 80062be:	e004      	b.n	80062ca <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80062c0:	bf00      	nop
 80062c2:	e002      	b.n	80062ca <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80062c8:	bf00      	nop
	}
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200002b5 	.word	0x200002b5
 80062d4:	200002bc 	.word	0x200002bc
 80062d8:	200002b7 	.word	0x200002b7
 80062dc:	200002b8 	.word	0x200002b8
 80062e0:	200002b4 	.word	0x200002b4

080062e4 <RollBiggerCounterClockWise_Handle>:

void RollBiggerCounterClockWise_Handle()
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
	switch (axisDirection)
 80062e8:	4b59      	ldr	r3, [pc, #356]	; (8006450 <RollBiggerCounterClockWise_Handle+0x16c>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	f200 80a3 	bhi.w	8006438 <RollBiggerCounterClockWise_Handle+0x154>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <RollBiggerCounterClockWise_Handle+0x14>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	08006355 	.word	0x08006355
 8006300:	0800639f 	.word	0x0800639f
 8006304:	080063e9 	.word	0x080063e9
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006308:	f7fb fba6 	bl	8001a58 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	4b51      	ldr	r3, [pc, #324]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	223c      	movs	r2, #60	; 0x3c
 8006316:	4293      	cmp	r3, r2
 8006318:	f0c0 8090 	bcc.w	800643c <RollBiggerCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800631c:	4b4e      	ldr	r3, [pc, #312]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4a4e      	ldr	r2, [pc, #312]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 8006322:	7811      	ldrb	r1, [r2, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f87c 	bl	8005424 <DisplayLed>
				if (y  == 6) axisDirection = X_AXIS_1;
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b06      	cmp	r3, #6
 8006332:	d103      	bne.n	800633c <RollBiggerCounterClockWise_Handle+0x58>
 8006334:	4b46      	ldr	r3, [pc, #280]	; (8006450 <RollBiggerCounterClockWise_Handle+0x16c>)
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e005      	b.n	8006348 <RollBiggerCounterClockWise_Handle+0x64>
				else y++;
 800633c:	4b47      	ldr	r3, [pc, #284]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b45      	ldr	r3, [pc, #276]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 8006346:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006348:	f7fb fb86 	bl	8001a58 <HAL_GetTick>
 800634c:	4603      	mov	r3, r0
 800634e:	4a41      	ldr	r2, [pc, #260]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 8006350:	6013      	str	r3, [r2, #0]
			}
			break;
 8006352:	e073      	b.n	800643c <RollBiggerCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006354:	f7fb fb80 	bl	8001a58 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	223c      	movs	r2, #60	; 0x3c
 8006362:	4293      	cmp	r3, r2
 8006364:	d36c      	bcc.n	8006440 <RollBiggerCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006366:	4b3c      	ldr	r3, [pc, #240]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4a3c      	ldr	r2, [pc, #240]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 800636c:	7811      	ldrb	r1, [r2, #0]
 800636e:	2208      	movs	r2, #8
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff f857 	bl	8005424 <DisplayLed>
				if (x  == 6) axisDirection = Y_AXIS_2;
 8006376:	4b38      	ldr	r3, [pc, #224]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b06      	cmp	r3, #6
 800637c:	d103      	bne.n	8006386 <RollBiggerCounterClockWise_Handle+0xa2>
 800637e:	4b34      	ldr	r3, [pc, #208]	; (8006450 <RollBiggerCounterClockWise_Handle+0x16c>)
 8006380:	2202      	movs	r2, #2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e005      	b.n	8006392 <RollBiggerCounterClockWise_Handle+0xae>
				else x++;
 8006386:	4b34      	ldr	r3, [pc, #208]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4b32      	ldr	r3, [pc, #200]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 8006390:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006392:	f7fb fb61 	bl	8001a58 <HAL_GetTick>
 8006396:	4603      	mov	r3, r0
 8006398:	4a2e      	ldr	r2, [pc, #184]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 800639a:	6013      	str	r3, [r2, #0]
			}
			break;
 800639c:	e050      	b.n	8006440 <RollBiggerCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800639e:	f7fb fb5b 	bl	8001a58 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b2b      	ldr	r3, [pc, #172]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	223c      	movs	r2, #60	; 0x3c
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d349      	bcc.n	8006444 <RollBiggerCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80063b0:	4b29      	ldr	r3, [pc, #164]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4a29      	ldr	r2, [pc, #164]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 80063b6:	7811      	ldrb	r1, [r2, #0]
 80063b8:	2208      	movs	r2, #8
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff f832 	bl	8005424 <DisplayLed>
				if (y  == 1) axisDirection = X_AXIS_2;
 80063c0:	4b26      	ldr	r3, [pc, #152]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d103      	bne.n	80063d0 <RollBiggerCounterClockWise_Handle+0xec>
 80063c8:	4b21      	ldr	r3, [pc, #132]	; (8006450 <RollBiggerCounterClockWise_Handle+0x16c>)
 80063ca:	2203      	movs	r2, #3
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e005      	b.n	80063dc <RollBiggerCounterClockWise_Handle+0xf8>
				else y--;
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	4b20      	ldr	r3, [pc, #128]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 80063da:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80063dc:	f7fb fb3c 	bl	8001a58 <HAL_GetTick>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 80063e4:	6013      	str	r3, [r2, #0]
			}
			break;
 80063e6:	e02d      	b.n	8006444 <RollBiggerCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80063e8:	f7fb fb36 	bl	8001a58 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b19      	ldr	r3, [pc, #100]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	223c      	movs	r2, #60	; 0x3c
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d326      	bcc.n	8006448 <RollBiggerCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80063fa:	4b17      	ldr	r3, [pc, #92]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <RollBiggerCounterClockWise_Handle+0x178>)
 8006400:	7811      	ldrb	r1, [r2, #0]
 8006402:	2208      	movs	r2, #8
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff f80d 	bl	8005424 <DisplayLed>
				if (x  == 2)
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d106      	bne.n	8006420 <RollBiggerCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <RollBiggerCounterClockWise_Handle+0x16c>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <RollBiggerCounterClockWise_Handle+0x17c>)
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e005      	b.n	800642c <RollBiggerCounterClockWise_Handle+0x148>
				}
				else x--;
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	3b01      	subs	r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <RollBiggerCounterClockWise_Handle+0x174>)
 800642a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800642c:	f7fb fb14 	bl	8001a58 <HAL_GetTick>
 8006430:	4603      	mov	r3, r0
 8006432:	4a08      	ldr	r2, [pc, #32]	; (8006454 <RollBiggerCounterClockWise_Handle+0x170>)
 8006434:	6013      	str	r3, [r2, #0]
			}
			break;
 8006436:	e007      	b.n	8006448 <RollBiggerCounterClockWise_Handle+0x164>
		default:
			break;
 8006438:	bf00      	nop
 800643a:	e006      	b.n	800644a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 800643c:	bf00      	nop
 800643e:	e004      	b.n	800644a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8006448:	bf00      	nop
	}
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200002b5 	.word	0x200002b5
 8006454:	200002bc 	.word	0x200002bc
 8006458:	200002b7 	.word	0x200002b7
 800645c:	200002b8 	.word	0x200002b8
 8006460:	200002b4 	.word	0x200002b4

08006464 <RollMediumCounterClockWise_Handle>:

void RollMediumCounterClockWise_Handle()
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006468:	4b59      	ldr	r3, [pc, #356]	; (80065d0 <RollMediumCounterClockWise_Handle+0x16c>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b03      	cmp	r3, #3
 800646e:	f200 80a3 	bhi.w	80065b8 <RollMediumCounterClockWise_Handle+0x154>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <RollMediumCounterClockWise_Handle+0x14>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006489 	.word	0x08006489
 800647c:	080064d5 	.word	0x080064d5
 8006480:	0800651f 	.word	0x0800651f
 8006484:	08006569 	.word	0x08006569
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006488:	f7fb fae6 	bl	8001a58 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	4b51      	ldr	r3, [pc, #324]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	223c      	movs	r2, #60	; 0x3c
 8006496:	4293      	cmp	r3, r2
 8006498:	f0c0 8090 	bcc.w	80065bc <RollMediumCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800649c:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4a4e      	ldr	r2, [pc, #312]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 80064a2:	7811      	ldrb	r1, [r2, #0]
 80064a4:	2208      	movs	r2, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe ffbc 	bl	8005424 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 80064ac:	4b4b      	ldr	r3, [pc, #300]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d103      	bne.n	80064bc <RollMediumCounterClockWise_Handle+0x58>
 80064b4:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <RollMediumCounterClockWise_Handle+0x16c>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	e005      	b.n	80064c8 <RollMediumCounterClockWise_Handle+0x64>
				else y++;
 80064bc:	4b47      	ldr	r3, [pc, #284]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	4b45      	ldr	r3, [pc, #276]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 80064c6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80064c8:	f7fb fac6 	bl	8001a58 <HAL_GetTick>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4a41      	ldr	r2, [pc, #260]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 80064d0:	6013      	str	r3, [r2, #0]
			}
			break;
 80064d2:	e073      	b.n	80065bc <RollMediumCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80064d4:	f7fb fac0 	bl	8001a58 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	4b3e      	ldr	r3, [pc, #248]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	223c      	movs	r2, #60	; 0x3c
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d36c      	bcc.n	80065c0 <RollMediumCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80064e6:	4b3c      	ldr	r3, [pc, #240]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 80064ec:	7811      	ldrb	r1, [r2, #0]
 80064ee:	2208      	movs	r2, #8
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe ff97 	bl	8005424 <DisplayLed>
				if (x  == 5) axisDirection = Y_AXIS_2;
 80064f6:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d103      	bne.n	8006506 <RollMediumCounterClockWise_Handle+0xa2>
 80064fe:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <RollMediumCounterClockWise_Handle+0x16c>)
 8006500:	2202      	movs	r2, #2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e005      	b.n	8006512 <RollMediumCounterClockWise_Handle+0xae>
				else x++;
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4b32      	ldr	r3, [pc, #200]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 8006510:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006512:	f7fb faa1 	bl	8001a58 <HAL_GetTick>
 8006516:	4603      	mov	r3, r0
 8006518:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 800651a:	6013      	str	r3, [r2, #0]
			}
			break;
 800651c:	e050      	b.n	80065c0 <RollMediumCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800651e:	f7fb fa9b 	bl	8001a58 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	223c      	movs	r2, #60	; 0x3c
 800652c:	4293      	cmp	r3, r2
 800652e:	d349      	bcc.n	80065c4 <RollMediumCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006530:	4b29      	ldr	r3, [pc, #164]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 8006536:	7811      	ldrb	r1, [r2, #0]
 8006538:	2208      	movs	r2, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe ff72 	bl	8005424 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8006540:	4b26      	ldr	r3, [pc, #152]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d103      	bne.n	8006550 <RollMediumCounterClockWise_Handle+0xec>
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <RollMediumCounterClockWise_Handle+0x16c>)
 800654a:	2203      	movs	r2, #3
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e005      	b.n	800655c <RollMediumCounterClockWise_Handle+0xf8>
				else y--;
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	3b01      	subs	r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	4b20      	ldr	r3, [pc, #128]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 800655a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800655c:	f7fb fa7c 	bl	8001a58 <HAL_GetTick>
 8006560:	4603      	mov	r3, r0
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 8006564:	6013      	str	r3, [r2, #0]
			}
			break;
 8006566:	e02d      	b.n	80065c4 <RollMediumCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006568:	f7fb fa76 	bl	8001a58 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	223c      	movs	r2, #60	; 0x3c
 8006576:	4293      	cmp	r3, r2
 8006578:	d326      	bcc.n	80065c8 <RollMediumCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800657a:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	4a17      	ldr	r2, [pc, #92]	; (80065dc <RollMediumCounterClockWise_Handle+0x178>)
 8006580:	7811      	ldrb	r1, [r2, #0]
 8006582:	2208      	movs	r2, #8
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe ff4d 	bl	8005424 <DisplayLed>
				if (x  == 3)
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d106      	bne.n	80065a0 <RollMediumCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <RollMediumCounterClockWise_Handle+0x16c>)
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <RollMediumCounterClockWise_Handle+0x17c>)
 800659a:	2203      	movs	r2, #3
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	e005      	b.n	80065ac <RollMediumCounterClockWise_Handle+0x148>
				}
				else x--;
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <RollMediumCounterClockWise_Handle+0x174>)
 80065aa:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80065ac:	f7fb fa54 	bl	8001a58 <HAL_GetTick>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <RollMediumCounterClockWise_Handle+0x170>)
 80065b4:	6013      	str	r3, [r2, #0]
			}
			break;
 80065b6:	e007      	b.n	80065c8 <RollMediumCounterClockWise_Handle+0x164>

		default:
			break;
 80065b8:	bf00      	nop
 80065ba:	e006      	b.n	80065ca <RollMediumCounterClockWise_Handle+0x166>
			break;
 80065bc:	bf00      	nop
 80065be:	e004      	b.n	80065ca <RollMediumCounterClockWise_Handle+0x166>
			break;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <RollMediumCounterClockWise_Handle+0x166>
			break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <RollMediumCounterClockWise_Handle+0x166>
			break;
 80065c8:	bf00      	nop
	}
}
 80065ca:	bf00      	nop
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200002b5 	.word	0x200002b5
 80065d4:	200002bc 	.word	0x200002bc
 80065d8:	200002b7 	.word	0x200002b7
 80065dc:	200002b8 	.word	0x200002b8
 80065e0:	200002b4 	.word	0x200002b4

080065e4 <RollSmallCounterClockWise_Handle>:

void RollSmallCounterClockWise_Handle()
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80065e8:	4b47      	ldr	r3, [pc, #284]	; (8006708 <RollSmallCounterClockWise_Handle+0x124>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d050      	beq.n	8006692 <RollSmallCounterClockWise_Handle+0xae>
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	dc7f      	bgt.n	80066f4 <RollSmallCounterClockWise_Handle+0x110>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <RollSmallCounterClockWise_Handle+0x1a>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d025      	beq.n	8006648 <RollSmallCounterClockWise_Handle+0x64>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 80065fc:	e07a      	b.n	80066f4 <RollSmallCounterClockWise_Handle+0x110>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80065fe:	f7fb fa2b 	bl	8001a58 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	4b41      	ldr	r3, [pc, #260]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	223c      	movs	r2, #60	; 0x3c
 800660c:	4293      	cmp	r3, r2
 800660e:	d373      	bcc.n	80066f8 <RollSmallCounterClockWise_Handle+0x114>
				DisplayLed(x, y, z);
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 8006616:	7811      	ldrb	r1, [r2, #0]
 8006618:	2208      	movs	r2, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe ff02 	bl	8005424 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8006620:	4b3c      	ldr	r3, [pc, #240]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d103      	bne.n	8006630 <RollSmallCounterClockWise_Handle+0x4c>
 8006628:	4b37      	ldr	r3, [pc, #220]	; (8006708 <RollSmallCounterClockWise_Handle+0x124>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e005      	b.n	800663c <RollSmallCounterClockWise_Handle+0x58>
				else y++ ;
 8006630:	4b38      	ldr	r3, [pc, #224]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b36      	ldr	r3, [pc, #216]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 800663a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800663c:	f7fb fa0c 	bl	8001a58 <HAL_GetTick>
 8006640:	4603      	mov	r3, r0
 8006642:	4a32      	ldr	r2, [pc, #200]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 8006644:	6013      	str	r3, [r2, #0]
			break;
 8006646:	e057      	b.n	80066f8 <RollSmallCounterClockWise_Handle+0x114>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006648:	f7fb fa06 	bl	8001a58 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	223c      	movs	r2, #60	; 0x3c
 8006656:	4293      	cmp	r3, r2
 8006658:	d350      	bcc.n	80066fc <RollSmallCounterClockWise_Handle+0x118>
				DisplayLed(x, y, z);
 800665a:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 8006660:	7811      	ldrb	r1, [r2, #0]
 8006662:	2208      	movs	r2, #8
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fedd 	bl	8005424 <DisplayLed>
				if (x  == 4) axisDirection = Y_AXIS_2;
 800666a:	4b29      	ldr	r3, [pc, #164]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d103      	bne.n	800667a <RollSmallCounterClockWise_Handle+0x96>
 8006672:	4b25      	ldr	r3, [pc, #148]	; (8006708 <RollSmallCounterClockWise_Handle+0x124>)
 8006674:	2202      	movs	r2, #2
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e005      	b.n	8006686 <RollSmallCounterClockWise_Handle+0xa2>
				else x++;
 800667a:	4b25      	ldr	r3, [pc, #148]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	b2da      	uxtb	r2, r3
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 8006684:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006686:	f7fb f9e7 	bl	8001a58 <HAL_GetTick>
 800668a:	4603      	mov	r3, r0
 800668c:	4a1f      	ldr	r2, [pc, #124]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 800668e:	6013      	str	r3, [r2, #0]
			break;
 8006690:	e034      	b.n	80066fc <RollSmallCounterClockWise_Handle+0x118>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006692:	f7fb f9e1 	bl	8001a58 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	223c      	movs	r2, #60	; 0x3c
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d32d      	bcc.n	8006700 <RollSmallCounterClockWise_Handle+0x11c>
				DisplayLed(x, y, z);
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 80066aa:	7811      	ldrb	r1, [r2, #0]
 80066ac:	2208      	movs	r2, #8
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe feb8 	bl	8005424 <DisplayLed>
				if (y == 3)
 80066b4:	4b17      	ldr	r3, [pc, #92]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d10f      	bne.n	80066dc <RollSmallCounterClockWise_Handle+0xf8>
					directRotate = CLOCKWISE;
 80066bc:	4b16      	ldr	r3, [pc, #88]	; (8006718 <RollSmallCounterClockWise_Handle+0x134>)
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <RollSmallCounterClockWise_Handle+0x124>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 80066c8:	4b14      	ldr	r3, [pc, #80]	; (800671c <RollSmallCounterClockWise_Handle+0x138>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
					y = 0;
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
					x = 7;
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <RollSmallCounterClockWise_Handle+0x12c>)
 80066d6:	2207      	movs	r2, #7
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e005      	b.n	80066e8 <RollSmallCounterClockWise_Handle+0x104>
				else y--;
 80066dc:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <RollSmallCounterClockWise_Handle+0x130>)
 80066e6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80066e8:	f7fb f9b6 	bl	8001a58 <HAL_GetTick>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4a07      	ldr	r2, [pc, #28]	; (800670c <RollSmallCounterClockWise_Handle+0x128>)
 80066f0:	6013      	str	r3, [r2, #0]
			break;
 80066f2:	e005      	b.n	8006700 <RollSmallCounterClockWise_Handle+0x11c>
			break;
 80066f4:	bf00      	nop
 80066f6:	e004      	b.n	8006702 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 80066f8:	bf00      	nop
 80066fa:	e002      	b.n	8006702 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8006700:	bf00      	nop
	}
}
 8006702:	bf00      	nop
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200002b5 	.word	0x200002b5
 800670c:	200002bc 	.word	0x200002bc
 8006710:	200002b7 	.word	0x200002b7
 8006714:	200002b8 	.word	0x200002b8
 8006718:	200002b6 	.word	0x200002b6
 800671c:	200002b4 	.word	0x200002b4

08006720 <RollBiggestClockWise_Handle>:

void RollBiggestClockWise_Handle()
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006724:	4b59      	ldr	r3, [pc, #356]	; (800688c <RollBiggestClockWise_Handle+0x16c>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b03      	cmp	r3, #3
 800672a:	f200 80a3 	bhi.w	8006874 <RollBiggestClockWise_Handle+0x154>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <RollBiggestClockWise_Handle+0x14>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006745 	.word	0x08006745
 8006738:	08006791 	.word	0x08006791
 800673c:	080067db 	.word	0x080067db
 8006740:	08006825 	.word	0x08006825
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006744:	f7fb f988 	bl	8001a58 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	4b51      	ldr	r3, [pc, #324]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	223c      	movs	r2, #60	; 0x3c
 8006752:	4293      	cmp	r3, r2
 8006754:	f0c0 8090 	bcc.w	8006878 <RollBiggestClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8006758:	4b4e      	ldr	r3, [pc, #312]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	4a4e      	ldr	r2, [pc, #312]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 800675e:	7811      	ldrb	r1, [r2, #0]
 8006760:	2208      	movs	r2, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fe5e 	bl	8005424 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 8006768:	4b4b      	ldr	r3, [pc, #300]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b07      	cmp	r3, #7
 800676e:	d103      	bne.n	8006778 <RollBiggestClockWise_Handle+0x58>
 8006770:	4b46      	ldr	r3, [pc, #280]	; (800688c <RollBiggestClockWise_Handle+0x16c>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e005      	b.n	8006784 <RollBiggestClockWise_Handle+0x64>
				else y++;
 8006778:	4b47      	ldr	r3, [pc, #284]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4b45      	ldr	r3, [pc, #276]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 8006782:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006784:	f7fb f968 	bl	8001a58 <HAL_GetTick>
 8006788:	4603      	mov	r3, r0
 800678a:	4a41      	ldr	r2, [pc, #260]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 800678c:	6013      	str	r3, [r2, #0]
			}
			break;
 800678e:	e073      	b.n	8006878 <RollBiggestClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006790:	f7fb f962 	bl	8001a58 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	223c      	movs	r2, #60	; 0x3c
 800679e:	4293      	cmp	r3, r2
 80067a0:	d36c      	bcc.n	800687c <RollBiggestClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80067a2:	4b3c      	ldr	r3, [pc, #240]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 80067a8:	7811      	ldrb	r1, [r2, #0]
 80067aa:	2208      	movs	r2, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fe39 	bl	8005424 <DisplayLed>
				if (x == 0) axisDirection = Y_AXIS_2;
 80067b2:	4b38      	ldr	r3, [pc, #224]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <RollBiggestClockWise_Handle+0xa2>
 80067ba:	4b34      	ldr	r3, [pc, #208]	; (800688c <RollBiggestClockWise_Handle+0x16c>)
 80067bc:	2202      	movs	r2, #2
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e005      	b.n	80067ce <RollBiggestClockWise_Handle+0xae>
				else x--;
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b32      	ldr	r3, [pc, #200]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 80067cc:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80067ce:	f7fb f943 	bl	8001a58 <HAL_GetTick>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4a2e      	ldr	r2, [pc, #184]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 80067d6:	6013      	str	r3, [r2, #0]
			}
			break;
 80067d8:	e050      	b.n	800687c <RollBiggestClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80067da:	f7fb f93d 	bl	8001a58 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	223c      	movs	r2, #60	; 0x3c
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d349      	bcc.n	8006880 <RollBiggestClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80067ec:	4b29      	ldr	r3, [pc, #164]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	4a29      	ldr	r2, [pc, #164]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 80067f2:	7811      	ldrb	r1, [r2, #0]
 80067f4:	2208      	movs	r2, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fe14 	bl	8005424 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 80067fc:	4b26      	ldr	r3, [pc, #152]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <RollBiggestClockWise_Handle+0xec>
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <RollBiggestClockWise_Handle+0x16c>)
 8006806:	2203      	movs	r2, #3
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e005      	b.n	8006818 <RollBiggestClockWise_Handle+0xf8>
				else y--;
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b20      	ldr	r3, [pc, #128]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 8006816:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006818:	f7fb f91e 	bl	8001a58 <HAL_GetTick>
 800681c:	4603      	mov	r3, r0
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 8006820:	6013      	str	r3, [r2, #0]
			}
			break;
 8006822:	e02d      	b.n	8006880 <RollBiggestClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006824:	f7fb f918 	bl	8001a58 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	223c      	movs	r2, #60	; 0x3c
 8006832:	4293      	cmp	r3, r2
 8006834:	d326      	bcc.n	8006884 <RollBiggestClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8006836:	4b17      	ldr	r3, [pc, #92]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <RollBiggestClockWise_Handle+0x178>)
 800683c:	7811      	ldrb	r1, [r2, #0]
 800683e:	2208      	movs	r2, #8
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fdef 	bl	8005424 <DisplayLed>
				if (x == 6)
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b06      	cmp	r3, #6
 800684c:	d106      	bne.n	800685c <RollBiggestClockWise_Handle+0x13c>
				{
					rollSize = ROLL_BIGGER;
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <RollBiggestClockWise_Handle+0x17c>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <RollBiggestClockWise_Handle+0x16c>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e005      	b.n	8006868 <RollBiggestClockWise_Handle+0x148>
				}
				else x++;
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <RollBiggestClockWise_Handle+0x174>)
 8006866:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006868:	f7fb f8f6 	bl	8001a58 <HAL_GetTick>
 800686c:	4603      	mov	r3, r0
 800686e:	4a08      	ldr	r2, [pc, #32]	; (8006890 <RollBiggestClockWise_Handle+0x170>)
 8006870:	6013      	str	r3, [r2, #0]
			}
			break;
 8006872:	e007      	b.n	8006884 <RollBiggestClockWise_Handle+0x164>
		default:
			break;
 8006874:	bf00      	nop
 8006876:	e006      	b.n	8006886 <RollBiggestClockWise_Handle+0x166>
			break;
 8006878:	bf00      	nop
 800687a:	e004      	b.n	8006886 <RollBiggestClockWise_Handle+0x166>
			break;
 800687c:	bf00      	nop
 800687e:	e002      	b.n	8006886 <RollBiggestClockWise_Handle+0x166>
			break;
 8006880:	bf00      	nop
 8006882:	e000      	b.n	8006886 <RollBiggestClockWise_Handle+0x166>
			break;
 8006884:	bf00      	nop
	}
}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200002b5 	.word	0x200002b5
 8006890:	200002bc 	.word	0x200002bc
 8006894:	200002b7 	.word	0x200002b7
 8006898:	200002b8 	.word	0x200002b8
 800689c:	200002b4 	.word	0x200002b4

080068a0 <RollBiggerClockWise_Handle>:

void RollBiggerClockWise_Handle()
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <RollBiggerClockWise_Handle+0x16c>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	f200 80a3 	bhi.w	80069f4 <RollBiggerClockWise_Handle+0x154>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <RollBiggerClockWise_Handle+0x14>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	08006911 	.word	0x08006911
 80068bc:	0800695b 	.word	0x0800695b
 80068c0:	080069a5 	.word	0x080069a5
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80068c4:	f7fb f8c8 	bl	8001a58 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b51      	ldr	r3, [pc, #324]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	223c      	movs	r2, #60	; 0x3c
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f0c0 8090 	bcc.w	80069f8 <RollBiggerClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80068d8:	4b4e      	ldr	r3, [pc, #312]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	4a4e      	ldr	r2, [pc, #312]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 80068de:	7811      	ldrb	r1, [r2, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fd9e 	bl	8005424 <DisplayLed>
				if (y == 6) axisDirection = X_AXIS_1;
 80068e8:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d103      	bne.n	80068f8 <RollBiggerClockWise_Handle+0x58>
 80068f0:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <RollBiggerClockWise_Handle+0x16c>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e005      	b.n	8006904 <RollBiggerClockWise_Handle+0x64>
				else y++;
 80068f8:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 8006902:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006904:	f7fb f8a8 	bl	8001a58 <HAL_GetTick>
 8006908:	4603      	mov	r3, r0
 800690a:	4a41      	ldr	r2, [pc, #260]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 800690c:	6013      	str	r3, [r2, #0]
			}
			break;
 800690e:	e073      	b.n	80069f8 <RollBiggerClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006910:	f7fb f8a2 	bl	8001a58 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	4b3e      	ldr	r3, [pc, #248]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	223c      	movs	r2, #60	; 0x3c
 800691e:	4293      	cmp	r3, r2
 8006920:	d36c      	bcc.n	80069fc <RollBiggerClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006922:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 8006928:	7811      	ldrb	r1, [r2, #0]
 800692a:	2208      	movs	r2, #8
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd79 	bl	8005424 <DisplayLed>
				if (x == 1) axisDirection = Y_AXIS_2;
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d103      	bne.n	8006942 <RollBiggerClockWise_Handle+0xa2>
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <RollBiggerClockWise_Handle+0x16c>)
 800693c:	2202      	movs	r2, #2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e005      	b.n	800694e <RollBiggerClockWise_Handle+0xae>
				else x--;
 8006942:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	3b01      	subs	r3, #1
 8006948:	b2da      	uxtb	r2, r3
 800694a:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 800694c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800694e:	f7fb f883 	bl	8001a58 <HAL_GetTick>
 8006952:	4603      	mov	r3, r0
 8006954:	4a2e      	ldr	r2, [pc, #184]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 8006956:	6013      	str	r3, [r2, #0]
			}
			break;
 8006958:	e050      	b.n	80069fc <RollBiggerClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800695a:	f7fb f87d 	bl	8001a58 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	4b2b      	ldr	r3, [pc, #172]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	223c      	movs	r2, #60	; 0x3c
 8006968:	4293      	cmp	r3, r2
 800696a:	d349      	bcc.n	8006a00 <RollBiggerClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 800696c:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 8006972:	7811      	ldrb	r1, [r2, #0]
 8006974:	2208      	movs	r2, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fd54 	bl	8005424 <DisplayLed>
				if (y == 1) axisDirection = X_AXIS_2;
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d103      	bne.n	800698c <RollBiggerClockWise_Handle+0xec>
 8006984:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <RollBiggerClockWise_Handle+0x16c>)
 8006986:	2203      	movs	r2, #3
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e005      	b.n	8006998 <RollBiggerClockWise_Handle+0xf8>
				else y--;
 800698c:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 8006996:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006998:	f7fb f85e 	bl	8001a58 <HAL_GetTick>
 800699c:	4603      	mov	r3, r0
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 80069a0:	6013      	str	r3, [r2, #0]
			}
			break;
 80069a2:	e02d      	b.n	8006a00 <RollBiggerClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80069a4:	f7fb f858 	bl	8001a58 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	223c      	movs	r2, #60	; 0x3c
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d326      	bcc.n	8006a04 <RollBiggerClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80069b6:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <RollBiggerClockWise_Handle+0x178>)
 80069bc:	7811      	ldrb	r1, [r2, #0]
 80069be:	2208      	movs	r2, #8
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fd2f 	bl	8005424 <DisplayLed>
				if (x == 5)
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d106      	bne.n	80069dc <RollBiggerClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <RollBiggerClockWise_Handle+0x16c>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 80069d4:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <RollBiggerClockWise_Handle+0x17c>)
 80069d6:	2202      	movs	r2, #2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e005      	b.n	80069e8 <RollBiggerClockWise_Handle+0x148>
				}
				else x++;
 80069dc:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <RollBiggerClockWise_Handle+0x174>)
 80069e6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80069e8:	f7fb f836 	bl	8001a58 <HAL_GetTick>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <RollBiggerClockWise_Handle+0x170>)
 80069f0:	6013      	str	r3, [r2, #0]
			}
			break;
 80069f2:	e007      	b.n	8006a04 <RollBiggerClockWise_Handle+0x164>
		default:
			break;
 80069f4:	bf00      	nop
 80069f6:	e006      	b.n	8006a06 <RollBiggerClockWise_Handle+0x166>
			break;
 80069f8:	bf00      	nop
 80069fa:	e004      	b.n	8006a06 <RollBiggerClockWise_Handle+0x166>
			break;
 80069fc:	bf00      	nop
 80069fe:	e002      	b.n	8006a06 <RollBiggerClockWise_Handle+0x166>
			break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <RollBiggerClockWise_Handle+0x166>
			break;
 8006a04:	bf00      	nop
	}
}
 8006a06:	bf00      	nop
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200002b5 	.word	0x200002b5
 8006a10:	200002bc 	.word	0x200002bc
 8006a14:	200002b7 	.word	0x200002b7
 8006a18:	200002b8 	.word	0x200002b8
 8006a1c:	200002b4 	.word	0x200002b4

08006a20 <RollMediumClockWise_Handle>:

void RollMediumClockWise_Handle()
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006a24:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <RollMediumClockWise_Handle+0x16c>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	f200 80a3 	bhi.w	8006b74 <RollMediumClockWise_Handle+0x154>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <RollMediumClockWise_Handle+0x14>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a91 	.word	0x08006a91
 8006a3c:	08006adb 	.word	0x08006adb
 8006a40:	08006b25 	.word	0x08006b25
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006a44:	f7fb f808 	bl	8001a58 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	223c      	movs	r2, #60	; 0x3c
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f0c0 8090 	bcc.w	8006b78 <RollMediumClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8006a58:	4b4e      	ldr	r3, [pc, #312]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4a4e      	ldr	r2, [pc, #312]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006a5e:	7811      	ldrb	r1, [r2, #0]
 8006a60:	2208      	movs	r2, #8
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fcde 	bl	8005424 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8006a68:	4b4b      	ldr	r3, [pc, #300]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d103      	bne.n	8006a78 <RollMediumClockWise_Handle+0x58>
 8006a70:	4b46      	ldr	r3, [pc, #280]	; (8006b8c <RollMediumClockWise_Handle+0x16c>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	e005      	b.n	8006a84 <RollMediumClockWise_Handle+0x64>
				else y++;
 8006a78:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006a82:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006a84:	f7fa ffe8 	bl	8001a58 <HAL_GetTick>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4a41      	ldr	r2, [pc, #260]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006a8c:	6013      	str	r3, [r2, #0]
			}
			break;
 8006a8e:	e073      	b.n	8006b78 <RollMediumClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006a90:	f7fa ffe2 	bl	8001a58 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	223c      	movs	r2, #60	; 0x3c
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d36c      	bcc.n	8006b7c <RollMediumClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006aa2:	4b3c      	ldr	r3, [pc, #240]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006aa8:	7811      	ldrb	r1, [r2, #0]
 8006aaa:	2208      	movs	r2, #8
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fcb9 	bl	8005424 <DisplayLed>
				if (x == 2) axisDirection = Y_AXIS_2;
 8006ab2:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d103      	bne.n	8006ac2 <RollMediumClockWise_Handle+0xa2>
 8006aba:	4b34      	ldr	r3, [pc, #208]	; (8006b8c <RollMediumClockWise_Handle+0x16c>)
 8006abc:	2202      	movs	r2, #2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e005      	b.n	8006ace <RollMediumClockWise_Handle+0xae>
				else x--;
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006acc:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006ace:	f7fa ffc3 	bl	8001a58 <HAL_GetTick>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006ad6:	6013      	str	r3, [r2, #0]
			}
			break;
 8006ad8:	e050      	b.n	8006b7c <RollMediumClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006ada:	f7fa ffbd 	bl	8001a58 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	223c      	movs	r2, #60	; 0x3c
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d349      	bcc.n	8006b80 <RollMediumClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006aec:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006af2:	7811      	ldrb	r1, [r2, #0]
 8006af4:	2208      	movs	r2, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fc94 	bl	8005424 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8006afc:	4b26      	ldr	r3, [pc, #152]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d103      	bne.n	8006b0c <RollMediumClockWise_Handle+0xec>
 8006b04:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <RollMediumClockWise_Handle+0x16c>)
 8006b06:	2203      	movs	r2, #3
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e005      	b.n	8006b18 <RollMediumClockWise_Handle+0xf8>
				else y--;
 8006b0c:	4b22      	ldr	r3, [pc, #136]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	4b20      	ldr	r3, [pc, #128]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006b16:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006b18:	f7fa ff9e 	bl	8001a58 <HAL_GetTick>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006b20:	6013      	str	r3, [r2, #0]
			}
			break;
 8006b22:	e02d      	b.n	8006b80 <RollMediumClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006b24:	f7fa ff98 	bl	8001a58 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	223c      	movs	r2, #60	; 0x3c
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d326      	bcc.n	8006b84 <RollMediumClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <RollMediumClockWise_Handle+0x178>)
 8006b3c:	7811      	ldrb	r1, [r2, #0]
 8006b3e:	2208      	movs	r2, #8
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fc6f 	bl	8005424 <DisplayLed>
				if (x == 4)
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d106      	bne.n	8006b5c <RollMediumClockWise_Handle+0x13c>
				{
					rollSize = ROLL_SMALL;
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <RollMediumClockWise_Handle+0x17c>)
 8006b50:	2203      	movs	r2, #3
 8006b52:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <RollMediumClockWise_Handle+0x16c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e005      	b.n	8006b68 <RollMediumClockWise_Handle+0x148>
				}
				else x++;
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <RollMediumClockWise_Handle+0x174>)
 8006b66:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006b68:	f7fa ff76 	bl	8001a58 <HAL_GetTick>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <RollMediumClockWise_Handle+0x170>)
 8006b70:	6013      	str	r3, [r2, #0]
			}
			break;
 8006b72:	e007      	b.n	8006b84 <RollMediumClockWise_Handle+0x164>
		default:
			break;
 8006b74:	bf00      	nop
 8006b76:	e006      	b.n	8006b86 <RollMediumClockWise_Handle+0x166>
			break;
 8006b78:	bf00      	nop
 8006b7a:	e004      	b.n	8006b86 <RollMediumClockWise_Handle+0x166>
			break;
 8006b7c:	bf00      	nop
 8006b7e:	e002      	b.n	8006b86 <RollMediumClockWise_Handle+0x166>
			break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <RollMediumClockWise_Handle+0x166>
			break;
 8006b84:	bf00      	nop
	}
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200002b5 	.word	0x200002b5
 8006b90:	200002bc 	.word	0x200002bc
 8006b94:	200002b7 	.word	0x200002b7
 8006b98:	200002b8 	.word	0x200002b8
 8006b9c:	200002b4 	.word	0x200002b4

08006ba0 <RollSmallClockWise_Handle>:

void RollSmallClockWise_Handle()
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006ba4:	4b48      	ldr	r3, [pc, #288]	; (8006cc8 <RollSmallClockWise_Handle+0x128>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d051      	beq.n	8006c50 <RollSmallClockWise_Handle+0xb0>
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f300 8082 	bgt.w	8006cb6 <RollSmallClockWise_Handle+0x116>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <RollSmallClockWise_Handle+0x1c>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d025      	beq.n	8006c06 <RollSmallClockWise_Handle+0x66>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8006bba:	e07c      	b.n	8006cb6 <RollSmallClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006bbc:	f7fa ff4c 	bl	8001a58 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b42      	ldr	r3, [pc, #264]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	223c      	movs	r2, #60	; 0x3c
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d375      	bcc.n	8006cba <RollSmallClockWise_Handle+0x11a>
				DisplayLed(x, y, z);
 8006bce:	4b40      	ldr	r3, [pc, #256]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	4a40      	ldr	r2, [pc, #256]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006bd4:	7811      	ldrb	r1, [r2, #0]
 8006bd6:	2208      	movs	r2, #8
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fc23 	bl	8005424 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8006bde:	4b3d      	ldr	r3, [pc, #244]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d103      	bne.n	8006bee <RollSmallClockWise_Handle+0x4e>
 8006be6:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <RollSmallClockWise_Handle+0x128>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e005      	b.n	8006bfa <RollSmallClockWise_Handle+0x5a>
				else y++;
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006bf8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006bfa:	f7fa ff2d 	bl	8001a58 <HAL_GetTick>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006c02:	6013      	str	r3, [r2, #0]
			break;
 8006c04:	e059      	b.n	8006cba <RollSmallClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006c06:	f7fa ff27 	bl	8001a58 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	223c      	movs	r2, #60	; 0x3c
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d352      	bcc.n	8006cbe <RollSmallClockWise_Handle+0x11e>
				DisplayLed(x, y, z);
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006c1e:	7811      	ldrb	r1, [r2, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fbfe 	bl	8005424 <DisplayLed>
				if (x == 3) axisDirection = Y_AXIS_2;
 8006c28:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d103      	bne.n	8006c38 <RollSmallClockWise_Handle+0x98>
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <RollSmallClockWise_Handle+0x128>)
 8006c32:	2202      	movs	r2, #2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e005      	b.n	8006c44 <RollSmallClockWise_Handle+0xa4>
				else x--;
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c42:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006c44:	f7fa ff08 	bl	8001a58 <HAL_GetTick>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006c4c:	6013      	str	r3, [r2, #0]
			break;
 8006c4e:	e036      	b.n	8006cbe <RollSmallClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006c50:	f7fa ff02 	bl	8001a58 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	223c      	movs	r2, #60	; 0x3c
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d32f      	bcc.n	8006cc2 <RollSmallClockWise_Handle+0x122>
				DisplayLed(x, y, z);
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006c68:	7811      	ldrb	r1, [r2, #0]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fbd9 	bl	8005424 <DisplayLed>
				if (y == 3)
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d111      	bne.n	8006c9e <RollSmallClockWise_Handle+0xfe>
					clearCube();
 8006c7a:	f7fd fd5a 	bl	8004732 <clearCube>
					axisDirection = Y_AXIS_1;
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <RollSmallClockWise_Handle+0x128>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8006c84:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <RollSmallClockWise_Handle+0x138>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
					x = 0;
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <RollSmallClockWise_Handle+0x130>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
					y = 0;
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
					directRotate = COUNTER_CLOCKWISE;
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <RollSmallClockWise_Handle+0x13c>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e005      	b.n	8006caa <RollSmallClockWise_Handle+0x10a>
				else y--;
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <RollSmallClockWise_Handle+0x134>)
 8006ca8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006caa:	f7fa fed5 	bl	8001a58 <HAL_GetTick>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a06      	ldr	r2, [pc, #24]	; (8006ccc <RollSmallClockWise_Handle+0x12c>)
 8006cb2:	6013      	str	r3, [r2, #0]
			break;
 8006cb4:	e005      	b.n	8006cc2 <RollSmallClockWise_Handle+0x122>
			break;
 8006cb6:	bf00      	nop
 8006cb8:	e004      	b.n	8006cc4 <RollSmallClockWise_Handle+0x124>
			break;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <RollSmallClockWise_Handle+0x124>
			break;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <RollSmallClockWise_Handle+0x124>
			break;
 8006cc2:	bf00      	nop
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200002b5 	.word	0x200002b5
 8006ccc:	200002bc 	.word	0x200002bc
 8006cd0:	200002b7 	.word	0x200002b7
 8006cd4:	200002b8 	.word	0x200002b8
 8006cd8:	200002b4 	.word	0x200002b4
 8006cdc:	200002b6 	.word	0x200002b6

08006ce0 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
	clearCube();
 8006ce4:	f7fd fd25 	bl	8004732 <clearCube>
	x = 7;
 8006ce8:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <SpiralCube_Set_State+0x30>)
 8006cea:	2207      	movs	r2, #7
 8006cec:	701a      	strb	r2, [r3, #0]
	y = 0;
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <SpiralCube_Set_State+0x34>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
	rollSize = ROLL_BIGGEST;
 8006cf4:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <SpiralCube_Set_State+0x38>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
	directRotate = CLOCKWISE;
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <SpiralCube_Set_State+0x3c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <SpiralCube_Set_State+0x40>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
	currentEffect = SPIRAL_CUBE;
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <SpiralCube_Set_State+0x44>)
 8006d08:	2208      	movs	r2, #8
 8006d0a:	701a      	strb	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200002b7 	.word	0x200002b7
 8006d14:	200002b8 	.word	0x200002b8
 8006d18:	200002b4 	.word	0x200002b4
 8006d1c:	200002b6 	.word	0x200002b6
 8006d20:	200002b5 	.word	0x200002b5
 8006d24:	20000010 	.word	0x20000010

08006d28 <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	723b      	strb	r3, [r7, #8]
	for (int i = 1; i < 9; i++)
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e00d      	b.n	8006d5a <TransmitData+0x32>
	{
		dataOut[i] = column_data[i-1];
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	7819      	ldrb	r1, [r3, #0]
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4413      	add	r3, r2
 8006d50:	460a      	mov	r2, r1
 8006d52:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	3301      	adds	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	ddee      	ble.n	8006d3e <TransmitData+0x16>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8006d60:	2200      	movs	r2, #0
 8006d62:	2140      	movs	r1, #64	; 0x40
 8006d64:	4809      	ldr	r0, [pc, #36]	; (8006d8c <TransmitData+0x64>)
 8006d66:	f7fb fbec 	bl	8002542 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8006d6a:	f107 0108 	add.w	r1, r7, #8
 8006d6e:	2364      	movs	r3, #100	; 0x64
 8006d70:	2209      	movs	r2, #9
 8006d72:	4807      	ldr	r0, [pc, #28]	; (8006d90 <TransmitData+0x68>)
 8006d74:	f7fc f952 	bl	800301c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8006d78:	2201      	movs	r2, #1
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <TransmitData+0x64>)
 8006d7e:	f7fb fbe0 	bl	8002542 <HAL_GPIO_WritePin>
}
 8006d82:	bf00      	nop
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40010800 	.word	0x40010800
 8006d90:	200000c4 	.word	0x200000c4
 8006d94:	00000000 	.word	0x00000000

08006d98 <WaveCube_Handle>:
extern float xo; // Tọa độ điểm gốc O
extern float yo;


void WaveCube_Handle()
{
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8006da0:	4b6d      	ldr	r3, [pc, #436]	; (8006f58 <WaveCube_Handle+0x1c0>)
 8006da2:	4a6e      	ldr	r2, [pc, #440]	; (8006f5c <WaveCube_Handle+0x1c4>)
 8006da4:	601a      	str	r2, [r3, #0]
	T = 2000; // Chu kỳ
 8006da6:	4b6e      	ldr	r3, [pc, #440]	; (8006f60 <WaveCube_Handle+0x1c8>)
 8006da8:	4a6e      	ldr	r2, [pc, #440]	; (8006f64 <WaveCube_Handle+0x1cc>)
 8006daa:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8006dac:	4b6e      	ldr	r3, [pc, #440]	; (8006f68 <WaveCube_Handle+0x1d0>)
 8006dae:	4a6f      	ldr	r2, [pc, #444]	; (8006f6c <WaveCube_Handle+0x1d4>)
 8006db0:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 8006db2:	4b6f      	ldr	r3, [pc, #444]	; (8006f70 <WaveCube_Handle+0x1d8>)
 8006db4:	4a6d      	ldr	r2, [pc, #436]	; (8006f6c <WaveCube_Handle+0x1d4>)
 8006db6:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8006db8:	4b6e      	ldr	r3, [pc, #440]	; (8006f74 <WaveCube_Handle+0x1dc>)
 8006dba:	4a6c      	ldr	r2, [pc, #432]	; (8006f6c <WaveCube_Handle+0x1d4>)
 8006dbc:	601a      	str	r2, [r3, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	e0b9      	b.n	8006f38 <WaveCube_Handle+0x1a0>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73bb      	strb	r3, [r7, #14]
 8006dc8:	e0af      	b.n	8006f2a <WaveCube_Handle+0x192>
	    {
	        uint32_t t = HAL_GetTick(); // Lấy thời gian
 8006dca:	f7fa fe45 	bl	8001a58 <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]
//	        float r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt((x - xo)*(x - xo) + (y - yo)*(y - yo))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 8006dd0:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <WaveCube_Handle+0x1d0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 fb1f 	bl	8000418 <__aeabi_f2d>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	68b8      	ldr	r0, [r7, #8]
 8006de0:	f7f9 faf8 	bl	80003d4 <__aeabi_ui2d>
 8006de4:	a35a      	add	r3, pc, #360	; (adr r3, 8006f50 <WaveCube_Handle+0x1b8>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fb6d 	bl	80004c8 <__aeabi_dmul>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4690      	mov	r8, r2
 8006df4:	4699      	mov	r9, r3
 8006df6:	4b5a      	ldr	r3, [pc, #360]	; (8006f60 <WaveCube_Handle+0x1c8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7f9 fb0c 	bl	8000418 <__aeabi_f2d>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fc88 	bl	800071c <__aeabi_ddiv>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4690      	mov	r8, r2
 8006e12:	4699      	mov	r9, r3
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7f9 ff58 	bl	8000ccc <__aeabi_i2f>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b54      	ldr	r3, [pc, #336]	; (8006f70 <WaveCube_Handle+0x1d8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	4610      	mov	r0, r2
 8006e26:	f7f9 fe9b 	bl	8000b60 <__aeabi_fsub>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461e      	mov	r6, r3
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7f9 ff4b 	bl	8000ccc <__aeabi_i2f>
 8006e36:	4602      	mov	r2, r0
 8006e38:	4b4d      	ldr	r3, [pc, #308]	; (8006f70 <WaveCube_Handle+0x1d8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7f9 fe8e 	bl	8000b60 <__aeabi_fsub>
 8006e44:	4603      	mov	r3, r0
 8006e46:	4619      	mov	r1, r3
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7f9 ff93 	bl	8000d74 <__aeabi_fmul>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461e      	mov	r6, r3
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7f9 ff39 	bl	8000ccc <__aeabi_i2f>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4b45      	ldr	r3, [pc, #276]	; (8006f74 <WaveCube_Handle+0x1dc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f7f9 fe7c 	bl	8000b60 <__aeabi_fsub>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	469a      	mov	sl, r3
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7f9 ff2c 	bl	8000ccc <__aeabi_i2f>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <WaveCube_Handle+0x1dc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7f9 fe6f 	bl	8000b60 <__aeabi_fsub>
 8006e82:	4603      	mov	r3, r0
 8006e84:	4619      	mov	r1, r3
 8006e86:	4650      	mov	r0, sl
 8006e88:	f7f9 ff74 	bl	8000d74 <__aeabi_fmul>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7f9 fe67 	bl	8000b64 <__addsf3>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 fabd 	bl	8000418 <__aeabi_f2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f001 fa25 	bl	80082f4 <sqrt>
 8006eaa:	a329      	add	r3, pc, #164	; (adr r3, 8006f50 <WaveCube_Handle+0x1b8>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f7f9 fb0a 	bl	80004c8 <__aeabi_dmul>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4692      	mov	sl, r2
 8006eba:	469b      	mov	fp, r3
 8006ebc:	4b26      	ldr	r3, [pc, #152]	; (8006f58 <WaveCube_Handle+0x1c0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7f9 faa9 	bl	8000418 <__aeabi_f2d>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4650      	mov	r0, sl
 8006ecc:	4659      	mov	r1, fp
 8006ece:	f7f9 fc25 	bl	800071c <__aeabi_ddiv>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	f7f9 f93d 	bl	8000158 <__aeabi_dsub>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f001 f911 	bl	800810c <cos>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fae9 	bl	80004c8 <__aeabi_dmul>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	4b1d      	ldr	r3, [pc, #116]	; (8006f78 <WaveCube_Handle+0x1e0>)
 8006f04:	f7f9 f92a 	bl	800015c <__adddf3>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f7f9 fdb2 	bl	8000a78 <__aeabi_d2uiz>
 8006f14:	4603      	mov	r3, r0
 8006f16:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 8006f18:	79fa      	ldrb	r2, [r7, #7]
 8006f1a:	7bf9      	ldrb	r1, [r7, #15]
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fa80 	bl	8005424 <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	3301      	adds	r3, #1
 8006f28:	73bb      	strb	r3, [r7, #14]
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b07      	cmp	r3, #7
 8006f2e:	f67f af4c 	bls.w	8006dca <WaveCube_Handle+0x32>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	3301      	adds	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	f67f af42 	bls.w	8006dc4 <WaveCube_Handle+0x2c>
	    }
	}
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	f3af 8000 	nop.w
 8006f50:	51eb851f 	.word	0x51eb851f
 8006f54:	40191eb8 	.word	0x40191eb8
 8006f58:	200002a0 	.word	0x200002a0
 8006f5c:	40e00000 	.word	0x40e00000
 8006f60:	200002a4 	.word	0x200002a4
 8006f64:	44fa0000 	.word	0x44fa0000
 8006f68:	200002a8 	.word	0x200002a8
 8006f6c:	40600000 	.word	0x40600000
 8006f70:	200002ac 	.word	0x200002ac
 8006f74:	200002b0 	.word	0x200002b0
 8006f78:	40100000 	.word	0x40100000

08006f7c <WaveCube_Set_State>:

void WaveCube_Set_State()
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
	clearCube();
 8006f80:	f7fd fbd7 	bl	8004732 <clearCube>
	currentEffect = WAVE_EFFECT;
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <WaveCube_Set_State+0x34>)
 8006f86:	2209      	movs	r2, #9
 8006f88:	701a      	strb	r2, [r3, #0]
	L = 7; // Bước sóng
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <WaveCube_Set_State+0x38>)
 8006f8c:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <WaveCube_Set_State+0x3c>)
 8006f8e:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <WaveCube_Set_State+0x40>)
 8006f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006f96:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <WaveCube_Set_State+0x44>)
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <WaveCube_Set_State+0x48>)
 8006f9c:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <WaveCube_Set_State+0x4c>)
 8006fa0:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <WaveCube_Set_State+0x48>)
 8006fa2:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <WaveCube_Set_State+0x50>)
 8006fa6:	4a07      	ldr	r2, [pc, #28]	; (8006fc4 <WaveCube_Set_State+0x48>)
 8006fa8:	601a      	str	r2, [r3, #0]
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000010 	.word	0x20000010
 8006fb4:	200002a0 	.word	0x200002a0
 8006fb8:	40e00000 	.word	0x40e00000
 8006fbc:	200002a4 	.word	0x200002a4
 8006fc0:	200002a8 	.word	0x200002a8
 8006fc4:	40600000 	.word	0x40600000
 8006fc8:	200002ac 	.word	0x200002ac
 8006fcc:	200002b0 	.word	0x200002b0

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	; (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000014 	.word	0x20000014

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	2600      	movs	r6, #0
 8006fe0:	4d0c      	ldr	r5, [pc, #48]	; (8007014 <__libc_init_array+0x38>)
 8006fe2:	4c0d      	ldr	r4, [pc, #52]	; (8007018 <__libc_init_array+0x3c>)
 8006fe4:	1b64      	subs	r4, r4, r5
 8006fe6:	10a4      	asrs	r4, r4, #2
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	f002 ff52 	bl	8009e94 <_init>
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	4d0a      	ldr	r5, [pc, #40]	; (800701c <__libc_init_array+0x40>)
 8006ff4:	4c0a      	ldr	r4, [pc, #40]	; (8007020 <__libc_init_array+0x44>)
 8006ff6:	1b64      	subs	r4, r4, r5
 8006ff8:	10a4      	asrs	r4, r4, #2
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	0800a230 	.word	0x0800a230
 8007018:	0800a230 	.word	0x0800a230
 800701c:	0800a230 	.word	0x0800a230
 8007020:	0800a234 	.word	0x0800a234

08007024 <memset>:
 8007024:	4603      	mov	r3, r0
 8007026:	4402      	add	r2, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	d100      	bne.n	800702e <memset+0xa>
 800702c:	4770      	bx	lr
 800702e:	f803 1b01 	strb.w	r1, [r3], #1
 8007032:	e7f9      	b.n	8007028 <memset+0x4>

08007034 <srand>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4b10      	ldr	r3, [pc, #64]	; (8007078 <srand+0x44>)
 8007038:	4604      	mov	r4, r0
 800703a:	681d      	ldr	r5, [r3, #0]
 800703c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800703e:	b9b3      	cbnz	r3, 800706e <srand+0x3a>
 8007040:	2018      	movs	r0, #24
 8007042:	f000 f893 	bl	800716c <malloc>
 8007046:	4602      	mov	r2, r0
 8007048:	63a8      	str	r0, [r5, #56]	; 0x38
 800704a:	b920      	cbnz	r0, 8007056 <srand+0x22>
 800704c:	2142      	movs	r1, #66	; 0x42
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <srand+0x48>)
 8007050:	480b      	ldr	r0, [pc, #44]	; (8007080 <srand+0x4c>)
 8007052:	f000 f85b 	bl	800710c <__assert_func>
 8007056:	490b      	ldr	r1, [pc, #44]	; (8007084 <srand+0x50>)
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <srand+0x54>)
 800705a:	e9c0 1300 	strd	r1, r3, [r0]
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <srand+0x58>)
 8007060:	2100      	movs	r1, #0
 8007062:	6083      	str	r3, [r0, #8]
 8007064:	230b      	movs	r3, #11
 8007066:	8183      	strh	r3, [r0, #12]
 8007068:	2001      	movs	r0, #1
 800706a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800706e:	2200      	movs	r2, #0
 8007070:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007072:	611c      	str	r4, [r3, #16]
 8007074:	615a      	str	r2, [r3, #20]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000014 	.word	0x20000014
 800707c:	08009ee4 	.word	0x08009ee4
 8007080:	08009efb 	.word	0x08009efb
 8007084:	abcd330e 	.word	0xabcd330e
 8007088:	e66d1234 	.word	0xe66d1234
 800708c:	0005deec 	.word	0x0005deec

08007090 <rand>:
 8007090:	4b16      	ldr	r3, [pc, #88]	; (80070ec <rand+0x5c>)
 8007092:	b510      	push	{r4, lr}
 8007094:	681c      	ldr	r4, [r3, #0]
 8007096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007098:	b9b3      	cbnz	r3, 80070c8 <rand+0x38>
 800709a:	2018      	movs	r0, #24
 800709c:	f000 f866 	bl	800716c <malloc>
 80070a0:	4602      	mov	r2, r0
 80070a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80070a4:	b920      	cbnz	r0, 80070b0 <rand+0x20>
 80070a6:	214e      	movs	r1, #78	; 0x4e
 80070a8:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <rand+0x60>)
 80070aa:	4812      	ldr	r0, [pc, #72]	; (80070f4 <rand+0x64>)
 80070ac:	f000 f82e 	bl	800710c <__assert_func>
 80070b0:	4911      	ldr	r1, [pc, #68]	; (80070f8 <rand+0x68>)
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <rand+0x6c>)
 80070b4:	e9c0 1300 	strd	r1, r3, [r0]
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <rand+0x70>)
 80070ba:	2100      	movs	r1, #0
 80070bc:	6083      	str	r3, [r0, #8]
 80070be:	230b      	movs	r3, #11
 80070c0:	8183      	strh	r3, [r0, #12]
 80070c2:	2001      	movs	r0, #1
 80070c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80070c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <rand+0x74>)
 80070cc:	6920      	ldr	r0, [r4, #16]
 80070ce:	6963      	ldr	r3, [r4, #20]
 80070d0:	4342      	muls	r2, r0
 80070d2:	490d      	ldr	r1, [pc, #52]	; (8007108 <rand+0x78>)
 80070d4:	fb01 2203 	mla	r2, r1, r3, r2
 80070d8:	fba0 0101 	umull	r0, r1, r0, r1
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	eb42 0001 	adc.w	r0, r2, r1
 80070e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80070e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	20000014 	.word	0x20000014
 80070f0:	08009ee4 	.word	0x08009ee4
 80070f4:	08009efb 	.word	0x08009efb
 80070f8:	abcd330e 	.word	0xabcd330e
 80070fc:	e66d1234 	.word	0xe66d1234
 8007100:	0005deec 	.word	0x0005deec
 8007104:	5851f42d 	.word	0x5851f42d
 8007108:	4c957f2d 	.word	0x4c957f2d

0800710c <__assert_func>:
 800710c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710e:	4614      	mov	r4, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <__assert_func+0x2c>)
 8007114:	4605      	mov	r5, r0
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68d8      	ldr	r0, [r3, #12]
 800711a:	b14c      	cbz	r4, 8007130 <__assert_func+0x24>
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <__assert_func+0x30>)
 800711e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007122:	9100      	str	r1, [sp, #0]
 8007124:	462b      	mov	r3, r5
 8007126:	4906      	ldr	r1, [pc, #24]	; (8007140 <__assert_func+0x34>)
 8007128:	f000 f80e 	bl	8007148 <fiprintf>
 800712c:	f000 fcc0 	bl	8007ab0 <abort>
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <__assert_func+0x38>)
 8007132:	461c      	mov	r4, r3
 8007134:	e7f3      	b.n	800711e <__assert_func+0x12>
 8007136:	bf00      	nop
 8007138:	20000014 	.word	0x20000014
 800713c:	08009f56 	.word	0x08009f56
 8007140:	08009f63 	.word	0x08009f63
 8007144:	08009f91 	.word	0x08009f91

08007148 <fiprintf>:
 8007148:	b40e      	push	{r1, r2, r3}
 800714a:	b503      	push	{r0, r1, lr}
 800714c:	4601      	mov	r1, r0
 800714e:	ab03      	add	r3, sp, #12
 8007150:	4805      	ldr	r0, [pc, #20]	; (8007168 <fiprintf+0x20>)
 8007152:	f853 2b04 	ldr.w	r2, [r3], #4
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	f000 f913 	bl	8007384 <_vfiprintf_r>
 800715e:	b002      	add	sp, #8
 8007160:	f85d eb04 	ldr.w	lr, [sp], #4
 8007164:	b003      	add	sp, #12
 8007166:	4770      	bx	lr
 8007168:	20000014 	.word	0x20000014

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 b86b 	b.w	800724c <_malloc_r>
 8007176:	bf00      	nop
 8007178:	20000014 	.word	0x20000014

0800717c <_free_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4605      	mov	r5, r0
 8007180:	2900      	cmp	r1, #0
 8007182:	d040      	beq.n	8007206 <_free_r+0x8a>
 8007184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007188:	1f0c      	subs	r4, r1, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	bfb8      	it	lt
 800718e:	18e4      	addlt	r4, r4, r3
 8007190:	f000 fec0 	bl	8007f14 <__malloc_lock>
 8007194:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <_free_r+0x8c>)
 8007196:	6813      	ldr	r3, [r2, #0]
 8007198:	b933      	cbnz	r3, 80071a8 <_free_r+0x2c>
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	6014      	str	r4, [r2, #0]
 800719e:	4628      	mov	r0, r5
 80071a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a4:	f000 bebc 	b.w	8007f20 <__malloc_unlock>
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d908      	bls.n	80071be <_free_r+0x42>
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	1821      	adds	r1, r4, r0
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf01      	itttt	eq
 80071b4:	6819      	ldreq	r1, [r3, #0]
 80071b6:	685b      	ldreq	r3, [r3, #4]
 80071b8:	1809      	addeq	r1, r1, r0
 80071ba:	6021      	streq	r1, [r4, #0]
 80071bc:	e7ed      	b.n	800719a <_free_r+0x1e>
 80071be:	461a      	mov	r2, r3
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b10b      	cbz	r3, 80071c8 <_free_r+0x4c>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d9fa      	bls.n	80071be <_free_r+0x42>
 80071c8:	6811      	ldr	r1, [r2, #0]
 80071ca:	1850      	adds	r0, r2, r1
 80071cc:	42a0      	cmp	r0, r4
 80071ce:	d10b      	bne.n	80071e8 <_free_r+0x6c>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	4401      	add	r1, r0
 80071d4:	1850      	adds	r0, r2, r1
 80071d6:	4283      	cmp	r3, r0
 80071d8:	6011      	str	r1, [r2, #0]
 80071da:	d1e0      	bne.n	800719e <_free_r+0x22>
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4401      	add	r1, r0
 80071e2:	6011      	str	r1, [r2, #0]
 80071e4:	6053      	str	r3, [r2, #4]
 80071e6:	e7da      	b.n	800719e <_free_r+0x22>
 80071e8:	d902      	bls.n	80071f0 <_free_r+0x74>
 80071ea:	230c      	movs	r3, #12
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7d6      	b.n	800719e <_free_r+0x22>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428b      	cmp	r3, r1
 80071f6:	bf01      	itttt	eq
 80071f8:	6819      	ldreq	r1, [r3, #0]
 80071fa:	685b      	ldreq	r3, [r3, #4]
 80071fc:	1809      	addeq	r1, r1, r0
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6054      	str	r4, [r2, #4]
 8007204:	e7cb      	b.n	800719e <_free_r+0x22>
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	200002c0 	.word	0x200002c0

0800720c <sbrk_aligned>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	4e0e      	ldr	r6, [pc, #56]	; (8007248 <sbrk_aligned+0x3c>)
 8007210:	460c      	mov	r4, r1
 8007212:	6831      	ldr	r1, [r6, #0]
 8007214:	4605      	mov	r5, r0
 8007216:	b911      	cbnz	r1, 800721e <sbrk_aligned+0x12>
 8007218:	f000 fb7a 	bl	8007910 <_sbrk_r>
 800721c:	6030      	str	r0, [r6, #0]
 800721e:	4621      	mov	r1, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f000 fb75 	bl	8007910 <_sbrk_r>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d00a      	beq.n	8007240 <sbrk_aligned+0x34>
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d007      	beq.n	8007244 <sbrk_aligned+0x38>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fb6a 	bl	8007910 <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d101      	bne.n	8007244 <sbrk_aligned+0x38>
 8007240:	f04f 34ff 	mov.w	r4, #4294967295
 8007244:	4620      	mov	r0, r4
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	200002c4 	.word	0x200002c4

0800724c <_malloc_r>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	1ccd      	adds	r5, r1, #3
 8007252:	f025 0503 	bic.w	r5, r5, #3
 8007256:	3508      	adds	r5, #8
 8007258:	2d0c      	cmp	r5, #12
 800725a:	bf38      	it	cc
 800725c:	250c      	movcc	r5, #12
 800725e:	2d00      	cmp	r5, #0
 8007260:	4607      	mov	r7, r0
 8007262:	db01      	blt.n	8007268 <_malloc_r+0x1c>
 8007264:	42a9      	cmp	r1, r5
 8007266:	d905      	bls.n	8007274 <_malloc_r+0x28>
 8007268:	230c      	movs	r3, #12
 800726a:	2600      	movs	r6, #0
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4630      	mov	r0, r6
 8007270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007274:	4e2e      	ldr	r6, [pc, #184]	; (8007330 <_malloc_r+0xe4>)
 8007276:	f000 fe4d 	bl	8007f14 <__malloc_lock>
 800727a:	6833      	ldr	r3, [r6, #0]
 800727c:	461c      	mov	r4, r3
 800727e:	bb34      	cbnz	r4, 80072ce <_malloc_r+0x82>
 8007280:	4629      	mov	r1, r5
 8007282:	4638      	mov	r0, r7
 8007284:	f7ff ffc2 	bl	800720c <sbrk_aligned>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	4604      	mov	r4, r0
 800728c:	d14d      	bne.n	800732a <_malloc_r+0xde>
 800728e:	6834      	ldr	r4, [r6, #0]
 8007290:	4626      	mov	r6, r4
 8007292:	2e00      	cmp	r6, #0
 8007294:	d140      	bne.n	8007318 <_malloc_r+0xcc>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	4631      	mov	r1, r6
 800729a:	4638      	mov	r0, r7
 800729c:	eb04 0803 	add.w	r8, r4, r3
 80072a0:	f000 fb36 	bl	8007910 <_sbrk_r>
 80072a4:	4580      	cmp	r8, r0
 80072a6:	d13a      	bne.n	800731e <_malloc_r+0xd2>
 80072a8:	6821      	ldr	r1, [r4, #0]
 80072aa:	3503      	adds	r5, #3
 80072ac:	1a6d      	subs	r5, r5, r1
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	4638      	mov	r0, r7
 80072bc:	4629      	mov	r1, r5
 80072be:	f7ff ffa5 	bl	800720c <sbrk_aligned>
 80072c2:	3001      	adds	r0, #1
 80072c4:	d02b      	beq.n	800731e <_malloc_r+0xd2>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	442b      	add	r3, r5
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	e00e      	b.n	80072ec <_malloc_r+0xa0>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	1b52      	subs	r2, r2, r5
 80072d2:	d41e      	bmi.n	8007312 <_malloc_r+0xc6>
 80072d4:	2a0b      	cmp	r2, #11
 80072d6:	d916      	bls.n	8007306 <_malloc_r+0xba>
 80072d8:	1961      	adds	r1, r4, r5
 80072da:	42a3      	cmp	r3, r4
 80072dc:	6025      	str	r5, [r4, #0]
 80072de:	bf18      	it	ne
 80072e0:	6059      	strne	r1, [r3, #4]
 80072e2:	6863      	ldr	r3, [r4, #4]
 80072e4:	bf08      	it	eq
 80072e6:	6031      	streq	r1, [r6, #0]
 80072e8:	5162      	str	r2, [r4, r5]
 80072ea:	604b      	str	r3, [r1, #4]
 80072ec:	4638      	mov	r0, r7
 80072ee:	f104 060b 	add.w	r6, r4, #11
 80072f2:	f000 fe15 	bl	8007f20 <__malloc_unlock>
 80072f6:	f026 0607 	bic.w	r6, r6, #7
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	1af2      	subs	r2, r6, r3
 80072fe:	d0b6      	beq.n	800726e <_malloc_r+0x22>
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	50a3      	str	r3, [r4, r2]
 8007304:	e7b3      	b.n	800726e <_malloc_r+0x22>
 8007306:	6862      	ldr	r2, [r4, #4]
 8007308:	42a3      	cmp	r3, r4
 800730a:	bf0c      	ite	eq
 800730c:	6032      	streq	r2, [r6, #0]
 800730e:	605a      	strne	r2, [r3, #4]
 8007310:	e7ec      	b.n	80072ec <_malloc_r+0xa0>
 8007312:	4623      	mov	r3, r4
 8007314:	6864      	ldr	r4, [r4, #4]
 8007316:	e7b2      	b.n	800727e <_malloc_r+0x32>
 8007318:	4634      	mov	r4, r6
 800731a:	6876      	ldr	r6, [r6, #4]
 800731c:	e7b9      	b.n	8007292 <_malloc_r+0x46>
 800731e:	230c      	movs	r3, #12
 8007320:	4638      	mov	r0, r7
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	f000 fdfc 	bl	8007f20 <__malloc_unlock>
 8007328:	e7a1      	b.n	800726e <_malloc_r+0x22>
 800732a:	6025      	str	r5, [r4, #0]
 800732c:	e7de      	b.n	80072ec <_malloc_r+0xa0>
 800732e:	bf00      	nop
 8007330:	200002c0 	.word	0x200002c0

08007334 <__sfputc_r>:
 8007334:	6893      	ldr	r3, [r2, #8]
 8007336:	b410      	push	{r4}
 8007338:	3b01      	subs	r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	6093      	str	r3, [r2, #8]
 800733e:	da07      	bge.n	8007350 <__sfputc_r+0x1c>
 8007340:	6994      	ldr	r4, [r2, #24]
 8007342:	42a3      	cmp	r3, r4
 8007344:	db01      	blt.n	800734a <__sfputc_r+0x16>
 8007346:	290a      	cmp	r1, #10
 8007348:	d102      	bne.n	8007350 <__sfputc_r+0x1c>
 800734a:	bc10      	pop	{r4}
 800734c:	f000 baf0 	b.w	8007930 <__swbuf_r>
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	1c58      	adds	r0, r3, #1
 8007354:	6010      	str	r0, [r2, #0]
 8007356:	7019      	strb	r1, [r3, #0]
 8007358:	4608      	mov	r0, r1
 800735a:	bc10      	pop	{r4}
 800735c:	4770      	bx	lr

0800735e <__sfputs_r>:
 800735e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007360:	4606      	mov	r6, r0
 8007362:	460f      	mov	r7, r1
 8007364:	4614      	mov	r4, r2
 8007366:	18d5      	adds	r5, r2, r3
 8007368:	42ac      	cmp	r4, r5
 800736a:	d101      	bne.n	8007370 <__sfputs_r+0x12>
 800736c:	2000      	movs	r0, #0
 800736e:	e007      	b.n	8007380 <__sfputs_r+0x22>
 8007370:	463a      	mov	r2, r7
 8007372:	4630      	mov	r0, r6
 8007374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007378:	f7ff ffdc 	bl	8007334 <__sfputc_r>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d1f3      	bne.n	8007368 <__sfputs_r+0xa>
 8007380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007384 <_vfiprintf_r>:
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	460d      	mov	r5, r1
 800738a:	4614      	mov	r4, r2
 800738c:	4698      	mov	r8, r3
 800738e:	4606      	mov	r6, r0
 8007390:	b09d      	sub	sp, #116	; 0x74
 8007392:	b118      	cbz	r0, 800739c <_vfiprintf_r+0x18>
 8007394:	6983      	ldr	r3, [r0, #24]
 8007396:	b90b      	cbnz	r3, 800739c <_vfiprintf_r+0x18>
 8007398:	f000 fca8 	bl	8007cec <__sinit>
 800739c:	4b89      	ldr	r3, [pc, #548]	; (80075c4 <_vfiprintf_r+0x240>)
 800739e:	429d      	cmp	r5, r3
 80073a0:	d11b      	bne.n	80073da <_vfiprintf_r+0x56>
 80073a2:	6875      	ldr	r5, [r6, #4]
 80073a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b2:	f000 fd39 	bl	8007e28 <__retarget_lock_acquire_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	071b      	lsls	r3, r3, #28
 80073ba:	d501      	bpl.n	80073c0 <_vfiprintf_r+0x3c>
 80073bc:	692b      	ldr	r3, [r5, #16]
 80073be:	b9eb      	cbnz	r3, 80073fc <_vfiprintf_r+0x78>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 fb06 	bl	80079d4 <__swsetup_r>
 80073c8:	b1c0      	cbz	r0, 80073fc <_vfiprintf_r+0x78>
 80073ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073cc:	07dc      	lsls	r4, r3, #31
 80073ce:	d50e      	bpl.n	80073ee <_vfiprintf_r+0x6a>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	b01d      	add	sp, #116	; 0x74
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <_vfiprintf_r+0x244>)
 80073dc:	429d      	cmp	r5, r3
 80073de:	d101      	bne.n	80073e4 <_vfiprintf_r+0x60>
 80073e0:	68b5      	ldr	r5, [r6, #8]
 80073e2:	e7df      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073e4:	4b79      	ldr	r3, [pc, #484]	; (80075cc <_vfiprintf_r+0x248>)
 80073e6:	429d      	cmp	r5, r3
 80073e8:	bf08      	it	eq
 80073ea:	68f5      	ldreq	r5, [r6, #12]
 80073ec:	e7da      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	0598      	lsls	r0, r3, #22
 80073f2:	d4ed      	bmi.n	80073d0 <_vfiprintf_r+0x4c>
 80073f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073f6:	f000 fd18 	bl	8007e2a <__retarget_lock_release_recursive>
 80073fa:	e7e9      	b.n	80073d0 <_vfiprintf_r+0x4c>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007400:	2320      	movs	r3, #32
 8007402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007406:	2330      	movs	r3, #48	; 0x30
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007410:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80075d0 <_vfiprintf_r+0x24c>
 8007414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007418:	4623      	mov	r3, r4
 800741a:	469a      	mov	sl, r3
 800741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007420:	b10a      	cbz	r2, 8007426 <_vfiprintf_r+0xa2>
 8007422:	2a25      	cmp	r2, #37	; 0x25
 8007424:	d1f9      	bne.n	800741a <_vfiprintf_r+0x96>
 8007426:	ebba 0b04 	subs.w	fp, sl, r4
 800742a:	d00b      	beq.n	8007444 <_vfiprintf_r+0xc0>
 800742c:	465b      	mov	r3, fp
 800742e:	4622      	mov	r2, r4
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ff93 	bl	800735e <__sfputs_r>
 8007438:	3001      	adds	r0, #1
 800743a:	f000 80aa 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800743e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007440:	445a      	add	r2, fp
 8007442:	9209      	str	r2, [sp, #36]	; 0x24
 8007444:	f89a 3000 	ldrb.w	r3, [sl]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a2 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800744e:	2300      	movs	r3, #0
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007458:	f10a 0a01 	add.w	sl, sl, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007464:	931a      	str	r3, [sp, #104]	; 0x68
 8007466:	4654      	mov	r4, sl
 8007468:	2205      	movs	r2, #5
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	4858      	ldr	r0, [pc, #352]	; (80075d0 <_vfiprintf_r+0x24c>)
 8007470:	f000 fd42 	bl	8007ef8 <memchr>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	b9d8      	cbnz	r0, 80074b0 <_vfiprintf_r+0x12c>
 8007478:	06d1      	lsls	r1, r2, #27
 800747a:	bf44      	itt	mi
 800747c:	2320      	movmi	r3, #32
 800747e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007482:	0713      	lsls	r3, r2, #28
 8007484:	bf44      	itt	mi
 8007486:	232b      	movmi	r3, #43	; 0x2b
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b2a      	cmp	r3, #42	; 0x2a
 8007492:	d015      	beq.n	80074c0 <_vfiprintf_r+0x13c>
 8007494:	4654      	mov	r4, sl
 8007496:	2000      	movs	r0, #0
 8007498:	f04f 0c0a 	mov.w	ip, #10
 800749c:	9a07      	ldr	r2, [sp, #28]
 800749e:	4621      	mov	r1, r4
 80074a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a4:	3b30      	subs	r3, #48	; 0x30
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d94e      	bls.n	8007548 <_vfiprintf_r+0x1c4>
 80074aa:	b1b0      	cbz	r0, 80074da <_vfiprintf_r+0x156>
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	e014      	b.n	80074da <_vfiprintf_r+0x156>
 80074b0:	eba0 0308 	sub.w	r3, r0, r8
 80074b4:	fa09 f303 	lsl.w	r3, r9, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	46a2      	mov	sl, r4
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	e7d2      	b.n	8007466 <_vfiprintf_r+0xe2>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	1d19      	adds	r1, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfbb      	ittet	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f042 0202 	orrlt.w	r2, r2, #2
 80074d2:	9307      	strge	r3, [sp, #28]
 80074d4:	9307      	strlt	r3, [sp, #28]
 80074d6:	bfb8      	it	lt
 80074d8:	9204      	strlt	r2, [sp, #16]
 80074da:	7823      	ldrb	r3, [r4, #0]
 80074dc:	2b2e      	cmp	r3, #46	; 0x2e
 80074de:	d10c      	bne.n	80074fa <_vfiprintf_r+0x176>
 80074e0:	7863      	ldrb	r3, [r4, #1]
 80074e2:	2b2a      	cmp	r3, #42	; 0x2a
 80074e4:	d135      	bne.n	8007552 <_vfiprintf_r+0x1ce>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	3402      	adds	r4, #2
 80074ea:	1d1a      	adds	r2, r3, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	9203      	str	r2, [sp, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bfb8      	it	lt
 80074f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80075d4 <_vfiprintf_r+0x250>
 80074fe:	2203      	movs	r2, #3
 8007500:	4650      	mov	r0, sl
 8007502:	7821      	ldrb	r1, [r4, #0]
 8007504:	f000 fcf8 	bl	8007ef8 <memchr>
 8007508:	b140      	cbz	r0, 800751c <_vfiprintf_r+0x198>
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	eba0 000a 	sub.w	r0, r0, sl
 8007510:	fa03 f000 	lsl.w	r0, r3, r0
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	3401      	adds	r4, #1
 8007518:	4303      	orrs	r3, r0
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	2206      	movs	r2, #6
 8007522:	482d      	ldr	r0, [pc, #180]	; (80075d8 <_vfiprintf_r+0x254>)
 8007524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007528:	f000 fce6 	bl	8007ef8 <memchr>
 800752c:	2800      	cmp	r0, #0
 800752e:	d03f      	beq.n	80075b0 <_vfiprintf_r+0x22c>
 8007530:	4b2a      	ldr	r3, [pc, #168]	; (80075dc <_vfiprintf_r+0x258>)
 8007532:	bb1b      	cbnz	r3, 800757c <_vfiprintf_r+0x1f8>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	3307      	adds	r3, #7
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	3308      	adds	r3, #8
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007542:	443b      	add	r3, r7
 8007544:	9309      	str	r3, [sp, #36]	; 0x24
 8007546:	e767      	b.n	8007418 <_vfiprintf_r+0x94>
 8007548:	460c      	mov	r4, r1
 800754a:	2001      	movs	r0, #1
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	e7a5      	b.n	800749e <_vfiprintf_r+0x11a>
 8007552:	2300      	movs	r3, #0
 8007554:	f04f 0c0a 	mov.w	ip, #10
 8007558:	4619      	mov	r1, r3
 800755a:	3401      	adds	r4, #1
 800755c:	9305      	str	r3, [sp, #20]
 800755e:	4620      	mov	r0, r4
 8007560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007564:	3a30      	subs	r2, #48	; 0x30
 8007566:	2a09      	cmp	r2, #9
 8007568:	d903      	bls.n	8007572 <_vfiprintf_r+0x1ee>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c5      	beq.n	80074fa <_vfiprintf_r+0x176>
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	e7c3      	b.n	80074fa <_vfiprintf_r+0x176>
 8007572:	4604      	mov	r4, r0
 8007574:	2301      	movs	r3, #1
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	e7f0      	b.n	800755e <_vfiprintf_r+0x1da>
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	462a      	mov	r2, r5
 8007582:	4630      	mov	r0, r6
 8007584:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <_vfiprintf_r+0x25c>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	f3af 8000 	nop.w
 800758c:	4607      	mov	r7, r0
 800758e:	1c78      	adds	r0, r7, #1
 8007590:	d1d6      	bne.n	8007540 <_vfiprintf_r+0x1bc>
 8007592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d405      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	059a      	lsls	r2, r3, #22
 800759c:	d402      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 800759e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a0:	f000 fc43 	bl	8007e2a <__retarget_lock_release_recursive>
 80075a4:	89ab      	ldrh	r3, [r5, #12]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	f53f af12 	bmi.w	80073d0 <_vfiprintf_r+0x4c>
 80075ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ae:	e711      	b.n	80073d4 <_vfiprintf_r+0x50>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <_vfiprintf_r+0x25c>)
 80075ba:	a904      	add	r1, sp, #16
 80075bc:	f000 f882 	bl	80076c4 <_printf_i>
 80075c0:	e7e4      	b.n	800758c <_vfiprintf_r+0x208>
 80075c2:	bf00      	nop
 80075c4:	08009fe8 	.word	0x08009fe8
 80075c8:	0800a008 	.word	0x0800a008
 80075cc:	08009fc8 	.word	0x08009fc8
 80075d0:	08009f92 	.word	0x08009f92
 80075d4:	08009f98 	.word	0x08009f98
 80075d8:	08009f9c 	.word	0x08009f9c
 80075dc:	00000000 	.word	0x00000000
 80075e0:	0800735f 	.word	0x0800735f

080075e4 <_printf_common>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	4616      	mov	r6, r2
 80075ea:	4699      	mov	r9, r3
 80075ec:	688a      	ldr	r2, [r1, #8]
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	4607      	mov	r7, r0
 80075f2:	4293      	cmp	r3, r2
 80075f4:	bfb8      	it	lt
 80075f6:	4613      	movlt	r3, r2
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075fe:	460c      	mov	r4, r1
 8007600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007604:	b10a      	cbz	r2, 800760a <_printf_common+0x26>
 8007606:	3301      	adds	r3, #1
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	0699      	lsls	r1, r3, #26
 800760e:	bf42      	ittt	mi
 8007610:	6833      	ldrmi	r3, [r6, #0]
 8007612:	3302      	addmi	r3, #2
 8007614:	6033      	strmi	r3, [r6, #0]
 8007616:	6825      	ldr	r5, [r4, #0]
 8007618:	f015 0506 	ands.w	r5, r5, #6
 800761c:	d106      	bne.n	800762c <_printf_common+0x48>
 800761e:	f104 0a19 	add.w	sl, r4, #25
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	6832      	ldr	r2, [r6, #0]
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	42ab      	cmp	r3, r5
 800762a:	dc28      	bgt.n	800767e <_printf_common+0x9a>
 800762c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007630:	1e13      	subs	r3, r2, #0
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	bf18      	it	ne
 8007636:	2301      	movne	r3, #1
 8007638:	0692      	lsls	r2, r2, #26
 800763a:	d42d      	bmi.n	8007698 <_printf_common+0xb4>
 800763c:	4649      	mov	r1, r9
 800763e:	4638      	mov	r0, r7
 8007640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007644:	47c0      	blx	r8
 8007646:	3001      	adds	r0, #1
 8007648:	d020      	beq.n	800768c <_printf_common+0xa8>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	68e5      	ldr	r5, [r4, #12]
 800764e:	f003 0306 	and.w	r3, r3, #6
 8007652:	2b04      	cmp	r3, #4
 8007654:	bf18      	it	ne
 8007656:	2500      	movne	r5, #0
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	f04f 0600 	mov.w	r6, #0
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	bf08      	it	eq
 8007662:	1aad      	subeq	r5, r5, r2
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	bf08      	it	eq
 8007668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800766c:	4293      	cmp	r3, r2
 800766e:	bfc4      	itt	gt
 8007670:	1a9b      	subgt	r3, r3, r2
 8007672:	18ed      	addgt	r5, r5, r3
 8007674:	341a      	adds	r4, #26
 8007676:	42b5      	cmp	r5, r6
 8007678:	d11a      	bne.n	80076b0 <_printf_common+0xcc>
 800767a:	2000      	movs	r0, #0
 800767c:	e008      	b.n	8007690 <_printf_common+0xac>
 800767e:	2301      	movs	r3, #1
 8007680:	4652      	mov	r2, sl
 8007682:	4649      	mov	r1, r9
 8007684:	4638      	mov	r0, r7
 8007686:	47c0      	blx	r8
 8007688:	3001      	adds	r0, #1
 800768a:	d103      	bne.n	8007694 <_printf_common+0xb0>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007694:	3501      	adds	r5, #1
 8007696:	e7c4      	b.n	8007622 <_printf_common+0x3e>
 8007698:	2030      	movs	r0, #48	; 0x30
 800769a:	18e1      	adds	r1, r4, r3
 800769c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076a6:	4422      	add	r2, r4
 80076a8:	3302      	adds	r3, #2
 80076aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ae:	e7c5      	b.n	800763c <_printf_common+0x58>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4622      	mov	r2, r4
 80076b4:	4649      	mov	r1, r9
 80076b6:	4638      	mov	r0, r7
 80076b8:	47c0      	blx	r8
 80076ba:	3001      	adds	r0, #1
 80076bc:	d0e6      	beq.n	800768c <_printf_common+0xa8>
 80076be:	3601      	adds	r6, #1
 80076c0:	e7d9      	b.n	8007676 <_printf_common+0x92>
	...

080076c4 <_printf_i>:
 80076c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	7e0f      	ldrb	r7, [r1, #24]
 80076ca:	4691      	mov	r9, r2
 80076cc:	2f78      	cmp	r7, #120	; 0x78
 80076ce:	4680      	mov	r8, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	469a      	mov	sl, r3
 80076d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076da:	d807      	bhi.n	80076ec <_printf_i+0x28>
 80076dc:	2f62      	cmp	r7, #98	; 0x62
 80076de:	d80a      	bhi.n	80076f6 <_printf_i+0x32>
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	f000 80d9 	beq.w	8007898 <_printf_i+0x1d4>
 80076e6:	2f58      	cmp	r7, #88	; 0x58
 80076e8:	f000 80a4 	beq.w	8007834 <_printf_i+0x170>
 80076ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076f4:	e03a      	b.n	800776c <_printf_i+0xa8>
 80076f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076fa:	2b15      	cmp	r3, #21
 80076fc:	d8f6      	bhi.n	80076ec <_printf_i+0x28>
 80076fe:	a101      	add	r1, pc, #4	; (adr r1, 8007704 <_printf_i+0x40>)
 8007700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007704:	0800775d 	.word	0x0800775d
 8007708:	08007771 	.word	0x08007771
 800770c:	080076ed 	.word	0x080076ed
 8007710:	080076ed 	.word	0x080076ed
 8007714:	080076ed 	.word	0x080076ed
 8007718:	080076ed 	.word	0x080076ed
 800771c:	08007771 	.word	0x08007771
 8007720:	080076ed 	.word	0x080076ed
 8007724:	080076ed 	.word	0x080076ed
 8007728:	080076ed 	.word	0x080076ed
 800772c:	080076ed 	.word	0x080076ed
 8007730:	0800787f 	.word	0x0800787f
 8007734:	080077a1 	.word	0x080077a1
 8007738:	08007861 	.word	0x08007861
 800773c:	080076ed 	.word	0x080076ed
 8007740:	080076ed 	.word	0x080076ed
 8007744:	080078a1 	.word	0x080078a1
 8007748:	080076ed 	.word	0x080076ed
 800774c:	080077a1 	.word	0x080077a1
 8007750:	080076ed 	.word	0x080076ed
 8007754:	080076ed 	.word	0x080076ed
 8007758:	08007869 	.word	0x08007869
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	1d1a      	adds	r2, r3, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	602a      	str	r2, [r5, #0]
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800776c:	2301      	movs	r3, #1
 800776e:	e0a4      	b.n	80078ba <_printf_i+0x1f6>
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	6829      	ldr	r1, [r5, #0]
 8007774:	0606      	lsls	r6, r0, #24
 8007776:	f101 0304 	add.w	r3, r1, #4
 800777a:	d50a      	bpl.n	8007792 <_printf_i+0xce>
 800777c:	680e      	ldr	r6, [r1, #0]
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	2e00      	cmp	r6, #0
 8007782:	da03      	bge.n	800778c <_printf_i+0xc8>
 8007784:	232d      	movs	r3, #45	; 0x2d
 8007786:	4276      	negs	r6, r6
 8007788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778c:	230a      	movs	r3, #10
 800778e:	485e      	ldr	r0, [pc, #376]	; (8007908 <_printf_i+0x244>)
 8007790:	e019      	b.n	80077c6 <_printf_i+0x102>
 8007792:	680e      	ldr	r6, [r1, #0]
 8007794:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	bf18      	it	ne
 800779c:	b236      	sxthne	r6, r6
 800779e:	e7ef      	b.n	8007780 <_printf_i+0xbc>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6029      	str	r1, [r5, #0]
 80077a8:	0601      	lsls	r1, r0, #24
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0xec>
 80077ac:	681e      	ldr	r6, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0xf2>
 80077b0:	0646      	lsls	r6, r0, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0xe8>
 80077b4:	881e      	ldrh	r6, [r3, #0]
 80077b6:	2f6f      	cmp	r7, #111	; 0x6f
 80077b8:	bf0c      	ite	eq
 80077ba:	2308      	moveq	r3, #8
 80077bc:	230a      	movne	r3, #10
 80077be:	4852      	ldr	r0, [pc, #328]	; (8007908 <_printf_i+0x244>)
 80077c0:	2100      	movs	r1, #0
 80077c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077c6:	6865      	ldr	r5, [r4, #4]
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	bfa8      	it	ge
 80077cc:	6821      	ldrge	r1, [r4, #0]
 80077ce:	60a5      	str	r5, [r4, #8]
 80077d0:	bfa4      	itt	ge
 80077d2:	f021 0104 	bicge.w	r1, r1, #4
 80077d6:	6021      	strge	r1, [r4, #0]
 80077d8:	b90e      	cbnz	r6, 80077de <_printf_i+0x11a>
 80077da:	2d00      	cmp	r5, #0
 80077dc:	d04d      	beq.n	800787a <_printf_i+0x1b6>
 80077de:	4615      	mov	r5, r2
 80077e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80077e4:	fb03 6711 	mls	r7, r3, r1, r6
 80077e8:	5dc7      	ldrb	r7, [r0, r7]
 80077ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077ee:	4637      	mov	r7, r6
 80077f0:	42bb      	cmp	r3, r7
 80077f2:	460e      	mov	r6, r1
 80077f4:	d9f4      	bls.n	80077e0 <_printf_i+0x11c>
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d10b      	bne.n	8007812 <_printf_i+0x14e>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	07de      	lsls	r6, r3, #31
 80077fe:	d508      	bpl.n	8007812 <_printf_i+0x14e>
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	6861      	ldr	r1, [r4, #4]
 8007804:	4299      	cmp	r1, r3
 8007806:	bfde      	ittt	le
 8007808:	2330      	movle	r3, #48	; 0x30
 800780a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800780e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007812:	1b52      	subs	r2, r2, r5
 8007814:	6122      	str	r2, [r4, #16]
 8007816:	464b      	mov	r3, r9
 8007818:	4621      	mov	r1, r4
 800781a:	4640      	mov	r0, r8
 800781c:	f8cd a000 	str.w	sl, [sp]
 8007820:	aa03      	add	r2, sp, #12
 8007822:	f7ff fedf 	bl	80075e4 <_printf_common>
 8007826:	3001      	adds	r0, #1
 8007828:	d14c      	bne.n	80078c4 <_printf_i+0x200>
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	b004      	add	sp, #16
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	4834      	ldr	r0, [pc, #208]	; (8007908 <_printf_i+0x244>)
 8007836:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800783a:	6829      	ldr	r1, [r5, #0]
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007842:	6029      	str	r1, [r5, #0]
 8007844:	061d      	lsls	r5, r3, #24
 8007846:	d514      	bpl.n	8007872 <_printf_i+0x1ae>
 8007848:	07df      	lsls	r7, r3, #31
 800784a:	bf44      	itt	mi
 800784c:	f043 0320 	orrmi.w	r3, r3, #32
 8007850:	6023      	strmi	r3, [r4, #0]
 8007852:	b91e      	cbnz	r6, 800785c <_printf_i+0x198>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	f023 0320 	bic.w	r3, r3, #32
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	2310      	movs	r3, #16
 800785e:	e7af      	b.n	80077c0 <_printf_i+0xfc>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	f043 0320 	orr.w	r3, r3, #32
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	2378      	movs	r3, #120	; 0x78
 800786a:	4828      	ldr	r0, [pc, #160]	; (800790c <_printf_i+0x248>)
 800786c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007870:	e7e3      	b.n	800783a <_printf_i+0x176>
 8007872:	0659      	lsls	r1, r3, #25
 8007874:	bf48      	it	mi
 8007876:	b2b6      	uxthmi	r6, r6
 8007878:	e7e6      	b.n	8007848 <_printf_i+0x184>
 800787a:	4615      	mov	r5, r2
 800787c:	e7bb      	b.n	80077f6 <_printf_i+0x132>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	6826      	ldr	r6, [r4, #0]
 8007882:	1d18      	adds	r0, r3, #4
 8007884:	6961      	ldr	r1, [r4, #20]
 8007886:	6028      	str	r0, [r5, #0]
 8007888:	0635      	lsls	r5, r6, #24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0x1ce>
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	e002      	b.n	8007898 <_printf_i+0x1d4>
 8007892:	0670      	lsls	r0, r6, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0x1ca>
 8007896:	8019      	strh	r1, [r3, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	4615      	mov	r5, r2
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	e7ba      	b.n	8007816 <_printf_i+0x152>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	2100      	movs	r1, #0
 80078a4:	1d1a      	adds	r2, r3, #4
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	681d      	ldr	r5, [r3, #0]
 80078aa:	6862      	ldr	r2, [r4, #4]
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fb23 	bl	8007ef8 <memchr>
 80078b2:	b108      	cbz	r0, 80078b8 <_printf_i+0x1f4>
 80078b4:	1b40      	subs	r0, r0, r5
 80078b6:	6060      	str	r0, [r4, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c2:	e7a8      	b.n	8007816 <_printf_i+0x152>
 80078c4:	462a      	mov	r2, r5
 80078c6:	4649      	mov	r1, r9
 80078c8:	4640      	mov	r0, r8
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0ab      	beq.n	800782a <_printf_i+0x166>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d413      	bmi.n	8007900 <_printf_i+0x23c>
 80078d8:	68e0      	ldr	r0, [r4, #12]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	4298      	cmp	r0, r3
 80078de:	bfb8      	it	lt
 80078e0:	4618      	movlt	r0, r3
 80078e2:	e7a4      	b.n	800782e <_printf_i+0x16a>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4632      	mov	r2, r6
 80078e8:	4649      	mov	r1, r9
 80078ea:	4640      	mov	r0, r8
 80078ec:	47d0      	blx	sl
 80078ee:	3001      	adds	r0, #1
 80078f0:	d09b      	beq.n	800782a <_printf_i+0x166>
 80078f2:	3501      	adds	r5, #1
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	1a5b      	subs	r3, r3, r1
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	dcf2      	bgt.n	80078e4 <_printf_i+0x220>
 80078fe:	e7eb      	b.n	80078d8 <_printf_i+0x214>
 8007900:	2500      	movs	r5, #0
 8007902:	f104 0619 	add.w	r6, r4, #25
 8007906:	e7f5      	b.n	80078f4 <_printf_i+0x230>
 8007908:	08009fa3 	.word	0x08009fa3
 800790c:	08009fb4 	.word	0x08009fb4

08007910 <_sbrk_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	2300      	movs	r3, #0
 8007914:	4d05      	ldr	r5, [pc, #20]	; (800792c <_sbrk_r+0x1c>)
 8007916:	4604      	mov	r4, r0
 8007918:	4608      	mov	r0, r1
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	f7f9 ffe2 	bl	80018e4 <_sbrk>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_sbrk_r+0x1a>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_sbrk_r+0x1a>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	200002cc 	.word	0x200002cc

08007930 <__swbuf_r>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	460e      	mov	r6, r1
 8007934:	4614      	mov	r4, r2
 8007936:	4605      	mov	r5, r0
 8007938:	b118      	cbz	r0, 8007942 <__swbuf_r+0x12>
 800793a:	6983      	ldr	r3, [r0, #24]
 800793c:	b90b      	cbnz	r3, 8007942 <__swbuf_r+0x12>
 800793e:	f000 f9d5 	bl	8007cec <__sinit>
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <__swbuf_r+0x98>)
 8007944:	429c      	cmp	r4, r3
 8007946:	d12b      	bne.n	80079a0 <__swbuf_r+0x70>
 8007948:	686c      	ldr	r4, [r5, #4]
 800794a:	69a3      	ldr	r3, [r4, #24]
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	071a      	lsls	r2, r3, #28
 8007952:	d52f      	bpl.n	80079b4 <__swbuf_r+0x84>
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	b36b      	cbz	r3, 80079b4 <__swbuf_r+0x84>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	b2f6      	uxtb	r6, r6
 800795e:	1ac0      	subs	r0, r0, r3
 8007960:	6963      	ldr	r3, [r4, #20]
 8007962:	4637      	mov	r7, r6
 8007964:	4283      	cmp	r3, r0
 8007966:	dc04      	bgt.n	8007972 <__swbuf_r+0x42>
 8007968:	4621      	mov	r1, r4
 800796a:	4628      	mov	r0, r5
 800796c:	f000 f92a 	bl	8007bc4 <_fflush_r>
 8007970:	bb30      	cbnz	r0, 80079c0 <__swbuf_r+0x90>
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	3001      	adds	r0, #1
 8007976:	3b01      	subs	r3, #1
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	701e      	strb	r6, [r3, #0]
 8007982:	6963      	ldr	r3, [r4, #20]
 8007984:	4283      	cmp	r3, r0
 8007986:	d004      	beq.n	8007992 <__swbuf_r+0x62>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d506      	bpl.n	800799c <__swbuf_r+0x6c>
 800798e:	2e0a      	cmp	r6, #10
 8007990:	d104      	bne.n	800799c <__swbuf_r+0x6c>
 8007992:	4621      	mov	r1, r4
 8007994:	4628      	mov	r0, r5
 8007996:	f000 f915 	bl	8007bc4 <_fflush_r>
 800799a:	b988      	cbnz	r0, 80079c0 <__swbuf_r+0x90>
 800799c:	4638      	mov	r0, r7
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <__swbuf_r+0x9c>)
 80079a2:	429c      	cmp	r4, r3
 80079a4:	d101      	bne.n	80079aa <__swbuf_r+0x7a>
 80079a6:	68ac      	ldr	r4, [r5, #8]
 80079a8:	e7cf      	b.n	800794a <__swbuf_r+0x1a>
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <__swbuf_r+0xa0>)
 80079ac:	429c      	cmp	r4, r3
 80079ae:	bf08      	it	eq
 80079b0:	68ec      	ldreq	r4, [r5, #12]
 80079b2:	e7ca      	b.n	800794a <__swbuf_r+0x1a>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f80c 	bl	80079d4 <__swsetup_r>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0cb      	beq.n	8007958 <__swbuf_r+0x28>
 80079c0:	f04f 37ff 	mov.w	r7, #4294967295
 80079c4:	e7ea      	b.n	800799c <__swbuf_r+0x6c>
 80079c6:	bf00      	nop
 80079c8:	08009fe8 	.word	0x08009fe8
 80079cc:	0800a008 	.word	0x0800a008
 80079d0:	08009fc8 	.word	0x08009fc8

080079d4 <__swsetup_r>:
 80079d4:	4b32      	ldr	r3, [pc, #200]	; (8007aa0 <__swsetup_r+0xcc>)
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	681d      	ldr	r5, [r3, #0]
 80079da:	4606      	mov	r6, r0
 80079dc:	460c      	mov	r4, r1
 80079de:	b125      	cbz	r5, 80079ea <__swsetup_r+0x16>
 80079e0:	69ab      	ldr	r3, [r5, #24]
 80079e2:	b913      	cbnz	r3, 80079ea <__swsetup_r+0x16>
 80079e4:	4628      	mov	r0, r5
 80079e6:	f000 f981 	bl	8007cec <__sinit>
 80079ea:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <__swsetup_r+0xd0>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d10f      	bne.n	8007a10 <__swsetup_r+0x3c>
 80079f0:	686c      	ldr	r4, [r5, #4]
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f8:	0719      	lsls	r1, r3, #28
 80079fa:	d42c      	bmi.n	8007a56 <__swsetup_r+0x82>
 80079fc:	06dd      	lsls	r5, r3, #27
 80079fe:	d411      	bmi.n	8007a24 <__swsetup_r+0x50>
 8007a00:	2309      	movs	r3, #9
 8007a02:	6033      	str	r3, [r6, #0]
 8007a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	e03e      	b.n	8007a8e <__swsetup_r+0xba>
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <__swsetup_r+0xd4>)
 8007a12:	429c      	cmp	r4, r3
 8007a14:	d101      	bne.n	8007a1a <__swsetup_r+0x46>
 8007a16:	68ac      	ldr	r4, [r5, #8]
 8007a18:	e7eb      	b.n	80079f2 <__swsetup_r+0x1e>
 8007a1a:	4b24      	ldr	r3, [pc, #144]	; (8007aac <__swsetup_r+0xd8>)
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	bf08      	it	eq
 8007a20:	68ec      	ldreq	r4, [r5, #12]
 8007a22:	e7e6      	b.n	80079f2 <__swsetup_r+0x1e>
 8007a24:	0758      	lsls	r0, r3, #29
 8007a26:	d512      	bpl.n	8007a4e <__swsetup_r+0x7a>
 8007a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a2a:	b141      	cbz	r1, 8007a3e <__swsetup_r+0x6a>
 8007a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d002      	beq.n	8007a3a <__swsetup_r+0x66>
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff fba1 	bl	800717c <_free_r>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	b94b      	cbnz	r3, 8007a6e <__swsetup_r+0x9a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a64:	d003      	beq.n	8007a6e <__swsetup_r+0x9a>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fa05 	bl	8007e78 <__smakebuf_r>
 8007a6e:	89a0      	ldrh	r0, [r4, #12]
 8007a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a74:	f010 0301 	ands.w	r3, r0, #1
 8007a78:	d00a      	beq.n	8007a90 <__swsetup_r+0xbc>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	6963      	ldr	r3, [r4, #20]
 8007a80:	425b      	negs	r3, r3
 8007a82:	61a3      	str	r3, [r4, #24]
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	b943      	cbnz	r3, 8007a9a <__swsetup_r+0xc6>
 8007a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a8c:	d1ba      	bne.n	8007a04 <__swsetup_r+0x30>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	0781      	lsls	r1, r0, #30
 8007a92:	bf58      	it	pl
 8007a94:	6963      	ldrpl	r3, [r4, #20]
 8007a96:	60a3      	str	r3, [r4, #8]
 8007a98:	e7f4      	b.n	8007a84 <__swsetup_r+0xb0>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e7f7      	b.n	8007a8e <__swsetup_r+0xba>
 8007a9e:	bf00      	nop
 8007aa0:	20000014 	.word	0x20000014
 8007aa4:	08009fe8 	.word	0x08009fe8
 8007aa8:	0800a008 	.word	0x0800a008
 8007aac:	08009fc8 	.word	0x08009fc8

08007ab0 <abort>:
 8007ab0:	2006      	movs	r0, #6
 8007ab2:	b508      	push	{r3, lr}
 8007ab4:	f000 fa62 	bl	8007f7c <raise>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f7f9 fea0 	bl	80017fe <_exit>
	...

08007ac0 <__sflush_r>:
 8007ac0:	898a      	ldrh	r2, [r1, #12]
 8007ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	0710      	lsls	r0, r2, #28
 8007ac8:	460c      	mov	r4, r1
 8007aca:	d457      	bmi.n	8007b7c <__sflush_r+0xbc>
 8007acc:	684b      	ldr	r3, [r1, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dc04      	bgt.n	8007adc <__sflush_r+0x1c>
 8007ad2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dc01      	bgt.n	8007adc <__sflush_r+0x1c>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ade:	2e00      	cmp	r6, #0
 8007ae0:	d0fa      	beq.n	8007ad8 <__sflush_r+0x18>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ae8:	682f      	ldr	r7, [r5, #0]
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	d032      	beq.n	8007b54 <__sflush_r+0x94>
 8007aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	075a      	lsls	r2, r3, #29
 8007af4:	d505      	bpl.n	8007b02 <__sflush_r+0x42>
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	1ac0      	subs	r0, r0, r3
 8007afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007afc:	b10b      	cbz	r3, 8007b02 <__sflush_r+0x42>
 8007afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	2300      	movs	r3, #0
 8007b04:	4602      	mov	r2, r0
 8007b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b08:	4628      	mov	r0, r5
 8007b0a:	6a21      	ldr	r1, [r4, #32]
 8007b0c:	47b0      	blx	r6
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	d106      	bne.n	8007b22 <__sflush_r+0x62>
 8007b14:	6829      	ldr	r1, [r5, #0]
 8007b16:	291d      	cmp	r1, #29
 8007b18:	d82c      	bhi.n	8007b74 <__sflush_r+0xb4>
 8007b1a:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <__sflush_r+0x100>)
 8007b1c:	40ca      	lsrs	r2, r1
 8007b1e:	07d6      	lsls	r6, r2, #31
 8007b20:	d528      	bpl.n	8007b74 <__sflush_r+0xb4>
 8007b22:	2200      	movs	r2, #0
 8007b24:	6062      	str	r2, [r4, #4]
 8007b26:	6922      	ldr	r2, [r4, #16]
 8007b28:	04d9      	lsls	r1, r3, #19
 8007b2a:	6022      	str	r2, [r4, #0]
 8007b2c:	d504      	bpl.n	8007b38 <__sflush_r+0x78>
 8007b2e:	1c42      	adds	r2, r0, #1
 8007b30:	d101      	bne.n	8007b36 <__sflush_r+0x76>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b903      	cbnz	r3, 8007b38 <__sflush_r+0x78>
 8007b36:	6560      	str	r0, [r4, #84]	; 0x54
 8007b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3a:	602f      	str	r7, [r5, #0]
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d0cb      	beq.n	8007ad8 <__sflush_r+0x18>
 8007b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b44:	4299      	cmp	r1, r3
 8007b46:	d002      	beq.n	8007b4e <__sflush_r+0x8e>
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7ff fb17 	bl	800717c <_free_r>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	6360      	str	r0, [r4, #52]	; 0x34
 8007b52:	e7c2      	b.n	8007ada <__sflush_r+0x1a>
 8007b54:	6a21      	ldr	r1, [r4, #32]
 8007b56:	2301      	movs	r3, #1
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b0      	blx	r6
 8007b5c:	1c41      	adds	r1, r0, #1
 8007b5e:	d1c7      	bne.n	8007af0 <__sflush_r+0x30>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0c4      	beq.n	8007af0 <__sflush_r+0x30>
 8007b66:	2b1d      	cmp	r3, #29
 8007b68:	d001      	beq.n	8007b6e <__sflush_r+0xae>
 8007b6a:	2b16      	cmp	r3, #22
 8007b6c:	d101      	bne.n	8007b72 <__sflush_r+0xb2>
 8007b6e:	602f      	str	r7, [r5, #0]
 8007b70:	e7b2      	b.n	8007ad8 <__sflush_r+0x18>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7ae      	b.n	8007ada <__sflush_r+0x1a>
 8007b7c:	690f      	ldr	r7, [r1, #16]
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	d0aa      	beq.n	8007ad8 <__sflush_r+0x18>
 8007b82:	0793      	lsls	r3, r2, #30
 8007b84:	bf18      	it	ne
 8007b86:	2300      	movne	r3, #0
 8007b88:	680e      	ldr	r6, [r1, #0]
 8007b8a:	bf08      	it	eq
 8007b8c:	694b      	ldreq	r3, [r1, #20]
 8007b8e:	1bf6      	subs	r6, r6, r7
 8007b90:	600f      	str	r7, [r1, #0]
 8007b92:	608b      	str	r3, [r1, #8]
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	dd9f      	ble.n	8007ad8 <__sflush_r+0x18>
 8007b98:	4633      	mov	r3, r6
 8007b9a:	463a      	mov	r2, r7
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	6a21      	ldr	r1, [r4, #32]
 8007ba0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ba4:	47e0      	blx	ip
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	dc06      	bgt.n	8007bb8 <__sflush_r+0xf8>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	e790      	b.n	8007ada <__sflush_r+0x1a>
 8007bb8:	4407      	add	r7, r0
 8007bba:	1a36      	subs	r6, r6, r0
 8007bbc:	e7ea      	b.n	8007b94 <__sflush_r+0xd4>
 8007bbe:	bf00      	nop
 8007bc0:	20400001 	.word	0x20400001

08007bc4 <_fflush_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	690b      	ldr	r3, [r1, #16]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	b913      	cbnz	r3, 8007bd4 <_fflush_r+0x10>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	b118      	cbz	r0, 8007bde <_fflush_r+0x1a>
 8007bd6:	6983      	ldr	r3, [r0, #24]
 8007bd8:	b90b      	cbnz	r3, 8007bde <_fflush_r+0x1a>
 8007bda:	f000 f887 	bl	8007cec <__sinit>
 8007bde:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <_fflush_r+0x6c>)
 8007be0:	429c      	cmp	r4, r3
 8007be2:	d11b      	bne.n	8007c1c <_fflush_r+0x58>
 8007be4:	686c      	ldr	r4, [r5, #4]
 8007be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0ef      	beq.n	8007bce <_fflush_r+0xa>
 8007bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bf0:	07d0      	lsls	r0, r2, #31
 8007bf2:	d404      	bmi.n	8007bfe <_fflush_r+0x3a>
 8007bf4:	0599      	lsls	r1, r3, #22
 8007bf6:	d402      	bmi.n	8007bfe <_fflush_r+0x3a>
 8007bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfa:	f000 f915 	bl	8007e28 <__retarget_lock_acquire_recursive>
 8007bfe:	4628      	mov	r0, r5
 8007c00:	4621      	mov	r1, r4
 8007c02:	f7ff ff5d 	bl	8007ac0 <__sflush_r>
 8007c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c08:	4605      	mov	r5, r0
 8007c0a:	07da      	lsls	r2, r3, #31
 8007c0c:	d4e0      	bmi.n	8007bd0 <_fflush_r+0xc>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	059b      	lsls	r3, r3, #22
 8007c12:	d4dd      	bmi.n	8007bd0 <_fflush_r+0xc>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f000 f908 	bl	8007e2a <__retarget_lock_release_recursive>
 8007c1a:	e7d9      	b.n	8007bd0 <_fflush_r+0xc>
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <_fflush_r+0x70>)
 8007c1e:	429c      	cmp	r4, r3
 8007c20:	d101      	bne.n	8007c26 <_fflush_r+0x62>
 8007c22:	68ac      	ldr	r4, [r5, #8]
 8007c24:	e7df      	b.n	8007be6 <_fflush_r+0x22>
 8007c26:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <_fflush_r+0x74>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	bf08      	it	eq
 8007c2c:	68ec      	ldreq	r4, [r5, #12]
 8007c2e:	e7da      	b.n	8007be6 <_fflush_r+0x22>
 8007c30:	08009fe8 	.word	0x08009fe8
 8007c34:	0800a008 	.word	0x0800a008
 8007c38:	08009fc8 	.word	0x08009fc8

08007c3c <std>:
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	e9c0 3300 	strd	r3, r3, [r0]
 8007c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c4a:	6083      	str	r3, [r0, #8]
 8007c4c:	8181      	strh	r1, [r0, #12]
 8007c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c50:	81c2      	strh	r2, [r0, #14]
 8007c52:	6183      	str	r3, [r0, #24]
 8007c54:	4619      	mov	r1, r3
 8007c56:	2208      	movs	r2, #8
 8007c58:	305c      	adds	r0, #92	; 0x5c
 8007c5a:	f7ff f9e3 	bl	8007024 <memset>
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <std+0x38>)
 8007c60:	6224      	str	r4, [r4, #32]
 8007c62:	6263      	str	r3, [r4, #36]	; 0x24
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <std+0x3c>)
 8007c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <std+0x40>)
 8007c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <std+0x44>)
 8007c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	bf00      	nop
 8007c74:	08007fb5 	.word	0x08007fb5
 8007c78:	08007fd7 	.word	0x08007fd7
 8007c7c:	0800800f 	.word	0x0800800f
 8007c80:	08008033 	.word	0x08008033

08007c84 <_cleanup_r>:
 8007c84:	4901      	ldr	r1, [pc, #4]	; (8007c8c <_cleanup_r+0x8>)
 8007c86:	f000 b8af 	b.w	8007de8 <_fwalk_reent>
 8007c8a:	bf00      	nop
 8007c8c:	08007bc5 	.word	0x08007bc5

08007c90 <__sfmoreglue>:
 8007c90:	2268      	movs	r2, #104	; 0x68
 8007c92:	b570      	push	{r4, r5, r6, lr}
 8007c94:	1e4d      	subs	r5, r1, #1
 8007c96:	4355      	muls	r5, r2
 8007c98:	460e      	mov	r6, r1
 8007c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c9e:	f7ff fad5 	bl	800724c <_malloc_r>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	b140      	cbz	r0, 8007cb8 <__sfmoreglue+0x28>
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8007cac:	300c      	adds	r0, #12
 8007cae:	60a0      	str	r0, [r4, #8]
 8007cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cb4:	f7ff f9b6 	bl	8007024 <memset>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	bd70      	pop	{r4, r5, r6, pc}

08007cbc <__sfp_lock_acquire>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__sfp_lock_acquire+0x8>)
 8007cbe:	f000 b8b3 	b.w	8007e28 <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200002c9 	.word	0x200002c9

08007cc8 <__sfp_lock_release>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__sfp_lock_release+0x8>)
 8007cca:	f000 b8ae 	b.w	8007e2a <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	200002c9 	.word	0x200002c9

08007cd4 <__sinit_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sinit_lock_acquire+0x8>)
 8007cd6:	f000 b8a7 	b.w	8007e28 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200002ca 	.word	0x200002ca

08007ce0 <__sinit_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sinit_lock_release+0x8>)
 8007ce2:	f000 b8a2 	b.w	8007e2a <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	200002ca 	.word	0x200002ca

08007cec <__sinit>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f7ff fff0 	bl	8007cd4 <__sinit_lock_acquire>
 8007cf4:	69a3      	ldr	r3, [r4, #24]
 8007cf6:	b11b      	cbz	r3, 8007d00 <__sinit+0x14>
 8007cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfc:	f7ff bff0 	b.w	8007ce0 <__sinit_lock_release>
 8007d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d04:	6523      	str	r3, [r4, #80]	; 0x50
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <__sinit+0x68>)
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <__sinit+0x6c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d0e:	42a3      	cmp	r3, r4
 8007d10:	bf08      	it	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	4620      	mov	r0, r4
 8007d16:	bf08      	it	eq
 8007d18:	61a3      	streq	r3, [r4, #24]
 8007d1a:	f000 f81f 	bl	8007d5c <__sfp>
 8007d1e:	6060      	str	r0, [r4, #4]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 f81b 	bl	8007d5c <__sfp>
 8007d26:	60a0      	str	r0, [r4, #8]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 f817 	bl	8007d5c <__sfp>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2104      	movs	r1, #4
 8007d32:	60e0      	str	r0, [r4, #12]
 8007d34:	6860      	ldr	r0, [r4, #4]
 8007d36:	f7ff ff81 	bl	8007c3c <std>
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	2109      	movs	r1, #9
 8007d3e:	68a0      	ldr	r0, [r4, #8]
 8007d40:	f7ff ff7c 	bl	8007c3c <std>
 8007d44:	2202      	movs	r2, #2
 8007d46:	2112      	movs	r1, #18
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	f7ff ff77 	bl	8007c3c <std>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61a3      	str	r3, [r4, #24]
 8007d52:	e7d1      	b.n	8007cf8 <__sinit+0xc>
 8007d54:	08009ee0 	.word	0x08009ee0
 8007d58:	08007c85 	.word	0x08007c85

08007d5c <__sfp>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	4607      	mov	r7, r0
 8007d60:	f7ff ffac 	bl	8007cbc <__sfp_lock_acquire>
 8007d64:	4b1e      	ldr	r3, [pc, #120]	; (8007de0 <__sfp+0x84>)
 8007d66:	681e      	ldr	r6, [r3, #0]
 8007d68:	69b3      	ldr	r3, [r6, #24]
 8007d6a:	b913      	cbnz	r3, 8007d72 <__sfp+0x16>
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff ffbd 	bl	8007cec <__sinit>
 8007d72:	3648      	adds	r6, #72	; 0x48
 8007d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	d503      	bpl.n	8007d84 <__sfp+0x28>
 8007d7c:	6833      	ldr	r3, [r6, #0]
 8007d7e:	b30b      	cbz	r3, 8007dc4 <__sfp+0x68>
 8007d80:	6836      	ldr	r6, [r6, #0]
 8007d82:	e7f7      	b.n	8007d74 <__sfp+0x18>
 8007d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d88:	b9d5      	cbnz	r5, 8007dc0 <__sfp+0x64>
 8007d8a:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <__sfp+0x88>)
 8007d8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d90:	60e3      	str	r3, [r4, #12]
 8007d92:	6665      	str	r5, [r4, #100]	; 0x64
 8007d94:	f000 f847 	bl	8007e26 <__retarget_lock_init_recursive>
 8007d98:	f7ff ff96 	bl	8007cc8 <__sfp_lock_release>
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	4629      	mov	r1, r5
 8007da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	61a5      	str	r5, [r4, #24]
 8007dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007db0:	f7ff f938 	bl	8007024 <memset>
 8007db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	3468      	adds	r4, #104	; 0x68
 8007dc2:	e7d9      	b.n	8007d78 <__sfp+0x1c>
 8007dc4:	2104      	movs	r1, #4
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f7ff ff62 	bl	8007c90 <__sfmoreglue>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	6030      	str	r0, [r6, #0]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d1d5      	bne.n	8007d80 <__sfp+0x24>
 8007dd4:	f7ff ff78 	bl	8007cc8 <__sfp_lock_release>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	e7ee      	b.n	8007dbc <__sfp+0x60>
 8007dde:	bf00      	nop
 8007de0:	08009ee0 	.word	0x08009ee0
 8007de4:	ffff0001 	.word	0xffff0001

08007de8 <_fwalk_reent>:
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4606      	mov	r6, r0
 8007dee:	4688      	mov	r8, r1
 8007df0:	2700      	movs	r7, #0
 8007df2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8007dfe:	d505      	bpl.n	8007e0c <_fwalk_reent+0x24>
 8007e00:	6824      	ldr	r4, [r4, #0]
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d1f7      	bne.n	8007df6 <_fwalk_reent+0xe>
 8007e06:	4638      	mov	r0, r7
 8007e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e0c:	89ab      	ldrh	r3, [r5, #12]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d907      	bls.n	8007e22 <_fwalk_reent+0x3a>
 8007e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e16:	3301      	adds	r3, #1
 8007e18:	d003      	beq.n	8007e22 <_fwalk_reent+0x3a>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	47c0      	blx	r8
 8007e20:	4307      	orrs	r7, r0
 8007e22:	3568      	adds	r5, #104	; 0x68
 8007e24:	e7e9      	b.n	8007dfa <_fwalk_reent+0x12>

08007e26 <__retarget_lock_init_recursive>:
 8007e26:	4770      	bx	lr

08007e28 <__retarget_lock_acquire_recursive>:
 8007e28:	4770      	bx	lr

08007e2a <__retarget_lock_release_recursive>:
 8007e2a:	4770      	bx	lr

08007e2c <__swhatbuf_r>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	460e      	mov	r6, r1
 8007e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e34:	4614      	mov	r4, r2
 8007e36:	2900      	cmp	r1, #0
 8007e38:	461d      	mov	r5, r3
 8007e3a:	b096      	sub	sp, #88	; 0x58
 8007e3c:	da08      	bge.n	8007e50 <__swhatbuf_r+0x24>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	061a      	lsls	r2, r3, #24
 8007e48:	d410      	bmi.n	8007e6c <__swhatbuf_r+0x40>
 8007e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e4e:	e00e      	b.n	8007e6e <__swhatbuf_r+0x42>
 8007e50:	466a      	mov	r2, sp
 8007e52:	f000 f915 	bl	8008080 <_fstat_r>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	dbf1      	blt.n	8007e3e <__swhatbuf_r+0x12>
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e64:	425a      	negs	r2, r3
 8007e66:	415a      	adcs	r2, r3
 8007e68:	602a      	str	r2, [r5, #0]
 8007e6a:	e7ee      	b.n	8007e4a <__swhatbuf_r+0x1e>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	2000      	movs	r0, #0
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	b016      	add	sp, #88	; 0x58
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e78 <__smakebuf_r>:
 8007e78:	898b      	ldrh	r3, [r1, #12]
 8007e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e7c:	079d      	lsls	r5, r3, #30
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	d507      	bpl.n	8007e94 <__smakebuf_r+0x1c>
 8007e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	6163      	str	r3, [r4, #20]
 8007e90:	b002      	add	sp, #8
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	466a      	mov	r2, sp
 8007e96:	ab01      	add	r3, sp, #4
 8007e98:	f7ff ffc8 	bl	8007e2c <__swhatbuf_r>
 8007e9c:	9900      	ldr	r1, [sp, #0]
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff f9d3 	bl	800724c <_malloc_r>
 8007ea6:	b948      	cbnz	r0, 8007ebc <__smakebuf_r+0x44>
 8007ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eac:	059a      	lsls	r2, r3, #22
 8007eae:	d4ef      	bmi.n	8007e90 <__smakebuf_r+0x18>
 8007eb0:	f023 0303 	bic.w	r3, r3, #3
 8007eb4:	f043 0302 	orr.w	r3, r3, #2
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	e7e3      	b.n	8007e84 <__smakebuf_r+0xc>
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <__smakebuf_r+0x7c>)
 8007ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	6020      	str	r0, [r4, #0]
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	9b00      	ldr	r3, [sp, #0]
 8007ecc:	6120      	str	r0, [r4, #16]
 8007ece:	6163      	str	r3, [r4, #20]
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	b15b      	cbz	r3, 8007eec <__smakebuf_r+0x74>
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eda:	f000 f8e3 	bl	80080a4 <_isatty_r>
 8007ede:	b128      	cbz	r0, 8007eec <__smakebuf_r+0x74>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	89a0      	ldrh	r0, [r4, #12]
 8007eee:	4305      	orrs	r5, r0
 8007ef0:	81a5      	strh	r5, [r4, #12]
 8007ef2:	e7cd      	b.n	8007e90 <__smakebuf_r+0x18>
 8007ef4:	08007c85 	.word	0x08007c85

08007ef8 <memchr>:
 8007ef8:	4603      	mov	r3, r0
 8007efa:	b510      	push	{r4, lr}
 8007efc:	b2c9      	uxtb	r1, r1
 8007efe:	4402      	add	r2, r0
 8007f00:	4293      	cmp	r3, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	d101      	bne.n	8007f0a <memchr+0x12>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e003      	b.n	8007f12 <memchr+0x1a>
 8007f0a:	7804      	ldrb	r4, [r0, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	428c      	cmp	r4, r1
 8007f10:	d1f6      	bne.n	8007f00 <memchr+0x8>
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <__malloc_lock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__malloc_lock+0x8>)
 8007f16:	f7ff bf87 	b.w	8007e28 <__retarget_lock_acquire_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	200002c8 	.word	0x200002c8

08007f20 <__malloc_unlock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__malloc_unlock+0x8>)
 8007f22:	f7ff bf82 	b.w	8007e2a <__retarget_lock_release_recursive>
 8007f26:	bf00      	nop
 8007f28:	200002c8 	.word	0x200002c8

08007f2c <_raise_r>:
 8007f2c:	291f      	cmp	r1, #31
 8007f2e:	b538      	push	{r3, r4, r5, lr}
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	d904      	bls.n	8007f40 <_raise_r+0x14>
 8007f36:	2316      	movs	r3, #22
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f42:	b112      	cbz	r2, 8007f4a <_raise_r+0x1e>
 8007f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f48:	b94b      	cbnz	r3, 8007f5e <_raise_r+0x32>
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f830 	bl	8007fb0 <_getpid_r>
 8007f50:	462a      	mov	r2, r5
 8007f52:	4601      	mov	r1, r0
 8007f54:	4620      	mov	r0, r4
 8007f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f5a:	f000 b817 	b.w	8007f8c <_kill_r>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d00a      	beq.n	8007f78 <_raise_r+0x4c>
 8007f62:	1c59      	adds	r1, r3, #1
 8007f64:	d103      	bne.n	8007f6e <_raise_r+0x42>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	e7e7      	b.n	8007f3e <_raise_r+0x12>
 8007f6e:	2400      	movs	r4, #0
 8007f70:	4628      	mov	r0, r5
 8007f72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f76:	4798      	blx	r3
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7e0      	b.n	8007f3e <_raise_r+0x12>

08007f7c <raise>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <raise+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f7ff bfd3 	b.w	8007f2c <_raise_r>
 8007f86:	bf00      	nop
 8007f88:	20000014 	.word	0x20000014

08007f8c <_kill_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_kill_r+0x20>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f7f9 fc20 	bl	80017de <_kill>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d102      	bne.n	8007fa8 <_kill_r+0x1c>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b103      	cbz	r3, 8007fa8 <_kill_r+0x1c>
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	200002cc 	.word	0x200002cc

08007fb0 <_getpid_r>:
 8007fb0:	f7f9 bc0e 	b.w	80017d0 <_getpid>

08007fb4 <__sread>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbc:	f000 f894 	bl	80080e8 <_read_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	bfab      	itete	ge
 8007fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc8:	181b      	addge	r3, r3, r0
 8007fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fce:	bfac      	ite	ge
 8007fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fd2:	81a3      	strhlt	r3, [r4, #12]
 8007fd4:	bd10      	pop	{r4, pc}

08007fd6 <__swrite>:
 8007fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fda:	461f      	mov	r7, r3
 8007fdc:	898b      	ldrh	r3, [r1, #12]
 8007fde:	4605      	mov	r5, r0
 8007fe0:	05db      	lsls	r3, r3, #23
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	4616      	mov	r6, r2
 8007fe6:	d505      	bpl.n	8007ff4 <__swrite+0x1e>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	2200      	movs	r2, #0
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f868 	bl	80080c4 <_lseek_r>
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	4628      	mov	r0, r5
 8008000:	463b      	mov	r3, r7
 8008002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800800a:	f000 b817 	b.w	800803c <_write_r>

0800800e <__sseek>:
 800800e:	b510      	push	{r4, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008016:	f000 f855 	bl	80080c4 <_lseek_r>
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	bf15      	itete	ne
 8008020:	6560      	strne	r0, [r4, #84]	; 0x54
 8008022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800802a:	81a3      	strheq	r3, [r4, #12]
 800802c:	bf18      	it	ne
 800802e:	81a3      	strhne	r3, [r4, #12]
 8008030:	bd10      	pop	{r4, pc}

08008032 <__sclose>:
 8008032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008036:	f000 b813 	b.w	8008060 <_close_r>
	...

0800803c <_write_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4604      	mov	r4, r0
 8008040:	4608      	mov	r0, r1
 8008042:	4611      	mov	r1, r2
 8008044:	2200      	movs	r2, #0
 8008046:	4d05      	ldr	r5, [pc, #20]	; (800805c <_write_r+0x20>)
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f7f9 fbfe 	bl	800184c <_write>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_write_r+0x1e>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_write_r+0x1e>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	200002cc 	.word	0x200002cc

08008060 <_close_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	2300      	movs	r3, #0
 8008064:	4d05      	ldr	r5, [pc, #20]	; (800807c <_close_r+0x1c>)
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7f9 fc0a 	bl	8001884 <_close>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_close_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_close_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	200002cc 	.word	0x200002cc

08008080 <_fstat_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	2300      	movs	r3, #0
 8008084:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_fstat_r+0x20>)
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f7f9 fc04 	bl	800189a <_fstat>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d102      	bne.n	800809c <_fstat_r+0x1c>
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	b103      	cbz	r3, 800809c <_fstat_r+0x1c>
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	200002cc 	.word	0x200002cc

080080a4 <_isatty_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	2300      	movs	r3, #0
 80080a8:	4d05      	ldr	r5, [pc, #20]	; (80080c0 <_isatty_r+0x1c>)
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f7f9 fc02 	bl	80018b8 <_isatty>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_isatty_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_isatty_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	200002cc 	.word	0x200002cc

080080c4 <_lseek_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	2200      	movs	r2, #0
 80080ce:	4d05      	ldr	r5, [pc, #20]	; (80080e4 <_lseek_r+0x20>)
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7f9 fbfa 	bl	80018cc <_lseek>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_lseek_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_lseek_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200002cc 	.word	0x200002cc

080080e8 <_read_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	2200      	movs	r2, #0
 80080f2:	4d05      	ldr	r5, [pc, #20]	; (8008108 <_read_r+0x20>)
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7f9 fb8b 	bl	8001812 <_read>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_read_r+0x1e>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_read_r+0x1e>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	200002cc 	.word	0x200002cc

0800810c <cos>:
 800810c:	b530      	push	{r4, r5, lr}
 800810e:	4a20      	ldr	r2, [pc, #128]	; (8008190 <cos+0x84>)
 8008110:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008114:	4293      	cmp	r3, r2
 8008116:	b087      	sub	sp, #28
 8008118:	dc06      	bgt.n	8008128 <cos+0x1c>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	b007      	add	sp, #28
 8008120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008124:	f001 b8cc 	b.w	80092c0 <__kernel_cos>
 8008128:	4a1a      	ldr	r2, [pc, #104]	; (8008194 <cos+0x88>)
 800812a:	4293      	cmp	r3, r2
 800812c:	dd05      	ble.n	800813a <cos+0x2e>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	f7f8 f811 	bl	8000158 <__aeabi_dsub>
 8008136:	b007      	add	sp, #28
 8008138:	bd30      	pop	{r4, r5, pc}
 800813a:	aa02      	add	r2, sp, #8
 800813c:	f000 fe18 	bl	8008d70 <__ieee754_rem_pio2>
 8008140:	f000 0003 	and.w	r0, r0, #3
 8008144:	2801      	cmp	r0, #1
 8008146:	d009      	beq.n	800815c <cos+0x50>
 8008148:	2802      	cmp	r0, #2
 800814a:	d011      	beq.n	8008170 <cos+0x64>
 800814c:	b9b8      	cbnz	r0, 800817e <cos+0x72>
 800814e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008156:	f001 f8b3 	bl	80092c0 <__kernel_cos>
 800815a:	e7ec      	b.n	8008136 <cos+0x2a>
 800815c:	9000      	str	r0, [sp, #0]
 800815e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008166:	f001 fcab 	bl	8009ac0 <__kernel_sin>
 800816a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800816e:	e7e2      	b.n	8008136 <cos+0x2a>
 8008170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008178:	f001 f8a2 	bl	80092c0 <__kernel_cos>
 800817c:	e7f5      	b.n	800816a <cos+0x5e>
 800817e:	2301      	movs	r3, #1
 8008180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800818a:	f001 fc99 	bl	8009ac0 <__kernel_sin>
 800818e:	e7d2      	b.n	8008136 <cos+0x2a>
 8008190:	3fe921fb 	.word	0x3fe921fb
 8008194:	7fefffff 	.word	0x7fefffff

08008198 <sin>:
 8008198:	b530      	push	{r4, r5, lr}
 800819a:	4a20      	ldr	r2, [pc, #128]	; (800821c <sin+0x84>)
 800819c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081a0:	4293      	cmp	r3, r2
 80081a2:	b087      	sub	sp, #28
 80081a4:	dc06      	bgt.n	80081b4 <sin+0x1c>
 80081a6:	2300      	movs	r3, #0
 80081a8:	2200      	movs	r2, #0
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2300      	movs	r3, #0
 80081ae:	f001 fc87 	bl	8009ac0 <__kernel_sin>
 80081b2:	e006      	b.n	80081c2 <sin+0x2a>
 80081b4:	4a1a      	ldr	r2, [pc, #104]	; (8008220 <sin+0x88>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	dd05      	ble.n	80081c6 <sin+0x2e>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	f7f7 ffcb 	bl	8000158 <__aeabi_dsub>
 80081c2:	b007      	add	sp, #28
 80081c4:	bd30      	pop	{r4, r5, pc}
 80081c6:	aa02      	add	r2, sp, #8
 80081c8:	f000 fdd2 	bl	8008d70 <__ieee754_rem_pio2>
 80081cc:	f000 0003 	and.w	r0, r0, #3
 80081d0:	2801      	cmp	r0, #1
 80081d2:	d009      	beq.n	80081e8 <sin+0x50>
 80081d4:	2802      	cmp	r0, #2
 80081d6:	d00e      	beq.n	80081f6 <sin+0x5e>
 80081d8:	b9c0      	cbnz	r0, 800820c <sin+0x74>
 80081da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081de:	2301      	movs	r3, #1
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e6:	e7e2      	b.n	80081ae <sin+0x16>
 80081e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f0:	f001 f866 	bl	80092c0 <__kernel_cos>
 80081f4:	e7e5      	b.n	80081c2 <sin+0x2a>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008202:	f001 fc5d 	bl	8009ac0 <__kernel_sin>
 8008206:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800820a:	e7da      	b.n	80081c2 <sin+0x2a>
 800820c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008214:	f001 f854 	bl	80092c0 <__kernel_cos>
 8008218:	e7f5      	b.n	8008206 <sin+0x6e>
 800821a:	bf00      	nop
 800821c:	3fe921fb 	.word	0x3fe921fb
 8008220:	7fefffff 	.word	0x7fefffff

08008224 <pow>:
 8008224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008228:	4614      	mov	r4, r2
 800822a:	461d      	mov	r5, r3
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	f000 f886 	bl	8008340 <__ieee754_pow>
 8008234:	4622      	mov	r2, r4
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	462b      	mov	r3, r5
 800823c:	4620      	mov	r0, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7f8 fbdc 	bl	80009fc <__aeabi_dcmpun>
 8008244:	bbc8      	cbnz	r0, 80082ba <pow+0x96>
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4640      	mov	r0, r8
 800824c:	4649      	mov	r1, r9
 800824e:	f7f8 fba3 	bl	8000998 <__aeabi_dcmpeq>
 8008252:	b1b8      	cbz	r0, 8008284 <pow+0x60>
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	4620      	mov	r0, r4
 800825a:	4629      	mov	r1, r5
 800825c:	f7f8 fb9c 	bl	8000998 <__aeabi_dcmpeq>
 8008260:	2800      	cmp	r0, #0
 8008262:	d141      	bne.n	80082e8 <pow+0xc4>
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f001 fd0f 	bl	8009c8a <finite>
 800826c:	b328      	cbz	r0, 80082ba <pow+0x96>
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 fb99 	bl	80009ac <__aeabi_dcmplt>
 800827a:	b1f0      	cbz	r0, 80082ba <pow+0x96>
 800827c:	f7fe fea8 	bl	8006fd0 <__errno>
 8008280:	2322      	movs	r3, #34	; 0x22
 8008282:	e019      	b.n	80082b8 <pow+0x94>
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f001 fcff 	bl	8009c8a <finite>
 800828c:	b9c8      	cbnz	r0, 80082c2 <pow+0x9e>
 800828e:	4640      	mov	r0, r8
 8008290:	4649      	mov	r1, r9
 8008292:	f001 fcfa 	bl	8009c8a <finite>
 8008296:	b1a0      	cbz	r0, 80082c2 <pow+0x9e>
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f001 fcf5 	bl	8009c8a <finite>
 80082a0:	b178      	cbz	r0, 80082c2 <pow+0x9e>
 80082a2:	4632      	mov	r2, r6
 80082a4:	463b      	mov	r3, r7
 80082a6:	4630      	mov	r0, r6
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f8 fba7 	bl	80009fc <__aeabi_dcmpun>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d0e4      	beq.n	800827c <pow+0x58>
 80082b2:	f7fe fe8d 	bl	8006fd0 <__errno>
 80082b6:	2321      	movs	r3, #33	; 0x21
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f8 fb65 	bl	8000998 <__aeabi_dcmpeq>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d0f3      	beq.n	80082ba <pow+0x96>
 80082d2:	4640      	mov	r0, r8
 80082d4:	4649      	mov	r1, r9
 80082d6:	f001 fcd8 	bl	8009c8a <finite>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0ed      	beq.n	80082ba <pow+0x96>
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f001 fcd2 	bl	8009c8a <finite>
 80082e6:	e7c8      	b.n	800827a <pow+0x56>
 80082e8:	2600      	movs	r6, #0
 80082ea:	4f01      	ldr	r7, [pc, #4]	; (80082f0 <pow+0xcc>)
 80082ec:	e7e5      	b.n	80082ba <pow+0x96>
 80082ee:	bf00      	nop
 80082f0:	3ff00000 	.word	0x3ff00000

080082f4 <sqrt>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	f000 ff31 	bl	8009160 <__ieee754_sqrt>
 80082fe:	4632      	mov	r2, r6
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	463b      	mov	r3, r7
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 fb77 	bl	80009fc <__aeabi_dcmpun>
 800830e:	b990      	cbnz	r0, 8008336 <sqrt+0x42>
 8008310:	2200      	movs	r2, #0
 8008312:	2300      	movs	r3, #0
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 fb48 	bl	80009ac <__aeabi_dcmplt>
 800831c:	b158      	cbz	r0, 8008336 <sqrt+0x42>
 800831e:	f7fe fe57 	bl	8006fd0 <__errno>
 8008322:	2321      	movs	r3, #33	; 0x21
 8008324:	2200      	movs	r2, #0
 8008326:	6003      	str	r3, [r0, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	f7f8 f9f5 	bl	800071c <__aeabi_ddiv>
 8008332:	4604      	mov	r4, r0
 8008334:	460d      	mov	r5, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800833c:	0000      	movs	r0, r0
	...

08008340 <__ieee754_pow>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	b093      	sub	sp, #76	; 0x4c
 8008346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800834a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800834e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008352:	4689      	mov	r9, r1
 8008354:	ea56 0102 	orrs.w	r1, r6, r2
 8008358:	4680      	mov	r8, r0
 800835a:	d111      	bne.n	8008380 <__ieee754_pow+0x40>
 800835c:	1803      	adds	r3, r0, r0
 800835e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008362:	4152      	adcs	r2, r2
 8008364:	4299      	cmp	r1, r3
 8008366:	4b82      	ldr	r3, [pc, #520]	; (8008570 <__ieee754_pow+0x230>)
 8008368:	4193      	sbcs	r3, r2
 800836a:	f080 84b9 	bcs.w	8008ce0 <__ieee754_pow+0x9a0>
 800836e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	f7f7 fef1 	bl	800015c <__adddf3>
 800837a:	4683      	mov	fp, r0
 800837c:	468c      	mov	ip, r1
 800837e:	e06f      	b.n	8008460 <__ieee754_pow+0x120>
 8008380:	4b7c      	ldr	r3, [pc, #496]	; (8008574 <__ieee754_pow+0x234>)
 8008382:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008386:	429c      	cmp	r4, r3
 8008388:	464d      	mov	r5, r9
 800838a:	4682      	mov	sl, r0
 800838c:	dc06      	bgt.n	800839c <__ieee754_pow+0x5c>
 800838e:	d101      	bne.n	8008394 <__ieee754_pow+0x54>
 8008390:	2800      	cmp	r0, #0
 8008392:	d1ec      	bne.n	800836e <__ieee754_pow+0x2e>
 8008394:	429e      	cmp	r6, r3
 8008396:	dc01      	bgt.n	800839c <__ieee754_pow+0x5c>
 8008398:	d10f      	bne.n	80083ba <__ieee754_pow+0x7a>
 800839a:	b172      	cbz	r2, 80083ba <__ieee754_pow+0x7a>
 800839c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80083a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80083a4:	ea55 050a 	orrs.w	r5, r5, sl
 80083a8:	d1e1      	bne.n	800836e <__ieee754_pow+0x2e>
 80083aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80083ae:	18db      	adds	r3, r3, r3
 80083b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80083b4:	4152      	adcs	r2, r2
 80083b6:	429d      	cmp	r5, r3
 80083b8:	e7d5      	b.n	8008366 <__ieee754_pow+0x26>
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	da39      	bge.n	8008432 <__ieee754_pow+0xf2>
 80083be:	4b6e      	ldr	r3, [pc, #440]	; (8008578 <__ieee754_pow+0x238>)
 80083c0:	429e      	cmp	r6, r3
 80083c2:	dc52      	bgt.n	800846a <__ieee754_pow+0x12a>
 80083c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80083c8:	429e      	cmp	r6, r3
 80083ca:	f340 849c 	ble.w	8008d06 <__ieee754_pow+0x9c6>
 80083ce:	1533      	asrs	r3, r6, #20
 80083d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80083d4:	2b14      	cmp	r3, #20
 80083d6:	dd0f      	ble.n	80083f8 <__ieee754_pow+0xb8>
 80083d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80083dc:	fa22 f103 	lsr.w	r1, r2, r3
 80083e0:	fa01 f303 	lsl.w	r3, r1, r3
 80083e4:	4293      	cmp	r3, r2
 80083e6:	f040 848e 	bne.w	8008d06 <__ieee754_pow+0x9c6>
 80083ea:	f001 0101 	and.w	r1, r1, #1
 80083ee:	f1c1 0302 	rsb	r3, r1, #2
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	b182      	cbz	r2, 8008418 <__ieee754_pow+0xd8>
 80083f6:	e05d      	b.n	80084b4 <__ieee754_pow+0x174>
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	d159      	bne.n	80084b0 <__ieee754_pow+0x170>
 80083fc:	f1c3 0314 	rsb	r3, r3, #20
 8008400:	fa46 f103 	asr.w	r1, r6, r3
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	42b3      	cmp	r3, r6
 800840a:	f040 8479 	bne.w	8008d00 <__ieee754_pow+0x9c0>
 800840e:	f001 0101 	and.w	r1, r1, #1
 8008412:	f1c1 0302 	rsb	r3, r1, #2
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4b58      	ldr	r3, [pc, #352]	; (800857c <__ieee754_pow+0x23c>)
 800841a:	429e      	cmp	r6, r3
 800841c:	d132      	bne.n	8008484 <__ieee754_pow+0x144>
 800841e:	2f00      	cmp	r7, #0
 8008420:	f280 846a 	bge.w	8008cf8 <__ieee754_pow+0x9b8>
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	2000      	movs	r0, #0
 800842a:	4954      	ldr	r1, [pc, #336]	; (800857c <__ieee754_pow+0x23c>)
 800842c:	f7f8 f976 	bl	800071c <__aeabi_ddiv>
 8008430:	e7a3      	b.n	800837a <__ieee754_pow+0x3a>
 8008432:	2300      	movs	r3, #0
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2a00      	cmp	r2, #0
 8008438:	d13c      	bne.n	80084b4 <__ieee754_pow+0x174>
 800843a:	4b4e      	ldr	r3, [pc, #312]	; (8008574 <__ieee754_pow+0x234>)
 800843c:	429e      	cmp	r6, r3
 800843e:	d1eb      	bne.n	8008418 <__ieee754_pow+0xd8>
 8008440:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008444:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008448:	ea53 030a 	orrs.w	r3, r3, sl
 800844c:	f000 8448 	beq.w	8008ce0 <__ieee754_pow+0x9a0>
 8008450:	4b4b      	ldr	r3, [pc, #300]	; (8008580 <__ieee754_pow+0x240>)
 8008452:	429c      	cmp	r4, r3
 8008454:	dd0b      	ble.n	800846e <__ieee754_pow+0x12e>
 8008456:	2f00      	cmp	r7, #0
 8008458:	f2c0 8448 	blt.w	8008cec <__ieee754_pow+0x9ac>
 800845c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008460:	4658      	mov	r0, fp
 8008462:	4661      	mov	r1, ip
 8008464:	b013      	add	sp, #76	; 0x4c
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	2302      	movs	r3, #2
 800846c:	e7e2      	b.n	8008434 <__ieee754_pow+0xf4>
 800846e:	2f00      	cmp	r7, #0
 8008470:	f04f 0b00 	mov.w	fp, #0
 8008474:	f04f 0c00 	mov.w	ip, #0
 8008478:	daf2      	bge.n	8008460 <__ieee754_pow+0x120>
 800847a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800847e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008482:	e7ed      	b.n	8008460 <__ieee754_pow+0x120>
 8008484:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008488:	d106      	bne.n	8008498 <__ieee754_pow+0x158>
 800848a:	4642      	mov	r2, r8
 800848c:	464b      	mov	r3, r9
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f8 f819 	bl	80004c8 <__aeabi_dmul>
 8008496:	e770      	b.n	800837a <__ieee754_pow+0x3a>
 8008498:	4b3a      	ldr	r3, [pc, #232]	; (8008584 <__ieee754_pow+0x244>)
 800849a:	429f      	cmp	r7, r3
 800849c:	d10a      	bne.n	80084b4 <__ieee754_pow+0x174>
 800849e:	2d00      	cmp	r5, #0
 80084a0:	db08      	blt.n	80084b4 <__ieee754_pow+0x174>
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	b013      	add	sp, #76	; 0x4c
 80084a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	f000 be58 	b.w	8009160 <__ieee754_sqrt>
 80084b0:	2300      	movs	r3, #0
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	f001 fbe4 	bl	8009c84 <fabs>
 80084bc:	4683      	mov	fp, r0
 80084be:	468c      	mov	ip, r1
 80084c0:	f1ba 0f00 	cmp.w	sl, #0
 80084c4:	d128      	bne.n	8008518 <__ieee754_pow+0x1d8>
 80084c6:	b124      	cbz	r4, 80084d2 <__ieee754_pow+0x192>
 80084c8:	4b2c      	ldr	r3, [pc, #176]	; (800857c <__ieee754_pow+0x23c>)
 80084ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d122      	bne.n	8008518 <__ieee754_pow+0x1d8>
 80084d2:	2f00      	cmp	r7, #0
 80084d4:	da07      	bge.n	80084e6 <__ieee754_pow+0x1a6>
 80084d6:	465a      	mov	r2, fp
 80084d8:	4663      	mov	r3, ip
 80084da:	2000      	movs	r0, #0
 80084dc:	4927      	ldr	r1, [pc, #156]	; (800857c <__ieee754_pow+0x23c>)
 80084de:	f7f8 f91d 	bl	800071c <__aeabi_ddiv>
 80084e2:	4683      	mov	fp, r0
 80084e4:	468c      	mov	ip, r1
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	daba      	bge.n	8008460 <__ieee754_pow+0x120>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80084f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80084f4:	4323      	orrs	r3, r4
 80084f6:	d108      	bne.n	800850a <__ieee754_pow+0x1ca>
 80084f8:	465a      	mov	r2, fp
 80084fa:	4663      	mov	r3, ip
 80084fc:	4658      	mov	r0, fp
 80084fe:	4661      	mov	r1, ip
 8008500:	f7f7 fe2a 	bl	8000158 <__aeabi_dsub>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	e790      	b.n	800842c <__ieee754_pow+0xec>
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d1a7      	bne.n	8008460 <__ieee754_pow+0x120>
 8008510:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008514:	469c      	mov	ip, r3
 8008516:	e7a3      	b.n	8008460 <__ieee754_pow+0x120>
 8008518:	0feb      	lsrs	r3, r5, #31
 800851a:	3b01      	subs	r3, #1
 800851c:	930c      	str	r3, [sp, #48]	; 0x30
 800851e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008520:	9b00      	ldr	r3, [sp, #0]
 8008522:	4313      	orrs	r3, r2
 8008524:	d104      	bne.n	8008530 <__ieee754_pow+0x1f0>
 8008526:	4642      	mov	r2, r8
 8008528:	464b      	mov	r3, r9
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	e7e7      	b.n	8008500 <__ieee754_pow+0x1c0>
 8008530:	4b15      	ldr	r3, [pc, #84]	; (8008588 <__ieee754_pow+0x248>)
 8008532:	429e      	cmp	r6, r3
 8008534:	f340 80f6 	ble.w	8008724 <__ieee754_pow+0x3e4>
 8008538:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800853c:	429e      	cmp	r6, r3
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <__ieee754_pow+0x240>)
 8008540:	dd09      	ble.n	8008556 <__ieee754_pow+0x216>
 8008542:	429c      	cmp	r4, r3
 8008544:	dc0c      	bgt.n	8008560 <__ieee754_pow+0x220>
 8008546:	2f00      	cmp	r7, #0
 8008548:	da0c      	bge.n	8008564 <__ieee754_pow+0x224>
 800854a:	2000      	movs	r0, #0
 800854c:	b013      	add	sp, #76	; 0x4c
 800854e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008552:	f001 bb92 	b.w	8009c7a <__math_oflow>
 8008556:	429c      	cmp	r4, r3
 8008558:	dbf5      	blt.n	8008546 <__ieee754_pow+0x206>
 800855a:	4b08      	ldr	r3, [pc, #32]	; (800857c <__ieee754_pow+0x23c>)
 800855c:	429c      	cmp	r4, r3
 800855e:	dd15      	ble.n	800858c <__ieee754_pow+0x24c>
 8008560:	2f00      	cmp	r7, #0
 8008562:	dcf2      	bgt.n	800854a <__ieee754_pow+0x20a>
 8008564:	2000      	movs	r0, #0
 8008566:	b013      	add	sp, #76	; 0x4c
 8008568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	f001 bb80 	b.w	8009c70 <__math_uflow>
 8008570:	fff00000 	.word	0xfff00000
 8008574:	7ff00000 	.word	0x7ff00000
 8008578:	433fffff 	.word	0x433fffff
 800857c:	3ff00000 	.word	0x3ff00000
 8008580:	3fefffff 	.word	0x3fefffff
 8008584:	3fe00000 	.word	0x3fe00000
 8008588:	41e00000 	.word	0x41e00000
 800858c:	4661      	mov	r1, ip
 800858e:	2200      	movs	r2, #0
 8008590:	4658      	mov	r0, fp
 8008592:	4b5f      	ldr	r3, [pc, #380]	; (8008710 <__ieee754_pow+0x3d0>)
 8008594:	f7f7 fde0 	bl	8000158 <__aeabi_dsub>
 8008598:	a355      	add	r3, pc, #340	; (adr r3, 80086f0 <__ieee754_pow+0x3b0>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	4604      	mov	r4, r0
 80085a0:	460d      	mov	r5, r1
 80085a2:	f7f7 ff91 	bl	80004c8 <__aeabi_dmul>
 80085a6:	a354      	add	r3, pc, #336	; (adr r3, 80086f8 <__ieee754_pow+0x3b8>)
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 ff88 	bl	80004c8 <__aeabi_dmul>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4682      	mov	sl, r0
 80085bc:	468b      	mov	fp, r1
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	4b54      	ldr	r3, [pc, #336]	; (8008714 <__ieee754_pow+0x3d4>)
 80085c4:	f7f7 ff80 	bl	80004c8 <__aeabi_dmul>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	a14c      	add	r1, pc, #304	; (adr r1, 8008700 <__ieee754_pow+0x3c0>)
 80085ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d2:	f7f7 fdc1 	bl	8000158 <__aeabi_dsub>
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	f7f7 ff75 	bl	80004c8 <__aeabi_dmul>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	2000      	movs	r0, #0
 80085e4:	494c      	ldr	r1, [pc, #304]	; (8008718 <__ieee754_pow+0x3d8>)
 80085e6:	f7f7 fdb7 	bl	8000158 <__aeabi_dsub>
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	4680      	mov	r8, r0
 80085f0:	4689      	mov	r9, r1
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f7 ff67 	bl	80004c8 <__aeabi_dmul>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f7 ff61 	bl	80004c8 <__aeabi_dmul>
 8008606:	a340      	add	r3, pc, #256	; (adr r3, 8008708 <__ieee754_pow+0x3c8>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 ff5c 	bl	80004c8 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f7 fd9e 	bl	8000158 <__aeabi_dsub>
 800861c:	f04f 0a00 	mov.w	sl, #0
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4604      	mov	r4, r0
 8008626:	460d      	mov	r5, r1
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f7 fd96 	bl	800015c <__adddf3>
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	4650      	mov	r0, sl
 8008636:	468b      	mov	fp, r1
 8008638:	f7f7 fd8e 	bl	8000158 <__aeabi_dsub>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f7f7 fd88 	bl	8000158 <__aeabi_dsub>
 8008648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008650:	3b01      	subs	r3, #1
 8008652:	4313      	orrs	r3, r2
 8008654:	f04f 0600 	mov.w	r6, #0
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	bf0c      	ite	eq
 800865e:	4b2f      	ldreq	r3, [pc, #188]	; (800871c <__ieee754_pow+0x3dc>)
 8008660:	4b2b      	ldrne	r3, [pc, #172]	; (8008710 <__ieee754_pow+0x3d0>)
 8008662:	4604      	mov	r4, r0
 8008664:	460d      	mov	r5, r1
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	e9cd 2300 	strd	r2, r3, [sp]
 800866e:	4632      	mov	r2, r6
 8008670:	463b      	mov	r3, r7
 8008672:	f7f7 fd71 	bl	8000158 <__aeabi_dsub>
 8008676:	4652      	mov	r2, sl
 8008678:	465b      	mov	r3, fp
 800867a:	f7f7 ff25 	bl	80004c8 <__aeabi_dmul>
 800867e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008682:	4680      	mov	r8, r0
 8008684:	4689      	mov	r9, r1
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 ff1d 	bl	80004c8 <__aeabi_dmul>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4640      	mov	r0, r8
 8008694:	4649      	mov	r1, r9
 8008696:	f7f7 fd61 	bl	800015c <__adddf3>
 800869a:	4632      	mov	r2, r6
 800869c:	463b      	mov	r3, r7
 800869e:	4680      	mov	r8, r0
 80086a0:	4689      	mov	r9, r1
 80086a2:	4650      	mov	r0, sl
 80086a4:	4659      	mov	r1, fp
 80086a6:	f7f7 ff0f 	bl	80004c8 <__aeabi_dmul>
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	460b      	mov	r3, r1
 80086b0:	4602      	mov	r2, r0
 80086b2:	4649      	mov	r1, r9
 80086b4:	4640      	mov	r0, r8
 80086b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80086ba:	f7f7 fd4f 	bl	800015c <__adddf3>
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <__ieee754_pow+0x3e0>)
 80086c0:	4682      	mov	sl, r0
 80086c2:	4299      	cmp	r1, r3
 80086c4:	460f      	mov	r7, r1
 80086c6:	460e      	mov	r6, r1
 80086c8:	f340 82e5 	ble.w	8008c96 <__ieee754_pow+0x956>
 80086cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80086d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80086d4:	4303      	orrs	r3, r0
 80086d6:	f000 81df 	beq.w	8008a98 <__ieee754_pow+0x758>
 80086da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	f7f8 f963 	bl	80009ac <__aeabi_dcmplt>
 80086e6:	3800      	subs	r0, #0
 80086e8:	bf18      	it	ne
 80086ea:	2001      	movne	r0, #1
 80086ec:	e72e      	b.n	800854c <__ieee754_pow+0x20c>
 80086ee:	bf00      	nop
 80086f0:	60000000 	.word	0x60000000
 80086f4:	3ff71547 	.word	0x3ff71547
 80086f8:	f85ddf44 	.word	0xf85ddf44
 80086fc:	3e54ae0b 	.word	0x3e54ae0b
 8008700:	55555555 	.word	0x55555555
 8008704:	3fd55555 	.word	0x3fd55555
 8008708:	652b82fe 	.word	0x652b82fe
 800870c:	3ff71547 	.word	0x3ff71547
 8008710:	3ff00000 	.word	0x3ff00000
 8008714:	3fd00000 	.word	0x3fd00000
 8008718:	3fe00000 	.word	0x3fe00000
 800871c:	bff00000 	.word	0xbff00000
 8008720:	408fffff 	.word	0x408fffff
 8008724:	4bd2      	ldr	r3, [pc, #840]	; (8008a70 <__ieee754_pow+0x730>)
 8008726:	2200      	movs	r2, #0
 8008728:	402b      	ands	r3, r5
 800872a:	b943      	cbnz	r3, 800873e <__ieee754_pow+0x3fe>
 800872c:	4658      	mov	r0, fp
 800872e:	4661      	mov	r1, ip
 8008730:	4bd0      	ldr	r3, [pc, #832]	; (8008a74 <__ieee754_pow+0x734>)
 8008732:	f7f7 fec9 	bl	80004c8 <__aeabi_dmul>
 8008736:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800873a:	4683      	mov	fp, r0
 800873c:	460c      	mov	r4, r1
 800873e:	1523      	asrs	r3, r4, #20
 8008740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008744:	4413      	add	r3, r2
 8008746:	930b      	str	r3, [sp, #44]	; 0x2c
 8008748:	4bcb      	ldr	r3, [pc, #812]	; (8008a78 <__ieee754_pow+0x738>)
 800874a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800874e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008752:	429c      	cmp	r4, r3
 8008754:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008758:	dd08      	ble.n	800876c <__ieee754_pow+0x42c>
 800875a:	4bc8      	ldr	r3, [pc, #800]	; (8008a7c <__ieee754_pow+0x73c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	f340 8199 	ble.w	8008a94 <__ieee754_pow+0x754>
 8008762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008764:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008768:	3301      	adds	r3, #1
 800876a:	930b      	str	r3, [sp, #44]	; 0x2c
 800876c:	2600      	movs	r6, #0
 800876e:	00f3      	lsls	r3, r6, #3
 8008770:	930d      	str	r3, [sp, #52]	; 0x34
 8008772:	4bc3      	ldr	r3, [pc, #780]	; (8008a80 <__ieee754_pow+0x740>)
 8008774:	4658      	mov	r0, fp
 8008776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800877a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800877e:	4629      	mov	r1, r5
 8008780:	461a      	mov	r2, r3
 8008782:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008786:	4623      	mov	r3, r4
 8008788:	f7f7 fce6 	bl	8000158 <__aeabi_dsub>
 800878c:	46da      	mov	sl, fp
 800878e:	462b      	mov	r3, r5
 8008790:	4652      	mov	r2, sl
 8008792:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008796:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800879a:	f7f7 fcdf 	bl	800015c <__adddf3>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	2000      	movs	r0, #0
 80087a4:	49b7      	ldr	r1, [pc, #732]	; (8008a84 <__ieee754_pow+0x744>)
 80087a6:	f7f7 ffb9 	bl	800071c <__aeabi_ddiv>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80087b6:	f7f7 fe87 	bl	80004c8 <__aeabi_dmul>
 80087ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80087c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	46ab      	mov	fp, r5
 80087cc:	106d      	asrs	r5, r5, #1
 80087ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80087d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80087dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80087e0:	4640      	mov	r0, r8
 80087e2:	4649      	mov	r1, r9
 80087e4:	4614      	mov	r4, r2
 80087e6:	461d      	mov	r5, r3
 80087e8:	f7f7 fe6e 	bl	80004c8 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80087f4:	f7f7 fcb0 	bl	8000158 <__aeabi_dsub>
 80087f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	4620      	mov	r0, r4
 8008802:	4629      	mov	r1, r5
 8008804:	f7f7 fca8 	bl	8000158 <__aeabi_dsub>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4650      	mov	r0, sl
 800880e:	4659      	mov	r1, fp
 8008810:	f7f7 fca2 	bl	8000158 <__aeabi_dsub>
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	f7f7 fe56 	bl	80004c8 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f7 fc98 	bl	8000158 <__aeabi_dsub>
 8008828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800882c:	f7f7 fe4c 	bl	80004c8 <__aeabi_dmul>
 8008830:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008834:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	f7f7 fe44 	bl	80004c8 <__aeabi_dmul>
 8008840:	a379      	add	r3, pc, #484	; (adr r3, 8008a28 <__ieee754_pow+0x6e8>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	f7f7 fe3d 	bl	80004c8 <__aeabi_dmul>
 800884e:	a378      	add	r3, pc, #480	; (adr r3, 8008a30 <__ieee754_pow+0x6f0>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fc82 	bl	800015c <__adddf3>
 8008858:	4622      	mov	r2, r4
 800885a:	462b      	mov	r3, r5
 800885c:	f7f7 fe34 	bl	80004c8 <__aeabi_dmul>
 8008860:	a375      	add	r3, pc, #468	; (adr r3, 8008a38 <__ieee754_pow+0x6f8>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	f7f7 fc79 	bl	800015c <__adddf3>
 800886a:	4622      	mov	r2, r4
 800886c:	462b      	mov	r3, r5
 800886e:	f7f7 fe2b 	bl	80004c8 <__aeabi_dmul>
 8008872:	a373      	add	r3, pc, #460	; (adr r3, 8008a40 <__ieee754_pow+0x700>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fc70 	bl	800015c <__adddf3>
 800887c:	4622      	mov	r2, r4
 800887e:	462b      	mov	r3, r5
 8008880:	f7f7 fe22 	bl	80004c8 <__aeabi_dmul>
 8008884:	a370      	add	r3, pc, #448	; (adr r3, 8008a48 <__ieee754_pow+0x708>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f7 fc67 	bl	800015c <__adddf3>
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	f7f7 fe19 	bl	80004c8 <__aeabi_dmul>
 8008896:	a36e      	add	r3, pc, #440	; (adr r3, 8008a50 <__ieee754_pow+0x710>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fc5e 	bl	800015c <__adddf3>
 80088a0:	4622      	mov	r2, r4
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	462b      	mov	r3, r5
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fe0c 	bl	80004c8 <__aeabi_dmul>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f7 fe06 	bl	80004c8 <__aeabi_dmul>
 80088bc:	4604      	mov	r4, r0
 80088be:	460d      	mov	r5, r1
 80088c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	f7f7 fc48 	bl	800015c <__adddf3>
 80088cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088d0:	f7f7 fdfa 	bl	80004c8 <__aeabi_dmul>
 80088d4:	4622      	mov	r2, r4
 80088d6:	462b      	mov	r3, r5
 80088d8:	f7f7 fc40 	bl	800015c <__adddf3>
 80088dc:	4642      	mov	r2, r8
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	464b      	mov	r3, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f7 fdee 	bl	80004c8 <__aeabi_dmul>
 80088ec:	2200      	movs	r2, #0
 80088ee:	4b66      	ldr	r3, [pc, #408]	; (8008a88 <__ieee754_pow+0x748>)
 80088f0:	4682      	mov	sl, r0
 80088f2:	468b      	mov	fp, r1
 80088f4:	f7f7 fc32 	bl	800015c <__adddf3>
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	f7f7 fc2e 	bl	800015c <__adddf3>
 8008900:	2400      	movs	r4, #0
 8008902:	460d      	mov	r5, r1
 8008904:	4622      	mov	r2, r4
 8008906:	460b      	mov	r3, r1
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f7 fddc 	bl	80004c8 <__aeabi_dmul>
 8008910:	2200      	movs	r2, #0
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	4b5b      	ldr	r3, [pc, #364]	; (8008a88 <__ieee754_pow+0x748>)
 800891c:	f7f7 fc1c 	bl	8000158 <__aeabi_dsub>
 8008920:	4652      	mov	r2, sl
 8008922:	465b      	mov	r3, fp
 8008924:	f7f7 fc18 	bl	8000158 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f7 fc12 	bl	8000158 <__aeabi_dsub>
 8008934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008938:	f7f7 fdc6 	bl	80004c8 <__aeabi_dmul>
 800893c:	4622      	mov	r2, r4
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008946:	462b      	mov	r3, r5
 8008948:	f7f7 fdbe 	bl	80004c8 <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	f7f7 fc02 	bl	800015c <__adddf3>
 8008958:	2400      	movs	r4, #0
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4640      	mov	r0, r8
 8008964:	4649      	mov	r1, r9
 8008966:	f7f7 fbf9 	bl	800015c <__adddf3>
 800896a:	a33b      	add	r3, pc, #236	; (adr r3, 8008a58 <__ieee754_pow+0x718>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	4620      	mov	r0, r4
 8008972:	460d      	mov	r5, r1
 8008974:	f7f7 fda8 	bl	80004c8 <__aeabi_dmul>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008980:	4620      	mov	r0, r4
 8008982:	4629      	mov	r1, r5
 8008984:	f7f7 fbe8 	bl	8000158 <__aeabi_dsub>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fbe2 	bl	8000158 <__aeabi_dsub>
 8008994:	a332      	add	r3, pc, #200	; (adr r3, 8008a60 <__ieee754_pow+0x720>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f7f7 fd95 	bl	80004c8 <__aeabi_dmul>
 800899e:	a332      	add	r3, pc, #200	; (adr r3, 8008a68 <__ieee754_pow+0x728>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	4606      	mov	r6, r0
 80089a6:	460f      	mov	r7, r1
 80089a8:	4620      	mov	r0, r4
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f7 fd8c 	bl	80004c8 <__aeabi_dmul>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fbd0 	bl	800015c <__adddf3>
 80089bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089be:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <__ieee754_pow+0x74c>)
 80089c0:	f04f 0a00 	mov.w	sl, #0
 80089c4:	4413      	add	r3, r2
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f7f7 fbc7 	bl	800015c <__adddf3>
 80089ce:	4680      	mov	r8, r0
 80089d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089d2:	4689      	mov	r9, r1
 80089d4:	f7f7 fd0e 	bl	80003f4 <__aeabi_i2d>
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089de:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <__ieee754_pow+0x750>)
 80089e0:	4413      	add	r3, r2
 80089e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80089e6:	4642      	mov	r2, r8
 80089e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ec:	464b      	mov	r3, r9
 80089ee:	f7f7 fbb5 	bl	800015c <__adddf3>
 80089f2:	4632      	mov	r2, r6
 80089f4:	463b      	mov	r3, r7
 80089f6:	f7f7 fbb1 	bl	800015c <__adddf3>
 80089fa:	4622      	mov	r2, r4
 80089fc:	462b      	mov	r3, r5
 80089fe:	f7f7 fbad 	bl	800015c <__adddf3>
 8008a02:	4622      	mov	r2, r4
 8008a04:	462b      	mov	r3, r5
 8008a06:	4650      	mov	r0, sl
 8008a08:	468b      	mov	fp, r1
 8008a0a:	f7f7 fba5 	bl	8000158 <__aeabi_dsub>
 8008a0e:	4632      	mov	r2, r6
 8008a10:	463b      	mov	r3, r7
 8008a12:	f7f7 fba1 	bl	8000158 <__aeabi_dsub>
 8008a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a1a:	f7f7 fb9d 	bl	8000158 <__aeabi_dsub>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	e60d      	b.n	8008644 <__ieee754_pow+0x304>
 8008a28:	4a454eef 	.word	0x4a454eef
 8008a2c:	3fca7e28 	.word	0x3fca7e28
 8008a30:	93c9db65 	.word	0x93c9db65
 8008a34:	3fcd864a 	.word	0x3fcd864a
 8008a38:	a91d4101 	.word	0xa91d4101
 8008a3c:	3fd17460 	.word	0x3fd17460
 8008a40:	518f264d 	.word	0x518f264d
 8008a44:	3fd55555 	.word	0x3fd55555
 8008a48:	db6fabff 	.word	0xdb6fabff
 8008a4c:	3fdb6db6 	.word	0x3fdb6db6
 8008a50:	33333303 	.word	0x33333303
 8008a54:	3fe33333 	.word	0x3fe33333
 8008a58:	e0000000 	.word	0xe0000000
 8008a5c:	3feec709 	.word	0x3feec709
 8008a60:	dc3a03fd 	.word	0xdc3a03fd
 8008a64:	3feec709 	.word	0x3feec709
 8008a68:	145b01f5 	.word	0x145b01f5
 8008a6c:	be3e2fe0 	.word	0xbe3e2fe0
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	43400000 	.word	0x43400000
 8008a78:	0003988e 	.word	0x0003988e
 8008a7c:	000bb679 	.word	0x000bb679
 8008a80:	0800a028 	.word	0x0800a028
 8008a84:	3ff00000 	.word	0x3ff00000
 8008a88:	40080000 	.word	0x40080000
 8008a8c:	0800a048 	.word	0x0800a048
 8008a90:	0800a038 	.word	0x0800a038
 8008a94:	2601      	movs	r6, #1
 8008a96:	e66a      	b.n	800876e <__ieee754_pow+0x42e>
 8008a98:	a39d      	add	r3, pc, #628	; (adr r3, 8008d10 <__ieee754_pow+0x9d0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	f7f7 fb5b 	bl	800015c <__adddf3>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aac:	462b      	mov	r3, r5
 8008aae:	4650      	mov	r0, sl
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	f7f7 fb51 	bl	8000158 <__aeabi_dsub>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abe:	f7f7 ff93 	bl	80009e8 <__aeabi_dcmpgt>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f47f ae09 	bne.w	80086da <__ieee754_pow+0x39a>
 8008ac8:	4aa3      	ldr	r2, [pc, #652]	; (8008d58 <__ieee754_pow+0xa18>)
 8008aca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	f340 8101 	ble.w	8008cd6 <__ieee754_pow+0x996>
 8008ad4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008ad8:	2000      	movs	r0, #0
 8008ada:	151b      	asrs	r3, r3, #20
 8008adc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008ae0:	fa4a f303 	asr.w	r3, sl, r3
 8008ae4:	4433      	add	r3, r6
 8008ae6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008aea:	4f9c      	ldr	r7, [pc, #624]	; (8008d5c <__ieee754_pow+0xa1c>)
 8008aec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008af0:	4117      	asrs	r7, r2
 8008af2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008af6:	ea23 0107 	bic.w	r1, r3, r7
 8008afa:	f1c2 0214 	rsb	r2, r2, #20
 8008afe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008b02:	460b      	mov	r3, r1
 8008b04:	fa4a fa02 	asr.w	sl, sl, r2
 8008b08:	2e00      	cmp	r6, #0
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	bfb8      	it	lt
 8008b12:	f1ca 0a00 	rsblt	sl, sl, #0
 8008b16:	f7f7 fb1f 	bl	8000158 <__aeabi_dsub>
 8008b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b22:	2400      	movs	r4, #0
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	f7f7 fb18 	bl	800015c <__adddf3>
 8008b2c:	a37a      	add	r3, pc, #488	; (adr r3, 8008d18 <__ieee754_pow+0x9d8>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	4620      	mov	r0, r4
 8008b34:	460d      	mov	r5, r1
 8008b36:	f7f7 fcc7 	bl	80004c8 <__aeabi_dmul>
 8008b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b3e:	4606      	mov	r6, r0
 8008b40:	460f      	mov	r7, r1
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 fb07 	bl	8000158 <__aeabi_dsub>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	f7f7 fb01 	bl	8000158 <__aeabi_dsub>
 8008b56:	a372      	add	r3, pc, #456	; (adr r3, 8008d20 <__ieee754_pow+0x9e0>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fcb4 	bl	80004c8 <__aeabi_dmul>
 8008b60:	a371      	add	r3, pc, #452	; (adr r3, 8008d28 <__ieee754_pow+0x9e8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 fcab 	bl	80004c8 <__aeabi_dmul>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f7f7 faef 	bl	800015c <__adddf3>
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 fae7 	bl	800015c <__adddf3>
 8008b8e:	4632      	mov	r2, r6
 8008b90:	463b      	mov	r3, r7
 8008b92:	4680      	mov	r8, r0
 8008b94:	4689      	mov	r9, r1
 8008b96:	f7f7 fadf 	bl	8000158 <__aeabi_dsub>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fad9 	bl	8000158 <__aeabi_dsub>
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	4606      	mov	r6, r0
 8008baa:	460f      	mov	r7, r1
 8008bac:	464b      	mov	r3, r9
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	f7f7 fc89 	bl	80004c8 <__aeabi_dmul>
 8008bb6:	a35e      	add	r3, pc, #376	; (adr r3, 8008d30 <__ieee754_pow+0x9f0>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	f7f7 fc82 	bl	80004c8 <__aeabi_dmul>
 8008bc4:	a35c      	add	r3, pc, #368	; (adr r3, 8008d38 <__ieee754_pow+0x9f8>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fac5 	bl	8000158 <__aeabi_dsub>
 8008bce:	4622      	mov	r2, r4
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	f7f7 fc79 	bl	80004c8 <__aeabi_dmul>
 8008bd6:	a35a      	add	r3, pc, #360	; (adr r3, 8008d40 <__ieee754_pow+0xa00>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fabe 	bl	800015c <__adddf3>
 8008be0:	4622      	mov	r2, r4
 8008be2:	462b      	mov	r3, r5
 8008be4:	f7f7 fc70 	bl	80004c8 <__aeabi_dmul>
 8008be8:	a357      	add	r3, pc, #348	; (adr r3, 8008d48 <__ieee754_pow+0xa08>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 fab3 	bl	8000158 <__aeabi_dsub>
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	f7f7 fc67 	bl	80004c8 <__aeabi_dmul>
 8008bfa:	a355      	add	r3, pc, #340	; (adr r3, 8008d50 <__ieee754_pow+0xa10>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 faac 	bl	800015c <__adddf3>
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	f7f7 fc5e 	bl	80004c8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4640      	mov	r0, r8
 8008c12:	4649      	mov	r1, r9
 8008c14:	f7f7 faa0 	bl	8000158 <__aeabi_dsub>
 8008c18:	4604      	mov	r4, r0
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 fc50 	bl	80004c8 <__aeabi_dmul>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	f7f7 fa8f 	bl	8000158 <__aeabi_dsub>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c42:	f7f7 fd6b 	bl	800071c <__aeabi_ddiv>
 8008c46:	4632      	mov	r2, r6
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	f7f7 fc39 	bl	80004c8 <__aeabi_dmul>
 8008c56:	4632      	mov	r2, r6
 8008c58:	463b      	mov	r3, r7
 8008c5a:	f7f7 fa7f 	bl	800015c <__adddf3>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4620      	mov	r0, r4
 8008c64:	4629      	mov	r1, r5
 8008c66:	f7f7 fa77 	bl	8000158 <__aeabi_dsub>
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	f7f7 fa73 	bl	8000158 <__aeabi_dsub>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	2000      	movs	r0, #0
 8008c78:	4939      	ldr	r1, [pc, #228]	; (8008d60 <__ieee754_pow+0xa20>)
 8008c7a:	f7f7 fa6d 	bl	8000158 <__aeabi_dsub>
 8008c7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008c82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008c86:	da29      	bge.n	8008cdc <__ieee754_pow+0x99c>
 8008c88:	4652      	mov	r2, sl
 8008c8a:	f001 f885 	bl	8009d98 <scalbn>
 8008c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c92:	f7ff bbfe 	b.w	8008492 <__ieee754_pow+0x152>
 8008c96:	4b33      	ldr	r3, [pc, #204]	; (8008d64 <__ieee754_pow+0xa24>)
 8008c98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008c9c:	429f      	cmp	r7, r3
 8008c9e:	f77f af13 	ble.w	8008ac8 <__ieee754_pow+0x788>
 8008ca2:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <__ieee754_pow+0xa28>)
 8008ca4:	440b      	add	r3, r1
 8008ca6:	4303      	orrs	r3, r0
 8008ca8:	d009      	beq.n	8008cbe <__ieee754_pow+0x97e>
 8008caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f7f7 fe7b 	bl	80009ac <__aeabi_dcmplt>
 8008cb6:	3800      	subs	r0, #0
 8008cb8:	bf18      	it	ne
 8008cba:	2001      	movne	r0, #1
 8008cbc:	e453      	b.n	8008566 <__ieee754_pow+0x226>
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	f7f7 fa49 	bl	8000158 <__aeabi_dsub>
 8008cc6:	4642      	mov	r2, r8
 8008cc8:	464b      	mov	r3, r9
 8008cca:	f7f7 fe83 	bl	80009d4 <__aeabi_dcmpge>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f aefa 	beq.w	8008ac8 <__ieee754_pow+0x788>
 8008cd4:	e7e9      	b.n	8008caa <__ieee754_pow+0x96a>
 8008cd6:	f04f 0a00 	mov.w	sl, #0
 8008cda:	e720      	b.n	8008b1e <__ieee754_pow+0x7de>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	e7d6      	b.n	8008c8e <__ieee754_pow+0x94e>
 8008ce0:	f04f 0b00 	mov.w	fp, #0
 8008ce4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008d60 <__ieee754_pow+0xa20>
 8008ce8:	f7ff bbba 	b.w	8008460 <__ieee754_pow+0x120>
 8008cec:	f04f 0b00 	mov.w	fp, #0
 8008cf0:	f04f 0c00 	mov.w	ip, #0
 8008cf4:	f7ff bbb4 	b.w	8008460 <__ieee754_pow+0x120>
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7ff bb3d 	b.w	800837a <__ieee754_pow+0x3a>
 8008d00:	9200      	str	r2, [sp, #0]
 8008d02:	f7ff bb89 	b.w	8008418 <__ieee754_pow+0xd8>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f7ff bb73 	b.w	80083f2 <__ieee754_pow+0xb2>
 8008d0c:	f3af 8000 	nop.w
 8008d10:	652b82fe 	.word	0x652b82fe
 8008d14:	3c971547 	.word	0x3c971547
 8008d18:	00000000 	.word	0x00000000
 8008d1c:	3fe62e43 	.word	0x3fe62e43
 8008d20:	fefa39ef 	.word	0xfefa39ef
 8008d24:	3fe62e42 	.word	0x3fe62e42
 8008d28:	0ca86c39 	.word	0x0ca86c39
 8008d2c:	be205c61 	.word	0xbe205c61
 8008d30:	72bea4d0 	.word	0x72bea4d0
 8008d34:	3e663769 	.word	0x3e663769
 8008d38:	c5d26bf1 	.word	0xc5d26bf1
 8008d3c:	3ebbbd41 	.word	0x3ebbbd41
 8008d40:	af25de2c 	.word	0xaf25de2c
 8008d44:	3f11566a 	.word	0x3f11566a
 8008d48:	16bebd93 	.word	0x16bebd93
 8008d4c:	3f66c16c 	.word	0x3f66c16c
 8008d50:	5555553e 	.word	0x5555553e
 8008d54:	3fc55555 	.word	0x3fc55555
 8008d58:	3fe00000 	.word	0x3fe00000
 8008d5c:	000fffff 	.word	0x000fffff
 8008d60:	3ff00000 	.word	0x3ff00000
 8008d64:	4090cbff 	.word	0x4090cbff
 8008d68:	3f6f3400 	.word	0x3f6f3400
 8008d6c:	00000000 	.word	0x00000000

08008d70 <__ieee754_rem_pio2>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4614      	mov	r4, r2
 8008d76:	4ac4      	ldr	r2, [pc, #784]	; (8009088 <__ieee754_rem_pio2+0x318>)
 8008d78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008d7c:	b08d      	sub	sp, #52	; 0x34
 8008d7e:	4592      	cmp	sl, r2
 8008d80:	9104      	str	r1, [sp, #16]
 8008d82:	dc07      	bgt.n	8008d94 <__ieee754_rem_pio2+0x24>
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	e9c4 0100 	strd	r0, r1, [r4]
 8008d8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008d90:	2500      	movs	r5, #0
 8008d92:	e024      	b.n	8008dde <__ieee754_rem_pio2+0x6e>
 8008d94:	4abd      	ldr	r2, [pc, #756]	; (800908c <__ieee754_rem_pio2+0x31c>)
 8008d96:	4592      	cmp	sl, r2
 8008d98:	dc72      	bgt.n	8008e80 <__ieee754_rem_pio2+0x110>
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	4dbc      	ldr	r5, [pc, #752]	; (8009090 <__ieee754_rem_pio2+0x320>)
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	a3ab      	add	r3, pc, #684	; (adr r3, 8009050 <__ieee754_rem_pio2+0x2e0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	dd36      	ble.n	8008e16 <__ieee754_rem_pio2+0xa6>
 8008da8:	f7f7 f9d6 	bl	8000158 <__aeabi_dsub>
 8008dac:	45aa      	cmp	sl, r5
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	d018      	beq.n	8008de6 <__ieee754_rem_pio2+0x76>
 8008db4:	a3a8      	add	r3, pc, #672	; (adr r3, 8009058 <__ieee754_rem_pio2+0x2e8>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f7f7 f9cd 	bl	8000158 <__aeabi_dsub>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	e9c4 2300 	strd	r2, r3, [r4]
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 f9c5 	bl	8000158 <__aeabi_dsub>
 8008dce:	a3a2      	add	r3, pc, #648	; (adr r3, 8009058 <__ieee754_rem_pio2+0x2e8>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	f7f7 f9c0 	bl	8000158 <__aeabi_dsub>
 8008dd8:	2501      	movs	r5, #1
 8008dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008dde:	4628      	mov	r0, r5
 8008de0:	b00d      	add	sp, #52	; 0x34
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	a39e      	add	r3, pc, #632	; (adr r3, 8009060 <__ieee754_rem_pio2+0x2f0>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f7f7 f9b4 	bl	8000158 <__aeabi_dsub>
 8008df0:	a39d      	add	r3, pc, #628	; (adr r3, 8009068 <__ieee754_rem_pio2+0x2f8>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f7f7 f9ad 	bl	8000158 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4630      	mov	r0, r6
 8008e04:	e9c4 2300 	strd	r2, r3, [r4]
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 f9a5 	bl	8000158 <__aeabi_dsub>
 8008e0e:	a396      	add	r3, pc, #600	; (adr r3, 8009068 <__ieee754_rem_pio2+0x2f8>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	e7de      	b.n	8008dd4 <__ieee754_rem_pio2+0x64>
 8008e16:	f7f7 f9a1 	bl	800015c <__adddf3>
 8008e1a:	45aa      	cmp	sl, r5
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	d016      	beq.n	8008e50 <__ieee754_rem_pio2+0xe0>
 8008e22:	a38d      	add	r3, pc, #564	; (adr r3, 8009058 <__ieee754_rem_pio2+0x2e8>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 f998 	bl	800015c <__adddf3>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	e9c4 2300 	strd	r2, r3, [r4]
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 f98e 	bl	8000158 <__aeabi_dsub>
 8008e3c:	a386      	add	r3, pc, #536	; (adr r3, 8009058 <__ieee754_rem_pio2+0x2e8>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f7f7 f98b 	bl	800015c <__adddf3>
 8008e46:	f04f 35ff 	mov.w	r5, #4294967295
 8008e4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e4e:	e7c6      	b.n	8008dde <__ieee754_rem_pio2+0x6e>
 8008e50:	a383      	add	r3, pc, #524	; (adr r3, 8009060 <__ieee754_rem_pio2+0x2f0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 f981 	bl	800015c <__adddf3>
 8008e5a:	a383      	add	r3, pc, #524	; (adr r3, 8009068 <__ieee754_rem_pio2+0x2f8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	4606      	mov	r6, r0
 8008e62:	460f      	mov	r7, r1
 8008e64:	f7f7 f97a 	bl	800015c <__adddf3>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 f970 	bl	8000158 <__aeabi_dsub>
 8008e78:	a37b      	add	r3, pc, #492	; (adr r3, 8009068 <__ieee754_rem_pio2+0x2f8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	e7e0      	b.n	8008e42 <__ieee754_rem_pio2+0xd2>
 8008e80:	4a84      	ldr	r2, [pc, #528]	; (8009094 <__ieee754_rem_pio2+0x324>)
 8008e82:	4592      	cmp	sl, r2
 8008e84:	f300 80d5 	bgt.w	8009032 <__ieee754_rem_pio2+0x2c2>
 8008e88:	f000 fefc 	bl	8009c84 <fabs>
 8008e8c:	a378      	add	r3, pc, #480	; (adr r3, 8009070 <__ieee754_rem_pio2+0x300>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	4606      	mov	r6, r0
 8008e94:	460f      	mov	r7, r1
 8008e96:	f7f7 fb17 	bl	80004c8 <__aeabi_dmul>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4b7e      	ldr	r3, [pc, #504]	; (8009098 <__ieee754_rem_pio2+0x328>)
 8008e9e:	f7f7 f95d 	bl	800015c <__adddf3>
 8008ea2:	f7f7 fdc1 	bl	8000a28 <__aeabi_d2iz>
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	f7f7 faa4 	bl	80003f4 <__aeabi_i2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eb4:	a366      	add	r3, pc, #408	; (adr r3, 8009050 <__ieee754_rem_pio2+0x2e0>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 fb05 	bl	80004c8 <__aeabi_dmul>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	f7f7 f947 	bl	8000158 <__aeabi_dsub>
 8008eca:	a363      	add	r3, pc, #396	; (adr r3, 8009058 <__ieee754_rem_pio2+0x2e8>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed8:	f7f7 faf6 	bl	80004c8 <__aeabi_dmul>
 8008edc:	2d1f      	cmp	r5, #31
 8008ede:	4606      	mov	r6, r0
 8008ee0:	460f      	mov	r7, r1
 8008ee2:	dc0e      	bgt.n	8008f02 <__ieee754_rem_pio2+0x192>
 8008ee4:	4b6d      	ldr	r3, [pc, #436]	; (800909c <__ieee754_rem_pio2+0x32c>)
 8008ee6:	1e6a      	subs	r2, r5, #1
 8008ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eec:	4553      	cmp	r3, sl
 8008eee:	d008      	beq.n	8008f02 <__ieee754_rem_pio2+0x192>
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	f7f7 f92e 	bl	8000158 <__aeabi_dsub>
 8008efc:	e9c4 0100 	strd	r0, r1, [r4]
 8008f00:	e013      	b.n	8008f2a <__ieee754_rem_pio2+0x1ba>
 8008f02:	463b      	mov	r3, r7
 8008f04:	4632      	mov	r2, r6
 8008f06:	4640      	mov	r0, r8
 8008f08:	4649      	mov	r1, r9
 8008f0a:	f7f7 f925 	bl	8000158 <__aeabi_dsub>
 8008f0e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f18:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008f1c:	f1ba 0f10 	cmp.w	sl, #16
 8008f20:	dc1f      	bgt.n	8008f62 <__ieee754_rem_pio2+0x1f2>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9c4 2300 	strd	r2, r3, [r4]
 8008f2a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4653      	mov	r3, sl
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7f7 f910 	bl	8000158 <__aeabi_dsub>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 f90c 	bl	8000158 <__aeabi_dsub>
 8008f40:	460b      	mov	r3, r1
 8008f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f46:	9904      	ldr	r1, [sp, #16]
 8008f48:	4602      	mov	r2, r0
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	f6bf af47 	bge.w	8008dde <__ieee754_rem_pio2+0x6e>
 8008f50:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008f54:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008f58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f5c:	60e3      	str	r3, [r4, #12]
 8008f5e:	426d      	negs	r5, r5
 8008f60:	e73d      	b.n	8008dde <__ieee754_rem_pio2+0x6e>
 8008f62:	a33f      	add	r3, pc, #252	; (adr r3, 8009060 <__ieee754_rem_pio2+0x2f0>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f6c:	f7f7 faac 	bl	80004c8 <__aeabi_dmul>
 8008f70:	4606      	mov	r6, r0
 8008f72:	460f      	mov	r7, r1
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 f8ec 	bl	8000158 <__aeabi_dsub>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4682      	mov	sl, r0
 8008f86:	468b      	mov	fp, r1
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 f8e4 	bl	8000158 <__aeabi_dsub>
 8008f90:	4632      	mov	r2, r6
 8008f92:	463b      	mov	r3, r7
 8008f94:	f7f7 f8e0 	bl	8000158 <__aeabi_dsub>
 8008f98:	a333      	add	r3, pc, #204	; (adr r3, 8009068 <__ieee754_rem_pio2+0x2f8>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa6:	f7f7 fa8f 	bl	80004c8 <__aeabi_dmul>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	f7f7 f8d3 	bl	8000158 <__aeabi_dsub>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	4650      	mov	r0, sl
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 f8cb 	bl	8000158 <__aeabi_dsub>
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b31      	cmp	r3, #49	; 0x31
 8008fcc:	dc06      	bgt.n	8008fdc <__ieee754_rem_pio2+0x26c>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	46d0      	mov	r8, sl
 8008fd4:	46d9      	mov	r9, fp
 8008fd6:	e9c4 2300 	strd	r2, r3, [r4]
 8008fda:	e7a6      	b.n	8008f2a <__ieee754_rem_pio2+0x1ba>
 8008fdc:	a326      	add	r3, pc, #152	; (adr r3, 8009078 <__ieee754_rem_pio2+0x308>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe6:	f7f7 fa6f 	bl	80004c8 <__aeabi_dmul>
 8008fea:	4606      	mov	r6, r0
 8008fec:	460f      	mov	r7, r1
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f7f7 f8af 	bl	8000158 <__aeabi_dsub>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4680      	mov	r8, r0
 8009000:	4689      	mov	r9, r1
 8009002:	4650      	mov	r0, sl
 8009004:	4659      	mov	r1, fp
 8009006:	f7f7 f8a7 	bl	8000158 <__aeabi_dsub>
 800900a:	4632      	mov	r2, r6
 800900c:	463b      	mov	r3, r7
 800900e:	f7f7 f8a3 	bl	8000158 <__aeabi_dsub>
 8009012:	a31b      	add	r3, pc, #108	; (adr r3, 8009080 <__ieee754_rem_pio2+0x310>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	4606      	mov	r6, r0
 800901a:	460f      	mov	r7, r1
 800901c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009020:	f7f7 fa52 	bl	80004c8 <__aeabi_dmul>
 8009024:	4632      	mov	r2, r6
 8009026:	463b      	mov	r3, r7
 8009028:	f7f7 f896 	bl	8000158 <__aeabi_dsub>
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	e75e      	b.n	8008ef0 <__ieee754_rem_pio2+0x180>
 8009032:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <__ieee754_rem_pio2+0x330>)
 8009034:	4592      	cmp	sl, r2
 8009036:	dd35      	ble.n	80090a4 <__ieee754_rem_pio2+0x334>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	f7f7 f88c 	bl	8000158 <__aeabi_dsub>
 8009040:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009044:	e9c4 0100 	strd	r0, r1, [r4]
 8009048:	e6a2      	b.n	8008d90 <__ieee754_rem_pio2+0x20>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	54400000 	.word	0x54400000
 8009054:	3ff921fb 	.word	0x3ff921fb
 8009058:	1a626331 	.word	0x1a626331
 800905c:	3dd0b461 	.word	0x3dd0b461
 8009060:	1a600000 	.word	0x1a600000
 8009064:	3dd0b461 	.word	0x3dd0b461
 8009068:	2e037073 	.word	0x2e037073
 800906c:	3ba3198a 	.word	0x3ba3198a
 8009070:	6dc9c883 	.word	0x6dc9c883
 8009074:	3fe45f30 	.word	0x3fe45f30
 8009078:	2e000000 	.word	0x2e000000
 800907c:	3ba3198a 	.word	0x3ba3198a
 8009080:	252049c1 	.word	0x252049c1
 8009084:	397b839a 	.word	0x397b839a
 8009088:	3fe921fb 	.word	0x3fe921fb
 800908c:	4002d97b 	.word	0x4002d97b
 8009090:	3ff921fb 	.word	0x3ff921fb
 8009094:	413921fb 	.word	0x413921fb
 8009098:	3fe00000 	.word	0x3fe00000
 800909c:	0800a058 	.word	0x0800a058
 80090a0:	7fefffff 	.word	0x7fefffff
 80090a4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80090a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80090ac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80090b0:	460f      	mov	r7, r1
 80090b2:	4606      	mov	r6, r0
 80090b4:	f7f7 fcb8 	bl	8000a28 <__aeabi_d2iz>
 80090b8:	f7f7 f99c 	bl	80003f4 <__aeabi_i2d>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090c8:	f7f7 f846 	bl	8000158 <__aeabi_dsub>
 80090cc:	2200      	movs	r2, #0
 80090ce:	4b22      	ldr	r3, [pc, #136]	; (8009158 <__ieee754_rem_pio2+0x3e8>)
 80090d0:	f7f7 f9fa 	bl	80004c8 <__aeabi_dmul>
 80090d4:	460f      	mov	r7, r1
 80090d6:	4606      	mov	r6, r0
 80090d8:	f7f7 fca6 	bl	8000a28 <__aeabi_d2iz>
 80090dc:	f7f7 f98a 	bl	80003f4 <__aeabi_i2d>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090ec:	f7f7 f834 	bl	8000158 <__aeabi_dsub>
 80090f0:	2200      	movs	r2, #0
 80090f2:	4b19      	ldr	r3, [pc, #100]	; (8009158 <__ieee754_rem_pio2+0x3e8>)
 80090f4:	f7f7 f9e8 	bl	80004c8 <__aeabi_dmul>
 80090f8:	f04f 0803 	mov.w	r8, #3
 80090fc:	2600      	movs	r6, #0
 80090fe:	2700      	movs	r7, #0
 8009100:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009104:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009108:	4632      	mov	r2, r6
 800910a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800910e:	463b      	mov	r3, r7
 8009110:	46c2      	mov	sl, r8
 8009112:	f108 38ff 	add.w	r8, r8, #4294967295
 8009116:	f7f7 fc3f 	bl	8000998 <__aeabi_dcmpeq>
 800911a:	2800      	cmp	r0, #0
 800911c:	d1f4      	bne.n	8009108 <__ieee754_rem_pio2+0x398>
 800911e:	4b0f      	ldr	r3, [pc, #60]	; (800915c <__ieee754_rem_pio2+0x3ec>)
 8009120:	462a      	mov	r2, r5
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	2302      	movs	r3, #2
 8009126:	4621      	mov	r1, r4
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	a806      	add	r0, sp, #24
 800912c:	4653      	mov	r3, sl
 800912e:	f000 f985 	bl	800943c <__kernel_rem_pio2>
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4605      	mov	r5, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	f6bf ae51 	bge.w	8008dde <__ieee754_rem_pio2+0x6e>
 800913c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009144:	e9c4 2300 	strd	r2, r3, [r4]
 8009148:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800914c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009150:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009154:	e703      	b.n	8008f5e <__ieee754_rem_pio2+0x1ee>
 8009156:	bf00      	nop
 8009158:	41700000 	.word	0x41700000
 800915c:	0800a0d8 	.word	0x0800a0d8

08009160 <__ieee754_sqrt>:
 8009160:	f8df c158 	ldr.w	ip, [pc, #344]	; 80092bc <__ieee754_sqrt+0x15c>
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	ea3c 0c01 	bics.w	ip, ip, r1
 800916c:	4606      	mov	r6, r0
 800916e:	460d      	mov	r5, r1
 8009170:	460c      	mov	r4, r1
 8009172:	460a      	mov	r2, r1
 8009174:	4607      	mov	r7, r0
 8009176:	4603      	mov	r3, r0
 8009178:	d10f      	bne.n	800919a <__ieee754_sqrt+0x3a>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	f7f7 f9a3 	bl	80004c8 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4630      	mov	r0, r6
 8009188:	4629      	mov	r1, r5
 800918a:	f7f6 ffe7 	bl	800015c <__adddf3>
 800918e:	4606      	mov	r6, r0
 8009190:	460d      	mov	r5, r1
 8009192:	4630      	mov	r0, r6
 8009194:	4629      	mov	r1, r5
 8009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800919a:	2900      	cmp	r1, #0
 800919c:	dc0e      	bgt.n	80091bc <__ieee754_sqrt+0x5c>
 800919e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80091a2:	ea5c 0707 	orrs.w	r7, ip, r7
 80091a6:	d0f4      	beq.n	8009192 <__ieee754_sqrt+0x32>
 80091a8:	b141      	cbz	r1, 80091bc <__ieee754_sqrt+0x5c>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	f7f6 ffd3 	bl	8000158 <__aeabi_dsub>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	f7f7 fab1 	bl	800071c <__aeabi_ddiv>
 80091ba:	e7e8      	b.n	800918e <__ieee754_sqrt+0x2e>
 80091bc:	1521      	asrs	r1, r4, #20
 80091be:	d075      	beq.n	80092ac <__ieee754_sqrt+0x14c>
 80091c0:	07cc      	lsls	r4, r1, #31
 80091c2:	f04f 0400 	mov.w	r4, #0
 80091c6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80091ca:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80091ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091d2:	bf5e      	ittt	pl
 80091d4:	0fd9      	lsrpl	r1, r3, #31
 80091d6:	005b      	lslpl	r3, r3, #1
 80091d8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80091dc:	0fd9      	lsrs	r1, r3, #31
 80091de:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80091e2:	2516      	movs	r5, #22
 80091e4:	4620      	mov	r0, r4
 80091e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091ea:	107f      	asrs	r7, r7, #1
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	1846      	adds	r6, r0, r1
 80091f0:	4296      	cmp	r6, r2
 80091f2:	bfde      	ittt	le
 80091f4:	1b92      	suble	r2, r2, r6
 80091f6:	1870      	addle	r0, r6, r1
 80091f8:	1864      	addle	r4, r4, r1
 80091fa:	0052      	lsls	r2, r2, #1
 80091fc:	3d01      	subs	r5, #1
 80091fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009202:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009206:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800920a:	d1f0      	bne.n	80091ee <__ieee754_sqrt+0x8e>
 800920c:	4629      	mov	r1, r5
 800920e:	f04f 0e20 	mov.w	lr, #32
 8009212:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009216:	4282      	cmp	r2, r0
 8009218:	eb06 0c05 	add.w	ip, r6, r5
 800921c:	dc02      	bgt.n	8009224 <__ieee754_sqrt+0xc4>
 800921e:	d113      	bne.n	8009248 <__ieee754_sqrt+0xe8>
 8009220:	459c      	cmp	ip, r3
 8009222:	d811      	bhi.n	8009248 <__ieee754_sqrt+0xe8>
 8009224:	f1bc 0f00 	cmp.w	ip, #0
 8009228:	eb0c 0506 	add.w	r5, ip, r6
 800922c:	da43      	bge.n	80092b6 <__ieee754_sqrt+0x156>
 800922e:	2d00      	cmp	r5, #0
 8009230:	db41      	blt.n	80092b6 <__ieee754_sqrt+0x156>
 8009232:	f100 0801 	add.w	r8, r0, #1
 8009236:	1a12      	subs	r2, r2, r0
 8009238:	4640      	mov	r0, r8
 800923a:	459c      	cmp	ip, r3
 800923c:	bf88      	it	hi
 800923e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009242:	eba3 030c 	sub.w	r3, r3, ip
 8009246:	4431      	add	r1, r6
 8009248:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800924c:	f1be 0e01 	subs.w	lr, lr, #1
 8009250:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009258:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800925c:	d1db      	bne.n	8009216 <__ieee754_sqrt+0xb6>
 800925e:	4313      	orrs	r3, r2
 8009260:	d006      	beq.n	8009270 <__ieee754_sqrt+0x110>
 8009262:	1c48      	adds	r0, r1, #1
 8009264:	bf0b      	itete	eq
 8009266:	4671      	moveq	r1, lr
 8009268:	3101      	addne	r1, #1
 800926a:	3401      	addeq	r4, #1
 800926c:	f021 0101 	bicne.w	r1, r1, #1
 8009270:	1063      	asrs	r3, r4, #1
 8009272:	0849      	lsrs	r1, r1, #1
 8009274:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009278:	07e2      	lsls	r2, r4, #31
 800927a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800927e:	bf48      	it	mi
 8009280:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009284:	460e      	mov	r6, r1
 8009286:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800928a:	e782      	b.n	8009192 <__ieee754_sqrt+0x32>
 800928c:	0ada      	lsrs	r2, r3, #11
 800928e:	3815      	subs	r0, #21
 8009290:	055b      	lsls	r3, r3, #21
 8009292:	2a00      	cmp	r2, #0
 8009294:	d0fa      	beq.n	800928c <__ieee754_sqrt+0x12c>
 8009296:	02d5      	lsls	r5, r2, #11
 8009298:	d50a      	bpl.n	80092b0 <__ieee754_sqrt+0x150>
 800929a:	f1c1 0420 	rsb	r4, r1, #32
 800929e:	fa23 f404 	lsr.w	r4, r3, r4
 80092a2:	1e4d      	subs	r5, r1, #1
 80092a4:	408b      	lsls	r3, r1
 80092a6:	4322      	orrs	r2, r4
 80092a8:	1b41      	subs	r1, r0, r5
 80092aa:	e789      	b.n	80091c0 <__ieee754_sqrt+0x60>
 80092ac:	4608      	mov	r0, r1
 80092ae:	e7f0      	b.n	8009292 <__ieee754_sqrt+0x132>
 80092b0:	0052      	lsls	r2, r2, #1
 80092b2:	3101      	adds	r1, #1
 80092b4:	e7ef      	b.n	8009296 <__ieee754_sqrt+0x136>
 80092b6:	4680      	mov	r8, r0
 80092b8:	e7bd      	b.n	8009236 <__ieee754_sqrt+0xd6>
 80092ba:	bf00      	nop
 80092bc:	7ff00000 	.word	0x7ff00000

080092c0 <__kernel_cos>:
 80092c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80092c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80092cc:	4680      	mov	r8, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	e9cd 2300 	strd	r2, r3, [sp]
 80092d4:	da04      	bge.n	80092e0 <__kernel_cos+0x20>
 80092d6:	f7f7 fba7 	bl	8000a28 <__aeabi_d2iz>
 80092da:	2800      	cmp	r0, #0
 80092dc:	f000 8086 	beq.w	80093ec <__kernel_cos+0x12c>
 80092e0:	4642      	mov	r2, r8
 80092e2:	463b      	mov	r3, r7
 80092e4:	4640      	mov	r0, r8
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f7 f8ee 	bl	80004c8 <__aeabi_dmul>
 80092ec:	2200      	movs	r2, #0
 80092ee:	4b4e      	ldr	r3, [pc, #312]	; (8009428 <__kernel_cos+0x168>)
 80092f0:	4604      	mov	r4, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	f7f7 f8e8 	bl	80004c8 <__aeabi_dmul>
 80092f8:	a33f      	add	r3, pc, #252	; (adr r3, 80093f8 <__kernel_cos+0x138>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	4682      	mov	sl, r0
 8009300:	468b      	mov	fp, r1
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f7 f8df 	bl	80004c8 <__aeabi_dmul>
 800930a:	a33d      	add	r3, pc, #244	; (adr r3, 8009400 <__kernel_cos+0x140>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ff24 	bl	800015c <__adddf3>
 8009314:	4622      	mov	r2, r4
 8009316:	462b      	mov	r3, r5
 8009318:	f7f7 f8d6 	bl	80004c8 <__aeabi_dmul>
 800931c:	a33a      	add	r3, pc, #232	; (adr r3, 8009408 <__kernel_cos+0x148>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ff19 	bl	8000158 <__aeabi_dsub>
 8009326:	4622      	mov	r2, r4
 8009328:	462b      	mov	r3, r5
 800932a:	f7f7 f8cd 	bl	80004c8 <__aeabi_dmul>
 800932e:	a338      	add	r3, pc, #224	; (adr r3, 8009410 <__kernel_cos+0x150>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ff12 	bl	800015c <__adddf3>
 8009338:	4622      	mov	r2, r4
 800933a:	462b      	mov	r3, r5
 800933c:	f7f7 f8c4 	bl	80004c8 <__aeabi_dmul>
 8009340:	a335      	add	r3, pc, #212	; (adr r3, 8009418 <__kernel_cos+0x158>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff07 	bl	8000158 <__aeabi_dsub>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f7 f8bb 	bl	80004c8 <__aeabi_dmul>
 8009352:	a333      	add	r3, pc, #204	; (adr r3, 8009420 <__kernel_cos+0x160>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ff00 	bl	800015c <__adddf3>
 800935c:	4622      	mov	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	f7f7 f8b2 	bl	80004c8 <__aeabi_dmul>
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	f7f7 f8ae 	bl	80004c8 <__aeabi_dmul>
 800936c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4640      	mov	r0, r8
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 f8a6 	bl	80004c8 <__aeabi_dmul>
 800937c:	460b      	mov	r3, r1
 800937e:	4602      	mov	r2, r0
 8009380:	4629      	mov	r1, r5
 8009382:	4620      	mov	r0, r4
 8009384:	f7f6 fee8 	bl	8000158 <__aeabi_dsub>
 8009388:	4b28      	ldr	r3, [pc, #160]	; (800942c <__kernel_cos+0x16c>)
 800938a:	4680      	mov	r8, r0
 800938c:	429e      	cmp	r6, r3
 800938e:	4689      	mov	r9, r1
 8009390:	dc0e      	bgt.n	80093b0 <__kernel_cos+0xf0>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4650      	mov	r0, sl
 8009398:	4659      	mov	r1, fp
 800939a:	f7f6 fedd 	bl	8000158 <__aeabi_dsub>
 800939e:	4602      	mov	r2, r0
 80093a0:	2000      	movs	r0, #0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4922      	ldr	r1, [pc, #136]	; (8009430 <__kernel_cos+0x170>)
 80093a6:	f7f6 fed7 	bl	8000158 <__aeabi_dsub>
 80093aa:	b003      	add	sp, #12
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	2400      	movs	r4, #0
 80093b2:	4b20      	ldr	r3, [pc, #128]	; (8009434 <__kernel_cos+0x174>)
 80093b4:	4622      	mov	r2, r4
 80093b6:	429e      	cmp	r6, r3
 80093b8:	bfcc      	ite	gt
 80093ba:	4d1f      	ldrgt	r5, [pc, #124]	; (8009438 <__kernel_cos+0x178>)
 80093bc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80093c0:	462b      	mov	r3, r5
 80093c2:	2000      	movs	r0, #0
 80093c4:	491a      	ldr	r1, [pc, #104]	; (8009430 <__kernel_cos+0x170>)
 80093c6:	f7f6 fec7 	bl	8000158 <__aeabi_dsub>
 80093ca:	4622      	mov	r2, r4
 80093cc:	4606      	mov	r6, r0
 80093ce:	460f      	mov	r7, r1
 80093d0:	462b      	mov	r3, r5
 80093d2:	4650      	mov	r0, sl
 80093d4:	4659      	mov	r1, fp
 80093d6:	f7f6 febf 	bl	8000158 <__aeabi_dsub>
 80093da:	4642      	mov	r2, r8
 80093dc:	464b      	mov	r3, r9
 80093de:	f7f6 febb 	bl	8000158 <__aeabi_dsub>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4630      	mov	r0, r6
 80093e8:	4639      	mov	r1, r7
 80093ea:	e7dc      	b.n	80093a6 <__kernel_cos+0xe6>
 80093ec:	2000      	movs	r0, #0
 80093ee:	4910      	ldr	r1, [pc, #64]	; (8009430 <__kernel_cos+0x170>)
 80093f0:	e7db      	b.n	80093aa <__kernel_cos+0xea>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	be8838d4 	.word	0xbe8838d4
 80093fc:	bda8fae9 	.word	0xbda8fae9
 8009400:	bdb4b1c4 	.word	0xbdb4b1c4
 8009404:	3e21ee9e 	.word	0x3e21ee9e
 8009408:	809c52ad 	.word	0x809c52ad
 800940c:	3e927e4f 	.word	0x3e927e4f
 8009410:	19cb1590 	.word	0x19cb1590
 8009414:	3efa01a0 	.word	0x3efa01a0
 8009418:	16c15177 	.word	0x16c15177
 800941c:	3f56c16c 	.word	0x3f56c16c
 8009420:	5555554c 	.word	0x5555554c
 8009424:	3fa55555 	.word	0x3fa55555
 8009428:	3fe00000 	.word	0x3fe00000
 800942c:	3fd33332 	.word	0x3fd33332
 8009430:	3ff00000 	.word	0x3ff00000
 8009434:	3fe90000 	.word	0x3fe90000
 8009438:	3fd20000 	.word	0x3fd20000

0800943c <__kernel_rem_pio2>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009444:	9308      	str	r3, [sp, #32]
 8009446:	9106      	str	r1, [sp, #24]
 8009448:	4bb6      	ldr	r3, [pc, #728]	; (8009724 <__kernel_rem_pio2+0x2e8>)
 800944a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800944c:	f112 0f14 	cmn.w	r2, #20
 8009450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009454:	bfa8      	it	ge
 8009456:	1ed4      	subge	r4, r2, #3
 8009458:	9302      	str	r3, [sp, #8]
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	bfb8      	it	lt
 800945e:	2400      	movlt	r4, #0
 8009460:	f103 33ff 	add.w	r3, r3, #4294967295
 8009464:	9307      	str	r3, [sp, #28]
 8009466:	bfa4      	itt	ge
 8009468:	2318      	movge	r3, #24
 800946a:	fb94 f4f3 	sdivge	r4, r4, r3
 800946e:	f06f 0317 	mvn.w	r3, #23
 8009472:	fb04 3303 	mla	r3, r4, r3, r3
 8009476:	eb03 0b02 	add.w	fp, r3, r2
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	9b02      	ldr	r3, [sp, #8]
 800947e:	1aa7      	subs	r7, r4, r2
 8009480:	eb03 0802 	add.w	r8, r3, r2
 8009484:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009486:	2500      	movs	r5, #0
 8009488:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	9009      	str	r0, [sp, #36]	; 0x24
 8009492:	ae20      	add	r6, sp, #128	; 0x80
 8009494:	4545      	cmp	r5, r8
 8009496:	dd14      	ble.n	80094c2 <__kernel_rem_pio2+0x86>
 8009498:	f04f 0800 	mov.w	r8, #0
 800949c:	9a08      	ldr	r2, [sp, #32]
 800949e:	ab20      	add	r3, sp, #128	; 0x80
 80094a0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80094a4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	4598      	cmp	r8, r3
 80094ac:	dc35      	bgt.n	800951a <__kernel_rem_pio2+0xde>
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b0:	2200      	movs	r2, #0
 80094b2:	f1a3 0908 	sub.w	r9, r3, #8
 80094b6:	2300      	movs	r3, #0
 80094b8:	462f      	mov	r7, r5
 80094ba:	2600      	movs	r6, #0
 80094bc:	e9cd 2300 	strd	r2, r3, [sp]
 80094c0:	e01f      	b.n	8009502 <__kernel_rem_pio2+0xc6>
 80094c2:	42ef      	cmn	r7, r5
 80094c4:	d40b      	bmi.n	80094de <__kernel_rem_pio2+0xa2>
 80094c6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80094ca:	e9cd 2300 	strd	r2, r3, [sp]
 80094ce:	f7f6 ff91 	bl	80003f4 <__aeabi_i2d>
 80094d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80094da:	3501      	adds	r5, #1
 80094dc:	e7da      	b.n	8009494 <__kernel_rem_pio2+0x58>
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	e7f8      	b.n	80094d6 <__kernel_rem_pio2+0x9a>
 80094e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80094ec:	f7f6 ffec 	bl	80004c8 <__aeabi_dmul>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f8:	f7f6 fe30 	bl	800015c <__adddf3>
 80094fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009500:	3601      	adds	r6, #1
 8009502:	9b07      	ldr	r3, [sp, #28]
 8009504:	3f08      	subs	r7, #8
 8009506:	429e      	cmp	r6, r3
 8009508:	ddec      	ble.n	80094e4 <__kernel_rem_pio2+0xa8>
 800950a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950e:	f108 0801 	add.w	r8, r8, #1
 8009512:	e8ea 2302 	strd	r2, r3, [sl], #8
 8009516:	3508      	adds	r5, #8
 8009518:	e7c6      	b.n	80094a8 <__kernel_rem_pio2+0x6c>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	aa0c      	add	r2, sp, #48	; 0x30
 800951e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009522:	930b      	str	r3, [sp, #44]	; 0x2c
 8009524:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009526:	9e02      	ldr	r6, [sp, #8]
 8009528:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800952c:	930a      	str	r3, [sp, #40]	; 0x28
 800952e:	ab98      	add	r3, sp, #608	; 0x260
 8009530:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009534:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009538:	ab70      	add	r3, sp, #448	; 0x1c0
 800953a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800953e:	46d0      	mov	r8, sl
 8009540:	46b1      	mov	r9, r6
 8009542:	af0c      	add	r7, sp, #48	; 0x30
 8009544:	9700      	str	r7, [sp, #0]
 8009546:	f1b9 0f00 	cmp.w	r9, #0
 800954a:	f1a8 0808 	sub.w	r8, r8, #8
 800954e:	dc71      	bgt.n	8009634 <__kernel_rem_pio2+0x1f8>
 8009550:	465a      	mov	r2, fp
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f000 fc1f 	bl	8009d98 <scalbn>
 800955a:	2200      	movs	r2, #0
 800955c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009560:	4604      	mov	r4, r0
 8009562:	460d      	mov	r5, r1
 8009564:	f7f6 ffb0 	bl	80004c8 <__aeabi_dmul>
 8009568:	f000 fb96 	bl	8009c98 <floor>
 800956c:	2200      	movs	r2, #0
 800956e:	4b6e      	ldr	r3, [pc, #440]	; (8009728 <__kernel_rem_pio2+0x2ec>)
 8009570:	f7f6 ffaa 	bl	80004c8 <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f6 fdec 	bl	8000158 <__aeabi_dsub>
 8009580:	460d      	mov	r5, r1
 8009582:	4604      	mov	r4, r0
 8009584:	f7f7 fa50 	bl	8000a28 <__aeabi_d2iz>
 8009588:	9004      	str	r0, [sp, #16]
 800958a:	f7f6 ff33 	bl	80003f4 <__aeabi_i2d>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4620      	mov	r0, r4
 8009594:	4629      	mov	r1, r5
 8009596:	f7f6 fddf 	bl	8000158 <__aeabi_dsub>
 800959a:	f1bb 0f00 	cmp.w	fp, #0
 800959e:	4680      	mov	r8, r0
 80095a0:	4689      	mov	r9, r1
 80095a2:	dd70      	ble.n	8009686 <__kernel_rem_pio2+0x24a>
 80095a4:	1e72      	subs	r2, r6, #1
 80095a6:	ab0c      	add	r3, sp, #48	; 0x30
 80095a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80095ac:	9c04      	ldr	r4, [sp, #16]
 80095ae:	f1cb 0118 	rsb	r1, fp, #24
 80095b2:	fa40 f301 	asr.w	r3, r0, r1
 80095b6:	441c      	add	r4, r3
 80095b8:	408b      	lsls	r3, r1
 80095ba:	1ac0      	subs	r0, r0, r3
 80095bc:	ab0c      	add	r3, sp, #48	; 0x30
 80095be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80095c2:	f1cb 0317 	rsb	r3, fp, #23
 80095c6:	9404      	str	r4, [sp, #16]
 80095c8:	fa40 f303 	asr.w	r3, r0, r3
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dd66      	ble.n	80096a2 <__kernel_rem_pio2+0x266>
 80095d4:	2200      	movs	r2, #0
 80095d6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80095da:	4614      	mov	r4, r2
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	3301      	adds	r3, #1
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	4296      	cmp	r6, r2
 80095e4:	f300 80ac 	bgt.w	8009740 <__kernel_rem_pio2+0x304>
 80095e8:	f1bb 0f00 	cmp.w	fp, #0
 80095ec:	dd07      	ble.n	80095fe <__kernel_rem_pio2+0x1c2>
 80095ee:	f1bb 0f01 	cmp.w	fp, #1
 80095f2:	f000 80b4 	beq.w	800975e <__kernel_rem_pio2+0x322>
 80095f6:	f1bb 0f02 	cmp.w	fp, #2
 80095fa:	f000 80ba 	beq.w	8009772 <__kernel_rem_pio2+0x336>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d14e      	bne.n	80096a2 <__kernel_rem_pio2+0x266>
 8009604:	4642      	mov	r2, r8
 8009606:	464b      	mov	r3, r9
 8009608:	2000      	movs	r0, #0
 800960a:	4948      	ldr	r1, [pc, #288]	; (800972c <__kernel_rem_pio2+0x2f0>)
 800960c:	f7f6 fda4 	bl	8000158 <__aeabi_dsub>
 8009610:	4680      	mov	r8, r0
 8009612:	4689      	mov	r9, r1
 8009614:	2c00      	cmp	r4, #0
 8009616:	d044      	beq.n	80096a2 <__kernel_rem_pio2+0x266>
 8009618:	465a      	mov	r2, fp
 800961a:	2000      	movs	r0, #0
 800961c:	4943      	ldr	r1, [pc, #268]	; (800972c <__kernel_rem_pio2+0x2f0>)
 800961e:	f000 fbbb 	bl	8009d98 <scalbn>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fd95 	bl	8000158 <__aeabi_dsub>
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	e036      	b.n	80096a2 <__kernel_rem_pio2+0x266>
 8009634:	2200      	movs	r2, #0
 8009636:	4b3e      	ldr	r3, [pc, #248]	; (8009730 <__kernel_rem_pio2+0x2f4>)
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 ff44 	bl	80004c8 <__aeabi_dmul>
 8009640:	f7f7 f9f2 	bl	8000a28 <__aeabi_d2iz>
 8009644:	f7f6 fed6 	bl	80003f4 <__aeabi_i2d>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009650:	2200      	movs	r2, #0
 8009652:	4b38      	ldr	r3, [pc, #224]	; (8009734 <__kernel_rem_pio2+0x2f8>)
 8009654:	f7f6 ff38 	bl	80004c8 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4620      	mov	r0, r4
 800965e:	4629      	mov	r1, r5
 8009660:	f7f6 fd7a 	bl	8000158 <__aeabi_dsub>
 8009664:	f7f7 f9e0 	bl	8000a28 <__aeabi_d2iz>
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	f109 39ff 	add.w	r9, r9, #4294967295
 800966e:	f843 0b04 	str.w	r0, [r3], #4
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009678:	e9d8 2300 	ldrd	r2, r3, [r8]
 800967c:	f7f6 fd6e 	bl	800015c <__adddf3>
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	e75f      	b.n	8009546 <__kernel_rem_pio2+0x10a>
 8009686:	d105      	bne.n	8009694 <__kernel_rem_pio2+0x258>
 8009688:	1e73      	subs	r3, r6, #1
 800968a:	aa0c      	add	r2, sp, #48	; 0x30
 800968c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009690:	15c3      	asrs	r3, r0, #23
 8009692:	e79b      	b.n	80095cc <__kernel_rem_pio2+0x190>
 8009694:	2200      	movs	r2, #0
 8009696:	4b28      	ldr	r3, [pc, #160]	; (8009738 <__kernel_rem_pio2+0x2fc>)
 8009698:	f7f7 f99c 	bl	80009d4 <__aeabi_dcmpge>
 800969c:	2800      	cmp	r0, #0
 800969e:	d13e      	bne.n	800971e <__kernel_rem_pio2+0x2e2>
 80096a0:	9000      	str	r0, [sp, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f7 f975 	bl	8000998 <__aeabi_dcmpeq>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f000 80b1 	beq.w	8009816 <__kernel_rem_pio2+0x3da>
 80096b4:	1e74      	subs	r4, r6, #1
 80096b6:	4623      	mov	r3, r4
 80096b8:	2200      	movs	r2, #0
 80096ba:	9902      	ldr	r1, [sp, #8]
 80096bc:	428b      	cmp	r3, r1
 80096be:	da5f      	bge.n	8009780 <__kernel_rem_pio2+0x344>
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	d074      	beq.n	80097ae <__kernel_rem_pio2+0x372>
 80096c4:	ab0c      	add	r3, sp, #48	; 0x30
 80096c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80096ca:	f1ab 0b18 	sub.w	fp, fp, #24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 809f 	beq.w	8009812 <__kernel_rem_pio2+0x3d6>
 80096d4:	465a      	mov	r2, fp
 80096d6:	2000      	movs	r0, #0
 80096d8:	4914      	ldr	r1, [pc, #80]	; (800972c <__kernel_rem_pio2+0x2f0>)
 80096da:	f000 fb5d 	bl	8009d98 <scalbn>
 80096de:	46a2      	mov	sl, r4
 80096e0:	4606      	mov	r6, r0
 80096e2:	460f      	mov	r7, r1
 80096e4:	f04f 0800 	mov.w	r8, #0
 80096e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80096ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009730 <__kernel_rem_pio2+0x2f4>
 80096ee:	00e5      	lsls	r5, r4, #3
 80096f0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80096f4:	f1ba 0f00 	cmp.w	sl, #0
 80096f8:	f280 80c3 	bge.w	8009882 <__kernel_rem_pio2+0x446>
 80096fc:	4626      	mov	r6, r4
 80096fe:	2e00      	cmp	r6, #0
 8009700:	f2c0 80f5 	blt.w	80098ee <__kernel_rem_pio2+0x4b2>
 8009704:	4b0d      	ldr	r3, [pc, #52]	; (800973c <__kernel_rem_pio2+0x300>)
 8009706:	f04f 0a00 	mov.w	sl, #0
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	ab70      	add	r3, sp, #448	; 0x1c0
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	f04f 0800 	mov.w	r8, #0
 8009716:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800971a:	1ba7      	subs	r7, r4, r6
 800971c:	e0db      	b.n	80098d6 <__kernel_rem_pio2+0x49a>
 800971e:	2302      	movs	r3, #2
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	e757      	b.n	80095d4 <__kernel_rem_pio2+0x198>
 8009724:	0800a220 	.word	0x0800a220
 8009728:	40200000 	.word	0x40200000
 800972c:	3ff00000 	.word	0x3ff00000
 8009730:	3e700000 	.word	0x3e700000
 8009734:	41700000 	.word	0x41700000
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	0800a1e0 	.word	0x0800a1e0
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	b944      	cbnz	r4, 8009756 <__kernel_rem_pio2+0x31a>
 8009744:	b11b      	cbz	r3, 800974e <__kernel_rem_pio2+0x312>
 8009746:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	2301      	movs	r3, #1
 800974e:	461c      	mov	r4, r3
 8009750:	3201      	adds	r2, #1
 8009752:	3704      	adds	r7, #4
 8009754:	e745      	b.n	80095e2 <__kernel_rem_pio2+0x1a6>
 8009756:	1acb      	subs	r3, r1, r3
 8009758:	603b      	str	r3, [r7, #0]
 800975a:	4623      	mov	r3, r4
 800975c:	e7f7      	b.n	800974e <__kernel_rem_pio2+0x312>
 800975e:	1e72      	subs	r2, r6, #1
 8009760:	ab0c      	add	r3, sp, #48	; 0x30
 8009762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009766:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800976a:	a90c      	add	r1, sp, #48	; 0x30
 800976c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009770:	e745      	b.n	80095fe <__kernel_rem_pio2+0x1c2>
 8009772:	1e72      	subs	r2, r6, #1
 8009774:	ab0c      	add	r3, sp, #48	; 0x30
 8009776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800977e:	e7f4      	b.n	800976a <__kernel_rem_pio2+0x32e>
 8009780:	a90c      	add	r1, sp, #48	; 0x30
 8009782:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009786:	3b01      	subs	r3, #1
 8009788:	430a      	orrs	r2, r1
 800978a:	e796      	b.n	80096ba <__kernel_rem_pio2+0x27e>
 800978c:	3401      	adds	r4, #1
 800978e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009792:	2a00      	cmp	r2, #0
 8009794:	d0fa      	beq.n	800978c <__kernel_rem_pio2+0x350>
 8009796:	9b08      	ldr	r3, [sp, #32]
 8009798:	f106 0801 	add.w	r8, r6, #1
 800979c:	18f5      	adds	r5, r6, r3
 800979e:	ab20      	add	r3, sp, #128	; 0x80
 80097a0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097a4:	4434      	add	r4, r6
 80097a6:	4544      	cmp	r4, r8
 80097a8:	da04      	bge.n	80097b4 <__kernel_rem_pio2+0x378>
 80097aa:	4626      	mov	r6, r4
 80097ac:	e6bf      	b.n	800952e <__kernel_rem_pio2+0xf2>
 80097ae:	2401      	movs	r4, #1
 80097b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b2:	e7ec      	b.n	800978e <__kernel_rem_pio2+0x352>
 80097b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b6:	f04f 0900 	mov.w	r9, #0
 80097ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80097be:	f7f6 fe19 	bl	80003f4 <__aeabi_i2d>
 80097c2:	2600      	movs	r6, #0
 80097c4:	2700      	movs	r7, #0
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	e9c5 0100 	strd	r0, r1, [r5]
 80097cc:	3b08      	subs	r3, #8
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	9504      	str	r5, [sp, #16]
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	4599      	cmp	r9, r3
 80097d6:	dd05      	ble.n	80097e4 <__kernel_rem_pio2+0x3a8>
 80097d8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80097dc:	f108 0801 	add.w	r8, r8, #1
 80097e0:	3508      	adds	r5, #8
 80097e2:	e7e0      	b.n	80097a6 <__kernel_rem_pio2+0x36a>
 80097e4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80097e8:	9900      	ldr	r1, [sp, #0]
 80097ea:	f109 0901 	add.w	r9, r9, #1
 80097ee:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80097f2:	9100      	str	r1, [sp, #0]
 80097f4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80097f8:	f8cd c010 	str.w	ip, [sp, #16]
 80097fc:	f7f6 fe64 	bl	80004c8 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4630      	mov	r0, r6
 8009806:	4639      	mov	r1, r7
 8009808:	f7f6 fca8 	bl	800015c <__adddf3>
 800980c:	4606      	mov	r6, r0
 800980e:	460f      	mov	r7, r1
 8009810:	e7df      	b.n	80097d2 <__kernel_rem_pio2+0x396>
 8009812:	3c01      	subs	r4, #1
 8009814:	e756      	b.n	80096c4 <__kernel_rem_pio2+0x288>
 8009816:	f1cb 0200 	rsb	r2, fp, #0
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f000 fabb 	bl	8009d98 <scalbn>
 8009822:	2200      	movs	r2, #0
 8009824:	4ba4      	ldr	r3, [pc, #656]	; (8009ab8 <__kernel_rem_pio2+0x67c>)
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	f7f7 f8d3 	bl	80009d4 <__aeabi_dcmpge>
 800982e:	b1f8      	cbz	r0, 8009870 <__kernel_rem_pio2+0x434>
 8009830:	2200      	movs	r2, #0
 8009832:	4ba2      	ldr	r3, [pc, #648]	; (8009abc <__kernel_rem_pio2+0x680>)
 8009834:	4620      	mov	r0, r4
 8009836:	4629      	mov	r1, r5
 8009838:	f7f6 fe46 	bl	80004c8 <__aeabi_dmul>
 800983c:	f7f7 f8f4 	bl	8000a28 <__aeabi_d2iz>
 8009840:	4607      	mov	r7, r0
 8009842:	f7f6 fdd7 	bl	80003f4 <__aeabi_i2d>
 8009846:	2200      	movs	r2, #0
 8009848:	4b9b      	ldr	r3, [pc, #620]	; (8009ab8 <__kernel_rem_pio2+0x67c>)
 800984a:	f7f6 fe3d 	bl	80004c8 <__aeabi_dmul>
 800984e:	460b      	mov	r3, r1
 8009850:	4602      	mov	r2, r0
 8009852:	4629      	mov	r1, r5
 8009854:	4620      	mov	r0, r4
 8009856:	f7f6 fc7f 	bl	8000158 <__aeabi_dsub>
 800985a:	f7f7 f8e5 	bl	8000a28 <__aeabi_d2iz>
 800985e:	1c74      	adds	r4, r6, #1
 8009860:	ab0c      	add	r3, sp, #48	; 0x30
 8009862:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009866:	f10b 0b18 	add.w	fp, fp, #24
 800986a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800986e:	e731      	b.n	80096d4 <__kernel_rem_pio2+0x298>
 8009870:	4620      	mov	r0, r4
 8009872:	4629      	mov	r1, r5
 8009874:	f7f7 f8d8 	bl	8000a28 <__aeabi_d2iz>
 8009878:	ab0c      	add	r3, sp, #48	; 0x30
 800987a:	4634      	mov	r4, r6
 800987c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009880:	e728      	b.n	80096d4 <__kernel_rem_pio2+0x298>
 8009882:	ab0c      	add	r3, sp, #48	; 0x30
 8009884:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009888:	f7f6 fdb4 	bl	80003f4 <__aeabi_i2d>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	f7f6 fe1a 	bl	80004c8 <__aeabi_dmul>
 8009894:	4642      	mov	r2, r8
 8009896:	e86b 0102 	strd	r0, r1, [fp], #-8
 800989a:	464b      	mov	r3, r9
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 fe12 	bl	80004c8 <__aeabi_dmul>
 80098a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098a8:	4606      	mov	r6, r0
 80098aa:	460f      	mov	r7, r1
 80098ac:	e722      	b.n	80096f4 <__kernel_rem_pio2+0x2b8>
 80098ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80098b2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80098b6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80098ba:	f8cd c01c 	str.w	ip, [sp, #28]
 80098be:	f7f6 fe03 	bl	80004c8 <__aeabi_dmul>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4650      	mov	r0, sl
 80098c8:	4659      	mov	r1, fp
 80098ca:	f7f6 fc47 	bl	800015c <__adddf3>
 80098ce:	4682      	mov	sl, r0
 80098d0:	468b      	mov	fp, r1
 80098d2:	f108 0801 	add.w	r8, r8, #1
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	4598      	cmp	r8, r3
 80098da:	dc01      	bgt.n	80098e0 <__kernel_rem_pio2+0x4a4>
 80098dc:	45b8      	cmp	r8, r7
 80098de:	dde6      	ble.n	80098ae <__kernel_rem_pio2+0x472>
 80098e0:	ab48      	add	r3, sp, #288	; 0x120
 80098e2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80098e6:	e9c7 ab00 	strd	sl, fp, [r7]
 80098ea:	3e01      	subs	r6, #1
 80098ec:	e707      	b.n	80096fe <__kernel_rem_pio2+0x2c2>
 80098ee:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	dc09      	bgt.n	8009908 <__kernel_rem_pio2+0x4cc>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc32      	bgt.n	800995e <__kernel_rem_pio2+0x522>
 80098f8:	d05a      	beq.n	80099b0 <__kernel_rem_pio2+0x574>
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	f003 0007 	and.w	r0, r3, #7
 8009900:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800990a:	2b03      	cmp	r3, #3
 800990c:	d1f5      	bne.n	80098fa <__kernel_rem_pio2+0x4be>
 800990e:	ab48      	add	r3, sp, #288	; 0x120
 8009910:	441d      	add	r5, r3
 8009912:	46aa      	mov	sl, r5
 8009914:	46a3      	mov	fp, r4
 8009916:	f1bb 0f00 	cmp.w	fp, #0
 800991a:	dc76      	bgt.n	8009a0a <__kernel_rem_pio2+0x5ce>
 800991c:	46aa      	mov	sl, r5
 800991e:	46a3      	mov	fp, r4
 8009920:	f1bb 0f01 	cmp.w	fp, #1
 8009924:	f300 8090 	bgt.w	8009a48 <__kernel_rem_pio2+0x60c>
 8009928:	2700      	movs	r7, #0
 800992a:	463e      	mov	r6, r7
 800992c:	2c01      	cmp	r4, #1
 800992e:	f300 80aa 	bgt.w	8009a86 <__kernel_rem_pio2+0x64a>
 8009932:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009936:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 80ac 	bne.w	8009a9a <__kernel_rem_pio2+0x65e>
 8009942:	4603      	mov	r3, r0
 8009944:	462a      	mov	r2, r5
 8009946:	9806      	ldr	r0, [sp, #24]
 8009948:	e9c0 2300 	strd	r2, r3, [r0]
 800994c:	4622      	mov	r2, r4
 800994e:	460b      	mov	r3, r1
 8009950:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009954:	463a      	mov	r2, r7
 8009956:	4633      	mov	r3, r6
 8009958:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800995c:	e7cd      	b.n	80098fa <__kernel_rem_pio2+0x4be>
 800995e:	2000      	movs	r0, #0
 8009960:	46a0      	mov	r8, r4
 8009962:	4601      	mov	r1, r0
 8009964:	ab48      	add	r3, sp, #288	; 0x120
 8009966:	441d      	add	r5, r3
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	da3a      	bge.n	80099e4 <__kernel_rem_pio2+0x5a8>
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d03e      	beq.n	80099f2 <__kernel_rem_pio2+0x5b6>
 8009974:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009978:	4602      	mov	r2, r0
 800997a:	462b      	mov	r3, r5
 800997c:	9d06      	ldr	r5, [sp, #24]
 800997e:	2601      	movs	r6, #1
 8009980:	e9c5 2300 	strd	r2, r3, [r5]
 8009984:	460b      	mov	r3, r1
 8009986:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800998a:	f7f6 fbe5 	bl	8000158 <__aeabi_dsub>
 800998e:	4684      	mov	ip, r0
 8009990:	460f      	mov	r7, r1
 8009992:	ad48      	add	r5, sp, #288	; 0x120
 8009994:	42b4      	cmp	r4, r6
 8009996:	f105 0508 	add.w	r5, r5, #8
 800999a:	da2c      	bge.n	80099f6 <__kernel_rem_pio2+0x5ba>
 800999c:	9b00      	ldr	r3, [sp, #0]
 800999e:	b10b      	cbz	r3, 80099a4 <__kernel_rem_pio2+0x568>
 80099a0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80099a4:	4662      	mov	r2, ip
 80099a6:	463b      	mov	r3, r7
 80099a8:	9906      	ldr	r1, [sp, #24]
 80099aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80099ae:	e7a4      	b.n	80098fa <__kernel_rem_pio2+0x4be>
 80099b0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80099b2:	ab48      	add	r3, sp, #288	; 0x120
 80099b4:	4637      	mov	r7, r6
 80099b6:	441d      	add	r5, r3
 80099b8:	2c00      	cmp	r4, #0
 80099ba:	da09      	bge.n	80099d0 <__kernel_rem_pio2+0x594>
 80099bc:	9b00      	ldr	r3, [sp, #0]
 80099be:	b10b      	cbz	r3, 80099c4 <__kernel_rem_pio2+0x588>
 80099c0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	9906      	ldr	r1, [sp, #24]
 80099ca:	e9c1 2300 	strd	r2, r3, [r1]
 80099ce:	e794      	b.n	80098fa <__kernel_rem_pio2+0x4be>
 80099d0:	4630      	mov	r0, r6
 80099d2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f6 fbc0 	bl	800015c <__adddf3>
 80099dc:	3c01      	subs	r4, #1
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	e7e9      	b.n	80099b8 <__kernel_rem_pio2+0x57c>
 80099e4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80099e8:	f7f6 fbb8 	bl	800015c <__adddf3>
 80099ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80099f0:	e7ba      	b.n	8009968 <__kernel_rem_pio2+0x52c>
 80099f2:	460d      	mov	r5, r1
 80099f4:	e7c0      	b.n	8009978 <__kernel_rem_pio2+0x53c>
 80099f6:	4660      	mov	r0, ip
 80099f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fbad 	bl	800015c <__adddf3>
 8009a02:	3601      	adds	r6, #1
 8009a04:	4684      	mov	ip, r0
 8009a06:	460f      	mov	r7, r1
 8009a08:	e7c4      	b.n	8009994 <__kernel_rem_pio2+0x558>
 8009a0a:	e9da 6700 	ldrd	r6, r7, [sl]
 8009a0e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009a12:	4632      	mov	r2, r6
 8009a14:	463b      	mov	r3, r7
 8009a16:	4640      	mov	r0, r8
 8009a18:	4649      	mov	r1, r9
 8009a1a:	f7f6 fb9f 	bl	800015c <__adddf3>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a26:	4640      	mov	r0, r8
 8009a28:	4649      	mov	r1, r9
 8009a2a:	f7f6 fb95 	bl	8000158 <__aeabi_dsub>
 8009a2e:	4632      	mov	r2, r6
 8009a30:	463b      	mov	r3, r7
 8009a32:	f7f6 fb93 	bl	800015c <__adddf3>
 8009a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a3a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009a3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a42:	e9ca 2300 	strd	r2, r3, [sl]
 8009a46:	e766      	b.n	8009916 <__kernel_rem_pio2+0x4da>
 8009a48:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a4c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f6 fb80 	bl	800015c <__adddf3>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a64:	4630      	mov	r0, r6
 8009a66:	4639      	mov	r1, r7
 8009a68:	f7f6 fb76 	bl	8000158 <__aeabi_dsub>
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	464b      	mov	r3, r9
 8009a70:	f7f6 fb74 	bl	800015c <__adddf3>
 8009a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a78:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009a7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a80:	e9ca 2300 	strd	r2, r3, [sl]
 8009a84:	e74c      	b.n	8009920 <__kernel_rem_pio2+0x4e4>
 8009a86:	4638      	mov	r0, r7
 8009a88:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	f7f6 fb65 	bl	800015c <__adddf3>
 8009a92:	3c01      	subs	r4, #1
 8009a94:	4607      	mov	r7, r0
 8009a96:	460e      	mov	r6, r1
 8009a98:	e748      	b.n	800992c <__kernel_rem_pio2+0x4f0>
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009aa0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009aa4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009aa8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009aac:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009ab0:	601d      	str	r5, [r3, #0]
 8009ab2:	615e      	str	r6, [r3, #20]
 8009ab4:	e721      	b.n	80098fa <__kernel_rem_pio2+0x4be>
 8009ab6:	bf00      	nop
 8009ab8:	41700000 	.word	0x41700000
 8009abc:	3e700000 	.word	0x3e700000

08009ac0 <__kernel_sin>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	b086      	sub	sp, #24
 8009ac6:	e9cd 2300 	strd	r2, r3, [sp]
 8009aca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ace:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009ad8:	da03      	bge.n	8009ae2 <__kernel_sin+0x22>
 8009ada:	f7f6 ffa5 	bl	8000a28 <__aeabi_d2iz>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d050      	beq.n	8009b84 <__kernel_sin+0xc4>
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	4621      	mov	r1, r4
 8009aea:	f7f6 fced 	bl	80004c8 <__aeabi_dmul>
 8009aee:	4606      	mov	r6, r0
 8009af0:	460f      	mov	r7, r1
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4650      	mov	r0, sl
 8009af8:	4621      	mov	r1, r4
 8009afa:	f7f6 fce5 	bl	80004c8 <__aeabi_dmul>
 8009afe:	a33e      	add	r3, pc, #248	; (adr r3, 8009bf8 <__kernel_sin+0x138>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fcdc 	bl	80004c8 <__aeabi_dmul>
 8009b10:	a33b      	add	r3, pc, #236	; (adr r3, 8009c00 <__kernel_sin+0x140>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fb1f 	bl	8000158 <__aeabi_dsub>
 8009b1a:	4632      	mov	r2, r6
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	f7f6 fcd3 	bl	80004c8 <__aeabi_dmul>
 8009b22:	a339      	add	r3, pc, #228	; (adr r3, 8009c08 <__kernel_sin+0x148>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f7f6 fb18 	bl	800015c <__adddf3>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	f7f6 fcca 	bl	80004c8 <__aeabi_dmul>
 8009b34:	a336      	add	r3, pc, #216	; (adr r3, 8009c10 <__kernel_sin+0x150>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fb0d 	bl	8000158 <__aeabi_dsub>
 8009b3e:	4632      	mov	r2, r6
 8009b40:	463b      	mov	r3, r7
 8009b42:	f7f6 fcc1 	bl	80004c8 <__aeabi_dmul>
 8009b46:	a334      	add	r3, pc, #208	; (adr r3, 8009c18 <__kernel_sin+0x158>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fb06 	bl	800015c <__adddf3>
 8009b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b54:	b9dd      	cbnz	r5, 8009b8e <__kernel_sin+0xce>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fcb3 	bl	80004c8 <__aeabi_dmul>
 8009b62:	a32f      	add	r3, pc, #188	; (adr r3, 8009c20 <__kernel_sin+0x160>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 faf6 	bl	8000158 <__aeabi_dsub>
 8009b6c:	4642      	mov	r2, r8
 8009b6e:	464b      	mov	r3, r9
 8009b70:	f7f6 fcaa 	bl	80004c8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f7f6 faee 	bl	800015c <__adddf3>
 8009b80:	4682      	mov	sl, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	4650      	mov	r0, sl
 8009b86:	4621      	mov	r1, r4
 8009b88:	b006      	add	sp, #24
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	2200      	movs	r2, #0
 8009b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b94:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <__kernel_sin+0x168>)
 8009b96:	f7f6 fc97 	bl	80004c8 <__aeabi_dmul>
 8009b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fc8f 	bl	80004c8 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb2:	f7f6 fad1 	bl	8000158 <__aeabi_dsub>
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	463b      	mov	r3, r7
 8009bba:	f7f6 fc85 	bl	80004c8 <__aeabi_dmul>
 8009bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc2:	f7f6 fac9 	bl	8000158 <__aeabi_dsub>
 8009bc6:	a316      	add	r3, pc, #88	; (adr r3, 8009c20 <__kernel_sin+0x160>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	4606      	mov	r6, r0
 8009bce:	460f      	mov	r7, r1
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7f6 fc78 	bl	80004c8 <__aeabi_dmul>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 fabc 	bl	800015c <__adddf3>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4650      	mov	r0, sl
 8009bea:	4621      	mov	r1, r4
 8009bec:	f7f6 fab4 	bl	8000158 <__aeabi_dsub>
 8009bf0:	e7c6      	b.n	8009b80 <__kernel_sin+0xc0>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	5acfd57c 	.word	0x5acfd57c
 8009bfc:	3de5d93a 	.word	0x3de5d93a
 8009c00:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c04:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c08:	57b1fe7d 	.word	0x57b1fe7d
 8009c0c:	3ec71de3 	.word	0x3ec71de3
 8009c10:	19c161d5 	.word	0x19c161d5
 8009c14:	3f2a01a0 	.word	0x3f2a01a0
 8009c18:	1110f8a6 	.word	0x1110f8a6
 8009c1c:	3f811111 	.word	0x3f811111
 8009c20:	55555549 	.word	0x55555549
 8009c24:	3fc55555 	.word	0x3fc55555
 8009c28:	3fe00000 	.word	0x3fe00000

08009c2c <with_errno>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	4616      	mov	r6, r2
 8009c34:	f7fd f9cc 	bl	8006fd0 <__errno>
 8009c38:	4629      	mov	r1, r5
 8009c3a:	6006      	str	r6, [r0, #0]
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}

08009c40 <xflow>:
 8009c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c42:	4615      	mov	r5, r2
 8009c44:	461c      	mov	r4, r3
 8009c46:	b180      	cbz	r0, 8009c6a <xflow+0x2a>
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8009c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c56:	4628      	mov	r0, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f7f6 fc35 	bl	80004c8 <__aeabi_dmul>
 8009c5e:	2222      	movs	r2, #34	; 0x22
 8009c60:	b003      	add	sp, #12
 8009c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c66:	f7ff bfe1 	b.w	8009c2c <with_errno>
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	e7ee      	b.n	8009c4e <xflow+0xe>

08009c70 <__math_uflow>:
 8009c70:	2200      	movs	r2, #0
 8009c72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c76:	f7ff bfe3 	b.w	8009c40 <xflow>

08009c7a <__math_oflow>:
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009c80:	f7ff bfde 	b.w	8009c40 <xflow>

08009c84 <fabs>:
 8009c84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009c88:	4770      	bx	lr

08009c8a <finite>:
 8009c8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009c8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009c92:	0fc0      	lsrs	r0, r0, #31
 8009c94:	4770      	bx	lr
	...

08009c98 <floor>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009ca0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009ca4:	2e13      	cmp	r6, #19
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4607      	mov	r7, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	4605      	mov	r5, r0
 8009cb0:	dc33      	bgt.n	8009d1a <floor+0x82>
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	da14      	bge.n	8009ce0 <floor+0x48>
 8009cb6:	a334      	add	r3, pc, #208	; (adr r3, 8009d88 <floor+0xf0>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fa4e 	bl	800015c <__adddf3>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f7f6 fe90 	bl	80009e8 <__aeabi_dcmpgt>
 8009cc8:	b138      	cbz	r0, 8009cda <floor+0x42>
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	da58      	bge.n	8009d80 <floor+0xe8>
 8009cce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009cd2:	431d      	orrs	r5, r3
 8009cd4:	d001      	beq.n	8009cda <floor+0x42>
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	4c2d      	ldr	r4, [pc, #180]	; (8009d90 <floor+0xf8>)
 8009cda:	4623      	mov	r3, r4
 8009cdc:	462f      	mov	r7, r5
 8009cde:	e025      	b.n	8009d2c <floor+0x94>
 8009ce0:	4a2c      	ldr	r2, [pc, #176]	; (8009d94 <floor+0xfc>)
 8009ce2:	fa42 f806 	asr.w	r8, r2, r6
 8009ce6:	ea01 0208 	and.w	r2, r1, r8
 8009cea:	4302      	orrs	r2, r0
 8009cec:	d01e      	beq.n	8009d2c <floor+0x94>
 8009cee:	a326      	add	r3, pc, #152	; (adr r3, 8009d88 <floor+0xf0>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fa32 	bl	800015c <__adddf3>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f7f6 fe74 	bl	80009e8 <__aeabi_dcmpgt>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0ea      	beq.n	8009cda <floor+0x42>
 8009d04:	2c00      	cmp	r4, #0
 8009d06:	bfbe      	ittt	lt
 8009d08:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009d0c:	fa43 f606 	asrlt.w	r6, r3, r6
 8009d10:	19a4      	addlt	r4, r4, r6
 8009d12:	2500      	movs	r5, #0
 8009d14:	ea24 0408 	bic.w	r4, r4, r8
 8009d18:	e7df      	b.n	8009cda <floor+0x42>
 8009d1a:	2e33      	cmp	r6, #51	; 0x33
 8009d1c:	dd0a      	ble.n	8009d34 <floor+0x9c>
 8009d1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009d22:	d103      	bne.n	8009d2c <floor+0x94>
 8009d24:	f7f6 fa1a 	bl	800015c <__adddf3>
 8009d28:	4607      	mov	r7, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	4619      	mov	r1, r3
 8009d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295
 8009d38:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009d3c:	fa22 f808 	lsr.w	r8, r2, r8
 8009d40:	ea18 0f00 	tst.w	r8, r0
 8009d44:	d0f2      	beq.n	8009d2c <floor+0x94>
 8009d46:	a310      	add	r3, pc, #64	; (adr r3, 8009d88 <floor+0xf0>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fa06 	bl	800015c <__adddf3>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	f7f6 fe48 	bl	80009e8 <__aeabi_dcmpgt>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0be      	beq.n	8009cda <floor+0x42>
 8009d5c:	2c00      	cmp	r4, #0
 8009d5e:	da02      	bge.n	8009d66 <floor+0xce>
 8009d60:	2e14      	cmp	r6, #20
 8009d62:	d103      	bne.n	8009d6c <floor+0xd4>
 8009d64:	3401      	adds	r4, #1
 8009d66:	ea25 0508 	bic.w	r5, r5, r8
 8009d6a:	e7b6      	b.n	8009cda <floor+0x42>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009d72:	fa03 f606 	lsl.w	r6, r3, r6
 8009d76:	4435      	add	r5, r6
 8009d78:	42bd      	cmp	r5, r7
 8009d7a:	bf38      	it	cc
 8009d7c:	18e4      	addcc	r4, r4, r3
 8009d7e:	e7f2      	b.n	8009d66 <floor+0xce>
 8009d80:	2500      	movs	r5, #0
 8009d82:	462c      	mov	r4, r5
 8009d84:	e7a9      	b.n	8009cda <floor+0x42>
 8009d86:	bf00      	nop
 8009d88:	8800759c 	.word	0x8800759c
 8009d8c:	7e37e43c 	.word	0x7e37e43c
 8009d90:	bff00000 	.word	0xbff00000
 8009d94:	000fffff 	.word	0x000fffff

08009d98 <scalbn>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	4617      	mov	r7, r2
 8009da4:	460b      	mov	r3, r1
 8009da6:	b996      	cbnz	r6, 8009dce <scalbn+0x36>
 8009da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dac:	4303      	orrs	r3, r0
 8009dae:	d039      	beq.n	8009e24 <scalbn+0x8c>
 8009db0:	4b33      	ldr	r3, [pc, #204]	; (8009e80 <scalbn+0xe8>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	f7f6 fb88 	bl	80004c8 <__aeabi_dmul>
 8009db8:	4b32      	ldr	r3, [pc, #200]	; (8009e84 <scalbn+0xec>)
 8009dba:	4604      	mov	r4, r0
 8009dbc:	429f      	cmp	r7, r3
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	da0f      	bge.n	8009de2 <scalbn+0x4a>
 8009dc2:	a32b      	add	r3, pc, #172	; (adr r3, 8009e70 <scalbn+0xd8>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fb7e 	bl	80004c8 <__aeabi_dmul>
 8009dcc:	e006      	b.n	8009ddc <scalbn+0x44>
 8009dce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009dd2:	4296      	cmp	r6, r2
 8009dd4:	d10a      	bne.n	8009dec <scalbn+0x54>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f7f6 f9c0 	bl	800015c <__adddf3>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	e020      	b.n	8009e24 <scalbn+0x8c>
 8009de2:	460b      	mov	r3, r1
 8009de4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009de8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009dec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009df0:	19b9      	adds	r1, r7, r6
 8009df2:	4291      	cmp	r1, r2
 8009df4:	dd0e      	ble.n	8009e14 <scalbn+0x7c>
 8009df6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009dfa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009dfe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009e02:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009e06:	4820      	ldr	r0, [pc, #128]	; (8009e88 <scalbn+0xf0>)
 8009e08:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009e0c:	a31a      	add	r3, pc, #104	; (adr r3, 8009e78 <scalbn+0xe0>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	e7d9      	b.n	8009dc8 <scalbn+0x30>
 8009e14:	2900      	cmp	r1, #0
 8009e16:	dd08      	ble.n	8009e2a <scalbn+0x92>
 8009e18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e20:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009e2e:	da12      	bge.n	8009e56 <scalbn+0xbe>
 8009e30:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e34:	429f      	cmp	r7, r3
 8009e36:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009e3a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009e3e:	dcdc      	bgt.n	8009dfa <scalbn+0x62>
 8009e40:	a30b      	add	r3, pc, #44	; (adr r3, 8009e70 <scalbn+0xd8>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009e4a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009e4e:	480f      	ldr	r0, [pc, #60]	; (8009e8c <scalbn+0xf4>)
 8009e50:	f041 011f 	orr.w	r1, r1, #31
 8009e54:	e7b8      	b.n	8009dc8 <scalbn+0x30>
 8009e56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e5a:	3136      	adds	r1, #54	; 0x36
 8009e5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <scalbn+0xf8>)
 8009e6c:	e7ac      	b.n	8009dc8 <scalbn+0x30>
 8009e6e:	bf00      	nop
 8009e70:	c2f8f359 	.word	0xc2f8f359
 8009e74:	01a56e1f 	.word	0x01a56e1f
 8009e78:	8800759c 	.word	0x8800759c
 8009e7c:	7e37e43c 	.word	0x7e37e43c
 8009e80:	43500000 	.word	0x43500000
 8009e84:	ffff3cb0 	.word	0xffff3cb0
 8009e88:	8800759c 	.word	0x8800759c
 8009e8c:	c2f8f359 	.word	0xc2f8f359
 8009e90:	3c900000 	.word	0x3c900000

08009e94 <_init>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr

08009ea0 <_fini>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr
