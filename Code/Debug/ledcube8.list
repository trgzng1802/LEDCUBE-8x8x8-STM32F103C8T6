
ledcube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000935c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f0  080097f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080097f0  080097f0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097f0  080097f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080097f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000078  08009870  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08009870  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fce  00000000  00000000  0002c887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000305a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b237  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014615  00000000  00000000  0004c367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b48c  00000000  00000000  0006097c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebe08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000ebe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08009454 	.word	0x08009454

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08009454 	.word	0x08009454

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fc0c 	bl	8001834 <HAL_Init>

  /* USER CODE BEGIN Init */
  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 800101c:	2202      	movs	r2, #2
 800101e:	490c      	ldr	r1, [pc, #48]	; (8001050 <main+0x3c>)
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <main+0x40>)
 8001022:	f002 fe56 	bl	8003cd2 <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f819 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f93b 	bl	80012a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800102e:	f000 f8af 	bl	8001190 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001032:	f000 f8e3 	bl	80011fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001036:	f000 f90b 	bl	8001250 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800103a:	f000 f86b 	bl	8001114 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <main+0x40>)
 8001040:	f002 fdbf 	bl	8003bc2 <Btn_Handle>
	  Led_cube_Handle(currentEffect);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <main+0x44>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f003 ff0f 	bl	8004e6c <Led_cube_Handle>
	  Btn_Handle(&button1);
 800104e:	e7f6      	b.n	800103e <main+0x2a>
 8001050:	40010800 	.word	0x40010800
 8001054:	200001a4 	.word	0x200001a4
 8001058:	20000010 	.word	0x20000010

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 faba 	bl	80065e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109a:	2301      	movs	r3, #1
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 f9a4 	bl	8002400 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010be:	f000 f95d 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fc10 	bl	8002904 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010ea:	f000 f947 	bl	800137c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ee:	2302      	movs	r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fd9a 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001106:	f000 f939 	bl	800137c <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_ADC1_Init+0x74>)
 8001126:	4a19      	ldr	r2, [pc, #100]	; (800118c <MX_ADC1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_ADC1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_ADC1_Init+0x74>)
 800113e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001142:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_ADC1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC1_Init+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0x74>)
 8001152:	f000 fbd1 	bl	80018f8 <HAL_ADC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800115c:	f000 f90e 	bl	800137c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001164:	2301      	movs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_ADC1_Init+0x74>)
 8001172:	f000 fc99 	bl	8001aa8 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800117c:	f000 f8fe 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000094 	.word	0x20000094
 800118c:	40012400 	.word	0x40012400

08001190 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_SPI1_Init+0x64>)
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <MX_SPI1_Init+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_SPI1_Init+0x64>)
 800119c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011c4:	2220      	movs	r2, #32
 80011c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011dc:	220a      	movs	r2, #10
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_SPI1_Init+0x64>)
 80011e2:	f001 fddd 	bl	8002da0 <HAL_SPI_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011ec:	f000 f8c6 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000c4 	.word	0x200000c4
 80011f8:	40013000 	.word	0x40013000

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART1_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001222:	2204      	movs	r2, #4
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001234:	f002 f81a 	bl	800326c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f89d 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000011c 	.word	0x2000011c
 800124c:	40013800 	.word	0x40013800

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART2_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001288:	f001 fff0 	bl	800326c <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f873 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000160 	.word	0x20000160
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_GPIO_Init+0xcc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <MX_GPIO_Init+0xd0>)
 8001308:	f001 f861 	bl	80023ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <MX_GPIO_Init+0xd4>)
 8001312:	f001 f85c 	bl	80023ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_GPIO_Init+0xd0>)
 8001330:	f000 feb2 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_GPIO_Init+0xd4>)
 8001348:	f000 fea6 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_GPIO_Init+0xd4>)
 8001364:	f000 fe98 	bl	8002098 <HAL_GPIO_Init>

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	40011000 	.word	0x40011000
 8001378:	40010800 	.word	0x40010800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_MspInit+0x5c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_MspInit+0x5c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_MspInit+0x5c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x5c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x60>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_MspInit+0x60>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_ADC_MspInit+0x6c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d121      	bne.n	8001450 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_MspInit+0x70>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_ADC_MspInit+0x70>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_ADC_MspInit+0x70>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_ADC_MspInit+0x70>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <HAL_ADC_MspInit+0x70>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_ADC_MspInit+0x70>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143c:	2301      	movs	r3, #1
 800143e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001440:	2303      	movs	r3, #3
 8001442:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_ADC_MspInit+0x74>)
 800144c:	f000 fe24 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40012400 	.word	0x40012400
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_SPI_MspInit+0x70>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d123      	bne.n	80014cc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 800148a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_SPI_MspInit+0x74>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_SPI_MspInit+0x78>)
 80014c8:	f000 fde6 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013000 	.word	0x40013000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <HAL_UART_MspInit+0x108>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d13a      	bne.n	8001576 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_UART_MspInit+0x10c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a39      	ldr	r2, [pc, #228]	; (80015ec <HAL_UART_MspInit+0x10c>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_UART_MspInit+0x10c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4619      	mov	r1, r3
 8001544:	482a      	ldr	r0, [pc, #168]	; (80015f0 <HAL_UART_MspInit+0x110>)
 8001546:	f000 fda7 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4619      	mov	r1, r3
 800155e:	4824      	ldr	r0, [pc, #144]	; (80015f0 <HAL_UART_MspInit+0x110>)
 8001560:	f000 fd9a 	bl	8002098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2025      	movs	r0, #37	; 0x25
 800156a:	f000 fcae 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800156e:	2025      	movs	r0, #37	; 0x25
 8001570:	f000 fcc7 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001574:	e034      	b.n	80015e0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_UART_MspInit+0x114>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d12f      	bne.n	80015e0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x10c>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x10c>)
 8001586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_UART_MspInit+0x10c>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_UART_MspInit+0x10c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <HAL_UART_MspInit+0x110>)
 80015c4:	f000 fd68 	bl	8002098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015c8:	2308      	movs	r3, #8
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspInit+0x110>)
 80015dc:	f000 fd5c 	bl	8002098 <HAL_GPIO_Init>
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40004400 	.word	0x40004400

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f93f 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART1_IRQHandler+0x10>)
 800164e:	f001 fe5b 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000011c 	.word	0x2000011c

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_kill>:

int _kill(int pid, int sig)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001674:	f004 ff8c 	bl	8006590 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	2216      	movs	r2, #22
 800167c:	601a      	str	r2, [r3, #0]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_exit>:

void _exit (int status)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001692:	f04f 31ff 	mov.w	r1, #4294967295
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffe7 	bl	800166a <_kill>
	while (1) {}		/* Make sure we hang here */
 800169c:	e7fe      	b.n	800169c <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
	}

return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
	}
	return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
	return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_isatty>:

int _isatty(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f004 fef6 	bl	8006590 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200001bc 	.word	0x200001bc
 80017d8:	20000288 	.word	0x20000288

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180e:	f7ff ffe5 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f004 fec3 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fbfd 	bl	8001014 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001824:	080097f8 	.word	0x080097f8
  ldr r2, =_sbss
 8001828:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800182c:	20000284 	.word	0x20000284

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 fb35 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fd9a 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fb4d 	bl	8001f1e <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 fb15 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000008 	.word	0x20000008
 80018e0:	200001c0 	.word	0x200001c0

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	200001c0 	.word	0x200001c0

080018f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0be      	b.n	8001a98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fd58 	bl	80013ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9ab 	bl	8001c98 <ADC_ConversionStop_Disable>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8099 	bne.w	8001a86 <HAL_ADC_Init+0x18e>
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8095 	bne.w	8001a86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001964:	f023 0302 	bic.w	r3, r3, #2
 8001968:	f043 0202 	orr.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001978:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7b1b      	ldrb	r3, [r3, #12]
 800197e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001980:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4313      	orrs	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001990:	d003      	beq.n	800199a <HAL_ADC_Init+0xa2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d102      	bne.n	80019a0 <HAL_ADC_Init+0xa8>
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	e000      	b.n	80019a2 <HAL_ADC_Init+0xaa>
 80019a0:	2300      	movs	r3, #0
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7d1b      	ldrb	r3, [r3, #20]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d119      	bne.n	80019e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7b1b      	ldrb	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	3b01      	subs	r3, #1
 80019be:	035a      	lsls	r2, r3, #13
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00b      	b.n	80019e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_ADC_Init+0x1a8>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a14:	d003      	beq.n	8001a1e <HAL_ADC_Init+0x126>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d104      	bne.n	8001a28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	051b      	lsls	r3, r3, #20
 8001a26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_ADC_Init+0x1ac>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a62:	e018      	b.n	8001a96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f023 0312 	bic.w	r3, r3, #18
 8001a6c:	f043 0210 	orr.w	r2, r3, #16
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a84:	e007      	b.n	8001a96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	ffe1f7fd 	.word	0xffe1f7fd
 8001aa4:	ff1f0efe 	.word	0xff1f0efe

08001aa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x20>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e0dc      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x1da>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d81c      	bhi.n	8001b12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	221f      	movs	r2, #31
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4019      	ands	r1, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b05      	subs	r3, #5
 8001b04:	fa00 f203 	lsl.w	r2, r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b10:	e03c      	b.n	8001b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d81c      	bhi.n	8001b54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	; 0x23
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4019      	ands	r1, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	3b23      	subs	r3, #35	; 0x23
 8001b46:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
 8001b52:	e01b      	b.n	8001b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	3b41      	subs	r3, #65	; 0x41
 8001b66:	221f      	movs	r2, #31
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b41      	subs	r3, #65	; 0x41
 8001b80:	fa00 f203 	lsl.w	r2, r0, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d91c      	bls.n	8001bce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	e019      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	2207      	movs	r2, #7
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6898      	ldr	r0, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d003      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c0e:	2b11      	cmp	r3, #17
 8001c10:	d132      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_ADC_ConfigChannel+0x1e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d125      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d126      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d11a      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	0c9a      	lsrs	r2, r3, #18
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x1b2>
 8001c66:	e007      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40012400 	.word	0x40012400
 8001c90:	20000000 	.word	0x20000000
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12e      	bne.n	8001d10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cc2:	f7ff fe0f 	bl	80018e4 <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cc8:	e01b      	b.n	8001d02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cca:	f7ff fe0b 	bl	80018e4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d914      	bls.n	8001d02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10d      	bne.n	8001d02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f043 0210 	orr.w	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e007      	b.n	8001d12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d0dc      	beq.n	8001cca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <__NVIC_EnableIRQ+0x34>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff90 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff2d 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff42 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff90 	bl	8001e0c <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5f 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff35 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e020      	b.n	8001fa0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d005      	beq.n	8001fce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e051      	b.n	8002072 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 020e 	bic.w	r2, r2, #14
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_DMA_Abort_IT+0xd0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d029      	beq.n	800204c <HAL_DMA_Abort_IT+0xa0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <HAL_DMA_Abort_IT+0xd4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d022      	beq.n	8002048 <HAL_DMA_Abort_IT+0x9c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_DMA_Abort_IT+0xd8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d01a      	beq.n	8002042 <HAL_DMA_Abort_IT+0x96>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_DMA_Abort_IT+0xdc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d012      	beq.n	800203c <HAL_DMA_Abort_IT+0x90>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_DMA_Abort_IT+0xe0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00a      	beq.n	8002036 <HAL_DMA_Abort_IT+0x8a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_DMA_Abort_IT+0xe4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d102      	bne.n	8002030 <HAL_DMA_Abort_IT+0x84>
 800202a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800202e:	e00e      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 8002030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002034:	e00b      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 8002036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203a:	e008      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	e005      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 8002042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002046:	e002      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 8002048:	2310      	movs	r3, #16
 800204a:	e000      	b.n	800204e <HAL_DMA_Abort_IT+0xa2>
 800204c:	2301      	movs	r3, #1
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_DMA_Abort_IT+0xe8>)
 8002050:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
    } 
  }
  return status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020008 	.word	0x40020008
 8002080:	4002001c 	.word	0x4002001c
 8002084:	40020030 	.word	0x40020030
 8002088:	40020044 	.word	0x40020044
 800208c:	40020058 	.word	0x40020058
 8002090:	4002006c 	.word	0x4002006c
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e169      	b.n	8002380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ac:	2201      	movs	r2, #1
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8158 	bne.w	800237a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a9a      	ldr	r2, [pc, #616]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d05e      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020d4:	4a98      	ldr	r2, [pc, #608]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d875      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020da:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d058      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020e0:	4a96      	ldr	r2, [pc, #600]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d86f      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020e6:	4a96      	ldr	r2, [pc, #600]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d052      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020ec:	4a94      	ldr	r2, [pc, #592]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d869      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020f2:	4a94      	ldr	r2, [pc, #592]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04c      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020f8:	4a92      	ldr	r2, [pc, #584]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d863      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020fe:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d046      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 8002104:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d85d      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 800210a:	2b12      	cmp	r3, #18
 800210c:	d82a      	bhi.n	8002164 <HAL_GPIO_Init+0xcc>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d859      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_GPIO_Init+0x80>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002193 	.word	0x08002193
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800217f 	.word	0x0800217f
 8002124:	080021c1 	.word	0x080021c1
 8002128:	080021c7 	.word	0x080021c7
 800212c:	080021c7 	.word	0x080021c7
 8002130:	080021c7 	.word	0x080021c7
 8002134:	080021c7 	.word	0x080021c7
 8002138:	080021c7 	.word	0x080021c7
 800213c:	080021c7 	.word	0x080021c7
 8002140:	080021c7 	.word	0x080021c7
 8002144:	080021c7 	.word	0x080021c7
 8002148:	080021c7 	.word	0x080021c7
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021c7 	.word	0x080021c7
 8002154:	080021c7 	.word	0x080021c7
 8002158:	080021c7 	.word	0x080021c7
 800215c:	08002175 	.word	0x08002175
 8002160:	08002189 	.word	0x08002189
 8002164:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_GPIO_Init+0x2b4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216a:	e02c      	b.n	80021c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e029      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	3304      	adds	r3, #4
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e024      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	3308      	adds	r3, #8
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e01f      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	330c      	adds	r3, #12
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e01a      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219a:	2304      	movs	r3, #4
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e013      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	611a      	str	r2, [r3, #16]
          break;
 80021b2:	e009      	b.n	80021c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	615a      	str	r2, [r3, #20]
          break;
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          break;
 80021c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d801      	bhi.n	80021d2 <HAL_GPIO_Init+0x13a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_Init+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d802      	bhi.n	80021e4 <HAL_GPIO_Init+0x14c>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x152>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3b08      	subs	r3, #8
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	210f      	movs	r1, #15
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80b1 	beq.w	800237a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_GPIO_Init+0x2c0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x1ec>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_GPIO_Init+0x2c4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x1e8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_GPIO_Init+0x2c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x2cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x1e0>
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002278:	2304      	movs	r3, #4
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002284:	2300      	movs	r3, #0
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002296:	492f      	ldr	r1, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4922      	ldr	r1, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4918      	ldr	r1, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4914      	ldr	r1, [pc, #80]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d021      	beq.n	800236c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
 8002334:	e021      	b.n	800237a <HAL_GPIO_Init+0x2e2>
 8002336:	bf00      	nop
 8002338:	10320000 	.word	0x10320000
 800233c:	10310000 	.word	0x10310000
 8002340:	10220000 	.word	0x10220000
 8002344:	10210000 	.word	0x10210000
 8002348:	10120000 	.word	0x10120000
 800234c:	10110000 	.word	0x10110000
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000
 8002358:	40010800 	.word	0x40010800
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_GPIO_Init+0x304>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4909      	ldr	r1, [pc, #36]	; (800239c <HAL_GPIO_Init+0x304>)
 8002376:	4013      	ands	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f ae8e 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	372c      	adds	r7, #44	; 0x2c
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e001      	b.n	80023c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
 80023da:	4613      	mov	r3, r2
 80023dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023de:	787b      	ldrb	r3, [r7, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	041a      	lsls	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e272      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242c:	4b8f      	ldr	r3, [pc, #572]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d10b      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06c      	beq.n	800252c <HAL_RCC_OscConfig+0x12c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d168      	bne.n	800252c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e24c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x76>
 8002468:	4b80      	ldr	r3, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7f      	ldr	r2, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e02e      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7a      	ldr	r2, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0xbc>
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa02 	bl	80018e4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff f9fe 	bl	80018e4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e200      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xe4>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f9ee 	bl	80018e4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff f9ea 	bl	80018e4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1ec      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x10c>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c0      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff f9a3 	bl	80018e4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff f99f 	bl	80018e4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f982 	bl	80018e4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7ff f97e 	bl	80018e4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e180      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7ff f962 	bl	80018e4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7ff f95e 	bl	80018e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e160      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 fad8 	bl	8002bf8 <RCC_Delay>
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7ff f948 	bl	80018e4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff f944 	bl	80018e4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d908      	bls.n	8002678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e146      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000
 8002674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a6 	beq.w	80027de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f905 	bl	80018e4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7ff f901 	bl	80018e4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e103      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x334>
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x356>
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff f8b5 	bl	80018e4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff f8b1 	bl	80018e4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x37e>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7ff f89f 	bl	80018e4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff f89b 	bl	80018e4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09b      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d061      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d146      	bne.n	800288a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff f86f 	bl	80018e4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff f86b 	bl	80018e4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e06d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4921      	ldr	r1, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a19      	ldr	r1, [r3, #32]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	430b      	orrs	r3, r1
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff f83f 	bl	80018e4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff f83b 	bl	80018e4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
 8002888:	e035      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f828 	bl	80018e4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7ff f824 	bl	80018e4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e026      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
 80028b6:	e01e      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e019      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x500>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d0      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4965      	ldr	r1, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d040      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e073      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06b      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4936      	ldr	r1, [pc, #216]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe ff76 	bl	80018e4 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe ff72 	bl	80018e4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e053      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d210      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fed4 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08009488 	.word	0x08009488
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b490      	push	{r4, r7}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ae0:	1d3c      	adds	r4, r7, #4
 8002ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae8:	f240 2301 	movw	r3, #513	; 0x201
 8002aec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x46>
 8002b16:	e02b      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1a:	623b      	str	r3, [r7, #32]
      break;
 8002b1c:	e02b      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3328      	adds	r3, #40	; 0x28
 8002b28:	443b      	add	r3, r7
 8002b2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0c5b      	lsrs	r3, r3, #17
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	3328      	adds	r3, #40	; 0x28
 8002b46:	443b      	add	r3, r7
 8002b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b52:	fb03 f202 	mul.w	r2, r3, r2
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e004      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	623b      	str	r3, [r7, #32]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc90      	pop	{r4, r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	08009470 	.word	0x08009470
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	003d0900 	.word	0x003d0900

08002b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bac:	f7ff fff2 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08009498 	.word	0x08009498

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0adb      	lsrs	r3, r3, #11
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08009498 	.word	0x08009498

08002bf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <RCC_Delay+0x34>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <RCC_Delay+0x38>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c14:	bf00      	nop
  }
  while (Delay --);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	60fa      	str	r2, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <RCC_Delay+0x1c>
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	10624dd3 	.word	0x10624dd3

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d07d      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10d      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
 8002c6c:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c88:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fe26 	bl	80018e4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	e008      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fe22 	bl	80018e4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e06d      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02e      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d027      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d014      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fdf1 	bl	80018e4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fded 	bl	80018e4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e036      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d28:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4917      	ldr	r1, [pc, #92]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	490b      	ldr	r1, [pc, #44]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	42420440 	.word	0x42420440

08002da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e076      	b.n	8002ea0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc2:	d009      	beq.n	8002dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
 8002dca:	e005      	b.n	8002dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fb36 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	ea42 0103 	orr.w	r1, r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	0c1a      	lsrs	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f002 0204 	and.w	r2, r2, #4
 8002e7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_SPI_Transmit+0x22>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e126      	b.n	8003118 <HAL_SPI_Transmit+0x270>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed2:	f7fe fd07 	bl	80018e4 <HAL_GetTick>
 8002ed6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eec:	e10b      	b.n	8003106 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Transmit+0x52>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002efe:	e102      	b.n	8003106 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2203      	movs	r2, #3
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d10f      	bne.n	8002f68 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d007      	beq.n	8002f86 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8e:	d14b      	bne.n	8003028 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_Transmit+0xf6>
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d13e      	bne.n	800301c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fc2:	e02b      	b.n	800301c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d112      	bne.n	8002ff8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ff6:	e011      	b.n	800301c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff8:	f7fe fc74 	bl	80018e4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d803      	bhi.n	8003010 <HAL_SPI_Transmit+0x168>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d102      	bne.n	8003016 <HAL_SPI_Transmit+0x16e>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	77fb      	strb	r3, [r7, #31]
          goto error;
 800301a:	e074      	b.n	8003106 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ce      	bne.n	8002fc4 <HAL_SPI_Transmit+0x11c>
 8003026:	e04c      	b.n	80030c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_Transmit+0x18e>
 8003030:	8afb      	ldrh	r3, [r7, #22]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d140      	bne.n	80030b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800305c:	e02c      	b.n	80030b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d113      	bne.n	8003094 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	86da      	strh	r2, [r3, #54]	; 0x36
 8003092:	e011      	b.n	80030b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003094:	f7fe fc26 	bl	80018e4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d803      	bhi.n	80030ac <HAL_SPI_Transmit+0x204>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d102      	bne.n	80030b2 <HAL_SPI_Transmit+0x20a>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030b6:	e026      	b.n	8003106 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1cd      	bne.n	800305e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8b2 	bl	8003230 <SPI_EndRxTxTransaction>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e000      	b.n	8003106 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003104:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003116:	7ffb      	ldrb	r3, [r7, #31]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003130:	f7fe fbd8 	bl	80018e4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003140:	f7fe fbd0 	bl	80018e4 <HAL_GetTick>
 8003144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	015b      	lsls	r3, r3, #5
 800314c:	0d1b      	lsrs	r3, r3, #20
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003156:	e054      	b.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d050      	beq.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003160:	f7fe fbc0 	bl	80018e4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	429a      	cmp	r2, r3
 800316e:	d902      	bls.n	8003176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13d      	bne.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318e:	d111      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	d004      	beq.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d107      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d10f      	bne.n	80031de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e017      	b.n	8003222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3b01      	subs	r3, #1
 8003200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d19b      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2200      	movs	r2, #0
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff ff6a 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e000      	b.n	8003264 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e03f      	b.n	80032fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe f924 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb49 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_UART_IRQHandler+0x52>
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa4f 	bl	80037f6 <UART_Receive_IT>
      return;
 8003358:	e17b      	b.n	8003652 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80b1 	beq.w	80034c4 <HAL_UART_IRQHandler+0x1bc>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_UART_IRQHandler+0x70>
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_UART_IRQHandler+0x90>
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_UART_IRQHandler+0xb0>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0202 	orr.w	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_UART_IRQHandler+0xd0>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00f      	beq.n	8003402 <HAL_UART_IRQHandler+0xfa>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <HAL_UART_IRQHandler+0xee>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 811e 	beq.w	8003648 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_UART_IRQHandler+0x11e>
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9e8 	bl	80037f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_UART_IRQHandler+0x146>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d031      	beq.n	80034b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f92a 	bl	80036a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d023      	beq.n	80034aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	2b00      	cmp	r3, #0
 8003478:	d013      	beq.n	80034a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_UART_IRQHandler+0x350>)
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fd90 	bl	8001fac <HAL_DMA_Abort_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800349c:	4610      	mov	r0, r2
 800349e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	e00e      	b.n	80034c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8ec 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00a      	b.n	80034c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8e8 	bl	8003680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e006      	b.n	80034c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8e4 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034be:	e0c3      	b.n	8003648 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	bf00      	nop
    return;
 80034c2:	e0c1      	b.n	8003648 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f040 80a1 	bne.w	8003610 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 809b 	beq.w	8003610 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8095 	beq.w	8003610 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04e      	beq.n	80035a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003514:	8a3b      	ldrh	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8098 	beq.w	800364c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003520:	8a3a      	ldrh	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	f080 8092 	bcs.w	800364c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8a3a      	ldrh	r2, [r7, #16]
 800352c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b20      	cmp	r3, #32
 8003536:	d02b      	beq.n	8003590 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003546:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003566:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0210 	bic.w	r2, r2, #16
 8003584:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fcd3 	bl	8001f36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003598:	b29b      	uxth	r3, r3
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	b29b      	uxth	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f876 	bl	8003692 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035a6:	e051      	b.n	800364c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d047      	beq.n	8003650 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80035c0:	8a7b      	ldrh	r3, [r7, #18]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003604:	8a7b      	ldrh	r3, [r7, #18]
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f842 	bl	8003692 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800360e:	e01f      	b.n	8003650 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_UART_IRQHandler+0x324>
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f87f 	bl	8003728 <UART_Transmit_IT>
    return;
 800362a:	e012      	b.n	8003652 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_UART_IRQHandler+0x34a>
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8c0 	bl	80037c6 <UART_EndTransmit_IT>
    return;
 8003646:	e004      	b.n	8003652 <HAL_UART_IRQHandler+0x34a>
    return;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_UART_IRQHandler+0x34a>
      return;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_UART_IRQHandler+0x34a>
      return;
 8003650:	bf00      	nop
  }
}
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08003701 	.word	0x08003701

0800365c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ffb0 	bl	8003680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b21      	cmp	r3, #33	; 0x21
 800373a:	d13e      	bne.n	80037ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d114      	bne.n	8003770 <UART_Transmit_IT+0x48>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e008      	b.n	8003782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6211      	str	r1, [r2, #32]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4619      	mov	r1, r3
 8003790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff38 	bl	800365c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b22      	cmp	r3, #34	; 0x22
 8003808:	f040 8099 	bne.w	800393e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d117      	bne.n	8003846 <UART_Receive_IT+0x50>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	b29a      	uxth	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
 8003844:	e026      	b.n	8003894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d007      	beq.n	800386a <UART_Receive_IT+0x74>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <UART_Receive_IT+0x82>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e008      	b.n	800388a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	b2da      	uxtb	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4619      	mov	r1, r3
 80038a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d148      	bne.n	800393a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0220 	bic.w	r2, r2, #32
 80038b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d123      	bne.n	8003930 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0210 	bic.w	r2, r2, #16
 80038fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d10a      	bne.n	8003922 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff feb2 	bl	8003692 <HAL_UARTEx_RxEventCallback>
 800392e:	e002      	b.n	8003936 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fe9c 	bl	800366e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e002      	b.n	8003940 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003982:	f023 030c 	bic.w	r3, r3, #12
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	430b      	orrs	r3, r1
 800398e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <UART_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7ff f90e 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	e002      	b.n	80039be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7ff f8f6 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <UART_SetConfig+0x118>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	0119      	lsls	r1, r3, #4
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	; 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	; 0x32
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a14:	4419      	add	r1, r3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <UART_SetConfig+0x118>)
 8003a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2064      	movs	r0, #100	; 0x64
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	440a      	add	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	51eb851f 	.word	0x51eb851f

08003a64 <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e007      	b.n	8003a80 <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 8003a70:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b07      	cmp	r3, #7
 8003a84:	ddf4      	ble.n	8003a70 <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <AroundEdgeCube_Handle+0xcc>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 8003a8c:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <AroundEdgeCube_Handle+0xd0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <AroundEdgeCube_Handle+0x36>
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d022      	beq.n	8003ade <AroundEdgeCube_Handle+0x7a>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 8003a98:	e043      	b.n	8003b22 <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x81;
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <AroundEdgeCube_Handle+0xcc>)
 8003a9c:	2281      	movs	r2, #129	; 0x81
 8003a9e:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 8003aa0:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003aa2:	22ff      	movs	r2, #255	; 0xff
 8003aa4:	71da      	strb	r2, [r3, #7]
 8003aa6:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003aa8:	79da      	ldrb	r2, [r3, #7]
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003aac:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003aae:	2301      	movs	r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	e007      	b.n	8003ac4 <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	2281      	movs	r2, #129	; 0x81
 8003abc:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	ddf4      	ble.n	8003ab4 <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <AroundEdgeCube_Handle+0xcc>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4816      	ldr	r0, [pc, #88]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003ad2:	f002 fc09 	bl	80062e8 <TransmitData>
			position_layer = MIDDLE_CUBE;
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <AroundEdgeCube_Handle+0xd0>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
			break;
 8003adc:	e021      	b.n	8003b22 <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x7e;
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <AroundEdgeCube_Handle+0xcc>)
 8003ae0:	227e      	movs	r2, #126	; 0x7e
 8003ae2:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003ae6:	2281      	movs	r2, #129	; 0x81
 8003ae8:	71da      	strb	r2, [r3, #7]
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003aec:	79da      	ldrb	r2, [r3, #7]
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003af0:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003af2:	2301      	movs	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	e007      	b.n	8003b08 <AroundEdgeCube_Handle+0xa4>
				column_around_edge[i] = 0;
 8003af8:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3301      	adds	r3, #1
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	ddf4      	ble.n	8003af8 <AroundEdgeCube_Handle+0x94>
			TransmitData(column_around_edge, layer_around_edge);
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <AroundEdgeCube_Handle+0xcc>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <AroundEdgeCube_Handle+0xc8>)
 8003b16:	f002 fbe7 	bl	80062e8 <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <AroundEdgeCube_Handle+0xd0>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
			break;
 8003b20:	bf00      	nop
	}
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200001c8 	.word	0x200001c8
 8003b30:	200001c4 	.word	0x200001c4
 8003b34:	200001d0 	.word	0x200001d0

08003b38 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <AroundEdgeCube_Set_State+0x3c>)
 8003b40:	2205      	movs	r2, #5
 8003b42:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <AroundEdgeCube_Set_State+0x40>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	e007      	b.n	8003b60 <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <AroundEdgeCube_Set_State+0x44>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b07      	cmp	r3, #7
 8003b64:	ddf4      	ble.n	8003b50 <AroundEdgeCube_Set_State+0x18>
	}
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000010 	.word	0x20000010
 8003b78:	200001c4 	.word	0x200001c4
 8003b7c:	200001c8 	.word	0x200001c8

08003b80 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]

}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]

}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]

}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8a9b      	ldrh	r3, [r3, #20]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7fe fbe3 	bl	80023a0 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
	if (status != BtnX->Btn_filter)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	789b      	ldrb	r3, [r3, #2]
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d00a      	beq.n	8003bfe <Btn_Handle+0x3c>
	{
		BtnX->Btn_filter = status;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 8003bf4:	f7fd fe76 	bl	80018e4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <Btn_Handle+0x62>
 8003c06:	f7fd fe6d 	bl	80018e4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b0e      	cmp	r3, #14
 8003c14:	d906      	bls.n	8003c24 <Btn_Handle+0x62>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	789a      	ldrb	r2, [r3, #2]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d034      	beq.n	8003c9a <Btn_Handle+0xd8>
	{
		if (BtnX->Btn_current == 0)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d110      	bne.n	8003c5a <Btn_Handle+0x98>
		{
			BtnX->Is_press_timeout = 1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8a9b      	ldrh	r3, [r3, #20]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f001 f8c1 	bl	8004dd0 <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 8003c4e:	f7fd fe49 	bl	80018e4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e01b      	b.n	8003c92 <Btn_Handle+0xd0>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 8003c5a:	f7fd fe43 	bl	80018e4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c6a:	d807      	bhi.n	8003c7c <Btn_Handle+0xba>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8a9b      	ldrh	r3, [r3, #20]
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7ff ff82 	bl	8003b80 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8a9b      	ldrh	r3, [r3, #20]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff ff85 	bl	8003b96 <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	791b      	ldrb	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d013      	beq.n	8003cca <Btn_Handle+0x108>
 8003ca2:	f7fd fe1f 	bl	80018e4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003cb2:	d30a      	bcc.n	8003cca <Btn_Handle+0x108>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8a9b      	ldrh	r3, [r3, #20]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7ff ff74 	bl	8003bac <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	711a      	strb	r2, [r3, #4]
	}
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
	BtnX->GPIOx = GPIOx;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	829a      	strh	r2, [r3, #20]

}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i ++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e007      	b.n	8003d16 <clearCube+0x20>
	{
		column[i] = 0x00;
 8003d06:	463a      	mov	r2, r7
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	ddf4      	ble.n	8003d06 <clearCube+0x10>
	}
	TransmitData(column, layer);
 8003d1c:	7afa      	ldrb	r2, [r7, #11]
 8003d1e:	463b      	mov	r3, r7
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 fae0 	bl	80062e8 <TransmitData>
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	switch (w_number)
 8003d34:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <CountDownCube_Handle+0x234>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	f200 829d 	bhi.w	8004278 <CountDownCube_Handle+0x548>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <CountDownCube_Handle+0x14>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	080041fb 	.word	0x080041fb
 8003d48:	0800417d 	.word	0x0800417d
 8003d4c:	080040ef 	.word	0x080040ef
 8003d50:	08004071 	.word	0x08004071
 8003d54:	08003ff3 	.word	0x08003ff3
 8003d58:	08003f75 	.word	0x08003f75
 8003d5c:	08003ee7 	.word	0x08003ee7
 8003d60:	08003e69 	.word	0x08003e69
 8003d64:	08003deb 	.word	0x08003deb
 8003d68:	08003d6d 	.word	0x08003d6d
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003d6c:	f7fd fdba 	bl	80018e4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2246      	movs	r2, #70	; 0x46
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d32f      	bcc.n	8003dde <CountDownCube_Handle+0xae>
			{
				if (direction == 1 && (i < 8))  i++;
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <CountDownCube_Handle+0x68>
 8003d86:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b07      	cmp	r3, #7
 8003d8c:	dc04      	bgt.n	8003d98 <CountDownCube_Handle+0x68>
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	4a76      	ldr	r2, [pc, #472]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003d96:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003d98:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b07      	cmp	r3, #7
 8003d9e:	dd02      	ble.n	8003da6 <CountDownCube_Handle+0x76>
 8003da0:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003da6:	4b71      	ldr	r3, [pc, #452]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <CountDownCube_Handle+0x90>
 8003dae:	4b70      	ldr	r3, [pc, #448]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	dd04      	ble.n	8003dc0 <CountDownCube_Handle+0x90>
 8003db6:	4b6e      	ldr	r3, [pc, #440]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a6c      	ldr	r2, [pc, #432]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003dbe:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003dc0:	4b6b      	ldr	r3, [pc, #428]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <CountDownCube_Handle+0xa4>
				{
					direction = 1;
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <CountDownCube_Handle+0x234>)
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003dd4:	f7fd fd86 	bl	80018e4 <HAL_GetTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003ddc:	6013      	str	r3, [r2, #0]
			}

			DigitNine(i);
 8003dde:	4b64      	ldr	r3, [pc, #400]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa7c 	bl	80042e0 <DigitNine>
		break;
 8003de8:	e247      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003dea:	f7fd fd7b 	bl	80018e4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2246      	movs	r2, #70	; 0x46
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d32f      	bcc.n	8003e5c <CountDownCube_Handle+0x12c>
			{

				if (direction == 1 && (i < 8))  i++;
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d108      	bne.n	8003e16 <CountDownCube_Handle+0xe6>
 8003e04:	4b5a      	ldr	r3, [pc, #360]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b07      	cmp	r3, #7
 8003e0a:	dc04      	bgt.n	8003e16 <CountDownCube_Handle+0xe6>
 8003e0c:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e14:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003e16:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b07      	cmp	r3, #7
 8003e1c:	dd02      	ble.n	8003e24 <CountDownCube_Handle+0xf4>
 8003e1e:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003e24:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <CountDownCube_Handle+0x10e>
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dd04      	ble.n	8003e3e <CountDownCube_Handle+0x10e>
 8003e34:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	4a4d      	ldr	r2, [pc, #308]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e3c:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003e3e:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <CountDownCube_Handle+0x122>
				{
					direction = 1;
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <CountDownCube_Handle+0x234>)
 8003e4e:	2207      	movs	r2, #7
 8003e50:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003e52:	f7fd fd47 	bl	80018e4 <HAL_GetTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4a43      	ldr	r2, [pc, #268]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003e5a:	6013      	str	r3, [r2, #0]
			}

			DigitEight(i);
 8003e5c:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fa79 	bl	8004358 <DigitEight>
		break;
 8003e66:	e208      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003e68:	f7fd fd3c 	bl	80018e4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2246      	movs	r2, #70	; 0x46
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d32f      	bcc.n	8003eda <CountDownCube_Handle+0x1aa>
			{

				if (direction == 1 && (i < 8))  i++;
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <CountDownCube_Handle+0x164>
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b07      	cmp	r3, #7
 8003e88:	dc04      	bgt.n	8003e94 <CountDownCube_Handle+0x164>
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	4a37      	ldr	r2, [pc, #220]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e92:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b07      	cmp	r3, #7
 8003e9a:	dd02      	ble.n	8003ea2 <CountDownCube_Handle+0x172>
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <CountDownCube_Handle+0x18c>
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd04      	ble.n	8003ebc <CountDownCube_Handle+0x18c>
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003eba:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003ebc:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <CountDownCube_Handle+0x1a0>
				{
					direction = 1;
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <CountDownCube_Handle+0x234>)
 8003ecc:	2206      	movs	r2, #6
 8003ece:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003ed0:	f7fd fd08 	bl	80018e4 <HAL_GetTick>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003ed8:	6013      	str	r3, [r2, #0]
			}

			DigitSeven(i);
 8003eda:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa5c 	bl	800439c <DigitSeven>

			break;
 8003ee4:	e1c9      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003ee6:	f7fd fcfd 	bl	80018e4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2246      	movs	r2, #70	; 0x46
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d32f      	bcc.n	8003f58 <CountDownCube_Handle+0x228>
			{

				if (direction == 1 && (i < 8))  i++;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d108      	bne.n	8003f12 <CountDownCube_Handle+0x1e2>
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b07      	cmp	r3, #7
 8003f06:	dc04      	bgt.n	8003f12 <CountDownCube_Handle+0x1e2>
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f10:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	dd02      	ble.n	8003f20 <CountDownCube_Handle+0x1f0>
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <CountDownCube_Handle+0x20a>
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dd04      	ble.n	8003f3a <CountDownCube_Handle+0x20a>
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f38:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <CountDownCube_Handle+0x21e>
				{
					direction = 1;
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <CountDownCube_Handle+0x23c>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <CountDownCube_Handle+0x234>)
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003f4e:	f7fd fcc9 	bl	80018e4 <HAL_GetTick>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <CountDownCube_Handle+0x238>)
 8003f56:	6013      	str	r3, [r2, #0]
			}

			DigitSix(i);
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <CountDownCube_Handle+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa51 	bl	8004404 <DigitSix>

			break;
 8003f62:	e18a      	b.n	800427a <CountDownCube_Handle+0x54a>
 8003f64:	20000009 	.word	0x20000009
 8003f68:	200001dc 	.word	0x200001dc
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	200001e0 	.word	0x200001e0

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003f74:	f7fd fcb6 	bl	80018e4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <CountDownCube_Handle+0x43c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2246      	movs	r2, #70	; 0x46
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d32f      	bcc.n	8003fe6 <CountDownCube_Handle+0x2b6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003f86:	4b7a      	ldr	r3, [pc, #488]	; (8004170 <CountDownCube_Handle+0x440>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d108      	bne.n	8003fa0 <CountDownCube_Handle+0x270>
 8003f8e:	4b79      	ldr	r3, [pc, #484]	; (8004174 <CountDownCube_Handle+0x444>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b07      	cmp	r3, #7
 8003f94:	dc04      	bgt.n	8003fa0 <CountDownCube_Handle+0x270>
 8003f96:	4b77      	ldr	r3, [pc, #476]	; (8004174 <CountDownCube_Handle+0x444>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a75      	ldr	r2, [pc, #468]	; (8004174 <CountDownCube_Handle+0x444>)
 8003f9e:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003fa0:	4b74      	ldr	r3, [pc, #464]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b07      	cmp	r3, #7
 8003fa6:	dd02      	ble.n	8003fae <CountDownCube_Handle+0x27e>
 8003fa8:	4b71      	ldr	r3, [pc, #452]	; (8004170 <CountDownCube_Handle+0x440>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003fae:	4b70      	ldr	r3, [pc, #448]	; (8004170 <CountDownCube_Handle+0x440>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <CountDownCube_Handle+0x298>
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dd04      	ble.n	8003fc8 <CountDownCube_Handle+0x298>
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a6b      	ldr	r2, [pc, #428]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fc6:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <CountDownCube_Handle+0x2ac>
				{
					direction = 1;
 8003fd0:	4b67      	ldr	r3, [pc, #412]	; (8004170 <CountDownCube_Handle+0x440>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8003fd6:	4b68      	ldr	r3, [pc, #416]	; (8004178 <CountDownCube_Handle+0x448>)
 8003fd8:	2204      	movs	r2, #4
 8003fda:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003fdc:	f7fd fc82 	bl	80018e4 <HAL_GetTick>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a62      	ldr	r2, [pc, #392]	; (800416c <CountDownCube_Handle+0x43c>)
 8003fe4:	6013      	str	r3, [r2, #0]
			}

			DigitFive(i);
 8003fe6:	4b63      	ldr	r3, [pc, #396]	; (8004174 <CountDownCube_Handle+0x444>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa50 	bl	8004490 <DigitFive>
			break;
 8003ff0:	e143      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003ff2:	f7fd fc77 	bl	80018e4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b5c      	ldr	r3, [pc, #368]	; (800416c <CountDownCube_Handle+0x43c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2246      	movs	r2, #70	; 0x46
 8004000:	4293      	cmp	r3, r2
 8004002:	d32f      	bcc.n	8004064 <CountDownCube_Handle+0x334>
			{

				if (direction == 1 && (i < 8))  i++;
 8004004:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <CountDownCube_Handle+0x440>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <CountDownCube_Handle+0x2ee>
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <CountDownCube_Handle+0x444>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b07      	cmp	r3, #7
 8004012:	dc04      	bgt.n	800401e <CountDownCube_Handle+0x2ee>
 8004014:	4b57      	ldr	r3, [pc, #348]	; (8004174 <CountDownCube_Handle+0x444>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a56      	ldr	r2, [pc, #344]	; (8004174 <CountDownCube_Handle+0x444>)
 800401c:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800401e:	4b55      	ldr	r3, [pc, #340]	; (8004174 <CountDownCube_Handle+0x444>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b07      	cmp	r3, #7
 8004024:	dd02      	ble.n	800402c <CountDownCube_Handle+0x2fc>
 8004026:	4b52      	ldr	r3, [pc, #328]	; (8004170 <CountDownCube_Handle+0x440>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <CountDownCube_Handle+0x440>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <CountDownCube_Handle+0x316>
 8004034:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <CountDownCube_Handle+0x444>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	dd04      	ble.n	8004046 <CountDownCube_Handle+0x316>
 800403c:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <CountDownCube_Handle+0x444>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a4c      	ldr	r2, [pc, #304]	; (8004174 <CountDownCube_Handle+0x444>)
 8004044:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004046:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <CountDownCube_Handle+0x444>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <CountDownCube_Handle+0x32a>
				{
					direction = 1;
 800404e:	4b48      	ldr	r3, [pc, #288]	; (8004170 <CountDownCube_Handle+0x440>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8004054:	4b48      	ldr	r3, [pc, #288]	; (8004178 <CountDownCube_Handle+0x448>)
 8004056:	2203      	movs	r2, #3
 8004058:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800405a:	f7fd fc43 	bl	80018e4 <HAL_GetTick>
 800405e:	4603      	mov	r3, r0
 8004060:	4a42      	ldr	r2, [pc, #264]	; (800416c <CountDownCube_Handle+0x43c>)
 8004062:	6013      	str	r3, [r2, #0]
			}

			DigitFour(i);
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <CountDownCube_Handle+0x444>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa57 	bl	800451c <DigitFour>
			break;
 800406e:	e104      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004070:	f7fd fc38 	bl	80018e4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <CountDownCube_Handle+0x43c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2246      	movs	r2, #70	; 0x46
 800407e:	4293      	cmp	r3, r2
 8004080:	d32f      	bcc.n	80040e2 <CountDownCube_Handle+0x3b2>
			{

				if (direction == 1 && (i < 8))  i++;
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <CountDownCube_Handle+0x440>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <CountDownCube_Handle+0x36c>
 800408a:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <CountDownCube_Handle+0x444>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b07      	cmp	r3, #7
 8004090:	dc04      	bgt.n	800409c <CountDownCube_Handle+0x36c>
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <CountDownCube_Handle+0x444>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	4a36      	ldr	r2, [pc, #216]	; (8004174 <CountDownCube_Handle+0x444>)
 800409a:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <CountDownCube_Handle+0x444>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b07      	cmp	r3, #7
 80040a2:	dd02      	ble.n	80040aa <CountDownCube_Handle+0x37a>
 80040a4:	4b32      	ldr	r3, [pc, #200]	; (8004170 <CountDownCube_Handle+0x440>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <CountDownCube_Handle+0x440>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <CountDownCube_Handle+0x394>
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <CountDownCube_Handle+0x444>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dd04      	ble.n	80040c4 <CountDownCube_Handle+0x394>
 80040ba:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <CountDownCube_Handle+0x444>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <CountDownCube_Handle+0x444>)
 80040c2:	6013      	str	r3, [r2, #0]
				if (i == 0)
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <CountDownCube_Handle+0x444>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <CountDownCube_Handle+0x3a8>
				{
					direction = 1;
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <CountDownCube_Handle+0x440>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <CountDownCube_Handle+0x448>)
 80040d4:	2202      	movs	r2, #2
 80040d6:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80040d8:	f7fd fc04 	bl	80018e4 <HAL_GetTick>
 80040dc:	4603      	mov	r3, r0
 80040de:	4a23      	ldr	r2, [pc, #140]	; (800416c <CountDownCube_Handle+0x43c>)
 80040e0:	6013      	str	r3, [r2, #0]
			}

			DigitThree(i);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <CountDownCube_Handle+0x444>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa5c 	bl	80045a4 <DigitThree>
			break;
 80040ec:	e0c5      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80040ee:	f7fd fbf9 	bl	80018e4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <CountDownCube_Handle+0x43c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2246      	movs	r2, #70	; 0x46
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d32f      	bcc.n	8004160 <CountDownCube_Handle+0x430>
			{

				if (direction == 1 && (i < 8))  i++;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <CountDownCube_Handle+0x440>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d108      	bne.n	800411a <CountDownCube_Handle+0x3ea>
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <CountDownCube_Handle+0x444>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b07      	cmp	r3, #7
 800410e:	dc04      	bgt.n	800411a <CountDownCube_Handle+0x3ea>
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <CountDownCube_Handle+0x444>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <CountDownCube_Handle+0x444>)
 8004118:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <CountDownCube_Handle+0x444>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b07      	cmp	r3, #7
 8004120:	dd02      	ble.n	8004128 <CountDownCube_Handle+0x3f8>
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <CountDownCube_Handle+0x440>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <CountDownCube_Handle+0x440>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <CountDownCube_Handle+0x412>
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <CountDownCube_Handle+0x444>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	dd04      	ble.n	8004142 <CountDownCube_Handle+0x412>
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <CountDownCube_Handle+0x444>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <CountDownCube_Handle+0x444>)
 8004140:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <CountDownCube_Handle+0x444>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <CountDownCube_Handle+0x426>
				{
					direction = 1;
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <CountDownCube_Handle+0x440>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <CountDownCube_Handle+0x448>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004156:	f7fd fbc5 	bl	80018e4 <HAL_GetTick>
 800415a:	4603      	mov	r3, r0
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <CountDownCube_Handle+0x43c>)
 800415e:	6013      	str	r3, [r2, #0]
			}

			DigitTwo(i);
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <CountDownCube_Handle+0x444>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fa51 	bl	800460c <DigitTwo>
			break;
 800416a:	e086      	b.n	800427a <CountDownCube_Handle+0x54a>
 800416c:	200001dc 	.word	0x200001dc
 8004170:	2000000c 	.word	0x2000000c
 8004174:	200001e0 	.word	0x200001e0
 8004178:	20000009 	.word	0x20000009

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800417c:	f7fd fbb2 	bl	80018e4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <CountDownCube_Handle+0x550>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2246      	movs	r2, #70	; 0x46
 800418a:	4293      	cmp	r3, r2
 800418c:	d32f      	bcc.n	80041ee <CountDownCube_Handle+0x4be>
			{

				if (direction == 1 && (i < 8))  i++;
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <CountDownCube_Handle+0x554>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <CountDownCube_Handle+0x478>
 8004196:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <CountDownCube_Handle+0x558>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b07      	cmp	r3, #7
 800419c:	dc04      	bgt.n	80041a8 <CountDownCube_Handle+0x478>
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <CountDownCube_Handle+0x558>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	4a38      	ldr	r2, [pc, #224]	; (8004288 <CountDownCube_Handle+0x558>)
 80041a6:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80041a8:	4b37      	ldr	r3, [pc, #220]	; (8004288 <CountDownCube_Handle+0x558>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b07      	cmp	r3, #7
 80041ae:	dd02      	ble.n	80041b6 <CountDownCube_Handle+0x486>
 80041b0:	4b34      	ldr	r3, [pc, #208]	; (8004284 <CountDownCube_Handle+0x554>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <CountDownCube_Handle+0x554>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <CountDownCube_Handle+0x4a0>
 80041be:	4b32      	ldr	r3, [pc, #200]	; (8004288 <CountDownCube_Handle+0x558>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	dd04      	ble.n	80041d0 <CountDownCube_Handle+0x4a0>
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <CountDownCube_Handle+0x558>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	4a2e      	ldr	r2, [pc, #184]	; (8004288 <CountDownCube_Handle+0x558>)
 80041ce:	6013      	str	r3, [r2, #0]
				if (i == 0)
 80041d0:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <CountDownCube_Handle+0x558>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <CountDownCube_Handle+0x4b4>
				{
					direction = 1;
 80041d8:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <CountDownCube_Handle+0x554>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <CountDownCube_Handle+0x55c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80041e4:	f7fd fb7e 	bl	80018e4 <HAL_GetTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4a25      	ldr	r2, [pc, #148]	; (8004280 <CountDownCube_Handle+0x550>)
 80041ec:	6013      	str	r3, [r2, #0]
			}

			DigitOne(i);
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <CountDownCube_Handle+0x558>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa58 	bl	80046a8 <DigitOne>
			break;
 80041f8:	e03f      	b.n	800427a <CountDownCube_Handle+0x54a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80041fa:	f7fd fb73 	bl	80018e4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <CountDownCube_Handle+0x550>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2246      	movs	r2, #70	; 0x46
 8004208:	4293      	cmp	r3, r2
 800420a:	d32f      	bcc.n	800426c <CountDownCube_Handle+0x53c>
			{

				if (direction == 1 && (i < 8))  i++;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <CountDownCube_Handle+0x554>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <CountDownCube_Handle+0x4f6>
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <CountDownCube_Handle+0x558>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b07      	cmp	r3, #7
 800421a:	dc04      	bgt.n	8004226 <CountDownCube_Handle+0x4f6>
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <CountDownCube_Handle+0x558>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a19      	ldr	r2, [pc, #100]	; (8004288 <CountDownCube_Handle+0x558>)
 8004224:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <CountDownCube_Handle+0x558>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b07      	cmp	r3, #7
 800422c:	dd02      	ble.n	8004234 <CountDownCube_Handle+0x504>
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <CountDownCube_Handle+0x554>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <CountDownCube_Handle+0x554>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <CountDownCube_Handle+0x51e>
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <CountDownCube_Handle+0x558>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dd04      	ble.n	800424e <CountDownCube_Handle+0x51e>
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <CountDownCube_Handle+0x558>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <CountDownCube_Handle+0x558>)
 800424c:	6013      	str	r3, [r2, #0]
				if (i == 0)
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <CountDownCube_Handle+0x558>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <CountDownCube_Handle+0x532>
				{
					direction = 1;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <CountDownCube_Handle+0x554>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <CountDownCube_Handle+0x55c>)
 800425e:	2209      	movs	r2, #9
 8004260:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004262:	f7fd fb3f 	bl	80018e4 <HAL_GetTick>
 8004266:	4603      	mov	r3, r0
 8004268:	4a05      	ldr	r2, [pc, #20]	; (8004280 <CountDownCube_Handle+0x550>)
 800426a:	6013      	str	r3, [r2, #0]
			}

			DigitZero(i);
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <CountDownCube_Handle+0x558>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fa5f 	bl	8004734 <DigitZero>
			break;
 8004276:	e000      	b.n	800427a <CountDownCube_Handle+0x54a>

		default:
			break;
 8004278:	bf00      	nop
	}
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200001dc 	.word	0x200001dc
 8004284:	2000000c 	.word	0x2000000c
 8004288:	200001e0 	.word	0x200001e0
 800428c:	20000009 	.word	0x20000009

08004290 <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <CountDownCube_Set_Sate+0x40>)
 8004298:	2206      	movs	r2, #6
 800429a:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <CountDownCube_Set_Sate+0x44>)
 800429e:	2209      	movs	r2, #9
 80042a0:	701a      	strb	r2, [r3, #0]
	direction = 1;
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <CountDownCube_Set_Sate+0x48>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80042a8:	2300      	movs	r3, #0
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e007      	b.n	80042be <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 80042ae:	4a0b      	ldr	r2, [pc, #44]	; (80042dc <CountDownCube_Set_Sate+0x4c>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b07      	cmp	r3, #7
 80042c2:	ddf4      	ble.n	80042ae <CountDownCube_Set_Sate+0x1e>
	}
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000010 	.word	0x20000010
 80042d4:	20000009 	.word	0x20000009
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	200001d4 	.word	0x200001d4

080042e0 <DigitNine>:

void DigitNine(int i)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 80042e8:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <DigitNine+0x74>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	227e      	movs	r2, #126	; 0x7e
 80042f0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 80042f2:	2181      	movs	r1, #129	; 0x81
 80042f4:	4817      	ldr	r0, [pc, #92]	; (8004354 <DigitNine+0x74>)
 80042f6:	f001 fff7 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc3;
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <DigitNine+0x74>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	22c3      	movs	r2, #195	; 0xc3
 8004302:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 8004304:	2160      	movs	r1, #96	; 0x60
 8004306:	4813      	ldr	r0, [pc, #76]	; (8004354 <DigitNine+0x74>)
 8004308:	f001 ffee 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x03;
 800430c:	4a11      	ldr	r2, [pc, #68]	; (8004354 <DigitNine+0x74>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	2203      	movs	r2, #3
 8004314:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004316:	210c      	movs	r1, #12
 8004318:	480e      	ldr	r0, [pc, #56]	; (8004354 <DigitNine+0x74>)
 800431a:	f001 ffe5 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xff;
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <DigitNine+0x74>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8004328:	2102      	movs	r1, #2
 800432a:	480a      	ldr	r0, [pc, #40]	; (8004354 <DigitNine+0x74>)
 800432c:	f001 ffdc 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x7f;
 8004330:	4a08      	ldr	r2, [pc, #32]	; (8004354 <DigitNine+0x74>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	227f      	movs	r2, #127	; 0x7f
 8004338:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 800433a:	2110      	movs	r1, #16
 800433c:	4805      	ldr	r0, [pc, #20]	; (8004354 <DigitNine+0x74>)
 800433e:	f001 ffd3 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004342:	4a04      	ldr	r2, [pc, #16]	; (8004354 <DigitNine+0x74>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200001d4 	.word	0x200001d4

08004358 <DigitEight>:

void DigitEight(int i)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8004360:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <DigitEight+0x40>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	22c3      	movs	r2, #195	; 0xc3
 8004368:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 800436a:	2166      	movs	r1, #102	; 0x66
 800436c:	480a      	ldr	r0, [pc, #40]	; (8004398 <DigitEight+0x40>)
 800436e:	f001 ffbb 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x7e;
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <DigitEight+0x40>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	227e      	movs	r2, #126	; 0x7e
 800437a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 800437c:	2199      	movs	r1, #153	; 0x99
 800437e:	4806      	ldr	r0, [pc, #24]	; (8004398 <DigitEight+0x40>)
 8004380:	f001 ffb2 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <DigitEight+0x40>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200001d4 	.word	0x200001d4

0800439c <DigitSeven>:

void DigitSeven(int i)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <DigitSeven+0x64>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	22ff      	movs	r2, #255	; 0xff
 80043ac:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 80043ae:	21c0      	movs	r1, #192	; 0xc0
 80043b0:	4813      	ldr	r0, [pc, #76]	; (8004400 <DigitSeven+0x64>)
 80043b2:	f001 ff99 	bl	80062e8 <TransmitData>

	for (int j = 0; j < 6; j++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e015      	b.n	80043e8 <DigitSeven+0x4c>
	{
		column_countdown[i] = 0x03 << j;
 80043bc:	2203      	movs	r2, #3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	b2d9      	uxtb	r1, r3
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <DigitSeven+0x64>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	460a      	mov	r2, r1
 80043ce:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 80043d0:	2220      	movs	r2, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	fa42 f303 	asr.w	r3, r2, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	4619      	mov	r1, r3
 80043dc:	4808      	ldr	r0, [pc, #32]	; (8004400 <DigitSeven+0x64>)
 80043de:	f001 ff83 	bl	80062e8 <TransmitData>
	for (int j = 0; j < 6; j++)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	dde6      	ble.n	80043bc <DigitSeven+0x20>
	}

	column_countdown[i] = 0;
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <DigitSeven+0x64>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200001d4 	.word	0x200001d4

08004404 <DigitSix>:

void DigitSix(int i)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <DigitSix+0x88>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004416:	2142      	movs	r1, #66	; 0x42
 8004418:	481c      	ldr	r0, [pc, #112]	; (800448c <DigitSix+0x88>)
 800441a:	f001 ff65 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc3;
 800441e:	4a1b      	ldr	r2, [pc, #108]	; (800448c <DigitSix+0x88>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	22c3      	movs	r2, #195	; 0xc3
 8004426:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004428:	210c      	movs	r1, #12
 800442a:	4818      	ldr	r0, [pc, #96]	; (800448c <DigitSix+0x88>)
 800442c:	f001 ff5c 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x7f;
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <DigitSix+0x88>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	227f      	movs	r2, #127	; 0x7f
 8004438:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	4813      	ldr	r0, [pc, #76]	; (800448c <DigitSix+0x88>)
 800443e:	f001 ff53 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc0;
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <DigitSix+0x88>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	22c0      	movs	r2, #192	; 0xc0
 800444a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 800444c:	2120      	movs	r1, #32
 800444e:	480f      	ldr	r0, [pc, #60]	; (800448c <DigitSix+0x88>)
 8004450:	f001 ff4a 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xfe;
 8004454:	4a0d      	ldr	r2, [pc, #52]	; (800448c <DigitSix+0x88>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	22fe      	movs	r2, #254	; 0xfe
 800445c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 800445e:	2110      	movs	r1, #16
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <DigitSix+0x88>)
 8004462:	f001 ff41 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x7e;
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <DigitSix+0x88>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	227e      	movs	r2, #126	; 0x7e
 800446e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8004470:	2101      	movs	r1, #1
 8004472:	4806      	ldr	r0, [pc, #24]	; (800448c <DigitSix+0x88>)
 8004474:	f001 ff38 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <DigitSix+0x88>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200001d4 	.word	0x200001d4

08004490 <DigitFive>:

void DigitFive(int i)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 8004498:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <DigitFive+0x88>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	22ff      	movs	r2, #255	; 0xff
 80044a0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 80044a2:	21c0      	movs	r1, #192	; 0xc0
 80044a4:	481c      	ldr	r0, [pc, #112]	; (8004518 <DigitFive+0x88>)
 80044a6:	f001 ff1f 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc0;
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <DigitFive+0x88>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	22c0      	movs	r2, #192	; 0xc0
 80044b2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 80044b4:	2120      	movs	r1, #32
 80044b6:	4818      	ldr	r0, [pc, #96]	; (8004518 <DigitFive+0x88>)
 80044b8:	f001 ff16 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xfe;
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <DigitFive+0x88>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	22fe      	movs	r2, #254	; 0xfe
 80044c4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 80044c6:	2110      	movs	r1, #16
 80044c8:	4813      	ldr	r0, [pc, #76]	; (8004518 <DigitFive+0x88>)
 80044ca:	f001 ff0d 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x03;
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <DigitFive+0x88>)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	2203      	movs	r2, #3
 80044d6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 80044d8:	210c      	movs	r1, #12
 80044da:	480f      	ldr	r0, [pc, #60]	; (8004518 <DigitFive+0x88>)
 80044dc:	f001 ff04 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x83;
 80044e0:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <DigitFive+0x88>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	2283      	movs	r2, #131	; 0x83
 80044e8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 80044ea:	2102      	movs	r1, #2
 80044ec:	480a      	ldr	r0, [pc, #40]	; (8004518 <DigitFive+0x88>)
 80044ee:	f001 fefb 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x7e;
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <DigitFive+0x88>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	227e      	movs	r2, #126	; 0x7e
 80044fa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 80044fc:	2101      	movs	r1, #1
 80044fe:	4806      	ldr	r0, [pc, #24]	; (8004518 <DigitFive+0x88>)
 8004500:	f001 fef2 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <DigitFive+0x88>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200001d4 	.word	0x200001d4

0800451c <DigitFour>:

void DigitFour(int i)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <DigitFour+0x80>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	2206      	movs	r2, #6
 800452c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 800452e:	21f3      	movs	r1, #243	; 0xf3
 8004530:	481a      	ldr	r0, [pc, #104]	; (800459c <DigitFour+0x80>)
 8004532:	f001 fed9 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xff;
 8004536:	4a19      	ldr	r2, [pc, #100]	; (800459c <DigitFour+0x80>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	22ff      	movs	r2, #255	; 0xff
 800453e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004540:	210c      	movs	r1, #12
 8004542:	4816      	ldr	r0, [pc, #88]	; (800459c <DigitFour+0x80>)
 8004544:	f001 fed0 	bl	80062e8 <TransmitData>

	for (int j = 0; j < 4; j++)
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e019      	b.n	8004582 <DigitFour+0x66>
	{
	column_countdown[i] = 0x08 << j;
 800454e:	2208      	movs	r2, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	b2d9      	uxtb	r1, r3
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <DigitFour+0x80>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	460a      	mov	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	fa42 f303 	asr.w	r3, r2, r3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <DigitFour+0x84>)
 800456e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <DigitFour+0x84>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4619      	mov	r1, r3
 8004576:	4809      	ldr	r0, [pc, #36]	; (800459c <DigitFour+0x80>)
 8004578:	f001 feb6 	bl	80062e8 <TransmitData>
	for (int j = 0; j < 4; j++)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b03      	cmp	r3, #3
 8004586:	dde2      	ble.n	800454e <DigitFour+0x32>
	}

	column_countdown[i] = 0;
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <DigitFour+0x80>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200001d4 	.word	0x200001d4
 80045a0:	200001d1 	.word	0x200001d1

080045a4 <DigitThree>:

void DigitThree(int i)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 80045ac:	4a16      	ldr	r2, [pc, #88]	; (8004608 <DigitThree+0x64>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	227e      	movs	r2, #126	; 0x7e
 80045b4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 80045b6:	2181      	movs	r1, #129	; 0x81
 80045b8:	4813      	ldr	r0, [pc, #76]	; (8004608 <DigitThree+0x64>)
 80045ba:	f001 fe95 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xe7;
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <DigitThree+0x64>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	22e7      	movs	r2, #231	; 0xe7
 80045c6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 80045c8:	2142      	movs	r1, #66	; 0x42
 80045ca:	480f      	ldr	r0, [pc, #60]	; (8004608 <DigitThree+0x64>)
 80045cc:	f001 fe8c 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc3;
 80045d0:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <DigitThree+0x64>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	22c3      	movs	r2, #195	; 0xc3
 80045d8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 80045da:	2124      	movs	r1, #36	; 0x24
 80045dc:	480a      	ldr	r0, [pc, #40]	; (8004608 <DigitThree+0x64>)
 80045de:	f001 fe83 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x06;
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <DigitThree+0x64>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	2206      	movs	r2, #6
 80045ea:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 80045ec:	2118      	movs	r1, #24
 80045ee:	4806      	ldr	r0, [pc, #24]	; (8004608 <DigitThree+0x64>)
 80045f0:	f001 fe7a 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <DigitThree+0x64>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200001d4 	.word	0x200001d4

0800460c <DigitTwo>:

void DigitTwo(int i)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <DigitTwo+0x98>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	227e      	movs	r2, #126	; 0x7e
 800461c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	4820      	ldr	r0, [pc, #128]	; (80046a4 <DigitTwo+0x98>)
 8004622:	f001 fe61 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc3;
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <DigitTwo+0x98>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	22c3      	movs	r2, #195	; 0xc3
 800462e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	481c      	ldr	r0, [pc, #112]	; (80046a4 <DigitTwo+0x98>)
 8004634:	f001 fe58 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x83;
 8004638:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <DigitTwo+0x98>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	2283      	movs	r2, #131	; 0x83
 8004640:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8004642:	2120      	movs	r1, #32
 8004644:	4817      	ldr	r0, [pc, #92]	; (80046a4 <DigitTwo+0x98>)
 8004646:	f001 fe4f 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x0e;
 800464a:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <DigitTwo+0x98>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	220e      	movs	r2, #14
 8004652:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004654:	2110      	movs	r1, #16
 8004656:	4813      	ldr	r0, [pc, #76]	; (80046a4 <DigitTwo+0x98>)
 8004658:	f001 fe46 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x1c;
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <DigitTwo+0x98>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	221c      	movs	r2, #28
 8004664:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 8004666:	2108      	movs	r1, #8
 8004668:	480e      	ldr	r0, [pc, #56]	; (80046a4 <DigitTwo+0x98>)
 800466a:	f001 fe3d 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x70;
 800466e:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <DigitTwo+0x98>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	2270      	movs	r2, #112	; 0x70
 8004676:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 8004678:	2104      	movs	r1, #4
 800467a:	480a      	ldr	r0, [pc, #40]	; (80046a4 <DigitTwo+0x98>)
 800467c:	f001 fe34 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xff;
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <DigitTwo+0x98>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 800468a:	2103      	movs	r1, #3
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <DigitTwo+0x98>)
 800468e:	f001 fe2b 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <DigitTwo+0x98>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200001d4 	.word	0x200001d4

080046a8 <DigitOne>:

void DigitOne(int i)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <DigitOne+0x88>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 80046ba:	2101      	movs	r1, #1
 80046bc:	481c      	ldr	r0, [pc, #112]	; (8004730 <DigitOne+0x88>)
 80046be:	f001 fe13 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x98;
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <DigitOne+0x88>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	2298      	movs	r2, #152	; 0x98
 80046ca:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 80046cc:	2108      	movs	r1, #8
 80046ce:	4818      	ldr	r0, [pc, #96]	; (8004730 <DigitOne+0x88>)
 80046d0:	f001 fe0a 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xd8;
 80046d4:	4a16      	ldr	r2, [pc, #88]	; (8004730 <DigitOne+0x88>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	22d8      	movs	r2, #216	; 0xd8
 80046dc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 80046de:	2110      	movs	r1, #16
 80046e0:	4813      	ldr	r0, [pc, #76]	; (8004730 <DigitOne+0x88>)
 80046e2:	f001 fe01 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x78;
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <DigitOne+0x88>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	2278      	movs	r2, #120	; 0x78
 80046ee:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 80046f0:	2120      	movs	r1, #32
 80046f2:	480f      	ldr	r0, [pc, #60]	; (8004730 <DigitOne+0x88>)
 80046f4:	f001 fdf8 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x38;
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <DigitOne+0x88>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	2238      	movs	r2, #56	; 0x38
 8004700:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	480a      	ldr	r0, [pc, #40]	; (8004730 <DigitOne+0x88>)
 8004706:	f001 fdef 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x18;
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <DigitOne+0x88>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	2218      	movs	r2, #24
 8004712:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 8004714:	2186      	movs	r1, #134	; 0x86
 8004716:	4806      	ldr	r0, [pc, #24]	; (8004730 <DigitOne+0x88>)
 8004718:	f001 fde6 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <DigitOne+0x88>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	200001d4 	.word	0x200001d4

08004734 <DigitZero>:

void DigitZero(int i)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <DigitZero+0x50>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	223c      	movs	r2, #60	; 0x3c
 8004744:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004746:	2181      	movs	r1, #129	; 0x81
 8004748:	480e      	ldr	r0, [pc, #56]	; (8004784 <DigitZero+0x50>)
 800474a:	f001 fdcd 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0x66;
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <DigitZero+0x50>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	2266      	movs	r2, #102	; 0x66
 8004756:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004758:	2142      	movs	r1, #66	; 0x42
 800475a:	480a      	ldr	r0, [pc, #40]	; (8004784 <DigitZero+0x50>)
 800475c:	f001 fdc4 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0xc3;
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <DigitZero+0x50>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	22c3      	movs	r2, #195	; 0xc3
 8004768:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 800476a:	213c      	movs	r1, #60	; 0x3c
 800476c:	4805      	ldr	r0, [pc, #20]	; (8004784 <DigitZero+0x50>)
 800476e:	f001 fdbb 	bl	80062e8 <TransmitData>

	column_countdown[i] = 0;
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <DigitZero+0x50>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200001d4 	.word	0x200001d4

08004788 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0

	switch (size_layer)
 800478e:	4b7e      	ldr	r3, [pc, #504]	; (8004988 <DiagonalCube_Handle+0x200>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b03      	cmp	r3, #3
 8004794:	f200 80ea 	bhi.w	800496c <DiagonalCube_Handle+0x1e4>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <DiagonalCube_Handle+0x18>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	08004821 	.word	0x08004821
 80047a8:	08004891 	.word	0x08004891
 80047ac:	080048ff 	.word	0x080048ff
	{
		case SMALLEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80047b0:	f7fd f898 	bl	80018e4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b75      	ldr	r3, [pc, #468]	; (800498c <DiagonalCube_Handle+0x204>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2296      	movs	r2, #150	; 0x96
 80047be:	4293      	cmp	r3, r2
 80047c0:	f0c0 80d6 	bcc.w	8004970 <DiagonalCube_Handle+0x1e8>
			{
				layer_diagonal = 0x18;
 80047c4:	4b72      	ldr	r3, [pc, #456]	; (8004990 <DiagonalCube_Handle+0x208>)
 80047c6:	2218      	movs	r2, #24
 80047c8:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80047ca:	2303      	movs	r3, #3
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e007      	b.n	80047e0 <DiagonalCube_Handle+0x58>
				{
					column_diagonal[i] = 0x18;
 80047d0:	4a70      	ldr	r2, [pc, #448]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	2218      	movs	r2, #24
 80047d8:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	ddf4      	ble.n	80047d0 <DiagonalCube_Handle+0x48>
				}
				TransmitData(column_diagonal, layer_diagonal);
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <DiagonalCube_Handle+0x208>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4869      	ldr	r0, [pc, #420]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80047ee:	f001 fd7b 	bl	80062e8 <TransmitData>
				for (int i = 0; i < 8; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e007      	b.n	8004808 <DiagonalCube_Handle+0x80>
				{
					column_diagonal[i] = 0;
 80047f8:	4a66      	ldr	r2, [pc, #408]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4413      	add	r3, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	3301      	adds	r3, #1
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b07      	cmp	r3, #7
 800480c:	ddf4      	ble.n	80047f8 <DiagonalCube_Handle+0x70>
				}
				size_layer = MEDIUM;
 800480e:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <DiagonalCube_Handle+0x200>)
 8004810:	2201      	movs	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004814:	f7fd f866 	bl	80018e4 <HAL_GetTick>
 8004818:	4603      	mov	r3, r0
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <DiagonalCube_Handle+0x204>)
 800481c:	6013      	str	r3, [r2, #0]
			}
			break;
 800481e:	e0a7      	b.n	8004970 <DiagonalCube_Handle+0x1e8>
		case MEDIUM:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004820:	f7fd f860 	bl	80018e4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	4b59      	ldr	r3, [pc, #356]	; (800498c <DiagonalCube_Handle+0x204>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2296      	movs	r2, #150	; 0x96
 800482e:	4293      	cmp	r3, r2
 8004830:	f0c0 80a0 	bcc.w	8004974 <DiagonalCube_Handle+0x1ec>
			{
				layer_diagonal = 0x24;
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <DiagonalCube_Handle+0x208>)
 8004836:	2224      	movs	r2, #36	; 0x24
 8004838:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 800483a:	2302      	movs	r3, #2
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e007      	b.n	8004850 <DiagonalCube_Handle+0xc8>
				{
					column_diagonal[i] = 0x3c;
 8004840:	4a54      	ldr	r2, [pc, #336]	; (8004994 <DiagonalCube_Handle+0x20c>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	223c      	movs	r2, #60	; 0x3c
 8004848:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3301      	adds	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b05      	cmp	r3, #5
 8004854:	ddf4      	ble.n	8004840 <DiagonalCube_Handle+0xb8>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8004856:	4b4e      	ldr	r3, [pc, #312]	; (8004990 <DiagonalCube_Handle+0x208>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	484d      	ldr	r0, [pc, #308]	; (8004994 <DiagonalCube_Handle+0x20c>)
 800485e:	f001 fd43 	bl	80062e8 <TransmitData>
				for (int i = 0; i < 8; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e007      	b.n	8004878 <DiagonalCube_Handle+0xf0>
				{
					column_diagonal[i] = 0;
 8004868:	4a4a      	ldr	r2, [pc, #296]	; (8004994 <DiagonalCube_Handle+0x20c>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3301      	adds	r3, #1
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b07      	cmp	r3, #7
 800487c:	ddf4      	ble.n	8004868 <DiagonalCube_Handle+0xe0>
				}
				size_layer = LARGE;
 800487e:	4b42      	ldr	r3, [pc, #264]	; (8004988 <DiagonalCube_Handle+0x200>)
 8004880:	2202      	movs	r2, #2
 8004882:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004884:	f7fd f82e 	bl	80018e4 <HAL_GetTick>
 8004888:	4603      	mov	r3, r0
 800488a:	4a40      	ldr	r2, [pc, #256]	; (800498c <DiagonalCube_Handle+0x204>)
 800488c:	6013      	str	r3, [r2, #0]
			}
			break;
 800488e:	e071      	b.n	8004974 <DiagonalCube_Handle+0x1ec>
		case LARGE:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004890:	f7fd f828 	bl	80018e4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <DiagonalCube_Handle+0x204>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2296      	movs	r2, #150	; 0x96
 800489e:	4293      	cmp	r3, r2
 80048a0:	d36a      	bcc.n	8004978 <DiagonalCube_Handle+0x1f0>
			{
				layer_diagonal = 0x42;
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <DiagonalCube_Handle+0x208>)
 80048a4:	2242      	movs	r2, #66	; 0x42
 80048a6:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80048a8:	2301      	movs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e007      	b.n	80048be <DiagonalCube_Handle+0x136>
				{
					column_diagonal[i] = 0x7e;
 80048ae:	4a39      	ldr	r2, [pc, #228]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	227e      	movs	r2, #126	; 0x7e
 80048b6:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	ddf4      	ble.n	80048ae <DiagonalCube_Handle+0x126>
				}
				TransmitData(column_diagonal, layer_diagonal);
 80048c4:	4b32      	ldr	r3, [pc, #200]	; (8004990 <DiagonalCube_Handle+0x208>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	4832      	ldr	r0, [pc, #200]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80048cc:	f001 fd0c 	bl	80062e8 <TransmitData>
				for (int i = 0; i < 8; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	e007      	b.n	80048e6 <DiagonalCube_Handle+0x15e>
				{
					column_diagonal[i] = 0;
 80048d6:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <DiagonalCube_Handle+0x20c>)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4413      	add	r3, r2
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	ddf4      	ble.n	80048d6 <DiagonalCube_Handle+0x14e>
				}
				size_layer = LARGEST;
 80048ec:	4b26      	ldr	r3, [pc, #152]	; (8004988 <DiagonalCube_Handle+0x200>)
 80048ee:	2203      	movs	r2, #3
 80048f0:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80048f2:	f7fc fff7 	bl	80018e4 <HAL_GetTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4a24      	ldr	r2, [pc, #144]	; (800498c <DiagonalCube_Handle+0x204>)
 80048fa:	6013      	str	r3, [r2, #0]
			}
			break;
 80048fc:	e03c      	b.n	8004978 <DiagonalCube_Handle+0x1f0>
		case LARGEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80048fe:	f7fc fff1 	bl	80018e4 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <DiagonalCube_Handle+0x204>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2296      	movs	r2, #150	; 0x96
 800490c:	4293      	cmp	r3, r2
 800490e:	d335      	bcc.n	800497c <DiagonalCube_Handle+0x1f4>
			{
				layer_diagonal= 0x81;
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <DiagonalCube_Handle+0x208>)
 8004912:	2281      	movs	r2, #129	; 0x81
 8004914:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	e007      	b.n	800492c <DiagonalCube_Handle+0x1a4>
				{
					column_diagonal[i] = 0xff;
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <DiagonalCube_Handle+0x20c>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	22ff      	movs	r2, #255	; 0xff
 8004924:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3301      	adds	r3, #1
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b07      	cmp	r3, #7
 8004930:	ddf4      	ble.n	800491c <DiagonalCube_Handle+0x194>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <DiagonalCube_Handle+0x208>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4816      	ldr	r0, [pc, #88]	; (8004994 <DiagonalCube_Handle+0x20c>)
 800493a:	f001 fcd5 	bl	80062e8 <TransmitData>
				for (int i = 0; i < 8; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	e007      	b.n	8004954 <DiagonalCube_Handle+0x1cc>
				{
					column_diagonal[i] = 0;
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <DiagonalCube_Handle+0x20c>)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4413      	add	r3, r2
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b07      	cmp	r3, #7
 8004958:	ddf4      	ble.n	8004944 <DiagonalCube_Handle+0x1bc>
				}
				size_layer = SMALLEST;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <DiagonalCube_Handle+0x200>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004960:	f7fc ffc0 	bl	80018e4 <HAL_GetTick>
 8004964:	4603      	mov	r3, r0
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <DiagonalCube_Handle+0x204>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			break;
 800496a:	e007      	b.n	800497c <DiagonalCube_Handle+0x1f4>
		default:
			break;
 800496c:	bf00      	nop
 800496e:	e006      	b.n	800497e <DiagonalCube_Handle+0x1f6>
			break;
 8004970:	bf00      	nop
 8004972:	e004      	b.n	800497e <DiagonalCube_Handle+0x1f6>
			break;
 8004974:	bf00      	nop
 8004976:	e002      	b.n	800497e <DiagonalCube_Handle+0x1f6>
			break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <DiagonalCube_Handle+0x1f6>
			break;
 800497c:	bf00      	nop
	}
}
 800497e:	bf00      	nop
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200001e4 	.word	0x200001e4
 800498c:	200001f0 	.word	0x200001f0
 8004990:	200001e5 	.word	0x200001e5
 8004994:	200001e8 	.word	0x200001e8

08004998 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <DiagonalCube_Set_State+0x40>)
 80049a0:	2204      	movs	r2, #4
 80049a2:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	e007      	b.n	80049ba <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <DiagonalCube_Set_State+0x44>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b07      	cmp	r3, #7
 80049be:	ddf4      	ble.n	80049aa <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <DiagonalCube_Set_State+0x48>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <DiagonalCube_Set_State+0x4c>)
 80049c8:	2203      	movs	r2, #3
 80049ca:	701a      	strb	r2, [r3, #0]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000010 	.word	0x20000010
 80049dc:	200001e8 	.word	0x200001e8
 80049e0:	200001e5 	.word	0x200001e5
 80049e4:	200001e4 	.word	0x200001e4

080049e8 <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
 80049f2:	460b      	mov	r3, r1
 80049f4:	71bb      	strb	r3, [r7, #6]
 80049f6:	4613      	mov	r3, r2
 80049f8:	717b      	strb	r3, [r7, #5]
	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 80049fa:	797b      	ldrb	r3, [r7, #5]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	79bb      	ldrb	r3, [r7, #6]
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	441a      	add	r2, r3
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	4413      	add	r3, r2
 8004a08:	10db      	asrs	r3, r3, #3
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <DisplayLed+0xf8>)
 8004a0e:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 8004a10:	797b      	ldrb	r3, [r7, #5]
 8004a12:	019b      	lsls	r3, r3, #6
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	79bb      	ldrb	r3, [r7, #6]
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4413      	add	r3, r2
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <DisplayLed+0xf8>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <DisplayLed+0xfc>)
 8004a34:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <DisplayLed+0xf8>)
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	797b      	ldrb	r3, [r7, #5]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <DisplayLed+0x100>)
 8004a46:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 8004a48:	797b      	ldrb	r3, [r7, #5]
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d103      	bne.n	8004a56 <DisplayLed+0x6e>
 8004a4e:	4b27      	ldr	r3, [pc, #156]	; (8004aec <DisplayLed+0x104>)
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e006      	b.n	8004a64 <DisplayLed+0x7c>
	else IClayer = 0x01 <<  z;
 8004a56:	797b      	ldrb	r3, [r7, #5]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	4b22      	ldr	r3, [pc, #136]	; (8004aec <DisplayLed+0x104>)
 8004a62:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 8004a64:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <DisplayLed+0xfc>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	fa03 f102 	lsl.w	r1, r3, r2
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <DisplayLed+0x100>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	b2c9      	uxtb	r1, r1
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <DisplayLed+0x108>)
 8004a7a:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <DisplayLed+0x104>)
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <DisplayLed+0x10c>)
 8004a82:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e009      	b.n	8004a9e <DisplayLed+0xb6>
	{
		dataOut[i] = ICcolumn[i-1];
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	1e5a      	subs	r2, r3, #1
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	4917      	ldr	r1, [pc, #92]	; (8004af0 <DisplayLed+0x108>)
 8004a92:	5c89      	ldrb	r1, [r1, r2]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <DisplayLed+0x10c>)
 8004a96:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d9f2      	bls.n	8004a8a <DisplayLed+0xa2>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2140      	movs	r1, #64	; 0x40
 8004aa8:	4813      	ldr	r0, [pc, #76]	; (8004af8 <DisplayLed+0x110>)
 8004aaa:	f7fd fc90 	bl	80023ce <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8004aae:	2364      	movs	r3, #100	; 0x64
 8004ab0:	2209      	movs	r2, #9
 8004ab2:	4910      	ldr	r1, [pc, #64]	; (8004af4 <DisplayLed+0x10c>)
 8004ab4:	4811      	ldr	r0, [pc, #68]	; (8004afc <DisplayLed+0x114>)
 8004ab6:	f7fe f9f7 	bl	8002ea8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8004aba:	2201      	movs	r2, #1
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	480e      	ldr	r0, [pc, #56]	; (8004af8 <DisplayLed+0x110>)
 8004ac0:	f7fd fc85 	bl	80023ce <HAL_GPIO_WritePin>
	IClayer = 0;
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <DisplayLed+0x104>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0;
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <DisplayLed+0x100>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <DisplayLed+0x108>)
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	5499      	strb	r1, [r3, r2]
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200001fd 	.word	0x200001fd
 8004ae4:	200001fe 	.word	0x200001fe
 8004ae8:	200001ff 	.word	0x200001ff
 8004aec:	200001fc 	.word	0x200001fc
 8004af0:	200001f4 	.word	0x200001f4
 8004af4:	20000200 	.word	0x20000200
 8004af8:	40010800 	.word	0x40010800
 8004afc:	200000c4 	.word	0x200000c4

08004b00 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 8004b06:	4b93      	ldr	r3, [pc, #588]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	71da      	strb	r2, [r3, #7]
 8004b0c:	4b91      	ldr	r3, [pc, #580]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b0e:	79da      	ldrb	r2, [r3, #7]
 8004b10:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b12:	719a      	strb	r2, [r3, #6]
 8004b14:	4b8f      	ldr	r3, [pc, #572]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b16:	799a      	ldrb	r2, [r3, #6]
 8004b18:	4b8e      	ldr	r3, [pc, #568]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b1a:	715a      	strb	r2, [r3, #5]
 8004b1c:	4b8d      	ldr	r3, [pc, #564]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b1e:	795a      	ldrb	r2, [r3, #5]
 8004b20:	4b8c      	ldr	r3, [pc, #560]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b22:	711a      	strb	r2, [r3, #4]
 8004b24:	4b8b      	ldr	r3, [pc, #556]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b26:	791a      	ldrb	r2, [r3, #4]
 8004b28:	4b8a      	ldr	r3, [pc, #552]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b2a:	70da      	strb	r2, [r3, #3]
 8004b2c:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b2e:	78da      	ldrb	r2, [r3, #3]
 8004b30:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b32:	709a      	strb	r2, [r3, #2]
 8004b34:	4b87      	ldr	r3, [pc, #540]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b36:	789a      	ldrb	r2, [r3, #2]
 8004b38:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b3a:	705a      	strb	r2, [r3, #1]
 8004b3c:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b3e:	785a      	ldrb	r2, [r3, #1]
 8004b40:	4b84      	ldr	r3, [pc, #528]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b42:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8004b44:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b46:	227e      	movs	r2, #126	; 0x7e
 8004b48:	739a      	strb	r2, [r3, #14]
 8004b4a:	4b82      	ldr	r3, [pc, #520]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b4c:	7b9a      	ldrb	r2, [r3, #14]
 8004b4e:	4b81      	ldr	r3, [pc, #516]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b50:	735a      	strb	r2, [r3, #13]
 8004b52:	4b80      	ldr	r3, [pc, #512]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b54:	7b5a      	ldrb	r2, [r3, #13]
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b58:	731a      	strb	r2, [r3, #12]
 8004b5a:	4b7e      	ldr	r3, [pc, #504]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b5c:	7b1a      	ldrb	r2, [r3, #12]
 8004b5e:	4b7d      	ldr	r3, [pc, #500]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b60:	72da      	strb	r2, [r3, #11]
 8004b62:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b64:	7ada      	ldrb	r2, [r3, #11]
 8004b66:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b68:	729a      	strb	r2, [r3, #10]
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b6c:	7a9a      	ldrb	r2, [r3, #10]
 8004b6e:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b70:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 8004b72:	4b78      	ldr	r3, [pc, #480]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b74:	223c      	movs	r2, #60	; 0x3c
 8004b76:	755a      	strb	r2, [r3, #21]
 8004b78:	4b76      	ldr	r3, [pc, #472]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b7a:	7d5a      	ldrb	r2, [r3, #21]
 8004b7c:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b7e:	751a      	strb	r2, [r3, #20]
 8004b80:	4b74      	ldr	r3, [pc, #464]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b82:	7d1a      	ldrb	r2, [r3, #20]
 8004b84:	4b73      	ldr	r3, [pc, #460]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b86:	74da      	strb	r2, [r3, #19]
 8004b88:	4b72      	ldr	r3, [pc, #456]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b8a:	7cda      	ldrb	r2, [r3, #19]
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b8e:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 8004b90:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b92:	2218      	movs	r2, #24
 8004b94:	771a      	strb	r2, [r3, #28]
 8004b96:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b98:	7f1a      	ldrb	r2, [r3, #28]
 8004b9a:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004b9c:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 8004b9e:	4b6e      	ldr	r3, [pc, #440]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 8004ba4:	4b6c      	ldr	r3, [pc, #432]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004ba6:	227e      	movs	r2, #126	; 0x7e
 8004ba8:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 8004baa:	4b6b      	ldr	r3, [pc, #428]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004bac:	223c      	movs	r2, #60	; 0x3c
 8004bae:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 8004bb0:	4b69      	ldr	r3, [pc, #420]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004bb2:	2218      	movs	r2, #24
 8004bb4:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 8004bb6:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <GrowShrinkCube_Handle+0x25c>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	f200 80bc 	bhi.w	8004d38 <GrowShrinkCube_Handle+0x238>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <GrowShrinkCube_Handle+0xc8>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004c33 	.word	0x08004c33
 8004bd0:	08004c8b 	.word	0x08004c8b
 8004bd4:	08004ce3 	.word	0x08004ce3
	{
		case TWO_X_TWO_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004bd8:	f7fc fe84 	bl	80018e4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b60      	ldr	r3, [pc, #384]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	22c8      	movs	r2, #200	; 0xc8
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f0c0 80a8 	bcc.w	8004d3c <GrowShrinkCube_Handle+0x23c>
			{
				for (int j = 0; j < 8; j++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e013      	b.n	8004c1a <GrowShrinkCube_Handle+0x11a>
				{
					temp[j] = column_growshrink[3][j];
 8004bf2:	4a58      	ldr	r2, [pc, #352]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3318      	adds	r3, #24
 8004bfa:	7819      	ldrb	r1, [r3, #0]
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	4413      	add	r3, r2
 8004c02:	460a      	mov	r2, r1
 8004c04:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004c08:	78da      	ldrb	r2, [r3, #3]
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fb6a 	bl	80062e8 <TransmitData>
				for (int j = 0; j < 8; j++)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	dde8      	ble.n	8004bf2 <GrowShrinkCube_Handle+0xf2>
				}
				time_start = HAL_GetTick();
 8004c20:	f7fc fe60 	bl	80018e4 <HAL_GetTick>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4a4e      	ldr	r2, [pc, #312]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004c28:	6013      	str	r3, [r2, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <GrowShrinkCube_Handle+0x25c>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c30:	e084      	b.n	8004d3c <GrowShrinkCube_Handle+0x23c>
		case FOUR_X_FOUR_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004c32:	f7fc fe57 	bl	80018e4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	22c8      	movs	r2, #200	; 0xc8
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d37d      	bcc.n	8004d40 <GrowShrinkCube_Handle+0x240>
			{
				for (int j = 0; j < 8; j++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e013      	b.n	8004c72 <GrowShrinkCube_Handle+0x172>
				{
					temp[j] = column_growshrink[2][j];
 8004c4a:	4a42      	ldr	r2, [pc, #264]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3310      	adds	r3, #16
 8004c52:	7819      	ldrb	r1, [r3, #0]
 8004c54:	463a      	mov	r2, r7
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 8004c5e:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004c60:	789a      	ldrb	r2, [r3, #2]
 8004c62:	463b      	mov	r3, r7
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fb3e 	bl	80062e8 <TransmitData>
				for (int j = 0; j < 8; j++)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b07      	cmp	r3, #7
 8004c76:	dde8      	ble.n	8004c4a <GrowShrinkCube_Handle+0x14a>
				}
				time_start = HAL_GetTick();
 8004c78:	f7fc fe34 	bl	80018e4 <HAL_GetTick>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004c80:	6013      	str	r3, [r2, #0]
				size_cube = SIX_X_SIX_CUBE;
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <GrowShrinkCube_Handle+0x25c>)
 8004c84:	2202      	movs	r2, #2
 8004c86:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c88:	e05a      	b.n	8004d40 <GrowShrinkCube_Handle+0x240>
		case SIX_X_SIX_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004c8a:	f7fc fe2b 	bl	80018e4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	22c8      	movs	r2, #200	; 0xc8
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d353      	bcc.n	8004d44 <GrowShrinkCube_Handle+0x244>
			{
				for (int j = 0; j < 8; j++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e013      	b.n	8004cca <GrowShrinkCube_Handle+0x1ca>
				{
					temp[j] = column_growshrink[1][j];
 8004ca2:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3308      	adds	r3, #8
 8004caa:	7819      	ldrb	r1, [r3, #0]
 8004cac:	463a      	mov	r2, r7
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004cb8:	785a      	ldrb	r2, [r3, #1]
 8004cba:	463b      	mov	r3, r7
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fb12 	bl	80062e8 <TransmitData>
				for (int j = 0; j < 8; j++)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	dde8      	ble.n	8004ca2 <GrowShrinkCube_Handle+0x1a2>
				}
				time_start = HAL_GetTick();
 8004cd0:	f7fc fe08 	bl	80018e4 <HAL_GetTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004cd8:	6013      	str	r3, [r2, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <GrowShrinkCube_Handle+0x25c>)
 8004cdc:	2203      	movs	r2, #3
 8004cde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004ce0:	e030      	b.n	8004d44 <GrowShrinkCube_Handle+0x244>
		case EIGHT_X_EIGHT_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004ce2:	f7fc fdff 	bl	80018e4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	22c8      	movs	r2, #200	; 0xc8
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d329      	bcc.n	8004d48 <GrowShrinkCube_Handle+0x248>
			{
				for (int j = 0; j < 8; j++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	e012      	b.n	8004d20 <GrowShrinkCube_Handle+0x220>
				{
					temp[j] = column_growshrink[0][j];
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <GrowShrinkCube_Handle+0x254>)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4413      	add	r3, r2
 8004d00:	7819      	ldrb	r1, [r3, #0]
 8004d02:	463a      	mov	r2, r7
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4413      	add	r3, r2
 8004d08:	460a      	mov	r2, r1
 8004d0a:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <GrowShrinkCube_Handle+0x258>)
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	463b      	mov	r3, r7
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 fae7 	bl	80062e8 <TransmitData>
				for (int j = 0; j < 8; j++)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	dde9      	ble.n	8004cfa <GrowShrinkCube_Handle+0x1fa>
				}
				time_start = HAL_GetTick();
 8004d26:	f7fc fddd 	bl	80018e4 <HAL_GetTick>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <GrowShrinkCube_Handle+0x260>)
 8004d2e:	6013      	str	r3, [r2, #0]
				size_cube = TWO_X_TWO_CUBE;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <GrowShrinkCube_Handle+0x25c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004d36:	e007      	b.n	8004d48 <GrowShrinkCube_Handle+0x248>
		default:
			break;
 8004d38:	bf00      	nop
 8004d3a:	e006      	b.n	8004d4a <GrowShrinkCube_Handle+0x24a>
			break;
 8004d3c:	bf00      	nop
 8004d3e:	e004      	b.n	8004d4a <GrowShrinkCube_Handle+0x24a>
			break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <GrowShrinkCube_Handle+0x24a>
			break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <GrowShrinkCube_Handle+0x24a>
			break;
 8004d48:	bf00      	nop
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000210 	.word	0x20000210
 8004d58:	20000230 	.word	0x20000230
 8004d5c:	20000209 	.word	0x20000209
 8004d60:	2000020c 	.word	0x2000020c

08004d64 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <GrowShrinkCube_Set_State+0x5c>)
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	e018      	b.n	8004da8 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <GrowShrinkCube_Set_State+0x60>)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004d80:	2300      	movs	r3, #0
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	e00a      	b.n	8004d9c <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <GrowShrinkCube_Set_State+0x64>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	441a      	add	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b07      	cmp	r3, #7
 8004da0:	ddf1      	ble.n	8004d86 <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3301      	adds	r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	dde3      	ble.n	8004d76 <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <GrowShrinkCube_Set_State+0x68>)
 8004db0:	2203      	movs	r2, #3
 8004db2:	701a      	strb	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000010 	.word	0x20000010
 8004dc4:	20000230 	.word	0x20000230
 8004dc8:	20000210 	.word	0x20000210
 8004dcc:	20000209 	.word	0x20000209

08004dd0 <Btn_press_Callback>:

Cube_Status currentEffect = WAVE_EFFECT;


void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
	switch(currentEffect){
 8004ddc:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <Btn_press_Callback+0x98>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b0a      	cmp	r3, #10
 8004de2:	d83c      	bhi.n	8004e5e <Btn_press_Callback+0x8e>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <Btn_press_Callback+0x1c>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e33 	.word	0x08004e33
 8004e00:	08004e39 	.word	0x08004e39
 8004e04:	08004e3f 	.word	0x08004e3f
 8004e08:	08004e45 	.word	0x08004e45
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004e57 	.word	0x08004e57
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <Btn_press_Callback+0x98>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
		break;
 8004e1e:	e01f      	b.n	8004e60 <Btn_press_Callback+0x90>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8004e20:	f000 fa1e 	bl	8005260 <PlaneCube_Set_State>
		break;
 8004e24:	e01c      	b.n	8004e60 <Btn_press_Callback+0x90>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8004e26:	f7ff ff9d 	bl	8004d64 <GrowShrinkCube_Set_State>
		break;
 8004e2a:	e019      	b.n	8004e60 <Btn_press_Callback+0x90>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8004e2c:	f7ff fdb4 	bl	8004998 <DiagonalCube_Set_State>
		break;
 8004e30:	e016      	b.n	8004e60 <Btn_press_Callback+0x90>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8004e32:	f7fe fe81 	bl	8003b38 <AroundEdgeCube_Set_State>
		break;
 8004e36:	e013      	b.n	8004e60 <Btn_press_Callback+0x90>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8004e38:	f7ff fa2a 	bl	8004290 <CountDownCube_Set_Sate>
		break;
 8004e3c:	e010      	b.n	8004e60 <Btn_press_Callback+0x90>
	case COUNT_DOWN_CUBE:
		RandomRainCube_Set_State();
 8004e3e:	f000 fa9f 	bl	8005380 <RandomRainCube_Set_State>
		break;
 8004e42:	e00d      	b.n	8004e60 <Btn_press_Callback+0x90>
	case RANDOM_RAIN_CUBE:
		SpiralCube_Set_State();
 8004e44:	f001 fa2c 	bl	80062a0 <SpiralCube_Set_State>
		break;
 8004e48:	e00a      	b.n	8004e60 <Btn_press_Callback+0x90>
	case SPIRAL_CUBE:
		WaveCube_Set_State();
 8004e4a:	f001 fb77 	bl	800653c <WaveCube_Set_State>
		break;
 8004e4e:	e007      	b.n	8004e60 <Btn_press_Callback+0x90>
	case WAVE_EFFECT:
		SidewavesEffect_Set_State();
 8004e50:	f000 fbfc 	bl	800564c <SidewavesEffect_Set_State>
		break;
 8004e54:	e004      	b.n	8004e60 <Btn_press_Callback+0x90>
	case SIDE_WAVES_EFFECT:
		currentEffect = TURN_OFF_ALL_LEDS;
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <Btn_press_Callback+0x98>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
		break;
 8004e5c:	e000      	b.n	8004e60 <Btn_press_Callback+0x90>
	default:
		break;
 8004e5e:	bf00      	nop
	}
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000010 	.word	0x20000010

08004e6c <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
	switch (cube_state) {
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b0a      	cmp	r3, #10
 8004e7a:	d83b      	bhi.n	8004ef4 <Led_cube_Handle+0x88>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <Led_cube_Handle+0x18>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004ebd 	.word	0x08004ebd
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004ecf 	.word	0x08004ecf
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004edb 	.word	0x08004edb
 8004ea4:	08004ee3 	.word	0x08004ee3
 8004ea8:	08004ee9 	.word	0x08004ee9
 8004eac:	08004eef 	.word	0x08004eef
		case TURN_OFF_ALL_LEDS:
			clearCube();
 8004eb0:	f7fe ff21 	bl	8003cf6 <clearCube>
			break;
 8004eb4:	e01f      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case TURN_ON_ALL_LEDS:
			lightCube();
 8004eb6:	f000 f823 	bl	8004f00 <lightCube>
			break;
 8004eba:	e01c      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle();
 8004ebc:	f000 f844 	bl	8004f48 <PlaneCube_Handle>
			break;
 8004ec0:	e019      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle();
 8004ec2:	f7ff fe1d 	bl	8004b00 <GrowShrinkCube_Handle>
			break;
 8004ec6:	e016      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle();
 8004ec8:	f7ff fc5e 	bl	8004788 <DiagonalCube_Handle>
			break;
 8004ecc:	e013      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle();
 8004ece:	f7fe fdc9 	bl	8003a64 <AroundEdgeCube_Handle>
			break;
 8004ed2:	e010      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle();
 8004ed4:	f7fe ff2c 	bl	8003d30 <CountDownCube_Handle>
			break;
 8004ed8:	e00d      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case RANDOM_RAIN_CUBE:
			RandomRainCube_Handle(10);
 8004eda:	200a      	movs	r0, #10
 8004edc:	f000 f9f2 	bl	80052c4 <RandomRainCube_Handle>
			break;
 8004ee0:	e009      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case SPIRAL_CUBE:
			SpiralCube_Handle();
 8004ee2:	f000 fbd3 	bl	800568c <SpiralCube_Handle>
			break;
 8004ee6:	e006      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case WAVE_EFFECT:
			WaveCube_Handle();
 8004ee8:	f001 fa36 	bl	8006358 <WaveCube_Handle>
			break;
 8004eec:	e003      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		case SIDE_WAVES_EFFECT:
			SidewavesEffect_Handle();
 8004eee:	f000 fa5b 	bl	80053a8 <SidewavesEffect_Handle>
			break;
 8004ef2:	e000      	b.n	8004ef6 <Led_cube_Handle+0x8a>
		default:
			break;
 8004ef4:	bf00      	nop
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop

08004f00 <lightCube>:
#include "light_cube.h"

void lightCube()
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
	uint8_t column[8] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8004f06:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <lightCube+0x44>)
 8004f08:	1d3b      	adds	r3, r7, #4
 8004f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f0e:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0;  i < 8; i++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e00c      	b.n	8004f32 <lightCube+0x32>
	{
		TransmitData(column, 0x80 >> i);
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	fa42 f303 	asr.w	r3, r2, r3
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f9de 	bl	80062e8 <TransmitData>
	for (int i = 0;  i < 8; i++)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b07      	cmp	r3, #7
 8004f36:	ddef      	ble.n	8004f18 <lightCube+0x18>
	}
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	08009480 	.word	0x08009480

08004f48 <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
	switch(way_state){
 8004f4e:	4b9a      	ldr	r3, [pc, #616]	; (80051b8 <PlaneCube_Handle+0x270>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	f000 80fd 	beq.w	8005152 <PlaneCube_Handle+0x20a>
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f300 8169 	bgt.w	8005230 <PlaneCube_Handle+0x2e8>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <PlaneCube_Handle+0x20>
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d06a      	beq.n	800503c <PlaneCube_Handle+0xf4>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8004f66:	e163      	b.n	8005230 <PlaneCube_Handle+0x2e8>
		layer_plane = 0xff;
 8004f68:	4b94      	ldr	r3, [pc, #592]	; (80051bc <PlaneCube_Handle+0x274>)
 8004f6a:	22ff      	movs	r2, #255	; 0xff
 8004f6c:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004f6e:	f7fc fcb9 	bl	80018e4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b92      	ldr	r3, [pc, #584]	; (80051c0 <PlaneCube_Handle+0x278>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2264      	movs	r2, #100	; 0x64
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	f0c0 8159 	bcc.w	8005234 <PlaneCube_Handle+0x2ec>
			if (way)
 8004f82:	4b90      	ldr	r3, [pc, #576]	; (80051c4 <PlaneCube_Handle+0x27c>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d026      	beq.n	8004fd8 <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <PlaneCube_Handle+0x280>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a8f      	ldr	r2, [pc, #572]	; (80051cc <PlaneCube_Handle+0x284>)
 8004f90:	21ff      	movs	r1, #255	; 0xff
 8004f92:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004f94:	4b89      	ldr	r3, [pc, #548]	; (80051bc <PlaneCube_Handle+0x274>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	488c      	ldr	r0, [pc, #560]	; (80051cc <PlaneCube_Handle+0x284>)
 8004f9c:	f001 f9a4 	bl	80062e8 <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8004fa0:	4b8a      	ldr	r3, [pc, #552]	; (80051cc <PlaneCube_Handle+0x284>)
 8004fa2:	79db      	ldrb	r3, [r3, #7]
 8004fa4:	2bff      	cmp	r3, #255	; 0xff
 8004fa6:	d103      	bne.n	8004fb0 <PlaneCube_Handle+0x68>
 8004fa8:	4b86      	ldr	r3, [pc, #536]	; (80051c4 <PlaneCube_Handle+0x27c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e004      	b.n	8004fba <PlaneCube_Handle+0x72>
				else i++;
 8004fb0:	4b85      	ldr	r3, [pc, #532]	; (80051c8 <PlaneCube_Handle+0x280>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a84      	ldr	r2, [pc, #528]	; (80051c8 <PlaneCube_Handle+0x280>)
 8004fb8:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e007      	b.n	8004fd0 <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 8004fc0:	4a82      	ldr	r2, [pc, #520]	; (80051cc <PlaneCube_Handle+0x284>)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b07      	cmp	r3, #7
 8004fd4:	ddf4      	ble.n	8004fc0 <PlaneCube_Handle+0x78>
 8004fd6:	e02b      	b.n	8005030 <PlaneCube_Handle+0xe8>
				column_plane[i] = 0xff;
 8004fd8:	4b7b      	ldr	r3, [pc, #492]	; (80051c8 <PlaneCube_Handle+0x280>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a7b      	ldr	r2, [pc, #492]	; (80051cc <PlaneCube_Handle+0x284>)
 8004fde:	21ff      	movs	r1, #255	; 0xff
 8004fe0:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004fe2:	4b76      	ldr	r3, [pc, #472]	; (80051bc <PlaneCube_Handle+0x274>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4878      	ldr	r0, [pc, #480]	; (80051cc <PlaneCube_Handle+0x284>)
 8004fea:	f001 f97d 	bl	80062e8 <TransmitData>
				if (column_plane[0] == 0xff)
 8004fee:	4b77      	ldr	r3, [pc, #476]	; (80051cc <PlaneCube_Handle+0x284>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	d109      	bne.n	800500a <PlaneCube_Handle+0xc2>
						way = 1;
 8004ff6:	4b73      	ldr	r3, [pc, #460]	; (80051c4 <PlaneCube_Handle+0x27c>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
						i = 0;
 8004ffc:	4b72      	ldr	r3, [pc, #456]	; (80051c8 <PlaneCube_Handle+0x280>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8005002:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <PlaneCube_Handle+0x270>)
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e004      	b.n	8005014 <PlaneCube_Handle+0xcc>
				else i--;
 800500a:	4b6f      	ldr	r3, [pc, #444]	; (80051c8 <PlaneCube_Handle+0x280>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3b01      	subs	r3, #1
 8005010:	4a6d      	ldr	r2, [pc, #436]	; (80051c8 <PlaneCube_Handle+0x280>)
 8005012:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8005014:	2300      	movs	r3, #0
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e007      	b.n	800502a <PlaneCube_Handle+0xe2>
					column_plane[j] = 0;
 800501a:	4a6c      	ldr	r2, [pc, #432]	; (80051cc <PlaneCube_Handle+0x284>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4413      	add	r3, r2
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	3301      	adds	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b07      	cmp	r3, #7
 800502e:	ddf4      	ble.n	800501a <PlaneCube_Handle+0xd2>
			timer = HAL_GetTick();
 8005030:	f7fc fc58 	bl	80018e4 <HAL_GetTick>
 8005034:	4603      	mov	r3, r0
 8005036:	4a62      	ldr	r2, [pc, #392]	; (80051c0 <PlaneCube_Handle+0x278>)
 8005038:	6013      	str	r3, [r2, #0]
		break;
 800503a:	e0fb      	b.n	8005234 <PlaneCube_Handle+0x2ec>
		layer_plane = 0xff;
 800503c:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <PlaneCube_Handle+0x274>)
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8005042:	4b62      	ldr	r3, [pc, #392]	; (80051cc <PlaneCube_Handle+0x284>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <PlaneCube_Handle+0x134>
			for (int j = 0; j < 8; j++)
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e007      	b.n	8005060 <PlaneCube_Handle+0x118>
				column_plane[j] = 1;
 8005050:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <PlaneCube_Handle+0x284>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b07      	cmp	r3, #7
 8005064:	ddf4      	ble.n	8005050 <PlaneCube_Handle+0x108>
			TransmitData(column_plane, layer_plane);
 8005066:	4b55      	ldr	r3, [pc, #340]	; (80051bc <PlaneCube_Handle+0x274>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4857      	ldr	r0, [pc, #348]	; (80051cc <PlaneCube_Handle+0x284>)
 800506e:	f001 f93b 	bl	80062e8 <TransmitData>
			timer = HAL_GetTick();
 8005072:	f7fc fc37 	bl	80018e4 <HAL_GetTick>
 8005076:	4603      	mov	r3, r0
 8005078:	4a51      	ldr	r2, [pc, #324]	; (80051c0 <PlaneCube_Handle+0x278>)
 800507a:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 800507c:	f7fc fc32 	bl	80018e4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	4b4f      	ldr	r3, [pc, #316]	; (80051c0 <PlaneCube_Handle+0x278>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2264      	movs	r2, #100	; 0x64
 800508a:	4293      	cmp	r3, r2
 800508c:	f0c0 80d4 	bcc.w	8005238 <PlaneCube_Handle+0x2f0>
			if (way)
 8005090:	4b4c      	ldr	r3, [pc, #304]	; (80051c4 <PlaneCube_Handle+0x27c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d021      	beq.n	80050dc <PlaneCube_Handle+0x194>
				for (int j = 0; j < 8; j++)
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e00d      	b.n	80050ba <PlaneCube_Handle+0x172>
					column_plane[j] <<= 1;
 800509e:	4a4b      	ldr	r2, [pc, #300]	; (80051cc <PlaneCube_Handle+0x284>)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	b2d9      	uxtb	r1, r3
 80050aa:	4a48      	ldr	r2, [pc, #288]	; (80051cc <PlaneCube_Handle+0x284>)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	460a      	mov	r2, r1
 80050b2:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3301      	adds	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b07      	cmp	r3, #7
 80050be:	ddee      	ble.n	800509e <PlaneCube_Handle+0x156>
				TransmitData(column_plane, layer_plane);
 80050c0:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <PlaneCube_Handle+0x274>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4841      	ldr	r0, [pc, #260]	; (80051cc <PlaneCube_Handle+0x284>)
 80050c8:	f001 f90e 	bl	80062e8 <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 80050cc:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <PlaneCube_Handle+0x284>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b80      	cmp	r3, #128	; 0x80
 80050d2:	d138      	bne.n	8005146 <PlaneCube_Handle+0x1fe>
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <PlaneCube_Handle+0x27c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e034      	b.n	8005146 <PlaneCube_Handle+0x1fe>
				for (int j = 0; j < 8; j++)
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e00d      	b.n	80050fe <PlaneCube_Handle+0x1b6>
					column_plane[j] >>= 1;
 80050e2:	4a3a      	ldr	r2, [pc, #232]	; (80051cc <PlaneCube_Handle+0x284>)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	b2d9      	uxtb	r1, r3
 80050ee:	4a37      	ldr	r2, [pc, #220]	; (80051cc <PlaneCube_Handle+0x284>)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	460a      	mov	r2, r1
 80050f6:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b07      	cmp	r3, #7
 8005102:	ddee      	ble.n	80050e2 <PlaneCube_Handle+0x19a>
				TransmitData(column_plane, layer_plane);
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <PlaneCube_Handle+0x274>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4619      	mov	r1, r3
 800510a:	4830      	ldr	r0, [pc, #192]	; (80051cc <PlaneCube_Handle+0x284>)
 800510c:	f001 f8ec 	bl	80062e8 <TransmitData>
				if (column_plane[0] == 0x00)
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <PlaneCube_Handle+0x284>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <PlaneCube_Handle+0x1fe>
					for (int j = 0; j < 8; j++)
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	e007      	b.n	800512e <PlaneCube_Handle+0x1e6>
						column_plane[j] = 0xff;
 800511e:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <PlaneCube_Handle+0x284>)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4413      	add	r3, r2
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3301      	adds	r3, #1
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b07      	cmp	r3, #7
 8005132:	ddf4      	ble.n	800511e <PlaneCube_Handle+0x1d6>
					layer_plane = 0;
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <PlaneCube_Handle+0x274>)
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
					way = 1;
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <PlaneCube_Handle+0x27c>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <PlaneCube_Handle+0x270>)
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005146:	f7fc fbcd 	bl	80018e4 <HAL_GetTick>
 800514a:	4603      	mov	r3, r0
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <PlaneCube_Handle+0x278>)
 800514e:	6013      	str	r3, [r2, #0]
		break;
 8005150:	e072      	b.n	8005238 <PlaneCube_Handle+0x2f0>
		if(layer_plane == 0)
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <PlaneCube_Handle+0x274>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <PlaneCube_Handle+0x22e>
			layer_plane = 1;
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <PlaneCube_Handle+0x274>)
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8005160:	4b16      	ldr	r3, [pc, #88]	; (80051bc <PlaneCube_Handle+0x274>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	4819      	ldr	r0, [pc, #100]	; (80051cc <PlaneCube_Handle+0x284>)
 8005168:	f001 f8be 	bl	80062e8 <TransmitData>
			timer = HAL_GetTick();
 800516c:	f7fc fbba 	bl	80018e4 <HAL_GetTick>
 8005170:	4603      	mov	r3, r0
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <PlaneCube_Handle+0x278>)
 8005174:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8005176:	f7fc fbb5 	bl	80018e4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <PlaneCube_Handle+0x278>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2264      	movs	r2, #100	; 0x64
 8005184:	4293      	cmp	r3, r2
 8005186:	d359      	bcc.n	800523c <PlaneCube_Handle+0x2f4>
			if(way)
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <PlaneCube_Handle+0x27c>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01f      	beq.n	80051d0 <PlaneCube_Handle+0x288>
				layer_plane <<= 1;
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <PlaneCube_Handle+0x274>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <PlaneCube_Handle+0x274>)
 800519a:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <PlaneCube_Handle+0x274>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	480a      	ldr	r0, [pc, #40]	; (80051cc <PlaneCube_Handle+0x284>)
 80051a4:	f001 f8a0 	bl	80062e8 <TransmitData>
				if(layer_plane == 0x80) way = 0;
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <PlaneCube_Handle+0x274>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d139      	bne.n	8005224 <PlaneCube_Handle+0x2dc>
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <PlaneCube_Handle+0x27c>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e035      	b.n	8005224 <PlaneCube_Handle+0x2dc>
 80051b8:	20000234 	.word	0x20000234
 80051bc:	2000023c 	.word	0x2000023c
 80051c0:	20000238 	.word	0x20000238
 80051c4:	20000235 	.word	0x20000235
 80051c8:	20000248 	.word	0x20000248
 80051cc:	20000240 	.word	0x20000240
				layer_plane >>= 1;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <PlaneCube_Handle+0x300>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <PlaneCube_Handle+0x300>)
 80051da:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <PlaneCube_Handle+0x300>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	481a      	ldr	r0, [pc, #104]	; (800524c <PlaneCube_Handle+0x304>)
 80051e4:	f001 f880 	bl	80062e8 <TransmitData>
				if(layer_plane == 0x01)
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <PlaneCube_Handle+0x300>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d119      	bne.n	8005224 <PlaneCube_Handle+0x2dc>
					for (int j = 0; j < 8; j++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	e007      	b.n	8005206 <PlaneCube_Handle+0x2be>
						column_plane[j] = 0;
 80051f6:	4a15      	ldr	r2, [pc, #84]	; (800524c <PlaneCube_Handle+0x304>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3301      	adds	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b07      	cmp	r3, #7
 800520a:	ddf4      	ble.n	80051f6 <PlaneCube_Handle+0x2ae>
					i = 0;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <PlaneCube_Handle+0x308>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
					way = 1;
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <PlaneCube_Handle+0x30c>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <PlaneCube_Handle+0x310>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <PlaneCube_Handle+0x300>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005224:	f7fc fb5e 	bl	80018e4 <HAL_GetTick>
 8005228:	4603      	mov	r3, r0
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <PlaneCube_Handle+0x314>)
 800522c:	6013      	str	r3, [r2, #0]
		break;
 800522e:	e005      	b.n	800523c <PlaneCube_Handle+0x2f4>
		break;
 8005230:	bf00      	nop
 8005232:	e004      	b.n	800523e <PlaneCube_Handle+0x2f6>
		break;
 8005234:	bf00      	nop
 8005236:	e002      	b.n	800523e <PlaneCube_Handle+0x2f6>
		break;
 8005238:	bf00      	nop
 800523a:	e000      	b.n	800523e <PlaneCube_Handle+0x2f6>
		break;
 800523c:	bf00      	nop
	}
}
 800523e:	bf00      	nop
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000023c 	.word	0x2000023c
 800524c:	20000240 	.word	0x20000240
 8005250:	20000248 	.word	0x20000248
 8005254:	20000235 	.word	0x20000235
 8005258:	20000234 	.word	0x20000234
 800525c:	20000238 	.word	0x20000238

08005260 <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <PlaneCube_Set_State+0x4c>)
 8005268:	2202      	movs	r2, #2
 800526a:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 800526c:	2300      	movs	r3, #0
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	e007      	b.n	8005282 <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8005272:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <PlaneCube_Set_State+0x50>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b07      	cmp	r3, #7
 8005286:	ddf4      	ble.n	8005272 <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <PlaneCube_Set_State+0x54>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
	way = 1;
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <PlaneCube_Set_State+0x58>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <PlaneCube_Set_State+0x5c>)
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <PlaneCube_Set_State+0x60>)
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000010 	.word	0x20000010
 80052b0:	20000240 	.word	0x20000240
 80052b4:	20000248 	.word	0x20000248
 80052b8:	20000235 	.word	0x20000235
 80052bc:	2000023c 	.word	0x2000023c
 80052c0:	20000234 	.word	0x20000234

080052c4 <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static uint8_t x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle(uint8_t rain_times)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	if (HAL_GetTick() - time_rain >= 50)
 80052ce:	f7fc fb09 	bl	80018e4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <RandomRainCube_Handle+0xac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b31      	cmp	r3, #49	; 0x31
 80052dc:	d912      	bls.n	8005304 <RandomRainCube_Handle+0x40>
	{
			if (z == 0) z = 7;
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <RandomRainCube_Handle+0xb0>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <RandomRainCube_Handle+0x2a>
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <RandomRainCube_Handle+0xb0>)
 80052e8:	2207      	movs	r2, #7
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e005      	b.n	80052fa <RandomRainCube_Handle+0x36>
			else z--;
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <RandomRainCube_Handle+0xb0>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <RandomRainCube_Handle+0xb0>)
 80052f8:	701a      	strb	r2, [r3, #0]
			time_rain = HAL_GetTick();
 80052fa:	f7fc faf3 	bl	80018e4 <HAL_GetTick>
 80052fe:	4603      	mov	r3, r0
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <RandomRainCube_Handle+0xac>)
 8005302:	6013      	str	r3, [r2, #0]
	}

	for (uint8_t n = 0; n < rain_times; n++)
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e029      	b.n	800535e <RandomRainCube_Handle+0x9a>
	{
		if (z == 7)
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <RandomRainCube_Handle+0xb0>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b07      	cmp	r3, #7
 8005310:	d119      	bne.n	8005346 <RandomRainCube_Handle+0x82>
		{
			x = rand() % 8;
 8005312:	f001 f99d 	bl	8006650 <rand>
 8005316:	4603      	mov	r3, r0
 8005318:	425a      	negs	r2, r3
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	f002 0207 	and.w	r2, r2, #7
 8005322:	bf58      	it	pl
 8005324:	4253      	negpl	r3, r2
 8005326:	b2da      	uxtb	r2, r3
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <RandomRainCube_Handle+0xb4>)
 800532a:	701a      	strb	r2, [r3, #0]
			y = rand() % 8;
 800532c:	f001 f990 	bl	8006650 <rand>
 8005330:	4603      	mov	r3, r0
 8005332:	425a      	negs	r2, r3
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	f002 0207 	and.w	r2, r2, #7
 800533c:	bf58      	it	pl
 800533e:	4253      	negpl	r3, r2
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <RandomRainCube_Handle+0xb8>)
 8005344:	701a      	strb	r2, [r3, #0]
		}

		DisplayLed(x, y, z);
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <RandomRainCube_Handle+0xb4>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	4a0c      	ldr	r2, [pc, #48]	; (800537c <RandomRainCube_Handle+0xb8>)
 800534c:	7811      	ldrb	r1, [r2, #0]
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <RandomRainCube_Handle+0xb0>)
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fb48 	bl	80049e8 <DisplayLed>
	for (uint8_t n = 0; n < rain_times; n++)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	3301      	adds	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3d1      	bcc.n	800530a <RandomRainCube_Handle+0x46>
	}

}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000250 	.word	0x20000250
 8005374:	2000024e 	.word	0x2000024e
 8005378:	2000024c 	.word	0x2000024c
 800537c:	2000024d 	.word	0x2000024d

08005380 <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 8005384:	f7fc faae 	bl	80018e4 <HAL_GetTick>
 8005388:	4603      	mov	r3, r0
 800538a:	4618      	mov	r0, r3
 800538c:	f001 f932 	bl	80065f4 <srand>
	z = 7;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <RandomRainCube_Set_State+0x20>)
 8005392:	2207      	movs	r2, #7
 8005394:	701a      	strb	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <RandomRainCube_Set_State+0x24>)
 8005398:	2207      	movs	r2, #7
 800539a:	701a      	strb	r2, [r3, #0]
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	2000024e 	.word	0x2000024e
 80053a4:	20000010 	.word	0x20000010

080053a8 <SidewavesEffect_Handle>:
float xo; // Tọa độ điểm gốc O
float yo;
float r;

void SidewavesEffect_Handle()
{
 80053a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 80053b0:	4b9b      	ldr	r3, [pc, #620]	; (8005620 <SidewavesEffect_Handle+0x278>)
 80053b2:	4a9c      	ldr	r2, [pc, #624]	; (8005624 <SidewavesEffect_Handle+0x27c>)
 80053b4:	601a      	str	r2, [r3, #0]
	T = 1000; // Chu kỳ
 80053b6:	4b9c      	ldr	r3, [pc, #624]	; (8005628 <SidewavesEffect_Handle+0x280>)
 80053b8:	4a9c      	ldr	r2, [pc, #624]	; (800562c <SidewavesEffect_Handle+0x284>)
 80053ba:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 80053bc:	4b9c      	ldr	r3, [pc, #624]	; (8005630 <SidewavesEffect_Handle+0x288>)
 80053be:	4a9d      	ldr	r2, [pc, #628]	; (8005634 <SidewavesEffect_Handle+0x28c>)
 80053c0:	601a      	str	r2, [r3, #0]
	uint32_t t = HAL_GetTick(); // Lấy thời gian
 80053c2:	f7fc fa8f 	bl	80018e4 <HAL_GetTick>
 80053c6:	60b8      	str	r0, [r7, #8]
	xo = ro*cos(2*PI*t/To) + 3.5; // Cho điểm O quay
 80053c8:	4b98      	ldr	r3, [pc, #608]	; (800562c <SidewavesEffect_Handle+0x284>)
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fb f824 	bl	8000418 <__aeabi_f2d>
 80053d0:	4604      	mov	r4, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7fa fffd 	bl	80003d4 <__aeabi_ui2d>
 80053da:	a38f      	add	r3, pc, #572	; (adr r3, 8005618 <SidewavesEffect_Handle+0x270>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f7fb f872 	bl	80004c8 <__aeabi_dmul>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4690      	mov	r8, r2
 80053ea:	4699      	mov	r9, r3
 80053ec:	4b92      	ldr	r3, [pc, #584]	; (8005638 <SidewavesEffect_Handle+0x290>)
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb f812 	bl	8000418 <__aeabi_f2d>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb f98e 	bl	800071c <__aeabi_ddiv>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	f002 f960 	bl	80076cc <cos>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4620      	mov	r0, r4
 8005412:	4629      	mov	r1, r5
 8005414:	f7fb f858 	bl	80004c8 <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	4b85      	ldr	r3, [pc, #532]	; (800563c <SidewavesEffect_Handle+0x294>)
 8005426:	f7fa fe99 	bl	800015c <__adddf3>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	f7fb fb41 	bl	8000ab8 <__aeabi_d2f>
 8005436:	4603      	mov	r3, r0
 8005438:	4a81      	ldr	r2, [pc, #516]	; (8005640 <SidewavesEffect_Handle+0x298>)
 800543a:	6013      	str	r3, [r2, #0]
	yo = ro*sin(2*PI*t/To) + 3.5;
 800543c:	4b7b      	ldr	r3, [pc, #492]	; (800562c <SidewavesEffect_Handle+0x284>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7fa ffea 	bl	8000418 <__aeabi_f2d>
 8005444:	4604      	mov	r4, r0
 8005446:	460d      	mov	r5, r1
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f7fa ffc3 	bl	80003d4 <__aeabi_ui2d>
 800544e:	a372      	add	r3, pc, #456	; (adr r3, 8005618 <SidewavesEffect_Handle+0x270>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fb f838 	bl	80004c8 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4690      	mov	r8, r2
 800545e:	4699      	mov	r9, r3
 8005460:	4b75      	ldr	r3, [pc, #468]	; (8005638 <SidewavesEffect_Handle+0x290>)
 8005462:	4618      	mov	r0, r3
 8005464:	f7fa ffd8 	bl	8000418 <__aeabi_f2d>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb f954 	bl	800071c <__aeabi_ddiv>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	f002 f96c 	bl	8007758 <sin>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	f7fb f81e 	bl	80004c8 <__aeabi_dmul>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4610      	mov	r0, r2
 8005492:	4619      	mov	r1, r3
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	4b68      	ldr	r3, [pc, #416]	; (800563c <SidewavesEffect_Handle+0x294>)
 800549a:	f7fa fe5f 	bl	800015c <__adddf3>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	f7fb fb07 	bl	8000ab8 <__aeabi_d2f>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a65      	ldr	r2, [pc, #404]	; (8005644 <SidewavesEffect_Handle+0x29c>)
 80054ae:	6013      	str	r3, [r2, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	e0a3      	b.n	80055fe <SidewavesEffect_Handle+0x256>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 80054b6:	2300      	movs	r3, #0
 80054b8:	73bb      	strb	r3, [r7, #14]
 80054ba:	e099      	b.n	80055f0 <SidewavesEffect_Handle+0x248>
	    {
//	        r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt(pow(x - xo, 2) + pow(y - yo, 2))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 80054bc:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <SidewavesEffect_Handle+0x288>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fa ffa9 	bl	8000418 <__aeabi_f2d>
 80054c6:	4604      	mov	r4, r0
 80054c8:	460d      	mov	r5, r1
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f7fa ff82 	bl	80003d4 <__aeabi_ui2d>
 80054d0:	a351      	add	r3, pc, #324	; (adr r3, 8005618 <SidewavesEffect_Handle+0x270>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fa fff7 	bl	80004c8 <__aeabi_dmul>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4690      	mov	r8, r2
 80054e0:	4699      	mov	r9, r3
 80054e2:	4b51      	ldr	r3, [pc, #324]	; (8005628 <SidewavesEffect_Handle+0x280>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fa ff96 	bl	8000418 <__aeabi_f2d>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fb f912 	bl	800071c <__aeabi_ddiv>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4692      	mov	sl, r2
 80054fe:	469b      	mov	fp, r3
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fb fbe2 	bl	8000ccc <__aeabi_i2f>
 8005508:	4602      	mov	r2, r0
 800550a:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <SidewavesEffect_Handle+0x298>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fb fb25 	bl	8000b60 <__aeabi_fsub>
 8005516:	4603      	mov	r3, r0
 8005518:	4618      	mov	r0, r3
 800551a:	f7fa ff7d 	bl	8000418 <__aeabi_f2d>
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005526:	f002 f95d 	bl	80077e4 <pow>
 800552a:	4680      	mov	r8, r0
 800552c:	4689      	mov	r9, r1
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb fbcb 	bl	8000ccc <__aeabi_i2f>
 8005536:	4602      	mov	r2, r0
 8005538:	4b42      	ldr	r3, [pc, #264]	; (8005644 <SidewavesEffect_Handle+0x29c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f7fb fb0e 	bl	8000b60 <__aeabi_fsub>
 8005544:	4603      	mov	r3, r0
 8005546:	4618      	mov	r0, r3
 8005548:	f7fa ff66 	bl	8000418 <__aeabi_f2d>
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005554:	f002 f946 	bl	80077e4 <pow>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fa fdfc 	bl	800015c <__adddf3>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	f002 f9a2 	bl	80078b4 <sqrt>
 8005570:	a329      	add	r3, pc, #164	; (adr r3, 8005618 <SidewavesEffect_Handle+0x270>)
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	f7fa ffa7 	bl	80004c8 <__aeabi_dmul>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4690      	mov	r8, r2
 8005580:	4699      	mov	r9, r3
 8005582:	4b27      	ldr	r3, [pc, #156]	; (8005620 <SidewavesEffect_Handle+0x278>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fa ff46 	bl	8000418 <__aeabi_f2d>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb f8c2 	bl	800071c <__aeabi_ddiv>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	f7fa fdda 	bl	8000158 <__aeabi_dsub>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	f002 f88e 	bl	80076cc <cos>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fa ff86 	bl	80004c8 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <SidewavesEffect_Handle+0x2a0>)
 80055ca:	f7fa fdc7 	bl	800015c <__adddf3>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7fb fa4f 	bl	8000a78 <__aeabi_d2uiz>
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 80055de:	79fa      	ldrb	r2, [r7, #7]
 80055e0:	7bf9      	ldrb	r1, [r7, #15]
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff f9ff 	bl	80049e8 <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	3301      	adds	r3, #1
 80055ee:	73bb      	strb	r3, [r7, #14]
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	f67f af62 	bls.w	80054bc <SidewavesEffect_Handle+0x114>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	3301      	adds	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b07      	cmp	r3, #7
 8005602:	f67f af58 	bls.w	80054b6 <SidewavesEffect_Handle+0x10e>
	    }
	}
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005612:	bf00      	nop
 8005614:	f3af 8000 	nop.w
 8005618:	51eb851f 	.word	0x51eb851f
 800561c:	40191eb8 	.word	0x40191eb8
 8005620:	20000254 	.word	0x20000254
 8005624:	40e00000 	.word	0x40e00000
 8005628:	20000258 	.word	0x20000258
 800562c:	447a0000 	.word	0x447a0000
 8005630:	2000025c 	.word	0x2000025c
 8005634:	40600000 	.word	0x40600000
 8005638:	45fa0000 	.word	0x45fa0000
 800563c:	400c0000 	.word	0x400c0000
 8005640:	20000260 	.word	0x20000260
 8005644:	20000264 	.word	0x20000264
 8005648:	40100000 	.word	0x40100000

0800564c <SidewavesEffect_Set_State>:

void SidewavesEffect_Set_State()
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8005650:	4b08      	ldr	r3, [pc, #32]	; (8005674 <SidewavesEffect_Set_State+0x28>)
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <SidewavesEffect_Set_State+0x2c>)
 8005654:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <SidewavesEffect_Set_State+0x30>)
 8005658:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800565c:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <SidewavesEffect_Set_State+0x34>)
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <SidewavesEffect_Set_State+0x38>)
 8005662:	601a      	str	r2, [r3, #0]
	currentEffect = SIDE_WAVES_EFFECT;
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <SidewavesEffect_Set_State+0x3c>)
 8005666:	220a      	movs	r2, #10
 8005668:	701a      	strb	r2, [r3, #0]
	clearCube();
 800566a:	f7fe fb44 	bl	8003cf6 <clearCube>
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000254 	.word	0x20000254
 8005678:	40e00000 	.word	0x40e00000
 800567c:	20000258 	.word	0x20000258
 8005680:	2000025c 	.word	0x2000025c
 8005684:	40600000 	.word	0x40600000
 8005688:	20000010 	.word	0x20000010

0800568c <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
	switch (directRotate) {
 8005690:	4b22      	ldr	r3, [pc, #136]	; (800571c <SpiralCube_Handle+0x90>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01f      	beq.n	80056d8 <SpiralCube_Handle+0x4c>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d13b      	bne.n	8005714 <SpiralCube_Handle+0x88>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 800569c:	4b20      	ldr	r3, [pc, #128]	; (8005720 <SpiralCube_Handle+0x94>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d817      	bhi.n	80056d4 <SpiralCube_Handle+0x48>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <SpiralCube_Handle+0x20>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c3 	.word	0x080056c3
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056cf 	.word	0x080056cf
			{
				case ROLL_BIGGEST:
					RollBiggestCounterClockWise_Handle();
 80056bc:	f000 f832 	bl	8005724 <RollBiggestCounterClockWise_Handle>
					break;
 80056c0:	e009      	b.n	80056d6 <SpiralCube_Handle+0x4a>
				case ROLL_BIGGER:
					RollBiggerCounterClockWise_Handle();
 80056c2:	f000 f8ef 	bl	80058a4 <RollBiggerCounterClockWise_Handle>
					break;
 80056c6:	e006      	b.n	80056d6 <SpiralCube_Handle+0x4a>
				case ROLL_MEDIUM:
					RollMediumCounterClockWise_Handle();
 80056c8:	f000 f9ac 	bl	8005a24 <RollMediumCounterClockWise_Handle>
					break;
 80056cc:	e003      	b.n	80056d6 <SpiralCube_Handle+0x4a>
				case ROLL_SMALL:
					RollSmallCounterClockWise_Handle();
 80056ce:	f000 fa69 	bl	8005ba4 <RollSmallCounterClockWise_Handle>
					break;
 80056d2:	e000      	b.n	80056d6 <SpiralCube_Handle+0x4a>
				default:
					break;
 80056d4:	bf00      	nop
			}
			break;
 80056d6:	e01e      	b.n	8005716 <SpiralCube_Handle+0x8a>
		case CLOCKWISE:
			switch (rollSize)
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <SpiralCube_Handle+0x94>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d817      	bhi.n	8005710 <SpiralCube_Handle+0x84>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <SpiralCube_Handle+0x5c>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	080056f9 	.word	0x080056f9
 80056ec:	080056ff 	.word	0x080056ff
 80056f0:	08005705 	.word	0x08005705
 80056f4:	0800570b 	.word	0x0800570b
			{
				case ROLL_BIGGEST:
					RollBiggestClockWise_Handle();
 80056f8:	f000 faf2 	bl	8005ce0 <RollBiggestClockWise_Handle>
					break;
 80056fc:	e009      	b.n	8005712 <SpiralCube_Handle+0x86>
				case ROLL_BIGGER:
					RollBiggerClockWise_Handle();
 80056fe:	f000 fbaf 	bl	8005e60 <RollBiggerClockWise_Handle>
					break;
 8005702:	e006      	b.n	8005712 <SpiralCube_Handle+0x86>
				case ROLL_MEDIUM:
					RollMediumClockWise_Handle();
 8005704:	f000 fc6c 	bl	8005fe0 <RollMediumClockWise_Handle>
					break;
 8005708:	e003      	b.n	8005712 <SpiralCube_Handle+0x86>
				case ROLL_SMALL:
					RollSmallClockWise_Handle();
 800570a:	f000 fd29 	bl	8006160 <RollSmallClockWise_Handle>
					break;
 800570e:	e000      	b.n	8005712 <SpiralCube_Handle+0x86>
				default:
					break;
 8005710:	bf00      	nop
			}
			break;
 8005712:	e000      	b.n	8005716 <SpiralCube_Handle+0x8a>
		default:
			break;
 8005714:	bf00      	nop
	}
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	2000026a 	.word	0x2000026a
 8005720:	20000268 	.word	0x20000268

08005724 <RollBiggestCounterClockWise_Handle>:

void RollBiggestCounterClockWise_Handle()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <RollBiggestCounterClockWise_Handle+0x16c>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	f200 80a3 	bhi.w	8005878 <RollBiggestCounterClockWise_Handle+0x154>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <RollBiggestCounterClockWise_Handle+0x14>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005749 	.word	0x08005749
 800573c:	08005795 	.word	0x08005795
 8005740:	080057df 	.word	0x080057df
 8005744:	08005829 	.word	0x08005829
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005748:	f7fc f8cc 	bl	80018e4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	223c      	movs	r2, #60	; 0x3c
 8005756:	4293      	cmp	r3, r2
 8005758:	f0c0 8090 	bcc.w	800587c <RollBiggestCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800575c:	4b4e      	ldr	r3, [pc, #312]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4a4e      	ldr	r2, [pc, #312]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 8005762:	7811      	ldrb	r1, [r2, #0]
 8005764:	2208      	movs	r2, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff f93e 	bl	80049e8 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b07      	cmp	r3, #7
 8005772:	d103      	bne.n	800577c <RollBiggestCounterClockWise_Handle+0x58>
 8005774:	4b46      	ldr	r3, [pc, #280]	; (8005890 <RollBiggestCounterClockWise_Handle+0x16c>)
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e005      	b.n	8005788 <RollBiggestCounterClockWise_Handle+0x64>
				else y++;
 800577c:	4b47      	ldr	r3, [pc, #284]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b45      	ldr	r3, [pc, #276]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 8005786:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005788:	f7fc f8ac 	bl	80018e4 <HAL_GetTick>
 800578c:	4603      	mov	r3, r0
 800578e:	4a41      	ldr	r2, [pc, #260]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 8005790:	6013      	str	r3, [r2, #0]
			}
			break;
 8005792:	e073      	b.n	800587c <RollBiggestCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005794:	f7fc f8a6 	bl	80018e4 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	223c      	movs	r2, #60	; 0x3c
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d36c      	bcc.n	8005880 <RollBiggestCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80057a6:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 80057ac:	7811      	ldrb	r1, [r2, #0]
 80057ae:	2208      	movs	r2, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff f919 	bl	80049e8 <DisplayLed>
				if (x == 7) axisDirection = Y_AXIS_2;
 80057b6:	4b38      	ldr	r3, [pc, #224]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	d103      	bne.n	80057c6 <RollBiggestCounterClockWise_Handle+0xa2>
 80057be:	4b34      	ldr	r3, [pc, #208]	; (8005890 <RollBiggestCounterClockWise_Handle+0x16c>)
 80057c0:	2202      	movs	r2, #2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e005      	b.n	80057d2 <RollBiggestCounterClockWise_Handle+0xae>
				else x++;
 80057c6:	4b34      	ldr	r3, [pc, #208]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4b32      	ldr	r3, [pc, #200]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 80057d0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80057d2:	f7fc f887 	bl	80018e4 <HAL_GetTick>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 80057da:	6013      	str	r3, [r2, #0]
			}
			break;
 80057dc:	e050      	b.n	8005880 <RollBiggestCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80057de:	f7fc f881 	bl	80018e4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	223c      	movs	r2, #60	; 0x3c
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d349      	bcc.n	8005884 <RollBiggestCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	4a29      	ldr	r2, [pc, #164]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 80057f6:	7811      	ldrb	r1, [r2, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f8f4 	bl	80049e8 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 8005800:	4b26      	ldr	r3, [pc, #152]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <RollBiggestCounterClockWise_Handle+0xec>
 8005808:	4b21      	ldr	r3, [pc, #132]	; (8005890 <RollBiggestCounterClockWise_Handle+0x16c>)
 800580a:	2203      	movs	r2, #3
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e005      	b.n	800581c <RollBiggestCounterClockWise_Handle+0xf8>
				else y--;
 8005810:	4b22      	ldr	r3, [pc, #136]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 800581a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800581c:	f7fc f862 	bl	80018e4 <HAL_GetTick>
 8005820:	4603      	mov	r3, r0
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 8005824:	6013      	str	r3, [r2, #0]
			}
			break;
 8005826:	e02d      	b.n	8005884 <RollBiggestCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005828:	f7fc f85c 	bl	80018e4 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	4b19      	ldr	r3, [pc, #100]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	223c      	movs	r2, #60	; 0x3c
 8005836:	4293      	cmp	r3, r2
 8005838:	d326      	bcc.n	8005888 <RollBiggestCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800583a:	4b17      	ldr	r3, [pc, #92]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <RollBiggestCounterClockWise_Handle+0x178>)
 8005840:	7811      	ldrb	r1, [r2, #0]
 8005842:	2208      	movs	r2, #8
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff f8cf 	bl	80049e8 <DisplayLed>
				if (x == 1)
 800584a:	4b13      	ldr	r3, [pc, #76]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d106      	bne.n	8005860 <RollBiggestCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <RollBiggestCounterClockWise_Handle+0x16c>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <RollBiggestCounterClockWise_Handle+0x17c>)
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e005      	b.n	800586c <RollBiggestCounterClockWise_Handle+0x148>
				}
				else x--;
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	3b01      	subs	r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <RollBiggestCounterClockWise_Handle+0x174>)
 800586a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800586c:	f7fc f83a 	bl	80018e4 <HAL_GetTick>
 8005870:	4603      	mov	r3, r0
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <RollBiggestCounterClockWise_Handle+0x170>)
 8005874:	6013      	str	r3, [r2, #0]
			}
			break;
 8005876:	e007      	b.n	8005888 <RollBiggestCounterClockWise_Handle+0x164>
		default:
			break;
 8005878:	bf00      	nop
 800587a:	e006      	b.n	800588a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 800587c:	bf00      	nop
 800587e:	e004      	b.n	800588a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8005880:	bf00      	nop
 8005882:	e002      	b.n	800588a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8005888:	bf00      	nop
	}
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000269 	.word	0x20000269
 8005894:	20000270 	.word	0x20000270
 8005898:	2000026b 	.word	0x2000026b
 800589c:	2000026c 	.word	0x2000026c
 80058a0:	20000268 	.word	0x20000268

080058a4 <RollBiggerCounterClockWise_Handle>:

void RollBiggerCounterClockWise_Handle()
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
	switch (axisDirection)
 80058a8:	4b59      	ldr	r3, [pc, #356]	; (8005a10 <RollBiggerCounterClockWise_Handle+0x16c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	f200 80a3 	bhi.w	80059f8 <RollBiggerCounterClockWise_Handle+0x154>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <RollBiggerCounterClockWise_Handle+0x14>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	08005915 	.word	0x08005915
 80058c0:	0800595f 	.word	0x0800595f
 80058c4:	080059a9 	.word	0x080059a9
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80058c8:	f7fc f80c 	bl	80018e4 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	223c      	movs	r2, #60	; 0x3c
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f0c0 8090 	bcc.w	80059fc <RollBiggerCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80058dc:	4b4e      	ldr	r3, [pc, #312]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 80058e2:	7811      	ldrb	r1, [r2, #0]
 80058e4:	2208      	movs	r2, #8
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff f87e 	bl	80049e8 <DisplayLed>
				if (y  == 6) axisDirection = X_AXIS_1;
 80058ec:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d103      	bne.n	80058fc <RollBiggerCounterClockWise_Handle+0x58>
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <RollBiggerCounterClockWise_Handle+0x16c>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e005      	b.n	8005908 <RollBiggerCounterClockWise_Handle+0x64>
				else y++;
 80058fc:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b45      	ldr	r3, [pc, #276]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 8005906:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005908:	f7fb ffec 	bl	80018e4 <HAL_GetTick>
 800590c:	4603      	mov	r3, r0
 800590e:	4a41      	ldr	r2, [pc, #260]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 8005910:	6013      	str	r3, [r2, #0]
			}
			break;
 8005912:	e073      	b.n	80059fc <RollBiggerCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005914:	f7fb ffe6 	bl	80018e4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	223c      	movs	r2, #60	; 0x3c
 8005922:	4293      	cmp	r3, r2
 8005924:	d36c      	bcc.n	8005a00 <RollBiggerCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005926:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 800592c:	7811      	ldrb	r1, [r2, #0]
 800592e:	2208      	movs	r2, #8
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff f859 	bl	80049e8 <DisplayLed>
				if (x  == 6) axisDirection = Y_AXIS_2;
 8005936:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d103      	bne.n	8005946 <RollBiggerCounterClockWise_Handle+0xa2>
 800593e:	4b34      	ldr	r3, [pc, #208]	; (8005a10 <RollBiggerCounterClockWise_Handle+0x16c>)
 8005940:	2202      	movs	r2, #2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e005      	b.n	8005952 <RollBiggerCounterClockWise_Handle+0xae>
				else x++;
 8005946:	4b34      	ldr	r3, [pc, #208]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 8005950:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005952:	f7fb ffc7 	bl	80018e4 <HAL_GetTick>
 8005956:	4603      	mov	r3, r0
 8005958:	4a2e      	ldr	r2, [pc, #184]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 800595a:	6013      	str	r3, [r2, #0]
			}
			break;
 800595c:	e050      	b.n	8005a00 <RollBiggerCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800595e:	f7fb ffc1 	bl	80018e4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	223c      	movs	r2, #60	; 0x3c
 800596c:	4293      	cmp	r3, r2
 800596e:	d349      	bcc.n	8005a04 <RollBiggerCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005970:	4b29      	ldr	r3, [pc, #164]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 8005976:	7811      	ldrb	r1, [r2, #0]
 8005978:	2208      	movs	r2, #8
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff f834 	bl	80049e8 <DisplayLed>
				if (y  == 1) axisDirection = X_AXIS_2;
 8005980:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d103      	bne.n	8005990 <RollBiggerCounterClockWise_Handle+0xec>
 8005988:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <RollBiggerCounterClockWise_Handle+0x16c>)
 800598a:	2203      	movs	r2, #3
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e005      	b.n	800599c <RollBiggerCounterClockWise_Handle+0xf8>
				else y--;
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 800599a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800599c:	f7fb ffa2 	bl	80018e4 <HAL_GetTick>
 80059a0:	4603      	mov	r3, r0
 80059a2:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 80059a4:	6013      	str	r3, [r2, #0]
			}
			break;
 80059a6:	e02d      	b.n	8005a04 <RollBiggerCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80059a8:	f7fb ff9c 	bl	80018e4 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	223c      	movs	r2, #60	; 0x3c
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d326      	bcc.n	8005a08 <RollBiggerCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80059ba:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <RollBiggerCounterClockWise_Handle+0x178>)
 80059c0:	7811      	ldrb	r1, [r2, #0]
 80059c2:	2208      	movs	r2, #8
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff f80f 	bl	80049e8 <DisplayLed>
				if (x  == 2)
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d106      	bne.n	80059e0 <RollBiggerCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <RollBiggerCounterClockWise_Handle+0x16c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <RollBiggerCounterClockWise_Handle+0x17c>)
 80059da:	2202      	movs	r2, #2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e005      	b.n	80059ec <RollBiggerCounterClockWise_Handle+0x148>
				}
				else x--;
 80059e0:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <RollBiggerCounterClockWise_Handle+0x174>)
 80059ea:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80059ec:	f7fb ff7a 	bl	80018e4 <HAL_GetTick>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <RollBiggerCounterClockWise_Handle+0x170>)
 80059f4:	6013      	str	r3, [r2, #0]
			}
			break;
 80059f6:	e007      	b.n	8005a08 <RollBiggerCounterClockWise_Handle+0x164>
		default:
			break;
 80059f8:	bf00      	nop
 80059fa:	e006      	b.n	8005a0a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 80059fc:	bf00      	nop
 80059fe:	e004      	b.n	8005a0a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005a08:	bf00      	nop
	}
}
 8005a0a:	bf00      	nop
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000269 	.word	0x20000269
 8005a14:	20000270 	.word	0x20000270
 8005a18:	2000026b 	.word	0x2000026b
 8005a1c:	2000026c 	.word	0x2000026c
 8005a20:	20000268 	.word	0x20000268

08005a24 <RollMediumCounterClockWise_Handle>:

void RollMediumCounterClockWise_Handle()
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <RollMediumCounterClockWise_Handle+0x16c>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	f200 80a3 	bhi.w	8005b78 <RollMediumCounterClockWise_Handle+0x154>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <RollMediumCounterClockWise_Handle+0x14>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005adf 	.word	0x08005adf
 8005a44:	08005b29 	.word	0x08005b29
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005a48:	f7fb ff4c 	bl	80018e4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	223c      	movs	r2, #60	; 0x3c
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f0c0 8090 	bcc.w	8005b7c <RollMediumCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005a5c:	4b4e      	ldr	r3, [pc, #312]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	4a4e      	ldr	r2, [pc, #312]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005a62:	7811      	ldrb	r1, [r2, #0]
 8005a64:	2208      	movs	r2, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ffbe 	bl	80049e8 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8005a6c:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	d103      	bne.n	8005a7c <RollMediumCounterClockWise_Handle+0x58>
 8005a74:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <RollMediumCounterClockWise_Handle+0x16c>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e005      	b.n	8005a88 <RollMediumCounterClockWise_Handle+0x64>
				else y++;
 8005a7c:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	4b45      	ldr	r3, [pc, #276]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005a86:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005a88:	f7fb ff2c 	bl	80018e4 <HAL_GetTick>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a41      	ldr	r2, [pc, #260]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005a90:	6013      	str	r3, [r2, #0]
			}
			break;
 8005a92:	e073      	b.n	8005b7c <RollMediumCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005a94:	f7fb ff26 	bl	80018e4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	223c      	movs	r2, #60	; 0x3c
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d36c      	bcc.n	8005b80 <RollMediumCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005aac:	7811      	ldrb	r1, [r2, #0]
 8005aae:	2208      	movs	r2, #8
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe ff99 	bl	80049e8 <DisplayLed>
				if (x  == 5) axisDirection = Y_AXIS_2;
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d103      	bne.n	8005ac6 <RollMediumCounterClockWise_Handle+0xa2>
 8005abe:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <RollMediumCounterClockWise_Handle+0x16c>)
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e005      	b.n	8005ad2 <RollMediumCounterClockWise_Handle+0xae>
				else x++;
 8005ac6:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005ad0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005ad2:	f7fb ff07 	bl	80018e4 <HAL_GetTick>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a2e      	ldr	r2, [pc, #184]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005ada:	6013      	str	r3, [r2, #0]
			}
			break;
 8005adc:	e050      	b.n	8005b80 <RollMediumCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005ade:	f7fb ff01 	bl	80018e4 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	223c      	movs	r2, #60	; 0x3c
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d349      	bcc.n	8005b84 <RollMediumCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005af6:	7811      	ldrb	r1, [r2, #0]
 8005af8:	2208      	movs	r2, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe ff74 	bl	80049e8 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8005b00:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d103      	bne.n	8005b10 <RollMediumCounterClockWise_Handle+0xec>
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <RollMediumCounterClockWise_Handle+0x16c>)
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e005      	b.n	8005b1c <RollMediumCounterClockWise_Handle+0xf8>
				else y--;
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005b1a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005b1c:	f7fb fee2 	bl	80018e4 <HAL_GetTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005b24:	6013      	str	r3, [r2, #0]
			}
			break;
 8005b26:	e02d      	b.n	8005b84 <RollMediumCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005b28:	f7fb fedc 	bl	80018e4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	223c      	movs	r2, #60	; 0x3c
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d326      	bcc.n	8005b88 <RollMediumCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8005b3a:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <RollMediumCounterClockWise_Handle+0x178>)
 8005b40:	7811      	ldrb	r1, [r2, #0]
 8005b42:	2208      	movs	r2, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe ff4f 	bl	80049e8 <DisplayLed>
				if (x  == 3)
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d106      	bne.n	8005b60 <RollMediumCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005b52:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <RollMediumCounterClockWise_Handle+0x16c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <RollMediumCounterClockWise_Handle+0x17c>)
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e005      	b.n	8005b6c <RollMediumCounterClockWise_Handle+0x148>
				}
				else x--;
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <RollMediumCounterClockWise_Handle+0x174>)
 8005b6a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005b6c:	f7fb feba 	bl	80018e4 <HAL_GetTick>
 8005b70:	4603      	mov	r3, r0
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <RollMediumCounterClockWise_Handle+0x170>)
 8005b74:	6013      	str	r3, [r2, #0]
			}
			break;
 8005b76:	e007      	b.n	8005b88 <RollMediumCounterClockWise_Handle+0x164>

		default:
			break;
 8005b78:	bf00      	nop
 8005b7a:	e006      	b.n	8005b8a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8005b7c:	bf00      	nop
 8005b7e:	e004      	b.n	8005b8a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8005b80:	bf00      	nop
 8005b82:	e002      	b.n	8005b8a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8005b88:	bf00      	nop
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000269 	.word	0x20000269
 8005b94:	20000270 	.word	0x20000270
 8005b98:	2000026b 	.word	0x2000026b
 8005b9c:	2000026c 	.word	0x2000026c
 8005ba0:	20000268 	.word	0x20000268

08005ba4 <RollSmallCounterClockWise_Handle>:

void RollSmallCounterClockWise_Handle()
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005ba8:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <RollSmallCounterClockWise_Handle+0x124>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d050      	beq.n	8005c52 <RollSmallCounterClockWise_Handle+0xae>
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	dc7f      	bgt.n	8005cb4 <RollSmallCounterClockWise_Handle+0x110>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <RollSmallCounterClockWise_Handle+0x1a>
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d025      	beq.n	8005c08 <RollSmallCounterClockWise_Handle+0x64>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8005bbc:	e07a      	b.n	8005cb4 <RollSmallCounterClockWise_Handle+0x110>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005bbe:	f7fb fe91 	bl	80018e4 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	223c      	movs	r2, #60	; 0x3c
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d373      	bcc.n	8005cb8 <RollSmallCounterClockWise_Handle+0x114>
				DisplayLed(x, y, z);
 8005bd0:	4b3f      	ldr	r3, [pc, #252]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	4a3f      	ldr	r2, [pc, #252]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005bd6:	7811      	ldrb	r1, [r2, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe ff04 	bl	80049e8 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8005be0:	4b3c      	ldr	r3, [pc, #240]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d103      	bne.n	8005bf0 <RollSmallCounterClockWise_Handle+0x4c>
 8005be8:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <RollSmallCounterClockWise_Handle+0x124>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e005      	b.n	8005bfc <RollSmallCounterClockWise_Handle+0x58>
				else y++ ;
 8005bf0:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005bfa:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005bfc:	f7fb fe72 	bl	80018e4 <HAL_GetTick>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4a32      	ldr	r2, [pc, #200]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005c04:	6013      	str	r3, [r2, #0]
			break;
 8005c06:	e057      	b.n	8005cb8 <RollSmallCounterClockWise_Handle+0x114>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005c08:	f7fb fe6c 	bl	80018e4 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b2f      	ldr	r3, [pc, #188]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	223c      	movs	r2, #60	; 0x3c
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d350      	bcc.n	8005cbc <RollSmallCounterClockWise_Handle+0x118>
				DisplayLed(x, y, z);
 8005c1a:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	4a2d      	ldr	r2, [pc, #180]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005c20:	7811      	ldrb	r1, [r2, #0]
 8005c22:	2208      	movs	r2, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fedf 	bl	80049e8 <DisplayLed>
				if (x  == 4) axisDirection = Y_AXIS_2;
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d103      	bne.n	8005c3a <RollSmallCounterClockWise_Handle+0x96>
 8005c32:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <RollSmallCounterClockWise_Handle+0x124>)
 8005c34:	2202      	movs	r2, #2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e005      	b.n	8005c46 <RollSmallCounterClockWise_Handle+0xa2>
				else x++;
 8005c3a:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c44:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005c46:	f7fb fe4d 	bl	80018e4 <HAL_GetTick>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005c4e:	6013      	str	r3, [r2, #0]
			break;
 8005c50:	e034      	b.n	8005cbc <RollSmallCounterClockWise_Handle+0x118>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005c52:	f7fb fe47 	bl	80018e4 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	223c      	movs	r2, #60	; 0x3c
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d32d      	bcc.n	8005cc0 <RollSmallCounterClockWise_Handle+0x11c>
				DisplayLed(x, y, z);
 8005c64:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005c6a:	7811      	ldrb	r1, [r2, #0]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe feba 	bl	80049e8 <DisplayLed>
				if (y == 3)
 8005c74:	4b17      	ldr	r3, [pc, #92]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d10f      	bne.n	8005c9c <RollSmallCounterClockWise_Handle+0xf8>
					directRotate = CLOCKWISE;
 8005c7c:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <RollSmallCounterClockWise_Handle+0x134>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005c82:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <RollSmallCounterClockWise_Handle+0x124>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <RollSmallCounterClockWise_Handle+0x138>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
					y = 0;
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
					x = 7;
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <RollSmallCounterClockWise_Handle+0x12c>)
 8005c96:	2207      	movs	r2, #7
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e005      	b.n	8005ca8 <RollSmallCounterClockWise_Handle+0x104>
				else y--;
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <RollSmallCounterClockWise_Handle+0x130>)
 8005ca6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005ca8:	f7fb fe1c 	bl	80018e4 <HAL_GetTick>
 8005cac:	4603      	mov	r3, r0
 8005cae:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <RollSmallCounterClockWise_Handle+0x128>)
 8005cb0:	6013      	str	r3, [r2, #0]
			break;
 8005cb2:	e005      	b.n	8005cc0 <RollSmallCounterClockWise_Handle+0x11c>
			break;
 8005cb4:	bf00      	nop
 8005cb6:	e004      	b.n	8005cc2 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8005cb8:	bf00      	nop
 8005cba:	e002      	b.n	8005cc2 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8005cc0:	bf00      	nop
	}
}
 8005cc2:	bf00      	nop
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000269 	.word	0x20000269
 8005ccc:	20000270 	.word	0x20000270
 8005cd0:	2000026b 	.word	0x2000026b
 8005cd4:	2000026c 	.word	0x2000026c
 8005cd8:	2000026a 	.word	0x2000026a
 8005cdc:	20000268 	.word	0x20000268

08005ce0 <RollBiggestClockWise_Handle>:

void RollBiggestClockWise_Handle()
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <RollBiggestClockWise_Handle+0x16c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	f200 80a3 	bhi.w	8005e34 <RollBiggestClockWise_Handle+0x154>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <RollBiggestClockWise_Handle+0x14>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d9b 	.word	0x08005d9b
 8005d00:	08005de5 	.word	0x08005de5
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005d04:	f7fb fdee 	bl	80018e4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b51      	ldr	r3, [pc, #324]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	223c      	movs	r2, #60	; 0x3c
 8005d12:	4293      	cmp	r3, r2
 8005d14:	f0c0 8090 	bcc.w	8005e38 <RollBiggestClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005d18:	4b4e      	ldr	r3, [pc, #312]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4a4e      	ldr	r2, [pc, #312]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005d1e:	7811      	ldrb	r1, [r2, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fe60 	bl	80049e8 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 8005d28:	4b4b      	ldr	r3, [pc, #300]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	d103      	bne.n	8005d38 <RollBiggestClockWise_Handle+0x58>
 8005d30:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <RollBiggestClockWise_Handle+0x16c>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e005      	b.n	8005d44 <RollBiggestClockWise_Handle+0x64>
				else y++;
 8005d38:	4b47      	ldr	r3, [pc, #284]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	4b45      	ldr	r3, [pc, #276]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005d42:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005d44:	f7fb fdce 	bl	80018e4 <HAL_GetTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a41      	ldr	r2, [pc, #260]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005d4c:	6013      	str	r3, [r2, #0]
			}
			break;
 8005d4e:	e073      	b.n	8005e38 <RollBiggestClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005d50:	f7fb fdc8 	bl	80018e4 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b3e      	ldr	r3, [pc, #248]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	223c      	movs	r2, #60	; 0x3c
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d36c      	bcc.n	8005e3c <RollBiggestClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005d68:	7811      	ldrb	r1, [r2, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fe3b 	bl	80049e8 <DisplayLed>
				if (x == 0) axisDirection = Y_AXIS_2;
 8005d72:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <RollBiggestClockWise_Handle+0xa2>
 8005d7a:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <RollBiggestClockWise_Handle+0x16c>)
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e005      	b.n	8005d8e <RollBiggestClockWise_Handle+0xae>
				else x--;
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005d8c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005d8e:	f7fb fda9 	bl	80018e4 <HAL_GetTick>
 8005d92:	4603      	mov	r3, r0
 8005d94:	4a2e      	ldr	r2, [pc, #184]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005d96:	6013      	str	r3, [r2, #0]
			}
			break;
 8005d98:	e050      	b.n	8005e3c <RollBiggestClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005d9a:	f7fb fda3 	bl	80018e4 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	223c      	movs	r2, #60	; 0x3c
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d349      	bcc.n	8005e40 <RollBiggestClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005dac:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	4a29      	ldr	r2, [pc, #164]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005db2:	7811      	ldrb	r1, [r2, #0]
 8005db4:	2208      	movs	r2, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fe16 	bl	80049e8 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 8005dbc:	4b26      	ldr	r3, [pc, #152]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <RollBiggestClockWise_Handle+0xec>
 8005dc4:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <RollBiggestClockWise_Handle+0x16c>)
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e005      	b.n	8005dd8 <RollBiggestClockWise_Handle+0xf8>
				else y--;
 8005dcc:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005dd6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005dd8:	f7fb fd84 	bl	80018e4 <HAL_GetTick>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005de0:	6013      	str	r3, [r2, #0]
			}
			break;
 8005de2:	e02d      	b.n	8005e40 <RollBiggestClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005de4:	f7fb fd7e 	bl	80018e4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	223c      	movs	r2, #60	; 0x3c
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d326      	bcc.n	8005e44 <RollBiggestClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8005df6:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <RollBiggestClockWise_Handle+0x178>)
 8005dfc:	7811      	ldrb	r1, [r2, #0]
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fdf1 	bl	80049e8 <DisplayLed>
				if (x == 6)
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d106      	bne.n	8005e1c <RollBiggestClockWise_Handle+0x13c>
				{
					rollSize = ROLL_BIGGER;
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <RollBiggestClockWise_Handle+0x17c>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <RollBiggestClockWise_Handle+0x16c>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e005      	b.n	8005e28 <RollBiggestClockWise_Handle+0x148>
				}
				else x++;
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <RollBiggestClockWise_Handle+0x174>)
 8005e26:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005e28:	f7fb fd5c 	bl	80018e4 <HAL_GetTick>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <RollBiggestClockWise_Handle+0x170>)
 8005e30:	6013      	str	r3, [r2, #0]
			}
			break;
 8005e32:	e007      	b.n	8005e44 <RollBiggestClockWise_Handle+0x164>
		default:
			break;
 8005e34:	bf00      	nop
 8005e36:	e006      	b.n	8005e46 <RollBiggestClockWise_Handle+0x166>
			break;
 8005e38:	bf00      	nop
 8005e3a:	e004      	b.n	8005e46 <RollBiggestClockWise_Handle+0x166>
			break;
 8005e3c:	bf00      	nop
 8005e3e:	e002      	b.n	8005e46 <RollBiggestClockWise_Handle+0x166>
			break;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <RollBiggestClockWise_Handle+0x166>
			break;
 8005e44:	bf00      	nop
	}
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000269 	.word	0x20000269
 8005e50:	20000270 	.word	0x20000270
 8005e54:	2000026b 	.word	0x2000026b
 8005e58:	2000026c 	.word	0x2000026c
 8005e5c:	20000268 	.word	0x20000268

08005e60 <RollBiggerClockWise_Handle>:

void RollBiggerClockWise_Handle()
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <RollBiggerClockWise_Handle+0x16c>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	f200 80a3 	bhi.w	8005fb4 <RollBiggerClockWise_Handle+0x154>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <RollBiggerClockWise_Handle+0x14>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005f1b 	.word	0x08005f1b
 8005e80:	08005f65 	.word	0x08005f65
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005e84:	f7fb fd2e 	bl	80018e4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b51      	ldr	r3, [pc, #324]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	223c      	movs	r2, #60	; 0x3c
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f0c0 8090 	bcc.w	8005fb8 <RollBiggerClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005e98:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4a4e      	ldr	r2, [pc, #312]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005e9e:	7811      	ldrb	r1, [r2, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fda0 	bl	80049e8 <DisplayLed>
				if (y == 6) axisDirection = X_AXIS_1;
 8005ea8:	4b4b      	ldr	r3, [pc, #300]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d103      	bne.n	8005eb8 <RollBiggerClockWise_Handle+0x58>
 8005eb0:	4b46      	ldr	r3, [pc, #280]	; (8005fcc <RollBiggerClockWise_Handle+0x16c>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e005      	b.n	8005ec4 <RollBiggerClockWise_Handle+0x64>
				else y++;
 8005eb8:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005ec2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005ec4:	f7fb fd0e 	bl	80018e4 <HAL_GetTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4a41      	ldr	r2, [pc, #260]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005ecc:	6013      	str	r3, [r2, #0]
			}
			break;
 8005ece:	e073      	b.n	8005fb8 <RollBiggerClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005ed0:	f7fb fd08 	bl	80018e4 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b3e      	ldr	r3, [pc, #248]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	223c      	movs	r2, #60	; 0x3c
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d36c      	bcc.n	8005fbc <RollBiggerClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005ee2:	4b3c      	ldr	r3, [pc, #240]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	4a3c      	ldr	r2, [pc, #240]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005ee8:	7811      	ldrb	r1, [r2, #0]
 8005eea:	2208      	movs	r2, #8
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fd7b 	bl	80049e8 <DisplayLed>
				if (x == 1) axisDirection = Y_AXIS_2;
 8005ef2:	4b38      	ldr	r3, [pc, #224]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d103      	bne.n	8005f02 <RollBiggerClockWise_Handle+0xa2>
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <RollBiggerClockWise_Handle+0x16c>)
 8005efc:	2202      	movs	r2, #2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e005      	b.n	8005f0e <RollBiggerClockWise_Handle+0xae>
				else x--;
 8005f02:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b32      	ldr	r3, [pc, #200]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f0c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005f0e:	f7fb fce9 	bl	80018e4 <HAL_GetTick>
 8005f12:	4603      	mov	r3, r0
 8005f14:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005f16:	6013      	str	r3, [r2, #0]
			}
			break;
 8005f18:	e050      	b.n	8005fbc <RollBiggerClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005f1a:	f7fb fce3 	bl	80018e4 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	223c      	movs	r2, #60	; 0x3c
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d349      	bcc.n	8005fc0 <RollBiggerClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005f32:	7811      	ldrb	r1, [r2, #0]
 8005f34:	2208      	movs	r2, #8
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fd56 	bl	80049e8 <DisplayLed>
				if (y == 1) axisDirection = X_AXIS_2;
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <RollBiggerClockWise_Handle+0xec>
 8005f44:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <RollBiggerClockWise_Handle+0x16c>)
 8005f46:	2203      	movs	r2, #3
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e005      	b.n	8005f58 <RollBiggerClockWise_Handle+0xf8>
				else y--;
 8005f4c:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005f56:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005f58:	f7fb fcc4 	bl	80018e4 <HAL_GetTick>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005f60:	6013      	str	r3, [r2, #0]
			}
			break;
 8005f62:	e02d      	b.n	8005fc0 <RollBiggerClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005f64:	f7fb fcbe 	bl	80018e4 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	223c      	movs	r2, #60	; 0x3c
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d326      	bcc.n	8005fc4 <RollBiggerClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8005f76:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <RollBiggerClockWise_Handle+0x178>)
 8005f7c:	7811      	ldrb	r1, [r2, #0]
 8005f7e:	2208      	movs	r2, #8
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fd31 	bl	80049e8 <DisplayLed>
				if (x == 5)
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	d106      	bne.n	8005f9c <RollBiggerClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <RollBiggerClockWise_Handle+0x16c>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <RollBiggerClockWise_Handle+0x17c>)
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e005      	b.n	8005fa8 <RollBiggerClockWise_Handle+0x148>
				}
				else x++;
 8005f9c:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <RollBiggerClockWise_Handle+0x174>)
 8005fa6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005fa8:	f7fb fc9c 	bl	80018e4 <HAL_GetTick>
 8005fac:	4603      	mov	r3, r0
 8005fae:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <RollBiggerClockWise_Handle+0x170>)
 8005fb0:	6013      	str	r3, [r2, #0]
			}
			break;
 8005fb2:	e007      	b.n	8005fc4 <RollBiggerClockWise_Handle+0x164>
		default:
			break;
 8005fb4:	bf00      	nop
 8005fb6:	e006      	b.n	8005fc6 <RollBiggerClockWise_Handle+0x166>
			break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <RollBiggerClockWise_Handle+0x166>
			break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <RollBiggerClockWise_Handle+0x166>
			break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <RollBiggerClockWise_Handle+0x166>
			break;
 8005fc4:	bf00      	nop
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000269 	.word	0x20000269
 8005fd0:	20000270 	.word	0x20000270
 8005fd4:	2000026b 	.word	0x2000026b
 8005fd8:	2000026c 	.word	0x2000026c
 8005fdc:	20000268 	.word	0x20000268

08005fe0 <RollMediumClockWise_Handle>:

void RollMediumClockWise_Handle()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <RollMediumClockWise_Handle+0x16c>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	f200 80a3 	bhi.w	8006134 <RollMediumClockWise_Handle+0x154>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <RollMediumClockWise_Handle+0x14>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	0800609b 	.word	0x0800609b
 8006000:	080060e5 	.word	0x080060e5
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006004:	f7fb fc6e 	bl	80018e4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	4b51      	ldr	r3, [pc, #324]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	223c      	movs	r2, #60	; 0x3c
 8006012:	4293      	cmp	r3, r2
 8006014:	f0c0 8090 	bcc.w	8006138 <RollMediumClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8006018:	4b4e      	ldr	r3, [pc, #312]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	4a4e      	ldr	r2, [pc, #312]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 800601e:	7811      	ldrb	r1, [r2, #0]
 8006020:	2208      	movs	r2, #8
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fce0 	bl	80049e8 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8006028:	4b4b      	ldr	r3, [pc, #300]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b05      	cmp	r3, #5
 800602e:	d103      	bne.n	8006038 <RollMediumClockWise_Handle+0x58>
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <RollMediumClockWise_Handle+0x16c>)
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e005      	b.n	8006044 <RollMediumClockWise_Handle+0x64>
				else y++;
 8006038:	4b47      	ldr	r3, [pc, #284]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	4b45      	ldr	r3, [pc, #276]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 8006042:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006044:	f7fb fc4e 	bl	80018e4 <HAL_GetTick>
 8006048:	4603      	mov	r3, r0
 800604a:	4a41      	ldr	r2, [pc, #260]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 800604c:	6013      	str	r3, [r2, #0]
			}
			break;
 800604e:	e073      	b.n	8006138 <RollMediumClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006050:	f7fb fc48 	bl	80018e4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	223c      	movs	r2, #60	; 0x3c
 800605e:	4293      	cmp	r3, r2
 8006060:	d36c      	bcc.n	800613c <RollMediumClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006062:	4b3c      	ldr	r3, [pc, #240]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 8006068:	7811      	ldrb	r1, [r2, #0]
 800606a:	2208      	movs	r2, #8
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe fcbb 	bl	80049e8 <DisplayLed>
				if (x == 2) axisDirection = Y_AXIS_2;
 8006072:	4b38      	ldr	r3, [pc, #224]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d103      	bne.n	8006082 <RollMediumClockWise_Handle+0xa2>
 800607a:	4b34      	ldr	r3, [pc, #208]	; (800614c <RollMediumClockWise_Handle+0x16c>)
 800607c:	2202      	movs	r2, #2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e005      	b.n	800608e <RollMediumClockWise_Handle+0xae>
				else x--;
 8006082:	4b34      	ldr	r3, [pc, #208]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	3b01      	subs	r3, #1
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b32      	ldr	r3, [pc, #200]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 800608c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800608e:	f7fb fc29 	bl	80018e4 <HAL_GetTick>
 8006092:	4603      	mov	r3, r0
 8006094:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 8006096:	6013      	str	r3, [r2, #0]
			}
			break;
 8006098:	e050      	b.n	800613c <RollMediumClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800609a:	f7fb fc23 	bl	80018e4 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b2b      	ldr	r3, [pc, #172]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	223c      	movs	r2, #60	; 0x3c
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d349      	bcc.n	8006140 <RollMediumClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80060ac:	4b29      	ldr	r3, [pc, #164]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	4a29      	ldr	r2, [pc, #164]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 80060b2:	7811      	ldrb	r1, [r2, #0]
 80060b4:	2208      	movs	r2, #8
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fc96 	bl	80049e8 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 80060bc:	4b26      	ldr	r3, [pc, #152]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d103      	bne.n	80060cc <RollMediumClockWise_Handle+0xec>
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <RollMediumClockWise_Handle+0x16c>)
 80060c6:	2203      	movs	r2, #3
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e005      	b.n	80060d8 <RollMediumClockWise_Handle+0xf8>
				else y--;
 80060cc:	4b22      	ldr	r3, [pc, #136]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	4b20      	ldr	r3, [pc, #128]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 80060d6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80060d8:	f7fb fc04 	bl	80018e4 <HAL_GetTick>
 80060dc:	4603      	mov	r3, r0
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 80060e0:	6013      	str	r3, [r2, #0]
			}
			break;
 80060e2:	e02d      	b.n	8006140 <RollMediumClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80060e4:	f7fb fbfe 	bl	80018e4 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	223c      	movs	r2, #60	; 0x3c
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d326      	bcc.n	8006144 <RollMediumClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80060f6:	4b17      	ldr	r3, [pc, #92]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <RollMediumClockWise_Handle+0x178>)
 80060fc:	7811      	ldrb	r1, [r2, #0]
 80060fe:	2208      	movs	r2, #8
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fc71 	bl	80049e8 <DisplayLed>
				if (x == 4)
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b04      	cmp	r3, #4
 800610c:	d106      	bne.n	800611c <RollMediumClockWise_Handle+0x13c>
				{
					rollSize = ROLL_SMALL;
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <RollMediumClockWise_Handle+0x17c>)
 8006110:	2203      	movs	r2, #3
 8006112:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <RollMediumClockWise_Handle+0x16c>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e005      	b.n	8006128 <RollMediumClockWise_Handle+0x148>
				}
				else x++;
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <RollMediumClockWise_Handle+0x174>)
 8006126:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006128:	f7fb fbdc 	bl	80018e4 <HAL_GetTick>
 800612c:	4603      	mov	r3, r0
 800612e:	4a08      	ldr	r2, [pc, #32]	; (8006150 <RollMediumClockWise_Handle+0x170>)
 8006130:	6013      	str	r3, [r2, #0]
			}
			break;
 8006132:	e007      	b.n	8006144 <RollMediumClockWise_Handle+0x164>
		default:
			break;
 8006134:	bf00      	nop
 8006136:	e006      	b.n	8006146 <RollMediumClockWise_Handle+0x166>
			break;
 8006138:	bf00      	nop
 800613a:	e004      	b.n	8006146 <RollMediumClockWise_Handle+0x166>
			break;
 800613c:	bf00      	nop
 800613e:	e002      	b.n	8006146 <RollMediumClockWise_Handle+0x166>
			break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <RollMediumClockWise_Handle+0x166>
			break;
 8006144:	bf00      	nop
	}
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000269 	.word	0x20000269
 8006150:	20000270 	.word	0x20000270
 8006154:	2000026b 	.word	0x2000026b
 8006158:	2000026c 	.word	0x2000026c
 800615c:	20000268 	.word	0x20000268

08006160 <RollSmallClockWise_Handle>:

void RollSmallClockWise_Handle()
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006164:	4b48      	ldr	r3, [pc, #288]	; (8006288 <RollSmallClockWise_Handle+0x128>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d051      	beq.n	8006210 <RollSmallClockWise_Handle+0xb0>
 800616c:	2b02      	cmp	r3, #2
 800616e:	f300 8082 	bgt.w	8006276 <RollSmallClockWise_Handle+0x116>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <RollSmallClockWise_Handle+0x1c>
 8006176:	2b01      	cmp	r3, #1
 8006178:	d025      	beq.n	80061c6 <RollSmallClockWise_Handle+0x66>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 800617a:	e07c      	b.n	8006276 <RollSmallClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800617c:	f7fb fbb2 	bl	80018e4 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	4b42      	ldr	r3, [pc, #264]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	223c      	movs	r2, #60	; 0x3c
 800618a:	4293      	cmp	r3, r2
 800618c:	d375      	bcc.n	800627a <RollSmallClockWise_Handle+0x11a>
				DisplayLed(x, y, z);
 800618e:	4b40      	ldr	r3, [pc, #256]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4a40      	ldr	r2, [pc, #256]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006194:	7811      	ldrb	r1, [r2, #0]
 8006196:	2208      	movs	r2, #8
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fc25 	bl	80049e8 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 800619e:	4b3d      	ldr	r3, [pc, #244]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d103      	bne.n	80061ae <RollSmallClockWise_Handle+0x4e>
 80061a6:	4b38      	ldr	r3, [pc, #224]	; (8006288 <RollSmallClockWise_Handle+0x128>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e005      	b.n	80061ba <RollSmallClockWise_Handle+0x5a>
				else y++;
 80061ae:	4b39      	ldr	r3, [pc, #228]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4b37      	ldr	r3, [pc, #220]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 80061b8:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80061ba:	f7fb fb93 	bl	80018e4 <HAL_GetTick>
 80061be:	4603      	mov	r3, r0
 80061c0:	4a32      	ldr	r2, [pc, #200]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 80061c2:	6013      	str	r3, [r2, #0]
			break;
 80061c4:	e059      	b.n	800627a <RollSmallClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80061c6:	f7fb fb8d 	bl	80018e4 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b2f      	ldr	r3, [pc, #188]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	223c      	movs	r2, #60	; 0x3c
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d352      	bcc.n	800627e <RollSmallClockWise_Handle+0x11e>
				DisplayLed(x, y, z);
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 80061de:	7811      	ldrb	r1, [r2, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fc00 	bl	80049e8 <DisplayLed>
				if (x == 3) axisDirection = Y_AXIS_2;
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d103      	bne.n	80061f8 <RollSmallClockWise_Handle+0x98>
 80061f0:	4b25      	ldr	r3, [pc, #148]	; (8006288 <RollSmallClockWise_Handle+0x128>)
 80061f2:	2202      	movs	r2, #2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e005      	b.n	8006204 <RollSmallClockWise_Handle+0xa4>
				else x--;
 80061f8:	4b25      	ldr	r3, [pc, #148]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b23      	ldr	r3, [pc, #140]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 8006202:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006204:	f7fb fb6e 	bl	80018e4 <HAL_GetTick>
 8006208:	4603      	mov	r3, r0
 800620a:	4a20      	ldr	r2, [pc, #128]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 800620c:	6013      	str	r3, [r2, #0]
			break;
 800620e:	e036      	b.n	800627e <RollSmallClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006210:	f7fb fb68 	bl	80018e4 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	4b1d      	ldr	r3, [pc, #116]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	223c      	movs	r2, #60	; 0x3c
 800621e:	4293      	cmp	r3, r2
 8006220:	d32f      	bcc.n	8006282 <RollSmallClockWise_Handle+0x122>
				DisplayLed(x, y, z);
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006228:	7811      	ldrb	r1, [r2, #0]
 800622a:	2208      	movs	r2, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe fbdb 	bl	80049e8 <DisplayLed>
				if (y == 3)
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d111      	bne.n	800625e <RollSmallClockWise_Handle+0xfe>
					clearCube();
 800623a:	f7fd fd5c 	bl	8003cf6 <clearCube>
					axisDirection = Y_AXIS_1;
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <RollSmallClockWise_Handle+0x128>)
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <RollSmallClockWise_Handle+0x138>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
					x = 0;
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <RollSmallClockWise_Handle+0x130>)
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
					y = 0;
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
					directRotate = COUNTER_CLOCKWISE;
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <RollSmallClockWise_Handle+0x13c>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e005      	b.n	800626a <RollSmallClockWise_Handle+0x10a>
				else y--;
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <RollSmallClockWise_Handle+0x134>)
 8006268:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800626a:	f7fb fb3b 	bl	80018e4 <HAL_GetTick>
 800626e:	4603      	mov	r3, r0
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <RollSmallClockWise_Handle+0x12c>)
 8006272:	6013      	str	r3, [r2, #0]
			break;
 8006274:	e005      	b.n	8006282 <RollSmallClockWise_Handle+0x122>
			break;
 8006276:	bf00      	nop
 8006278:	e004      	b.n	8006284 <RollSmallClockWise_Handle+0x124>
			break;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <RollSmallClockWise_Handle+0x124>
			break;
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <RollSmallClockWise_Handle+0x124>
			break;
 8006282:	bf00      	nop
	}
}
 8006284:	bf00      	nop
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000269 	.word	0x20000269
 800628c:	20000270 	.word	0x20000270
 8006290:	2000026b 	.word	0x2000026b
 8006294:	2000026c 	.word	0x2000026c
 8006298:	20000268 	.word	0x20000268
 800629c:	2000026a 	.word	0x2000026a

080062a0 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
	clearCube();
 80062a4:	f7fd fd27 	bl	8003cf6 <clearCube>
	x = 7;
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <SpiralCube_Set_State+0x30>)
 80062aa:	2207      	movs	r2, #7
 80062ac:	701a      	strb	r2, [r3, #0]
	y = 0;
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <SpiralCube_Set_State+0x34>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
	rollSize = ROLL_BIGGEST;
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <SpiralCube_Set_State+0x38>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
	directRotate = CLOCKWISE;
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <SpiralCube_Set_State+0x3c>)
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <SpiralCube_Set_State+0x40>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
	currentEffect = SPIRAL_CUBE;
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <SpiralCube_Set_State+0x44>)
 80062c8:	2208      	movs	r2, #8
 80062ca:	701a      	strb	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	2000026b 	.word	0x2000026b
 80062d4:	2000026c 	.word	0x2000026c
 80062d8:	20000268 	.word	0x20000268
 80062dc:	2000026a 	.word	0x2000026a
 80062e0:	20000269 	.word	0x20000269
 80062e4:	20000010 	.word	0x20000010

080062e8 <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	723b      	strb	r3, [r7, #8]
	for (int i = 1; i < 9; i++)
 80062f8:	2301      	movs	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e00d      	b.n	800631a <TransmitData+0x32>
	{
		dataOut[i] = column_data[i-1];
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3b01      	subs	r3, #1
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	f107 0208 	add.w	r2, r7, #8
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	4413      	add	r3, r2
 8006310:	460a      	mov	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b08      	cmp	r3, #8
 800631e:	ddee      	ble.n	80062fe <TransmitData+0x16>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8006320:	2200      	movs	r2, #0
 8006322:	2140      	movs	r1, #64	; 0x40
 8006324:	4809      	ldr	r0, [pc, #36]	; (800634c <TransmitData+0x64>)
 8006326:	f7fc f852 	bl	80023ce <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 800632a:	f107 0108 	add.w	r1, r7, #8
 800632e:	2364      	movs	r3, #100	; 0x64
 8006330:	2209      	movs	r2, #9
 8006332:	4807      	ldr	r0, [pc, #28]	; (8006350 <TransmitData+0x68>)
 8006334:	f7fc fdb8 	bl	8002ea8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8006338:	2201      	movs	r2, #1
 800633a:	2140      	movs	r1, #64	; 0x40
 800633c:	4803      	ldr	r0, [pc, #12]	; (800634c <TransmitData+0x64>)
 800633e:	f7fc f846 	bl	80023ce <HAL_GPIO_WritePin>
}
 8006342:	bf00      	nop
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40010800 	.word	0x40010800
 8006350:	200000c4 	.word	0x200000c4
 8006354:	00000000 	.word	0x00000000

08006358 <WaveCube_Handle>:
extern float xo; // Tọa độ điểm gốc O
extern float yo;


void WaveCube_Handle()
{
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8006360:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <WaveCube_Handle+0x1c0>)
 8006362:	4a6e      	ldr	r2, [pc, #440]	; (800651c <WaveCube_Handle+0x1c4>)
 8006364:	601a      	str	r2, [r3, #0]
	T = 2000; // Chu kỳ
 8006366:	4b6e      	ldr	r3, [pc, #440]	; (8006520 <WaveCube_Handle+0x1c8>)
 8006368:	4a6e      	ldr	r2, [pc, #440]	; (8006524 <WaveCube_Handle+0x1cc>)
 800636a:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 800636c:	4b6e      	ldr	r3, [pc, #440]	; (8006528 <WaveCube_Handle+0x1d0>)
 800636e:	4a6f      	ldr	r2, [pc, #444]	; (800652c <WaveCube_Handle+0x1d4>)
 8006370:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 8006372:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <WaveCube_Handle+0x1d8>)
 8006374:	4a6d      	ldr	r2, [pc, #436]	; (800652c <WaveCube_Handle+0x1d4>)
 8006376:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8006378:	4b6e      	ldr	r3, [pc, #440]	; (8006534 <WaveCube_Handle+0x1dc>)
 800637a:	4a6c      	ldr	r2, [pc, #432]	; (800652c <WaveCube_Handle+0x1d4>)
 800637c:	601a      	str	r2, [r3, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
 8006382:	e0b9      	b.n	80064f8 <WaveCube_Handle+0x1a0>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8006384:	2300      	movs	r3, #0
 8006386:	73bb      	strb	r3, [r7, #14]
 8006388:	e0af      	b.n	80064ea <WaveCube_Handle+0x192>
	    {
	        uint32_t t = HAL_GetTick(); // Lấy thời gian
 800638a:	f7fb faab 	bl	80018e4 <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]
//	        float r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt((x - xo)*(x - xo) + (y - yo)*(y - yo))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 8006390:	4b65      	ldr	r3, [pc, #404]	; (8006528 <WaveCube_Handle+0x1d0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa f83f 	bl	8000418 <__aeabi_f2d>
 800639a:	4604      	mov	r4, r0
 800639c:	460d      	mov	r5, r1
 800639e:	68b8      	ldr	r0, [r7, #8]
 80063a0:	f7fa f818 	bl	80003d4 <__aeabi_ui2d>
 80063a4:	a35a      	add	r3, pc, #360	; (adr r3, 8006510 <WaveCube_Handle+0x1b8>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7fa f88d 	bl	80004c8 <__aeabi_dmul>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4690      	mov	r8, r2
 80063b4:	4699      	mov	r9, r3
 80063b6:	4b5a      	ldr	r3, [pc, #360]	; (8006520 <WaveCube_Handle+0x1c8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fa f82c 	bl	8000418 <__aeabi_f2d>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7fa f9a8 	bl	800071c <__aeabi_ddiv>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4690      	mov	r8, r2
 80063d2:	4699      	mov	r9, r3
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa fc78 	bl	8000ccc <__aeabi_i2f>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b54      	ldr	r3, [pc, #336]	; (8006530 <WaveCube_Handle+0x1d8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fa fbbb 	bl	8000b60 <__aeabi_fsub>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461e      	mov	r6, r3
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fa fc6b 	bl	8000ccc <__aeabi_i2f>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4b4d      	ldr	r3, [pc, #308]	; (8006530 <WaveCube_Handle+0x1d8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fa fbae 	bl	8000b60 <__aeabi_fsub>
 8006404:	4603      	mov	r3, r0
 8006406:	4619      	mov	r1, r3
 8006408:	4630      	mov	r0, r6
 800640a:	f7fa fcb3 	bl	8000d74 <__aeabi_fmul>
 800640e:	4603      	mov	r3, r0
 8006410:	461e      	mov	r6, r3
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	4618      	mov	r0, r3
 8006416:	f7fa fc59 	bl	8000ccc <__aeabi_i2f>
 800641a:	4602      	mov	r2, r0
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <WaveCube_Handle+0x1dc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fa fb9c 	bl	8000b60 <__aeabi_fsub>
 8006428:	4603      	mov	r3, r0
 800642a:	469a      	mov	sl, r3
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa fc4c 	bl	8000ccc <__aeabi_i2f>
 8006434:	4602      	mov	r2, r0
 8006436:	4b3f      	ldr	r3, [pc, #252]	; (8006534 <WaveCube_Handle+0x1dc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fa fb8f 	bl	8000b60 <__aeabi_fsub>
 8006442:	4603      	mov	r3, r0
 8006444:	4619      	mov	r1, r3
 8006446:	4650      	mov	r0, sl
 8006448:	f7fa fc94 	bl	8000d74 <__aeabi_fmul>
 800644c:	4603      	mov	r3, r0
 800644e:	4619      	mov	r1, r3
 8006450:	4630      	mov	r0, r6
 8006452:	f7fa fb87 	bl	8000b64 <__addsf3>
 8006456:	4603      	mov	r3, r0
 8006458:	4618      	mov	r0, r3
 800645a:	f7f9 ffdd 	bl	8000418 <__aeabi_f2d>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	f001 fa25 	bl	80078b4 <sqrt>
 800646a:	a329      	add	r3, pc, #164	; (adr r3, 8006510 <WaveCube_Handle+0x1b8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fa f82a 	bl	80004c8 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4692      	mov	sl, r2
 800647a:	469b      	mov	fp, r3
 800647c:	4b26      	ldr	r3, [pc, #152]	; (8006518 <WaveCube_Handle+0x1c0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f7f9 ffc9 	bl	8000418 <__aeabi_f2d>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4650      	mov	r0, sl
 800648c:	4659      	mov	r1, fp
 800648e:	f7fa f945 	bl	800071c <__aeabi_ddiv>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7f9 fe5d 	bl	8000158 <__aeabi_dsub>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	f001 f911 	bl	80076cc <cos>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fa f809 	bl	80004c8 <__aeabi_dmul>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <WaveCube_Handle+0x1e0>)
 80064c4:	f7f9 fe4a 	bl	800015c <__adddf3>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	f7fa fad2 	bl	8000a78 <__aeabi_d2uiz>
 80064d4:	4603      	mov	r3, r0
 80064d6:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 80064d8:	79fa      	ldrb	r2, [r7, #7]
 80064da:	7bf9      	ldrb	r1, [r7, #15]
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fa82 	bl	80049e8 <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	3301      	adds	r3, #1
 80064e8:	73bb      	strb	r3, [r7, #14]
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	f67f af4c 	bls.w	800638a <WaveCube_Handle+0x32>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	3301      	adds	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b07      	cmp	r3, #7
 80064fc:	f67f af42 	bls.w	8006384 <WaveCube_Handle+0x2c>
	    }
	}
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	f3af 8000 	nop.w
 8006510:	51eb851f 	.word	0x51eb851f
 8006514:	40191eb8 	.word	0x40191eb8
 8006518:	20000254 	.word	0x20000254
 800651c:	40e00000 	.word	0x40e00000
 8006520:	20000258 	.word	0x20000258
 8006524:	44fa0000 	.word	0x44fa0000
 8006528:	2000025c 	.word	0x2000025c
 800652c:	40600000 	.word	0x40600000
 8006530:	20000260 	.word	0x20000260
 8006534:	20000264 	.word	0x20000264
 8006538:	40100000 	.word	0x40100000

0800653c <WaveCube_Set_State>:

void WaveCube_Set_State()
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
	clearCube();
 8006540:	f7fd fbd9 	bl	8003cf6 <clearCube>
	currentEffect = WAVE_EFFECT;
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <WaveCube_Set_State+0x34>)
 8006546:	2209      	movs	r2, #9
 8006548:	701a      	strb	r2, [r3, #0]
	L = 7; // Bước sóng
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <WaveCube_Set_State+0x38>)
 800654c:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <WaveCube_Set_State+0x3c>)
 800654e:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <WaveCube_Set_State+0x40>)
 8006552:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006556:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <WaveCube_Set_State+0x44>)
 800655a:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <WaveCube_Set_State+0x48>)
 800655c:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <WaveCube_Set_State+0x4c>)
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <WaveCube_Set_State+0x48>)
 8006562:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <WaveCube_Set_State+0x50>)
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <WaveCube_Set_State+0x48>)
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000010 	.word	0x20000010
 8006574:	20000254 	.word	0x20000254
 8006578:	40e00000 	.word	0x40e00000
 800657c:	20000258 	.word	0x20000258
 8006580:	2000025c 	.word	0x2000025c
 8006584:	40600000 	.word	0x40600000
 8006588:	20000260 	.word	0x20000260
 800658c:	20000264 	.word	0x20000264

08006590 <__errno>:
 8006590:	4b01      	ldr	r3, [pc, #4]	; (8006598 <__errno+0x8>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000014 	.word	0x20000014

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	2600      	movs	r6, #0
 80065a0:	4d0c      	ldr	r5, [pc, #48]	; (80065d4 <__libc_init_array+0x38>)
 80065a2:	4c0d      	ldr	r4, [pc, #52]	; (80065d8 <__libc_init_array+0x3c>)
 80065a4:	1b64      	subs	r4, r4, r5
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	f002 ff52 	bl	8009454 <_init>
 80065b0:	2600      	movs	r6, #0
 80065b2:	4d0a      	ldr	r5, [pc, #40]	; (80065dc <__libc_init_array+0x40>)
 80065b4:	4c0a      	ldr	r4, [pc, #40]	; (80065e0 <__libc_init_array+0x44>)
 80065b6:	1b64      	subs	r4, r4, r5
 80065b8:	10a4      	asrs	r4, r4, #2
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	080097f0 	.word	0x080097f0
 80065d8:	080097f0 	.word	0x080097f0
 80065dc:	080097f0 	.word	0x080097f0
 80065e0:	080097f4 	.word	0x080097f4

080065e4 <memset>:
 80065e4:	4603      	mov	r3, r0
 80065e6:	4402      	add	r2, r0
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d100      	bne.n	80065ee <memset+0xa>
 80065ec:	4770      	bx	lr
 80065ee:	f803 1b01 	strb.w	r1, [r3], #1
 80065f2:	e7f9      	b.n	80065e8 <memset+0x4>

080065f4 <srand>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <srand+0x44>)
 80065f8:	4604      	mov	r4, r0
 80065fa:	681d      	ldr	r5, [r3, #0]
 80065fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80065fe:	b9b3      	cbnz	r3, 800662e <srand+0x3a>
 8006600:	2018      	movs	r0, #24
 8006602:	f000 f893 	bl	800672c <malloc>
 8006606:	4602      	mov	r2, r0
 8006608:	63a8      	str	r0, [r5, #56]	; 0x38
 800660a:	b920      	cbnz	r0, 8006616 <srand+0x22>
 800660c:	2142      	movs	r1, #66	; 0x42
 800660e:	4b0b      	ldr	r3, [pc, #44]	; (800663c <srand+0x48>)
 8006610:	480b      	ldr	r0, [pc, #44]	; (8006640 <srand+0x4c>)
 8006612:	f000 f85b 	bl	80066cc <__assert_func>
 8006616:	490b      	ldr	r1, [pc, #44]	; (8006644 <srand+0x50>)
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <srand+0x54>)
 800661a:	e9c0 1300 	strd	r1, r3, [r0]
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <srand+0x58>)
 8006620:	2100      	movs	r1, #0
 8006622:	6083      	str	r3, [r0, #8]
 8006624:	230b      	movs	r3, #11
 8006626:	8183      	strh	r3, [r0, #12]
 8006628:	2001      	movs	r0, #1
 800662a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800662e:	2200      	movs	r2, #0
 8006630:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006632:	611c      	str	r4, [r3, #16]
 8006634:	615a      	str	r2, [r3, #20]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20000014 	.word	0x20000014
 800663c:	080094a4 	.word	0x080094a4
 8006640:	080094bb 	.word	0x080094bb
 8006644:	abcd330e 	.word	0xabcd330e
 8006648:	e66d1234 	.word	0xe66d1234
 800664c:	0005deec 	.word	0x0005deec

08006650 <rand>:
 8006650:	4b16      	ldr	r3, [pc, #88]	; (80066ac <rand+0x5c>)
 8006652:	b510      	push	{r4, lr}
 8006654:	681c      	ldr	r4, [r3, #0]
 8006656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006658:	b9b3      	cbnz	r3, 8006688 <rand+0x38>
 800665a:	2018      	movs	r0, #24
 800665c:	f000 f866 	bl	800672c <malloc>
 8006660:	4602      	mov	r2, r0
 8006662:	63a0      	str	r0, [r4, #56]	; 0x38
 8006664:	b920      	cbnz	r0, 8006670 <rand+0x20>
 8006666:	214e      	movs	r1, #78	; 0x4e
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <rand+0x60>)
 800666a:	4812      	ldr	r0, [pc, #72]	; (80066b4 <rand+0x64>)
 800666c:	f000 f82e 	bl	80066cc <__assert_func>
 8006670:	4911      	ldr	r1, [pc, #68]	; (80066b8 <rand+0x68>)
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <rand+0x6c>)
 8006674:	e9c0 1300 	strd	r1, r3, [r0]
 8006678:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <rand+0x70>)
 800667a:	2100      	movs	r1, #0
 800667c:	6083      	str	r3, [r0, #8]
 800667e:	230b      	movs	r3, #11
 8006680:	8183      	strh	r3, [r0, #12]
 8006682:	2001      	movs	r0, #1
 8006684:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006688:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800668a:	4a0e      	ldr	r2, [pc, #56]	; (80066c4 <rand+0x74>)
 800668c:	6920      	ldr	r0, [r4, #16]
 800668e:	6963      	ldr	r3, [r4, #20]
 8006690:	4342      	muls	r2, r0
 8006692:	490d      	ldr	r1, [pc, #52]	; (80066c8 <rand+0x78>)
 8006694:	fb01 2203 	mla	r2, r1, r3, r2
 8006698:	fba0 0101 	umull	r0, r1, r0, r1
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	eb42 0001 	adc.w	r0, r2, r1
 80066a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80066a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066aa:	bd10      	pop	{r4, pc}
 80066ac:	20000014 	.word	0x20000014
 80066b0:	080094a4 	.word	0x080094a4
 80066b4:	080094bb 	.word	0x080094bb
 80066b8:	abcd330e 	.word	0xabcd330e
 80066bc:	e66d1234 	.word	0xe66d1234
 80066c0:	0005deec 	.word	0x0005deec
 80066c4:	5851f42d 	.word	0x5851f42d
 80066c8:	4c957f2d 	.word	0x4c957f2d

080066cc <__assert_func>:
 80066cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066ce:	4614      	mov	r4, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <__assert_func+0x2c>)
 80066d4:	4605      	mov	r5, r0
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68d8      	ldr	r0, [r3, #12]
 80066da:	b14c      	cbz	r4, 80066f0 <__assert_func+0x24>
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <__assert_func+0x30>)
 80066de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066e2:	9100      	str	r1, [sp, #0]
 80066e4:	462b      	mov	r3, r5
 80066e6:	4906      	ldr	r1, [pc, #24]	; (8006700 <__assert_func+0x34>)
 80066e8:	f000 f80e 	bl	8006708 <fiprintf>
 80066ec:	f000 fcc0 	bl	8007070 <abort>
 80066f0:	4b04      	ldr	r3, [pc, #16]	; (8006704 <__assert_func+0x38>)
 80066f2:	461c      	mov	r4, r3
 80066f4:	e7f3      	b.n	80066de <__assert_func+0x12>
 80066f6:	bf00      	nop
 80066f8:	20000014 	.word	0x20000014
 80066fc:	08009516 	.word	0x08009516
 8006700:	08009523 	.word	0x08009523
 8006704:	08009551 	.word	0x08009551

08006708 <fiprintf>:
 8006708:	b40e      	push	{r1, r2, r3}
 800670a:	b503      	push	{r0, r1, lr}
 800670c:	4601      	mov	r1, r0
 800670e:	ab03      	add	r3, sp, #12
 8006710:	4805      	ldr	r0, [pc, #20]	; (8006728 <fiprintf+0x20>)
 8006712:	f853 2b04 	ldr.w	r2, [r3], #4
 8006716:	6800      	ldr	r0, [r0, #0]
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	f000 f913 	bl	8006944 <_vfiprintf_r>
 800671e:	b002      	add	sp, #8
 8006720:	f85d eb04 	ldr.w	lr, [sp], #4
 8006724:	b003      	add	sp, #12
 8006726:	4770      	bx	lr
 8006728:	20000014 	.word	0x20000014

0800672c <malloc>:
 800672c:	4b02      	ldr	r3, [pc, #8]	; (8006738 <malloc+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f000 b86b 	b.w	800680c <_malloc_r>
 8006736:	bf00      	nop
 8006738:	20000014 	.word	0x20000014

0800673c <_free_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4605      	mov	r5, r0
 8006740:	2900      	cmp	r1, #0
 8006742:	d040      	beq.n	80067c6 <_free_r+0x8a>
 8006744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006748:	1f0c      	subs	r4, r1, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfb8      	it	lt
 800674e:	18e4      	addlt	r4, r4, r3
 8006750:	f000 fec0 	bl	80074d4 <__malloc_lock>
 8006754:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <_free_r+0x8c>)
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	b933      	cbnz	r3, 8006768 <_free_r+0x2c>
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	6014      	str	r4, [r2, #0]
 800675e:	4628      	mov	r0, r5
 8006760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006764:	f000 bebc 	b.w	80074e0 <__malloc_unlock>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d908      	bls.n	800677e <_free_r+0x42>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	1821      	adds	r1, r4, r0
 8006770:	428b      	cmp	r3, r1
 8006772:	bf01      	itttt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	1809      	addeq	r1, r1, r0
 800677a:	6021      	streq	r1, [r4, #0]
 800677c:	e7ed      	b.n	800675a <_free_r+0x1e>
 800677e:	461a      	mov	r2, r3
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b10b      	cbz	r3, 8006788 <_free_r+0x4c>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d9fa      	bls.n	800677e <_free_r+0x42>
 8006788:	6811      	ldr	r1, [r2, #0]
 800678a:	1850      	adds	r0, r2, r1
 800678c:	42a0      	cmp	r0, r4
 800678e:	d10b      	bne.n	80067a8 <_free_r+0x6c>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	4401      	add	r1, r0
 8006794:	1850      	adds	r0, r2, r1
 8006796:	4283      	cmp	r3, r0
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	d1e0      	bne.n	800675e <_free_r+0x22>
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4401      	add	r1, r0
 80067a2:	6011      	str	r1, [r2, #0]
 80067a4:	6053      	str	r3, [r2, #4]
 80067a6:	e7da      	b.n	800675e <_free_r+0x22>
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x74>
 80067aa:	230c      	movs	r3, #12
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	e7d6      	b.n	800675e <_free_r+0x22>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	1821      	adds	r1, r4, r0
 80067b4:	428b      	cmp	r3, r1
 80067b6:	bf01      	itttt	eq
 80067b8:	6819      	ldreq	r1, [r3, #0]
 80067ba:	685b      	ldreq	r3, [r3, #4]
 80067bc:	1809      	addeq	r1, r1, r0
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6054      	str	r4, [r2, #4]
 80067c4:	e7cb      	b.n	800675e <_free_r+0x22>
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000274 	.word	0x20000274

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0e      	ldr	r6, [pc, #56]	; (8006808 <sbrk_aligned+0x3c>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 fb7a 	bl	8006ed0 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fb75 	bl	8006ed0 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d00a      	beq.n	8006800 <sbrk_aligned+0x34>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d007      	beq.n	8006804 <sbrk_aligned+0x38>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fb6a 	bl	8006ed0 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d101      	bne.n	8006804 <sbrk_aligned+0x38>
 8006800:	f04f 34ff 	mov.w	r4, #4294967295
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	20000278 	.word	0x20000278

0800680c <_malloc_r>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	1ccd      	adds	r5, r1, #3
 8006812:	f025 0503 	bic.w	r5, r5, #3
 8006816:	3508      	adds	r5, #8
 8006818:	2d0c      	cmp	r5, #12
 800681a:	bf38      	it	cc
 800681c:	250c      	movcc	r5, #12
 800681e:	2d00      	cmp	r5, #0
 8006820:	4607      	mov	r7, r0
 8006822:	db01      	blt.n	8006828 <_malloc_r+0x1c>
 8006824:	42a9      	cmp	r1, r5
 8006826:	d905      	bls.n	8006834 <_malloc_r+0x28>
 8006828:	230c      	movs	r3, #12
 800682a:	2600      	movs	r6, #0
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	4630      	mov	r0, r6
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	4e2e      	ldr	r6, [pc, #184]	; (80068f0 <_malloc_r+0xe4>)
 8006836:	f000 fe4d 	bl	80074d4 <__malloc_lock>
 800683a:	6833      	ldr	r3, [r6, #0]
 800683c:	461c      	mov	r4, r3
 800683e:	bb34      	cbnz	r4, 800688e <_malloc_r+0x82>
 8006840:	4629      	mov	r1, r5
 8006842:	4638      	mov	r0, r7
 8006844:	f7ff ffc2 	bl	80067cc <sbrk_aligned>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	4604      	mov	r4, r0
 800684c:	d14d      	bne.n	80068ea <_malloc_r+0xde>
 800684e:	6834      	ldr	r4, [r6, #0]
 8006850:	4626      	mov	r6, r4
 8006852:	2e00      	cmp	r6, #0
 8006854:	d140      	bne.n	80068d8 <_malloc_r+0xcc>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4631      	mov	r1, r6
 800685a:	4638      	mov	r0, r7
 800685c:	eb04 0803 	add.w	r8, r4, r3
 8006860:	f000 fb36 	bl	8006ed0 <_sbrk_r>
 8006864:	4580      	cmp	r8, r0
 8006866:	d13a      	bne.n	80068de <_malloc_r+0xd2>
 8006868:	6821      	ldr	r1, [r4, #0]
 800686a:	3503      	adds	r5, #3
 800686c:	1a6d      	subs	r5, r5, r1
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	4638      	mov	r0, r7
 800687c:	4629      	mov	r1, r5
 800687e:	f7ff ffa5 	bl	80067cc <sbrk_aligned>
 8006882:	3001      	adds	r0, #1
 8006884:	d02b      	beq.n	80068de <_malloc_r+0xd2>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	442b      	add	r3, r5
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	e00e      	b.n	80068ac <_malloc_r+0xa0>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	1b52      	subs	r2, r2, r5
 8006892:	d41e      	bmi.n	80068d2 <_malloc_r+0xc6>
 8006894:	2a0b      	cmp	r2, #11
 8006896:	d916      	bls.n	80068c6 <_malloc_r+0xba>
 8006898:	1961      	adds	r1, r4, r5
 800689a:	42a3      	cmp	r3, r4
 800689c:	6025      	str	r5, [r4, #0]
 800689e:	bf18      	it	ne
 80068a0:	6059      	strne	r1, [r3, #4]
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	bf08      	it	eq
 80068a6:	6031      	streq	r1, [r6, #0]
 80068a8:	5162      	str	r2, [r4, r5]
 80068aa:	604b      	str	r3, [r1, #4]
 80068ac:	4638      	mov	r0, r7
 80068ae:	f104 060b 	add.w	r6, r4, #11
 80068b2:	f000 fe15 	bl	80074e0 <__malloc_unlock>
 80068b6:	f026 0607 	bic.w	r6, r6, #7
 80068ba:	1d23      	adds	r3, r4, #4
 80068bc:	1af2      	subs	r2, r6, r3
 80068be:	d0b6      	beq.n	800682e <_malloc_r+0x22>
 80068c0:	1b9b      	subs	r3, r3, r6
 80068c2:	50a3      	str	r3, [r4, r2]
 80068c4:	e7b3      	b.n	800682e <_malloc_r+0x22>
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	bf0c      	ite	eq
 80068cc:	6032      	streq	r2, [r6, #0]
 80068ce:	605a      	strne	r2, [r3, #4]
 80068d0:	e7ec      	b.n	80068ac <_malloc_r+0xa0>
 80068d2:	4623      	mov	r3, r4
 80068d4:	6864      	ldr	r4, [r4, #4]
 80068d6:	e7b2      	b.n	800683e <_malloc_r+0x32>
 80068d8:	4634      	mov	r4, r6
 80068da:	6876      	ldr	r6, [r6, #4]
 80068dc:	e7b9      	b.n	8006852 <_malloc_r+0x46>
 80068de:	230c      	movs	r3, #12
 80068e0:	4638      	mov	r0, r7
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	f000 fdfc 	bl	80074e0 <__malloc_unlock>
 80068e8:	e7a1      	b.n	800682e <_malloc_r+0x22>
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	e7de      	b.n	80068ac <_malloc_r+0xa0>
 80068ee:	bf00      	nop
 80068f0:	20000274 	.word	0x20000274

080068f4 <__sfputc_r>:
 80068f4:	6893      	ldr	r3, [r2, #8]
 80068f6:	b410      	push	{r4}
 80068f8:	3b01      	subs	r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	6093      	str	r3, [r2, #8]
 80068fe:	da07      	bge.n	8006910 <__sfputc_r+0x1c>
 8006900:	6994      	ldr	r4, [r2, #24]
 8006902:	42a3      	cmp	r3, r4
 8006904:	db01      	blt.n	800690a <__sfputc_r+0x16>
 8006906:	290a      	cmp	r1, #10
 8006908:	d102      	bne.n	8006910 <__sfputc_r+0x1c>
 800690a:	bc10      	pop	{r4}
 800690c:	f000 baf0 	b.w	8006ef0 <__swbuf_r>
 8006910:	6813      	ldr	r3, [r2, #0]
 8006912:	1c58      	adds	r0, r3, #1
 8006914:	6010      	str	r0, [r2, #0]
 8006916:	7019      	strb	r1, [r3, #0]
 8006918:	4608      	mov	r0, r1
 800691a:	bc10      	pop	{r4}
 800691c:	4770      	bx	lr

0800691e <__sfputs_r>:
 800691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006920:	4606      	mov	r6, r0
 8006922:	460f      	mov	r7, r1
 8006924:	4614      	mov	r4, r2
 8006926:	18d5      	adds	r5, r2, r3
 8006928:	42ac      	cmp	r4, r5
 800692a:	d101      	bne.n	8006930 <__sfputs_r+0x12>
 800692c:	2000      	movs	r0, #0
 800692e:	e007      	b.n	8006940 <__sfputs_r+0x22>
 8006930:	463a      	mov	r2, r7
 8006932:	4630      	mov	r0, r6
 8006934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006938:	f7ff ffdc 	bl	80068f4 <__sfputc_r>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d1f3      	bne.n	8006928 <__sfputs_r+0xa>
 8006940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006944 <_vfiprintf_r>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	460d      	mov	r5, r1
 800694a:	4614      	mov	r4, r2
 800694c:	4698      	mov	r8, r3
 800694e:	4606      	mov	r6, r0
 8006950:	b09d      	sub	sp, #116	; 0x74
 8006952:	b118      	cbz	r0, 800695c <_vfiprintf_r+0x18>
 8006954:	6983      	ldr	r3, [r0, #24]
 8006956:	b90b      	cbnz	r3, 800695c <_vfiprintf_r+0x18>
 8006958:	f000 fca8 	bl	80072ac <__sinit>
 800695c:	4b89      	ldr	r3, [pc, #548]	; (8006b84 <_vfiprintf_r+0x240>)
 800695e:	429d      	cmp	r5, r3
 8006960:	d11b      	bne.n	800699a <_vfiprintf_r+0x56>
 8006962:	6875      	ldr	r5, [r6, #4]
 8006964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x32>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	059a      	lsls	r2, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x32>
 8006970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006972:	f000 fd39 	bl	80073e8 <__retarget_lock_acquire_recursive>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	071b      	lsls	r3, r3, #28
 800697a:	d501      	bpl.n	8006980 <_vfiprintf_r+0x3c>
 800697c:	692b      	ldr	r3, [r5, #16]
 800697e:	b9eb      	cbnz	r3, 80069bc <_vfiprintf_r+0x78>
 8006980:	4629      	mov	r1, r5
 8006982:	4630      	mov	r0, r6
 8006984:	f000 fb06 	bl	8006f94 <__swsetup_r>
 8006988:	b1c0      	cbz	r0, 80069bc <_vfiprintf_r+0x78>
 800698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698c:	07dc      	lsls	r4, r3, #31
 800698e:	d50e      	bpl.n	80069ae <_vfiprintf_r+0x6a>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	b01d      	add	sp, #116	; 0x74
 8006996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699a:	4b7b      	ldr	r3, [pc, #492]	; (8006b88 <_vfiprintf_r+0x244>)
 800699c:	429d      	cmp	r5, r3
 800699e:	d101      	bne.n	80069a4 <_vfiprintf_r+0x60>
 80069a0:	68b5      	ldr	r5, [r6, #8]
 80069a2:	e7df      	b.n	8006964 <_vfiprintf_r+0x20>
 80069a4:	4b79      	ldr	r3, [pc, #484]	; (8006b8c <_vfiprintf_r+0x248>)
 80069a6:	429d      	cmp	r5, r3
 80069a8:	bf08      	it	eq
 80069aa:	68f5      	ldreq	r5, [r6, #12]
 80069ac:	e7da      	b.n	8006964 <_vfiprintf_r+0x20>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	0598      	lsls	r0, r3, #22
 80069b2:	d4ed      	bmi.n	8006990 <_vfiprintf_r+0x4c>
 80069b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b6:	f000 fd18 	bl	80073ea <__retarget_lock_release_recursive>
 80069ba:	e7e9      	b.n	8006990 <_vfiprintf_r+0x4c>
 80069bc:	2300      	movs	r3, #0
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	2320      	movs	r3, #32
 80069c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069c6:	2330      	movs	r3, #48	; 0x30
 80069c8:	f04f 0901 	mov.w	r9, #1
 80069cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80069d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b90 <_vfiprintf_r+0x24c>
 80069d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d8:	4623      	mov	r3, r4
 80069da:	469a      	mov	sl, r3
 80069dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e0:	b10a      	cbz	r2, 80069e6 <_vfiprintf_r+0xa2>
 80069e2:	2a25      	cmp	r2, #37	; 0x25
 80069e4:	d1f9      	bne.n	80069da <_vfiprintf_r+0x96>
 80069e6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ea:	d00b      	beq.n	8006a04 <_vfiprintf_r+0xc0>
 80069ec:	465b      	mov	r3, fp
 80069ee:	4622      	mov	r2, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ff93 	bl	800691e <__sfputs_r>
 80069f8:	3001      	adds	r0, #1
 80069fa:	f000 80aa 	beq.w	8006b52 <_vfiprintf_r+0x20e>
 80069fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a00:	445a      	add	r2, fp
 8006a02:	9209      	str	r2, [sp, #36]	; 0x24
 8006a04:	f89a 3000 	ldrb.w	r3, [sl]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80a2 	beq.w	8006b52 <_vfiprintf_r+0x20e>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a18:	f10a 0a01 	add.w	sl, sl, #1
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a24:	931a      	str	r3, [sp, #104]	; 0x68
 8006a26:	4654      	mov	r4, sl
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2e:	4858      	ldr	r0, [pc, #352]	; (8006b90 <_vfiprintf_r+0x24c>)
 8006a30:	f000 fd42 	bl	80074b8 <memchr>
 8006a34:	9a04      	ldr	r2, [sp, #16]
 8006a36:	b9d8      	cbnz	r0, 8006a70 <_vfiprintf_r+0x12c>
 8006a38:	06d1      	lsls	r1, r2, #27
 8006a3a:	bf44      	itt	mi
 8006a3c:	2320      	movmi	r3, #32
 8006a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a42:	0713      	lsls	r3, r2, #28
 8006a44:	bf44      	itt	mi
 8006a46:	232b      	movmi	r3, #43	; 0x2b
 8006a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a50:	2b2a      	cmp	r3, #42	; 0x2a
 8006a52:	d015      	beq.n	8006a80 <_vfiprintf_r+0x13c>
 8006a54:	4654      	mov	r4, sl
 8006a56:	2000      	movs	r0, #0
 8006a58:	f04f 0c0a 	mov.w	ip, #10
 8006a5c:	9a07      	ldr	r2, [sp, #28]
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a64:	3b30      	subs	r3, #48	; 0x30
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d94e      	bls.n	8006b08 <_vfiprintf_r+0x1c4>
 8006a6a:	b1b0      	cbz	r0, 8006a9a <_vfiprintf_r+0x156>
 8006a6c:	9207      	str	r2, [sp, #28]
 8006a6e:	e014      	b.n	8006a9a <_vfiprintf_r+0x156>
 8006a70:	eba0 0308 	sub.w	r3, r0, r8
 8006a74:	fa09 f303 	lsl.w	r3, r9, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	46a2      	mov	sl, r4
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	e7d2      	b.n	8006a26 <_vfiprintf_r+0xe2>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	1d19      	adds	r1, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	9103      	str	r1, [sp, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbb      	ittet	lt
 8006a8c:	425b      	neglt	r3, r3
 8006a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a92:	9307      	strge	r3, [sp, #28]
 8006a94:	9307      	strlt	r3, [sp, #28]
 8006a96:	bfb8      	it	lt
 8006a98:	9204      	strlt	r2, [sp, #16]
 8006a9a:	7823      	ldrb	r3, [r4, #0]
 8006a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a9e:	d10c      	bne.n	8006aba <_vfiprintf_r+0x176>
 8006aa0:	7863      	ldrb	r3, [r4, #1]
 8006aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa4:	d135      	bne.n	8006b12 <_vfiprintf_r+0x1ce>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	3402      	adds	r4, #2
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	9203      	str	r2, [sp, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bfb8      	it	lt
 8006ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ab8:	9305      	str	r3, [sp, #20]
 8006aba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b94 <_vfiprintf_r+0x250>
 8006abe:	2203      	movs	r2, #3
 8006ac0:	4650      	mov	r0, sl
 8006ac2:	7821      	ldrb	r1, [r4, #0]
 8006ac4:	f000 fcf8 	bl	80074b8 <memchr>
 8006ac8:	b140      	cbz	r0, 8006adc <_vfiprintf_r+0x198>
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	eba0 000a 	sub.w	r0, r0, sl
 8006ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ad4:	9b04      	ldr	r3, [sp, #16]
 8006ad6:	3401      	adds	r4, #1
 8006ad8:	4303      	orrs	r3, r0
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	482d      	ldr	r0, [pc, #180]	; (8006b98 <_vfiprintf_r+0x254>)
 8006ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ae8:	f000 fce6 	bl	80074b8 <memchr>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d03f      	beq.n	8006b70 <_vfiprintf_r+0x22c>
 8006af0:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <_vfiprintf_r+0x258>)
 8006af2:	bb1b      	cbnz	r3, 8006b3c <_vfiprintf_r+0x1f8>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	3307      	adds	r3, #7
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	3308      	adds	r3, #8
 8006afe:	9303      	str	r3, [sp, #12]
 8006b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b02:	443b      	add	r3, r7
 8006b04:	9309      	str	r3, [sp, #36]	; 0x24
 8006b06:	e767      	b.n	80069d8 <_vfiprintf_r+0x94>
 8006b08:	460c      	mov	r4, r1
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b10:	e7a5      	b.n	8006a5e <_vfiprintf_r+0x11a>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f04f 0c0a 	mov.w	ip, #10
 8006b18:	4619      	mov	r1, r3
 8006b1a:	3401      	adds	r4, #1
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b24:	3a30      	subs	r2, #48	; 0x30
 8006b26:	2a09      	cmp	r2, #9
 8006b28:	d903      	bls.n	8006b32 <_vfiprintf_r+0x1ee>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c5      	beq.n	8006aba <_vfiprintf_r+0x176>
 8006b2e:	9105      	str	r1, [sp, #20]
 8006b30:	e7c3      	b.n	8006aba <_vfiprintf_r+0x176>
 8006b32:	4604      	mov	r4, r0
 8006b34:	2301      	movs	r3, #1
 8006b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b3a:	e7f0      	b.n	8006b1e <_vfiprintf_r+0x1da>
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	462a      	mov	r2, r5
 8006b42:	4630      	mov	r0, r6
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <_vfiprintf_r+0x25c>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	f3af 8000 	nop.w
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	1c78      	adds	r0, r7, #1
 8006b50:	d1d6      	bne.n	8006b00 <_vfiprintf_r+0x1bc>
 8006b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	d405      	bmi.n	8006b64 <_vfiprintf_r+0x220>
 8006b58:	89ab      	ldrh	r3, [r5, #12]
 8006b5a:	059a      	lsls	r2, r3, #22
 8006b5c:	d402      	bmi.n	8006b64 <_vfiprintf_r+0x220>
 8006b5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b60:	f000 fc43 	bl	80073ea <__retarget_lock_release_recursive>
 8006b64:	89ab      	ldrh	r3, [r5, #12]
 8006b66:	065b      	lsls	r3, r3, #25
 8006b68:	f53f af12 	bmi.w	8006990 <_vfiprintf_r+0x4c>
 8006b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b6e:	e711      	b.n	8006994 <_vfiprintf_r+0x50>
 8006b70:	ab03      	add	r3, sp, #12
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	462a      	mov	r2, r5
 8006b76:	4630      	mov	r0, r6
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <_vfiprintf_r+0x25c>)
 8006b7a:	a904      	add	r1, sp, #16
 8006b7c:	f000 f882 	bl	8006c84 <_printf_i>
 8006b80:	e7e4      	b.n	8006b4c <_vfiprintf_r+0x208>
 8006b82:	bf00      	nop
 8006b84:	080095a8 	.word	0x080095a8
 8006b88:	080095c8 	.word	0x080095c8
 8006b8c:	08009588 	.word	0x08009588
 8006b90:	08009552 	.word	0x08009552
 8006b94:	08009558 	.word	0x08009558
 8006b98:	0800955c 	.word	0x0800955c
 8006b9c:	00000000 	.word	0x00000000
 8006ba0:	0800691f 	.word	0x0800691f

08006ba4 <_printf_common>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	4616      	mov	r6, r2
 8006baa:	4699      	mov	r9, r3
 8006bac:	688a      	ldr	r2, [r1, #8]
 8006bae:	690b      	ldr	r3, [r1, #16]
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	bfb8      	it	lt
 8006bb6:	4613      	movlt	r3, r2
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bc4:	b10a      	cbz	r2, 8006bca <_printf_common+0x26>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	0699      	lsls	r1, r3, #26
 8006bce:	bf42      	ittt	mi
 8006bd0:	6833      	ldrmi	r3, [r6, #0]
 8006bd2:	3302      	addmi	r3, #2
 8006bd4:	6033      	strmi	r3, [r6, #0]
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	f015 0506 	ands.w	r5, r5, #6
 8006bdc:	d106      	bne.n	8006bec <_printf_common+0x48>
 8006bde:	f104 0a19 	add.w	sl, r4, #25
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	6832      	ldr	r2, [r6, #0]
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	dc28      	bgt.n	8006c3e <_printf_common+0x9a>
 8006bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf0:	1e13      	subs	r3, r2, #0
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	0692      	lsls	r2, r2, #26
 8006bfa:	d42d      	bmi.n	8006c58 <_printf_common+0xb4>
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c04:	47c0      	blx	r8
 8006c06:	3001      	adds	r0, #1
 8006c08:	d020      	beq.n	8006c4c <_printf_common+0xa8>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	68e5      	ldr	r5, [r4, #12]
 8006c0e:	f003 0306 	and.w	r3, r3, #6
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	bf18      	it	ne
 8006c16:	2500      	movne	r5, #0
 8006c18:	6832      	ldr	r2, [r6, #0]
 8006c1a:	f04f 0600 	mov.w	r6, #0
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	bf08      	it	eq
 8006c22:	1aad      	subeq	r5, r5, r2
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	bf08      	it	eq
 8006c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bfc4      	itt	gt
 8006c30:	1a9b      	subgt	r3, r3, r2
 8006c32:	18ed      	addgt	r5, r5, r3
 8006c34:	341a      	adds	r4, #26
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d11a      	bne.n	8006c70 <_printf_common+0xcc>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e008      	b.n	8006c50 <_printf_common+0xac>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4649      	mov	r1, r9
 8006c44:	4638      	mov	r0, r7
 8006c46:	47c0      	blx	r8
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0xb0>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	3501      	adds	r5, #1
 8006c56:	e7c4      	b.n	8006be2 <_printf_common+0x3e>
 8006c58:	2030      	movs	r0, #48	; 0x30
 8006c5a:	18e1      	adds	r1, r4, r3
 8006c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c66:	4422      	add	r2, r4
 8006c68:	3302      	adds	r3, #2
 8006c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c6e:	e7c5      	b.n	8006bfc <_printf_common+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	4649      	mov	r1, r9
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0e6      	beq.n	8006c4c <_printf_common+0xa8>
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7d9      	b.n	8006c36 <_printf_common+0x92>
	...

08006c84 <_printf_i>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	7e0f      	ldrb	r7, [r1, #24]
 8006c8a:	4691      	mov	r9, r2
 8006c8c:	2f78      	cmp	r7, #120	; 0x78
 8006c8e:	4680      	mov	r8, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	469a      	mov	sl, r3
 8006c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c9a:	d807      	bhi.n	8006cac <_printf_i+0x28>
 8006c9c:	2f62      	cmp	r7, #98	; 0x62
 8006c9e:	d80a      	bhi.n	8006cb6 <_printf_i+0x32>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f000 80d9 	beq.w	8006e58 <_printf_i+0x1d4>
 8006ca6:	2f58      	cmp	r7, #88	; 0x58
 8006ca8:	f000 80a4 	beq.w	8006df4 <_printf_i+0x170>
 8006cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb4:	e03a      	b.n	8006d2c <_printf_i+0xa8>
 8006cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cba:	2b15      	cmp	r3, #21
 8006cbc:	d8f6      	bhi.n	8006cac <_printf_i+0x28>
 8006cbe:	a101      	add	r1, pc, #4	; (adr r1, 8006cc4 <_printf_i+0x40>)
 8006cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006cad 	.word	0x08006cad
 8006cd0:	08006cad 	.word	0x08006cad
 8006cd4:	08006cad 	.word	0x08006cad
 8006cd8:	08006cad 	.word	0x08006cad
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006cad 	.word	0x08006cad
 8006ce4:	08006cad 	.word	0x08006cad
 8006ce8:	08006cad 	.word	0x08006cad
 8006cec:	08006cad 	.word	0x08006cad
 8006cf0:	08006e3f 	.word	0x08006e3f
 8006cf4:	08006d61 	.word	0x08006d61
 8006cf8:	08006e21 	.word	0x08006e21
 8006cfc:	08006cad 	.word	0x08006cad
 8006d00:	08006cad 	.word	0x08006cad
 8006d04:	08006e61 	.word	0x08006e61
 8006d08:	08006cad 	.word	0x08006cad
 8006d0c:	08006d61 	.word	0x08006d61
 8006d10:	08006cad 	.word	0x08006cad
 8006d14:	08006cad 	.word	0x08006cad
 8006d18:	08006e29 	.word	0x08006e29
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	602a      	str	r2, [r5, #0]
 8006d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0a4      	b.n	8006e7a <_printf_i+0x1f6>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	6829      	ldr	r1, [r5, #0]
 8006d34:	0606      	lsls	r6, r0, #24
 8006d36:	f101 0304 	add.w	r3, r1, #4
 8006d3a:	d50a      	bpl.n	8006d52 <_printf_i+0xce>
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	da03      	bge.n	8006d4c <_printf_i+0xc8>
 8006d44:	232d      	movs	r3, #45	; 0x2d
 8006d46:	4276      	negs	r6, r6
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4c:	230a      	movs	r3, #10
 8006d4e:	485e      	ldr	r0, [pc, #376]	; (8006ec8 <_printf_i+0x244>)
 8006d50:	e019      	b.n	8006d86 <_printf_i+0x102>
 8006d52:	680e      	ldr	r6, [r1, #0]
 8006d54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	bf18      	it	ne
 8006d5c:	b236      	sxthne	r6, r6
 8006d5e:	e7ef      	b.n	8006d40 <_printf_i+0xbc>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1d19      	adds	r1, r3, #4
 8006d66:	6029      	str	r1, [r5, #0]
 8006d68:	0601      	lsls	r1, r0, #24
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0xec>
 8006d6c:	681e      	ldr	r6, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <_printf_i+0xf2>
 8006d70:	0646      	lsls	r6, r0, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0xe8>
 8006d74:	881e      	ldrh	r6, [r3, #0]
 8006d76:	2f6f      	cmp	r7, #111	; 0x6f
 8006d78:	bf0c      	ite	eq
 8006d7a:	2308      	moveq	r3, #8
 8006d7c:	230a      	movne	r3, #10
 8006d7e:	4852      	ldr	r0, [pc, #328]	; (8006ec8 <_printf_i+0x244>)
 8006d80:	2100      	movs	r1, #0
 8006d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d86:	6865      	ldr	r5, [r4, #4]
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	bfa8      	it	ge
 8006d8c:	6821      	ldrge	r1, [r4, #0]
 8006d8e:	60a5      	str	r5, [r4, #8]
 8006d90:	bfa4      	itt	ge
 8006d92:	f021 0104 	bicge.w	r1, r1, #4
 8006d96:	6021      	strge	r1, [r4, #0]
 8006d98:	b90e      	cbnz	r6, 8006d9e <_printf_i+0x11a>
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	d04d      	beq.n	8006e3a <_printf_i+0x1b6>
 8006d9e:	4615      	mov	r5, r2
 8006da0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006da4:	fb03 6711 	mls	r7, r3, r1, r6
 8006da8:	5dc7      	ldrb	r7, [r0, r7]
 8006daa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dae:	4637      	mov	r7, r6
 8006db0:	42bb      	cmp	r3, r7
 8006db2:	460e      	mov	r6, r1
 8006db4:	d9f4      	bls.n	8006da0 <_printf_i+0x11c>
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d10b      	bne.n	8006dd2 <_printf_i+0x14e>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	07de      	lsls	r6, r3, #31
 8006dbe:	d508      	bpl.n	8006dd2 <_printf_i+0x14e>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	6861      	ldr	r1, [r4, #4]
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	bfde      	ittt	le
 8006dc8:	2330      	movle	r3, #48	; 0x30
 8006dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dd2:	1b52      	subs	r2, r2, r5
 8006dd4:	6122      	str	r2, [r4, #16]
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	aa03      	add	r2, sp, #12
 8006de2:	f7ff fedf 	bl	8006ba4 <_printf_common>
 8006de6:	3001      	adds	r0, #1
 8006de8:	d14c      	bne.n	8006e84 <_printf_i+0x200>
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	b004      	add	sp, #16
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	4834      	ldr	r0, [pc, #208]	; (8006ec8 <_printf_i+0x244>)
 8006df6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dfa:	6829      	ldr	r1, [r5, #0]
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e02:	6029      	str	r1, [r5, #0]
 8006e04:	061d      	lsls	r5, r3, #24
 8006e06:	d514      	bpl.n	8006e32 <_printf_i+0x1ae>
 8006e08:	07df      	lsls	r7, r3, #31
 8006e0a:	bf44      	itt	mi
 8006e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8006e10:	6023      	strmi	r3, [r4, #0]
 8006e12:	b91e      	cbnz	r6, 8006e1c <_printf_i+0x198>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	e7af      	b.n	8006d80 <_printf_i+0xfc>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f043 0320 	orr.w	r3, r3, #32
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	2378      	movs	r3, #120	; 0x78
 8006e2a:	4828      	ldr	r0, [pc, #160]	; (8006ecc <_printf_i+0x248>)
 8006e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e30:	e7e3      	b.n	8006dfa <_printf_i+0x176>
 8006e32:	0659      	lsls	r1, r3, #25
 8006e34:	bf48      	it	mi
 8006e36:	b2b6      	uxthmi	r6, r6
 8006e38:	e7e6      	b.n	8006e08 <_printf_i+0x184>
 8006e3a:	4615      	mov	r5, r2
 8006e3c:	e7bb      	b.n	8006db6 <_printf_i+0x132>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	6826      	ldr	r6, [r4, #0]
 8006e42:	1d18      	adds	r0, r3, #4
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	6028      	str	r0, [r5, #0]
 8006e48:	0635      	lsls	r5, r6, #24
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	d501      	bpl.n	8006e52 <_printf_i+0x1ce>
 8006e4e:	6019      	str	r1, [r3, #0]
 8006e50:	e002      	b.n	8006e58 <_printf_i+0x1d4>
 8006e52:	0670      	lsls	r0, r6, #25
 8006e54:	d5fb      	bpl.n	8006e4e <_printf_i+0x1ca>
 8006e56:	8019      	strh	r1, [r3, #0]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4615      	mov	r5, r2
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	e7ba      	b.n	8006dd6 <_printf_i+0x152>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	2100      	movs	r1, #0
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 fb23 	bl	80074b8 <memchr>
 8006e72:	b108      	cbz	r0, 8006e78 <_printf_i+0x1f4>
 8006e74:	1b40      	subs	r0, r0, r5
 8006e76:	6060      	str	r0, [r4, #4]
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e82:	e7a8      	b.n	8006dd6 <_printf_i+0x152>
 8006e84:	462a      	mov	r2, r5
 8006e86:	4649      	mov	r1, r9
 8006e88:	4640      	mov	r0, r8
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	47d0      	blx	sl
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d0ab      	beq.n	8006dea <_printf_i+0x166>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	079b      	lsls	r3, r3, #30
 8006e96:	d413      	bmi.n	8006ec0 <_printf_i+0x23c>
 8006e98:	68e0      	ldr	r0, [r4, #12]
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	bfb8      	it	lt
 8006ea0:	4618      	movlt	r0, r3
 8006ea2:	e7a4      	b.n	8006dee <_printf_i+0x16a>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4640      	mov	r0, r8
 8006eac:	47d0      	blx	sl
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d09b      	beq.n	8006dea <_printf_i+0x166>
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	68e3      	ldr	r3, [r4, #12]
 8006eb6:	9903      	ldr	r1, [sp, #12]
 8006eb8:	1a5b      	subs	r3, r3, r1
 8006eba:	42ab      	cmp	r3, r5
 8006ebc:	dcf2      	bgt.n	8006ea4 <_printf_i+0x220>
 8006ebe:	e7eb      	b.n	8006e98 <_printf_i+0x214>
 8006ec0:	2500      	movs	r5, #0
 8006ec2:	f104 0619 	add.w	r6, r4, #25
 8006ec6:	e7f5      	b.n	8006eb4 <_printf_i+0x230>
 8006ec8:	08009563 	.word	0x08009563
 8006ecc:	08009574 	.word	0x08009574

08006ed0 <_sbrk_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4d05      	ldr	r5, [pc, #20]	; (8006eec <_sbrk_r+0x1c>)
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7fa fc48 	bl	8001770 <_sbrk>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_sbrk_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_sbrk_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20000280 	.word	0x20000280

08006ef0 <__swbuf_r>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b118      	cbz	r0, 8006f02 <__swbuf_r+0x12>
 8006efa:	6983      	ldr	r3, [r0, #24]
 8006efc:	b90b      	cbnz	r3, 8006f02 <__swbuf_r+0x12>
 8006efe:	f000 f9d5 	bl	80072ac <__sinit>
 8006f02:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <__swbuf_r+0x98>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	d12b      	bne.n	8006f60 <__swbuf_r+0x70>
 8006f08:	686c      	ldr	r4, [r5, #4]
 8006f0a:	69a3      	ldr	r3, [r4, #24]
 8006f0c:	60a3      	str	r3, [r4, #8]
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	071a      	lsls	r2, r3, #28
 8006f12:	d52f      	bpl.n	8006f74 <__swbuf_r+0x84>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	b36b      	cbz	r3, 8006f74 <__swbuf_r+0x84>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	b2f6      	uxtb	r6, r6
 8006f1e:	1ac0      	subs	r0, r0, r3
 8006f20:	6963      	ldr	r3, [r4, #20]
 8006f22:	4637      	mov	r7, r6
 8006f24:	4283      	cmp	r3, r0
 8006f26:	dc04      	bgt.n	8006f32 <__swbuf_r+0x42>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f92a 	bl	8007184 <_fflush_r>
 8006f30:	bb30      	cbnz	r0, 8006f80 <__swbuf_r+0x90>
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	3001      	adds	r0, #1
 8006f36:	3b01      	subs	r3, #1
 8006f38:	60a3      	str	r3, [r4, #8]
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	701e      	strb	r6, [r3, #0]
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	4283      	cmp	r3, r0
 8006f46:	d004      	beq.n	8006f52 <__swbuf_r+0x62>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	07db      	lsls	r3, r3, #31
 8006f4c:	d506      	bpl.n	8006f5c <__swbuf_r+0x6c>
 8006f4e:	2e0a      	cmp	r6, #10
 8006f50:	d104      	bne.n	8006f5c <__swbuf_r+0x6c>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 f915 	bl	8007184 <_fflush_r>
 8006f5a:	b988      	cbnz	r0, 8006f80 <__swbuf_r+0x90>
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <__swbuf_r+0x9c>)
 8006f62:	429c      	cmp	r4, r3
 8006f64:	d101      	bne.n	8006f6a <__swbuf_r+0x7a>
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	e7cf      	b.n	8006f0a <__swbuf_r+0x1a>
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <__swbuf_r+0xa0>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	bf08      	it	eq
 8006f70:	68ec      	ldreq	r4, [r5, #12]
 8006f72:	e7ca      	b.n	8006f0a <__swbuf_r+0x1a>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f80c 	bl	8006f94 <__swsetup_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0cb      	beq.n	8006f18 <__swbuf_r+0x28>
 8006f80:	f04f 37ff 	mov.w	r7, #4294967295
 8006f84:	e7ea      	b.n	8006f5c <__swbuf_r+0x6c>
 8006f86:	bf00      	nop
 8006f88:	080095a8 	.word	0x080095a8
 8006f8c:	080095c8 	.word	0x080095c8
 8006f90:	08009588 	.word	0x08009588

08006f94 <__swsetup_r>:
 8006f94:	4b32      	ldr	r3, [pc, #200]	; (8007060 <__swsetup_r+0xcc>)
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	b125      	cbz	r5, 8006faa <__swsetup_r+0x16>
 8006fa0:	69ab      	ldr	r3, [r5, #24]
 8006fa2:	b913      	cbnz	r3, 8006faa <__swsetup_r+0x16>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f981 	bl	80072ac <__sinit>
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <__swsetup_r+0xd0>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d10f      	bne.n	8006fd0 <__swsetup_r+0x3c>
 8006fb0:	686c      	ldr	r4, [r5, #4]
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb8:	0719      	lsls	r1, r3, #28
 8006fba:	d42c      	bmi.n	8007016 <__swsetup_r+0x82>
 8006fbc:	06dd      	lsls	r5, r3, #27
 8006fbe:	d411      	bmi.n	8006fe4 <__swsetup_r+0x50>
 8006fc0:	2309      	movs	r3, #9
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	e03e      	b.n	800704e <__swsetup_r+0xba>
 8006fd0:	4b25      	ldr	r3, [pc, #148]	; (8007068 <__swsetup_r+0xd4>)
 8006fd2:	429c      	cmp	r4, r3
 8006fd4:	d101      	bne.n	8006fda <__swsetup_r+0x46>
 8006fd6:	68ac      	ldr	r4, [r5, #8]
 8006fd8:	e7eb      	b.n	8006fb2 <__swsetup_r+0x1e>
 8006fda:	4b24      	ldr	r3, [pc, #144]	; (800706c <__swsetup_r+0xd8>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	bf08      	it	eq
 8006fe0:	68ec      	ldreq	r4, [r5, #12]
 8006fe2:	e7e6      	b.n	8006fb2 <__swsetup_r+0x1e>
 8006fe4:	0758      	lsls	r0, r3, #29
 8006fe6:	d512      	bpl.n	800700e <__swsetup_r+0x7a>
 8006fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fea:	b141      	cbz	r1, 8006ffe <__swsetup_r+0x6a>
 8006fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <__swsetup_r+0x66>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff fba1 	bl	800673c <_free_r>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	2300      	movs	r3, #0
 8007008:	6063      	str	r3, [r4, #4]
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	f043 0308 	orr.w	r3, r3, #8
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	b94b      	cbnz	r3, 800702e <__swsetup_r+0x9a>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007024:	d003      	beq.n	800702e <__swsetup_r+0x9a>
 8007026:	4621      	mov	r1, r4
 8007028:	4630      	mov	r0, r6
 800702a:	f000 fa05 	bl	8007438 <__smakebuf_r>
 800702e:	89a0      	ldrh	r0, [r4, #12]
 8007030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007034:	f010 0301 	ands.w	r3, r0, #1
 8007038:	d00a      	beq.n	8007050 <__swsetup_r+0xbc>
 800703a:	2300      	movs	r3, #0
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	6963      	ldr	r3, [r4, #20]
 8007040:	425b      	negs	r3, r3
 8007042:	61a3      	str	r3, [r4, #24]
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	b943      	cbnz	r3, 800705a <__swsetup_r+0xc6>
 8007048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800704c:	d1ba      	bne.n	8006fc4 <__swsetup_r+0x30>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	0781      	lsls	r1, r0, #30
 8007052:	bf58      	it	pl
 8007054:	6963      	ldrpl	r3, [r4, #20]
 8007056:	60a3      	str	r3, [r4, #8]
 8007058:	e7f4      	b.n	8007044 <__swsetup_r+0xb0>
 800705a:	2000      	movs	r0, #0
 800705c:	e7f7      	b.n	800704e <__swsetup_r+0xba>
 800705e:	bf00      	nop
 8007060:	20000014 	.word	0x20000014
 8007064:	080095a8 	.word	0x080095a8
 8007068:	080095c8 	.word	0x080095c8
 800706c:	08009588 	.word	0x08009588

08007070 <abort>:
 8007070:	2006      	movs	r0, #6
 8007072:	b508      	push	{r3, lr}
 8007074:	f000 fa62 	bl	800753c <raise>
 8007078:	2001      	movs	r0, #1
 800707a:	f7fa fb06 	bl	800168a <_exit>
	...

08007080 <__sflush_r>:
 8007080:	898a      	ldrh	r2, [r1, #12]
 8007082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007084:	4605      	mov	r5, r0
 8007086:	0710      	lsls	r0, r2, #28
 8007088:	460c      	mov	r4, r1
 800708a:	d457      	bmi.n	800713c <__sflush_r+0xbc>
 800708c:	684b      	ldr	r3, [r1, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	dc04      	bgt.n	800709c <__sflush_r+0x1c>
 8007092:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	dc01      	bgt.n	800709c <__sflush_r+0x1c>
 8007098:	2000      	movs	r0, #0
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800709e:	2e00      	cmp	r6, #0
 80070a0:	d0fa      	beq.n	8007098 <__sflush_r+0x18>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070a8:	682f      	ldr	r7, [r5, #0]
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	d032      	beq.n	8007114 <__sflush_r+0x94>
 80070ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	075a      	lsls	r2, r3, #29
 80070b4:	d505      	bpl.n	80070c2 <__sflush_r+0x42>
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	1ac0      	subs	r0, r0, r3
 80070ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070bc:	b10b      	cbz	r3, 80070c2 <__sflush_r+0x42>
 80070be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070c0:	1ac0      	subs	r0, r0, r3
 80070c2:	2300      	movs	r3, #0
 80070c4:	4602      	mov	r2, r0
 80070c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070c8:	4628      	mov	r0, r5
 80070ca:	6a21      	ldr	r1, [r4, #32]
 80070cc:	47b0      	blx	r6
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	d106      	bne.n	80070e2 <__sflush_r+0x62>
 80070d4:	6829      	ldr	r1, [r5, #0]
 80070d6:	291d      	cmp	r1, #29
 80070d8:	d82c      	bhi.n	8007134 <__sflush_r+0xb4>
 80070da:	4a29      	ldr	r2, [pc, #164]	; (8007180 <__sflush_r+0x100>)
 80070dc:	40ca      	lsrs	r2, r1
 80070de:	07d6      	lsls	r6, r2, #31
 80070e0:	d528      	bpl.n	8007134 <__sflush_r+0xb4>
 80070e2:	2200      	movs	r2, #0
 80070e4:	6062      	str	r2, [r4, #4]
 80070e6:	6922      	ldr	r2, [r4, #16]
 80070e8:	04d9      	lsls	r1, r3, #19
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	d504      	bpl.n	80070f8 <__sflush_r+0x78>
 80070ee:	1c42      	adds	r2, r0, #1
 80070f0:	d101      	bne.n	80070f6 <__sflush_r+0x76>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b903      	cbnz	r3, 80070f8 <__sflush_r+0x78>
 80070f6:	6560      	str	r0, [r4, #84]	; 0x54
 80070f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fa:	602f      	str	r7, [r5, #0]
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d0cb      	beq.n	8007098 <__sflush_r+0x18>
 8007100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <__sflush_r+0x8e>
 8007108:	4628      	mov	r0, r5
 800710a:	f7ff fb17 	bl	800673c <_free_r>
 800710e:	2000      	movs	r0, #0
 8007110:	6360      	str	r0, [r4, #52]	; 0x34
 8007112:	e7c2      	b.n	800709a <__sflush_r+0x1a>
 8007114:	6a21      	ldr	r1, [r4, #32]
 8007116:	2301      	movs	r3, #1
 8007118:	4628      	mov	r0, r5
 800711a:	47b0      	blx	r6
 800711c:	1c41      	adds	r1, r0, #1
 800711e:	d1c7      	bne.n	80070b0 <__sflush_r+0x30>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0c4      	beq.n	80070b0 <__sflush_r+0x30>
 8007126:	2b1d      	cmp	r3, #29
 8007128:	d001      	beq.n	800712e <__sflush_r+0xae>
 800712a:	2b16      	cmp	r3, #22
 800712c:	d101      	bne.n	8007132 <__sflush_r+0xb2>
 800712e:	602f      	str	r7, [r5, #0]
 8007130:	e7b2      	b.n	8007098 <__sflush_r+0x18>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	e7ae      	b.n	800709a <__sflush_r+0x1a>
 800713c:	690f      	ldr	r7, [r1, #16]
 800713e:	2f00      	cmp	r7, #0
 8007140:	d0aa      	beq.n	8007098 <__sflush_r+0x18>
 8007142:	0793      	lsls	r3, r2, #30
 8007144:	bf18      	it	ne
 8007146:	2300      	movne	r3, #0
 8007148:	680e      	ldr	r6, [r1, #0]
 800714a:	bf08      	it	eq
 800714c:	694b      	ldreq	r3, [r1, #20]
 800714e:	1bf6      	subs	r6, r6, r7
 8007150:	600f      	str	r7, [r1, #0]
 8007152:	608b      	str	r3, [r1, #8]
 8007154:	2e00      	cmp	r6, #0
 8007156:	dd9f      	ble.n	8007098 <__sflush_r+0x18>
 8007158:	4633      	mov	r3, r6
 800715a:	463a      	mov	r2, r7
 800715c:	4628      	mov	r0, r5
 800715e:	6a21      	ldr	r1, [r4, #32]
 8007160:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007164:	47e0      	blx	ip
 8007166:	2800      	cmp	r0, #0
 8007168:	dc06      	bgt.n	8007178 <__sflush_r+0xf8>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	e790      	b.n	800709a <__sflush_r+0x1a>
 8007178:	4407      	add	r7, r0
 800717a:	1a36      	subs	r6, r6, r0
 800717c:	e7ea      	b.n	8007154 <__sflush_r+0xd4>
 800717e:	bf00      	nop
 8007180:	20400001 	.word	0x20400001

08007184 <_fflush_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	690b      	ldr	r3, [r1, #16]
 8007188:	4605      	mov	r5, r0
 800718a:	460c      	mov	r4, r1
 800718c:	b913      	cbnz	r3, 8007194 <_fflush_r+0x10>
 800718e:	2500      	movs	r5, #0
 8007190:	4628      	mov	r0, r5
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	b118      	cbz	r0, 800719e <_fflush_r+0x1a>
 8007196:	6983      	ldr	r3, [r0, #24]
 8007198:	b90b      	cbnz	r3, 800719e <_fflush_r+0x1a>
 800719a:	f000 f887 	bl	80072ac <__sinit>
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <_fflush_r+0x6c>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d11b      	bne.n	80071dc <_fflush_r+0x58>
 80071a4:	686c      	ldr	r4, [r5, #4]
 80071a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0ef      	beq.n	800718e <_fflush_r+0xa>
 80071ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071b0:	07d0      	lsls	r0, r2, #31
 80071b2:	d404      	bmi.n	80071be <_fflush_r+0x3a>
 80071b4:	0599      	lsls	r1, r3, #22
 80071b6:	d402      	bmi.n	80071be <_fflush_r+0x3a>
 80071b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ba:	f000 f915 	bl	80073e8 <__retarget_lock_acquire_recursive>
 80071be:	4628      	mov	r0, r5
 80071c0:	4621      	mov	r1, r4
 80071c2:	f7ff ff5d 	bl	8007080 <__sflush_r>
 80071c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c8:	4605      	mov	r5, r0
 80071ca:	07da      	lsls	r2, r3, #31
 80071cc:	d4e0      	bmi.n	8007190 <_fflush_r+0xc>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	059b      	lsls	r3, r3, #22
 80071d2:	d4dd      	bmi.n	8007190 <_fflush_r+0xc>
 80071d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d6:	f000 f908 	bl	80073ea <__retarget_lock_release_recursive>
 80071da:	e7d9      	b.n	8007190 <_fflush_r+0xc>
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <_fflush_r+0x70>)
 80071de:	429c      	cmp	r4, r3
 80071e0:	d101      	bne.n	80071e6 <_fflush_r+0x62>
 80071e2:	68ac      	ldr	r4, [r5, #8]
 80071e4:	e7df      	b.n	80071a6 <_fflush_r+0x22>
 80071e6:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <_fflush_r+0x74>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	bf08      	it	eq
 80071ec:	68ec      	ldreq	r4, [r5, #12]
 80071ee:	e7da      	b.n	80071a6 <_fflush_r+0x22>
 80071f0:	080095a8 	.word	0x080095a8
 80071f4:	080095c8 	.word	0x080095c8
 80071f8:	08009588 	.word	0x08009588

080071fc <std>:
 80071fc:	2300      	movs	r3, #0
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	e9c0 3300 	strd	r3, r3, [r0]
 8007206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720a:	6083      	str	r3, [r0, #8]
 800720c:	8181      	strh	r1, [r0, #12]
 800720e:	6643      	str	r3, [r0, #100]	; 0x64
 8007210:	81c2      	strh	r2, [r0, #14]
 8007212:	6183      	str	r3, [r0, #24]
 8007214:	4619      	mov	r1, r3
 8007216:	2208      	movs	r2, #8
 8007218:	305c      	adds	r0, #92	; 0x5c
 800721a:	f7ff f9e3 	bl	80065e4 <memset>
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <std+0x38>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	6263      	str	r3, [r4, #36]	; 0x24
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <std+0x3c>)
 8007226:	62a3      	str	r3, [r4, #40]	; 0x28
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <std+0x40>)
 800722a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <std+0x44>)
 800722e:	6323      	str	r3, [r4, #48]	; 0x30
 8007230:	bd10      	pop	{r4, pc}
 8007232:	bf00      	nop
 8007234:	08007575 	.word	0x08007575
 8007238:	08007597 	.word	0x08007597
 800723c:	080075cf 	.word	0x080075cf
 8007240:	080075f3 	.word	0x080075f3

08007244 <_cleanup_r>:
 8007244:	4901      	ldr	r1, [pc, #4]	; (800724c <_cleanup_r+0x8>)
 8007246:	f000 b8af 	b.w	80073a8 <_fwalk_reent>
 800724a:	bf00      	nop
 800724c:	08007185 	.word	0x08007185

08007250 <__sfmoreglue>:
 8007250:	2268      	movs	r2, #104	; 0x68
 8007252:	b570      	push	{r4, r5, r6, lr}
 8007254:	1e4d      	subs	r5, r1, #1
 8007256:	4355      	muls	r5, r2
 8007258:	460e      	mov	r6, r1
 800725a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800725e:	f7ff fad5 	bl	800680c <_malloc_r>
 8007262:	4604      	mov	r4, r0
 8007264:	b140      	cbz	r0, 8007278 <__sfmoreglue+0x28>
 8007266:	2100      	movs	r1, #0
 8007268:	e9c0 1600 	strd	r1, r6, [r0]
 800726c:	300c      	adds	r0, #12
 800726e:	60a0      	str	r0, [r4, #8]
 8007270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007274:	f7ff f9b6 	bl	80065e4 <memset>
 8007278:	4620      	mov	r0, r4
 800727a:	bd70      	pop	{r4, r5, r6, pc}

0800727c <__sfp_lock_acquire>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__sfp_lock_acquire+0x8>)
 800727e:	f000 b8b3 	b.w	80073e8 <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	2000027d 	.word	0x2000027d

08007288 <__sfp_lock_release>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__sfp_lock_release+0x8>)
 800728a:	f000 b8ae 	b.w	80073ea <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	2000027d 	.word	0x2000027d

08007294 <__sinit_lock_acquire>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__sinit_lock_acquire+0x8>)
 8007296:	f000 b8a7 	b.w	80073e8 <__retarget_lock_acquire_recursive>
 800729a:	bf00      	nop
 800729c:	2000027e 	.word	0x2000027e

080072a0 <__sinit_lock_release>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__sinit_lock_release+0x8>)
 80072a2:	f000 b8a2 	b.w	80073ea <__retarget_lock_release_recursive>
 80072a6:	bf00      	nop
 80072a8:	2000027e 	.word	0x2000027e

080072ac <__sinit>:
 80072ac:	b510      	push	{r4, lr}
 80072ae:	4604      	mov	r4, r0
 80072b0:	f7ff fff0 	bl	8007294 <__sinit_lock_acquire>
 80072b4:	69a3      	ldr	r3, [r4, #24]
 80072b6:	b11b      	cbz	r3, 80072c0 <__sinit+0x14>
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f7ff bff0 	b.w	80072a0 <__sinit_lock_release>
 80072c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072c4:	6523      	str	r3, [r4, #80]	; 0x50
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <__sinit+0x68>)
 80072c8:	4a13      	ldr	r2, [pc, #76]	; (8007318 <__sinit+0x6c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	bf08      	it	eq
 80072d2:	2301      	moveq	r3, #1
 80072d4:	4620      	mov	r0, r4
 80072d6:	bf08      	it	eq
 80072d8:	61a3      	streq	r3, [r4, #24]
 80072da:	f000 f81f 	bl	800731c <__sfp>
 80072de:	6060      	str	r0, [r4, #4]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f81b 	bl	800731c <__sfp>
 80072e6:	60a0      	str	r0, [r4, #8]
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 f817 	bl	800731c <__sfp>
 80072ee:	2200      	movs	r2, #0
 80072f0:	2104      	movs	r1, #4
 80072f2:	60e0      	str	r0, [r4, #12]
 80072f4:	6860      	ldr	r0, [r4, #4]
 80072f6:	f7ff ff81 	bl	80071fc <std>
 80072fa:	2201      	movs	r2, #1
 80072fc:	2109      	movs	r1, #9
 80072fe:	68a0      	ldr	r0, [r4, #8]
 8007300:	f7ff ff7c 	bl	80071fc <std>
 8007304:	2202      	movs	r2, #2
 8007306:	2112      	movs	r1, #18
 8007308:	68e0      	ldr	r0, [r4, #12]
 800730a:	f7ff ff77 	bl	80071fc <std>
 800730e:	2301      	movs	r3, #1
 8007310:	61a3      	str	r3, [r4, #24]
 8007312:	e7d1      	b.n	80072b8 <__sinit+0xc>
 8007314:	080094a0 	.word	0x080094a0
 8007318:	08007245 	.word	0x08007245

0800731c <__sfp>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	4607      	mov	r7, r0
 8007320:	f7ff ffac 	bl	800727c <__sfp_lock_acquire>
 8007324:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <__sfp+0x84>)
 8007326:	681e      	ldr	r6, [r3, #0]
 8007328:	69b3      	ldr	r3, [r6, #24]
 800732a:	b913      	cbnz	r3, 8007332 <__sfp+0x16>
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff ffbd 	bl	80072ac <__sinit>
 8007332:	3648      	adds	r6, #72	; 0x48
 8007334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007338:	3b01      	subs	r3, #1
 800733a:	d503      	bpl.n	8007344 <__sfp+0x28>
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	b30b      	cbz	r3, 8007384 <__sfp+0x68>
 8007340:	6836      	ldr	r6, [r6, #0]
 8007342:	e7f7      	b.n	8007334 <__sfp+0x18>
 8007344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007348:	b9d5      	cbnz	r5, 8007380 <__sfp+0x64>
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <__sfp+0x88>)
 800734c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007350:	60e3      	str	r3, [r4, #12]
 8007352:	6665      	str	r5, [r4, #100]	; 0x64
 8007354:	f000 f847 	bl	80073e6 <__retarget_lock_init_recursive>
 8007358:	f7ff ff96 	bl	8007288 <__sfp_lock_release>
 800735c:	2208      	movs	r2, #8
 800735e:	4629      	mov	r1, r5
 8007360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007368:	6025      	str	r5, [r4, #0]
 800736a:	61a5      	str	r5, [r4, #24]
 800736c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007370:	f7ff f938 	bl	80065e4 <memset>
 8007374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800737c:	4620      	mov	r0, r4
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007380:	3468      	adds	r4, #104	; 0x68
 8007382:	e7d9      	b.n	8007338 <__sfp+0x1c>
 8007384:	2104      	movs	r1, #4
 8007386:	4638      	mov	r0, r7
 8007388:	f7ff ff62 	bl	8007250 <__sfmoreglue>
 800738c:	4604      	mov	r4, r0
 800738e:	6030      	str	r0, [r6, #0]
 8007390:	2800      	cmp	r0, #0
 8007392:	d1d5      	bne.n	8007340 <__sfp+0x24>
 8007394:	f7ff ff78 	bl	8007288 <__sfp_lock_release>
 8007398:	230c      	movs	r3, #12
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	e7ee      	b.n	800737c <__sfp+0x60>
 800739e:	bf00      	nop
 80073a0:	080094a0 	.word	0x080094a0
 80073a4:	ffff0001 	.word	0xffff0001

080073a8 <_fwalk_reent>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	4606      	mov	r6, r0
 80073ae:	4688      	mov	r8, r1
 80073b0:	2700      	movs	r7, #0
 80073b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ba:	f1b9 0901 	subs.w	r9, r9, #1
 80073be:	d505      	bpl.n	80073cc <_fwalk_reent+0x24>
 80073c0:	6824      	ldr	r4, [r4, #0]
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	d1f7      	bne.n	80073b6 <_fwalk_reent+0xe>
 80073c6:	4638      	mov	r0, r7
 80073c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073cc:	89ab      	ldrh	r3, [r5, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d907      	bls.n	80073e2 <_fwalk_reent+0x3a>
 80073d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073d6:	3301      	adds	r3, #1
 80073d8:	d003      	beq.n	80073e2 <_fwalk_reent+0x3a>
 80073da:	4629      	mov	r1, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	47c0      	blx	r8
 80073e0:	4307      	orrs	r7, r0
 80073e2:	3568      	adds	r5, #104	; 0x68
 80073e4:	e7e9      	b.n	80073ba <_fwalk_reent+0x12>

080073e6 <__retarget_lock_init_recursive>:
 80073e6:	4770      	bx	lr

080073e8 <__retarget_lock_acquire_recursive>:
 80073e8:	4770      	bx	lr

080073ea <__retarget_lock_release_recursive>:
 80073ea:	4770      	bx	lr

080073ec <__swhatbuf_r>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	460e      	mov	r6, r1
 80073f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f4:	4614      	mov	r4, r2
 80073f6:	2900      	cmp	r1, #0
 80073f8:	461d      	mov	r5, r3
 80073fa:	b096      	sub	sp, #88	; 0x58
 80073fc:	da08      	bge.n	8007410 <__swhatbuf_r+0x24>
 80073fe:	2200      	movs	r2, #0
 8007400:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	061a      	lsls	r2, r3, #24
 8007408:	d410      	bmi.n	800742c <__swhatbuf_r+0x40>
 800740a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800740e:	e00e      	b.n	800742e <__swhatbuf_r+0x42>
 8007410:	466a      	mov	r2, sp
 8007412:	f000 f915 	bl	8007640 <_fstat_r>
 8007416:	2800      	cmp	r0, #0
 8007418:	dbf1      	blt.n	80073fe <__swhatbuf_r+0x12>
 800741a:	9a01      	ldr	r2, [sp, #4]
 800741c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007420:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007424:	425a      	negs	r2, r3
 8007426:	415a      	adcs	r2, r3
 8007428:	602a      	str	r2, [r5, #0]
 800742a:	e7ee      	b.n	800740a <__swhatbuf_r+0x1e>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	2000      	movs	r0, #0
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	b016      	add	sp, #88	; 0x58
 8007434:	bd70      	pop	{r4, r5, r6, pc}
	...

08007438 <__smakebuf_r>:
 8007438:	898b      	ldrh	r3, [r1, #12]
 800743a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800743c:	079d      	lsls	r5, r3, #30
 800743e:	4606      	mov	r6, r0
 8007440:	460c      	mov	r4, r1
 8007442:	d507      	bpl.n	8007454 <__smakebuf_r+0x1c>
 8007444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	2301      	movs	r3, #1
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	b002      	add	sp, #8
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	466a      	mov	r2, sp
 8007456:	ab01      	add	r3, sp, #4
 8007458:	f7ff ffc8 	bl	80073ec <__swhatbuf_r>
 800745c:	9900      	ldr	r1, [sp, #0]
 800745e:	4605      	mov	r5, r0
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff f9d3 	bl	800680c <_malloc_r>
 8007466:	b948      	cbnz	r0, 800747c <__smakebuf_r+0x44>
 8007468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746c:	059a      	lsls	r2, r3, #22
 800746e:	d4ef      	bmi.n	8007450 <__smakebuf_r+0x18>
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	f043 0302 	orr.w	r3, r3, #2
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	e7e3      	b.n	8007444 <__smakebuf_r+0xc>
 800747c:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <__smakebuf_r+0x7c>)
 800747e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	6020      	str	r0, [r4, #0]
 8007484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	6120      	str	r0, [r4, #16]
 800748e:	6163      	str	r3, [r4, #20]
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	b15b      	cbz	r3, 80074ac <__smakebuf_r+0x74>
 8007494:	4630      	mov	r0, r6
 8007496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749a:	f000 f8e3 	bl	8007664 <_isatty_r>
 800749e:	b128      	cbz	r0, 80074ac <__smakebuf_r+0x74>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	81a3      	strh	r3, [r4, #12]
 80074ac:	89a0      	ldrh	r0, [r4, #12]
 80074ae:	4305      	orrs	r5, r0
 80074b0:	81a5      	strh	r5, [r4, #12]
 80074b2:	e7cd      	b.n	8007450 <__smakebuf_r+0x18>
 80074b4:	08007245 	.word	0x08007245

080074b8 <memchr>:
 80074b8:	4603      	mov	r3, r0
 80074ba:	b510      	push	{r4, lr}
 80074bc:	b2c9      	uxtb	r1, r1
 80074be:	4402      	add	r2, r0
 80074c0:	4293      	cmp	r3, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	d101      	bne.n	80074ca <memchr+0x12>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e003      	b.n	80074d2 <memchr+0x1a>
 80074ca:	7804      	ldrb	r4, [r0, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	428c      	cmp	r4, r1
 80074d0:	d1f6      	bne.n	80074c0 <memchr+0x8>
 80074d2:	bd10      	pop	{r4, pc}

080074d4 <__malloc_lock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_lock+0x8>)
 80074d6:	f7ff bf87 	b.w	80073e8 <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	2000027c 	.word	0x2000027c

080074e0 <__malloc_unlock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_unlock+0x8>)
 80074e2:	f7ff bf82 	b.w	80073ea <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	2000027c 	.word	0x2000027c

080074ec <_raise_r>:
 80074ec:	291f      	cmp	r1, #31
 80074ee:	b538      	push	{r3, r4, r5, lr}
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	d904      	bls.n	8007500 <_raise_r+0x14>
 80074f6:	2316      	movs	r3, #22
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007502:	b112      	cbz	r2, 800750a <_raise_r+0x1e>
 8007504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007508:	b94b      	cbnz	r3, 800751e <_raise_r+0x32>
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f830 	bl	8007570 <_getpid_r>
 8007510:	462a      	mov	r2, r5
 8007512:	4601      	mov	r1, r0
 8007514:	4620      	mov	r0, r4
 8007516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800751a:	f000 b817 	b.w	800754c <_kill_r>
 800751e:	2b01      	cmp	r3, #1
 8007520:	d00a      	beq.n	8007538 <_raise_r+0x4c>
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	d103      	bne.n	800752e <_raise_r+0x42>
 8007526:	2316      	movs	r3, #22
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	2001      	movs	r0, #1
 800752c:	e7e7      	b.n	80074fe <_raise_r+0x12>
 800752e:	2400      	movs	r4, #0
 8007530:	4628      	mov	r0, r5
 8007532:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007536:	4798      	blx	r3
 8007538:	2000      	movs	r0, #0
 800753a:	e7e0      	b.n	80074fe <_raise_r+0x12>

0800753c <raise>:
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <raise+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f7ff bfd3 	b.w	80074ec <_raise_r>
 8007546:	bf00      	nop
 8007548:	20000014 	.word	0x20000014

0800754c <_kill_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	2300      	movs	r3, #0
 8007550:	4d06      	ldr	r5, [pc, #24]	; (800756c <_kill_r+0x20>)
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	f7fa f886 	bl	800166a <_kill>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d102      	bne.n	8007568 <_kill_r+0x1c>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	b103      	cbz	r3, 8007568 <_kill_r+0x1c>
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	20000280 	.word	0x20000280

08007570 <_getpid_r>:
 8007570:	f7fa b874 	b.w	800165c <_getpid>

08007574 <__sread>:
 8007574:	b510      	push	{r4, lr}
 8007576:	460c      	mov	r4, r1
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	f000 f894 	bl	80076a8 <_read_r>
 8007580:	2800      	cmp	r0, #0
 8007582:	bfab      	itete	ge
 8007584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007586:	89a3      	ldrhlt	r3, [r4, #12]
 8007588:	181b      	addge	r3, r3, r0
 800758a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800758e:	bfac      	ite	ge
 8007590:	6563      	strge	r3, [r4, #84]	; 0x54
 8007592:	81a3      	strhlt	r3, [r4, #12]
 8007594:	bd10      	pop	{r4, pc}

08007596 <__swrite>:
 8007596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	461f      	mov	r7, r3
 800759c:	898b      	ldrh	r3, [r1, #12]
 800759e:	4605      	mov	r5, r0
 80075a0:	05db      	lsls	r3, r3, #23
 80075a2:	460c      	mov	r4, r1
 80075a4:	4616      	mov	r6, r2
 80075a6:	d505      	bpl.n	80075b4 <__swrite+0x1e>
 80075a8:	2302      	movs	r3, #2
 80075aa:	2200      	movs	r2, #0
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	f000 f868 	bl	8007684 <_lseek_r>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	4632      	mov	r2, r6
 80075b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	4628      	mov	r0, r5
 80075c0:	463b      	mov	r3, r7
 80075c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	f000 b817 	b.w	80075fc <_write_r>

080075ce <__sseek>:
 80075ce:	b510      	push	{r4, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d6:	f000 f855 	bl	8007684 <_lseek_r>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	bf15      	itete	ne
 80075e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ea:	81a3      	strheq	r3, [r4, #12]
 80075ec:	bf18      	it	ne
 80075ee:	81a3      	strhne	r3, [r4, #12]
 80075f0:	bd10      	pop	{r4, pc}

080075f2 <__sclose>:
 80075f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f6:	f000 b813 	b.w	8007620 <_close_r>
	...

080075fc <_write_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	2200      	movs	r2, #0
 8007606:	4d05      	ldr	r5, [pc, #20]	; (800761c <_write_r+0x20>)
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7fa f864 	bl	80016d8 <_write>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_write_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_write_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	20000280 	.word	0x20000280

08007620 <_close_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	2300      	movs	r3, #0
 8007624:	4d05      	ldr	r5, [pc, #20]	; (800763c <_close_r+0x1c>)
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	f7fa f870 	bl	8001710 <_close>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_close_r+0x1a>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_close_r+0x1a>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20000280 	.word	0x20000280

08007640 <_fstat_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	2300      	movs	r3, #0
 8007644:	4d06      	ldr	r5, [pc, #24]	; (8007660 <_fstat_r+0x20>)
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	4611      	mov	r1, r2
 800764c:	602b      	str	r3, [r5, #0]
 800764e:	f7fa f86a 	bl	8001726 <_fstat>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	d102      	bne.n	800765c <_fstat_r+0x1c>
 8007656:	682b      	ldr	r3, [r5, #0]
 8007658:	b103      	cbz	r3, 800765c <_fstat_r+0x1c>
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	bf00      	nop
 8007660:	20000280 	.word	0x20000280

08007664 <_isatty_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	2300      	movs	r3, #0
 8007668:	4d05      	ldr	r5, [pc, #20]	; (8007680 <_isatty_r+0x1c>)
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fa f868 	bl	8001744 <_isatty>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_isatty_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_isatty_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20000280 	.word	0x20000280

08007684 <_lseek_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	4611      	mov	r1, r2
 800768c:	2200      	movs	r2, #0
 800768e:	4d05      	ldr	r5, [pc, #20]	; (80076a4 <_lseek_r+0x20>)
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7fa f860 	bl	8001758 <_lseek>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_lseek_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_lseek_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000280 	.word	0x20000280

080076a8 <_read_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	2200      	movs	r2, #0
 80076b2:	4d05      	ldr	r5, [pc, #20]	; (80076c8 <_read_r+0x20>)
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7f9 fff1 	bl	800169e <_read>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_read_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_read_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000280 	.word	0x20000280

080076cc <cos>:
 80076cc:	b530      	push	{r4, r5, lr}
 80076ce:	4a20      	ldr	r2, [pc, #128]	; (8007750 <cos+0x84>)
 80076d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076d4:	4293      	cmp	r3, r2
 80076d6:	b087      	sub	sp, #28
 80076d8:	dc06      	bgt.n	80076e8 <cos+0x1c>
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	b007      	add	sp, #28
 80076e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e4:	f001 b8cc 	b.w	8008880 <__kernel_cos>
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <cos+0x88>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	dd05      	ble.n	80076fa <cos+0x2e>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	f7f8 fd31 	bl	8000158 <__aeabi_dsub>
 80076f6:	b007      	add	sp, #28
 80076f8:	bd30      	pop	{r4, r5, pc}
 80076fa:	aa02      	add	r2, sp, #8
 80076fc:	f000 fe18 	bl	8008330 <__ieee754_rem_pio2>
 8007700:	f000 0003 	and.w	r0, r0, #3
 8007704:	2801      	cmp	r0, #1
 8007706:	d009      	beq.n	800771c <cos+0x50>
 8007708:	2802      	cmp	r0, #2
 800770a:	d011      	beq.n	8007730 <cos+0x64>
 800770c:	b9b8      	cbnz	r0, 800773e <cos+0x72>
 800770e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007716:	f001 f8b3 	bl	8008880 <__kernel_cos>
 800771a:	e7ec      	b.n	80076f6 <cos+0x2a>
 800771c:	9000      	str	r0, [sp, #0]
 800771e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007726:	f001 fcab 	bl	8009080 <__kernel_sin>
 800772a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800772e:	e7e2      	b.n	80076f6 <cos+0x2a>
 8007730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007738:	f001 f8a2 	bl	8008880 <__kernel_cos>
 800773c:	e7f5      	b.n	800772a <cos+0x5e>
 800773e:	2301      	movs	r3, #1
 8007740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774a:	f001 fc99 	bl	8009080 <__kernel_sin>
 800774e:	e7d2      	b.n	80076f6 <cos+0x2a>
 8007750:	3fe921fb 	.word	0x3fe921fb
 8007754:	7fefffff 	.word	0x7fefffff

08007758 <sin>:
 8007758:	b530      	push	{r4, r5, lr}
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <sin+0x84>)
 800775c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007760:	4293      	cmp	r3, r2
 8007762:	b087      	sub	sp, #28
 8007764:	dc06      	bgt.n	8007774 <sin+0x1c>
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	f001 fc87 	bl	8009080 <__kernel_sin>
 8007772:	e006      	b.n	8007782 <sin+0x2a>
 8007774:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <sin+0x88>)
 8007776:	4293      	cmp	r3, r2
 8007778:	dd05      	ble.n	8007786 <sin+0x2e>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	f7f8 fceb 	bl	8000158 <__aeabi_dsub>
 8007782:	b007      	add	sp, #28
 8007784:	bd30      	pop	{r4, r5, pc}
 8007786:	aa02      	add	r2, sp, #8
 8007788:	f000 fdd2 	bl	8008330 <__ieee754_rem_pio2>
 800778c:	f000 0003 	and.w	r0, r0, #3
 8007790:	2801      	cmp	r0, #1
 8007792:	d009      	beq.n	80077a8 <sin+0x50>
 8007794:	2802      	cmp	r0, #2
 8007796:	d00e      	beq.n	80077b6 <sin+0x5e>
 8007798:	b9c0      	cbnz	r0, 80077cc <sin+0x74>
 800779a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779e:	2301      	movs	r3, #1
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a6:	e7e2      	b.n	800776e <sin+0x16>
 80077a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b0:	f001 f866 	bl	8008880 <__kernel_cos>
 80077b4:	e7e5      	b.n	8007782 <sin+0x2a>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c2:	f001 fc5d 	bl	8009080 <__kernel_sin>
 80077c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80077ca:	e7da      	b.n	8007782 <sin+0x2a>
 80077cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d4:	f001 f854 	bl	8008880 <__kernel_cos>
 80077d8:	e7f5      	b.n	80077c6 <sin+0x6e>
 80077da:	bf00      	nop
 80077dc:	3fe921fb 	.word	0x3fe921fb
 80077e0:	7fefffff 	.word	0x7fefffff

080077e4 <pow>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4614      	mov	r4, r2
 80077ea:	461d      	mov	r5, r3
 80077ec:	4680      	mov	r8, r0
 80077ee:	4689      	mov	r9, r1
 80077f0:	f000 f886 	bl	8007900 <__ieee754_pow>
 80077f4:	4622      	mov	r2, r4
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	462b      	mov	r3, r5
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f9 f8fc 	bl	80009fc <__aeabi_dcmpun>
 8007804:	bbc8      	cbnz	r0, 800787a <pow+0x96>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f9 f8c3 	bl	8000998 <__aeabi_dcmpeq>
 8007812:	b1b8      	cbz	r0, 8007844 <pow+0x60>
 8007814:	2200      	movs	r2, #0
 8007816:	2300      	movs	r3, #0
 8007818:	4620      	mov	r0, r4
 800781a:	4629      	mov	r1, r5
 800781c:	f7f9 f8bc 	bl	8000998 <__aeabi_dcmpeq>
 8007820:	2800      	cmp	r0, #0
 8007822:	d141      	bne.n	80078a8 <pow+0xc4>
 8007824:	4620      	mov	r0, r4
 8007826:	4629      	mov	r1, r5
 8007828:	f001 fd0f 	bl	800924a <finite>
 800782c:	b328      	cbz	r0, 800787a <pow+0x96>
 800782e:	2200      	movs	r2, #0
 8007830:	2300      	movs	r3, #0
 8007832:	4620      	mov	r0, r4
 8007834:	4629      	mov	r1, r5
 8007836:	f7f9 f8b9 	bl	80009ac <__aeabi_dcmplt>
 800783a:	b1f0      	cbz	r0, 800787a <pow+0x96>
 800783c:	f7fe fea8 	bl	8006590 <__errno>
 8007840:	2322      	movs	r3, #34	; 0x22
 8007842:	e019      	b.n	8007878 <pow+0x94>
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f001 fcff 	bl	800924a <finite>
 800784c:	b9c8      	cbnz	r0, 8007882 <pow+0x9e>
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f001 fcfa 	bl	800924a <finite>
 8007856:	b1a0      	cbz	r0, 8007882 <pow+0x9e>
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f001 fcf5 	bl	800924a <finite>
 8007860:	b178      	cbz	r0, 8007882 <pow+0x9e>
 8007862:	4632      	mov	r2, r6
 8007864:	463b      	mov	r3, r7
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	f7f9 f8c7 	bl	80009fc <__aeabi_dcmpun>
 800786e:	2800      	cmp	r0, #0
 8007870:	d0e4      	beq.n	800783c <pow+0x58>
 8007872:	f7fe fe8d 	bl	8006590 <__errno>
 8007876:	2321      	movs	r3, #33	; 0x21
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	4630      	mov	r0, r6
 800787c:	4639      	mov	r1, r7
 800787e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007882:	2200      	movs	r2, #0
 8007884:	2300      	movs	r3, #0
 8007886:	4630      	mov	r0, r6
 8007888:	4639      	mov	r1, r7
 800788a:	f7f9 f885 	bl	8000998 <__aeabi_dcmpeq>
 800788e:	2800      	cmp	r0, #0
 8007890:	d0f3      	beq.n	800787a <pow+0x96>
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f001 fcd8 	bl	800924a <finite>
 800789a:	2800      	cmp	r0, #0
 800789c:	d0ed      	beq.n	800787a <pow+0x96>
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f001 fcd2 	bl	800924a <finite>
 80078a6:	e7c8      	b.n	800783a <pow+0x56>
 80078a8:	2600      	movs	r6, #0
 80078aa:	4f01      	ldr	r7, [pc, #4]	; (80078b0 <pow+0xcc>)
 80078ac:	e7e5      	b.n	800787a <pow+0x96>
 80078ae:	bf00      	nop
 80078b0:	3ff00000 	.word	0x3ff00000

080078b4 <sqrt>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	4606      	mov	r6, r0
 80078b8:	460f      	mov	r7, r1
 80078ba:	f000 ff31 	bl	8008720 <__ieee754_sqrt>
 80078be:	4632      	mov	r2, r6
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	463b      	mov	r3, r7
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f9 f897 	bl	80009fc <__aeabi_dcmpun>
 80078ce:	b990      	cbnz	r0, 80078f6 <sqrt+0x42>
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f9 f868 	bl	80009ac <__aeabi_dcmplt>
 80078dc:	b158      	cbz	r0, 80078f6 <sqrt+0x42>
 80078de:	f7fe fe57 	bl	8006590 <__errno>
 80078e2:	2321      	movs	r3, #33	; 0x21
 80078e4:	2200      	movs	r2, #0
 80078e6:	6003      	str	r3, [r0, #0]
 80078e8:	2300      	movs	r3, #0
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	f7f8 ff15 	bl	800071c <__aeabi_ddiv>
 80078f2:	4604      	mov	r4, r0
 80078f4:	460d      	mov	r5, r1
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fc:	0000      	movs	r0, r0
	...

08007900 <__ieee754_pow>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	b093      	sub	sp, #76	; 0x4c
 8007906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800790a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800790e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007912:	4689      	mov	r9, r1
 8007914:	ea56 0102 	orrs.w	r1, r6, r2
 8007918:	4680      	mov	r8, r0
 800791a:	d111      	bne.n	8007940 <__ieee754_pow+0x40>
 800791c:	1803      	adds	r3, r0, r0
 800791e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007922:	4152      	adcs	r2, r2
 8007924:	4299      	cmp	r1, r3
 8007926:	4b82      	ldr	r3, [pc, #520]	; (8007b30 <__ieee754_pow+0x230>)
 8007928:	4193      	sbcs	r3, r2
 800792a:	f080 84b9 	bcs.w	80082a0 <__ieee754_pow+0x9a0>
 800792e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	f7f8 fc11 	bl	800015c <__adddf3>
 800793a:	4683      	mov	fp, r0
 800793c:	468c      	mov	ip, r1
 800793e:	e06f      	b.n	8007a20 <__ieee754_pow+0x120>
 8007940:	4b7c      	ldr	r3, [pc, #496]	; (8007b34 <__ieee754_pow+0x234>)
 8007942:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007946:	429c      	cmp	r4, r3
 8007948:	464d      	mov	r5, r9
 800794a:	4682      	mov	sl, r0
 800794c:	dc06      	bgt.n	800795c <__ieee754_pow+0x5c>
 800794e:	d101      	bne.n	8007954 <__ieee754_pow+0x54>
 8007950:	2800      	cmp	r0, #0
 8007952:	d1ec      	bne.n	800792e <__ieee754_pow+0x2e>
 8007954:	429e      	cmp	r6, r3
 8007956:	dc01      	bgt.n	800795c <__ieee754_pow+0x5c>
 8007958:	d10f      	bne.n	800797a <__ieee754_pow+0x7a>
 800795a:	b172      	cbz	r2, 800797a <__ieee754_pow+0x7a>
 800795c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007960:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007964:	ea55 050a 	orrs.w	r5, r5, sl
 8007968:	d1e1      	bne.n	800792e <__ieee754_pow+0x2e>
 800796a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800796e:	18db      	adds	r3, r3, r3
 8007970:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007974:	4152      	adcs	r2, r2
 8007976:	429d      	cmp	r5, r3
 8007978:	e7d5      	b.n	8007926 <__ieee754_pow+0x26>
 800797a:	2d00      	cmp	r5, #0
 800797c:	da39      	bge.n	80079f2 <__ieee754_pow+0xf2>
 800797e:	4b6e      	ldr	r3, [pc, #440]	; (8007b38 <__ieee754_pow+0x238>)
 8007980:	429e      	cmp	r6, r3
 8007982:	dc52      	bgt.n	8007a2a <__ieee754_pow+0x12a>
 8007984:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007988:	429e      	cmp	r6, r3
 800798a:	f340 849c 	ble.w	80082c6 <__ieee754_pow+0x9c6>
 800798e:	1533      	asrs	r3, r6, #20
 8007990:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007994:	2b14      	cmp	r3, #20
 8007996:	dd0f      	ble.n	80079b8 <__ieee754_pow+0xb8>
 8007998:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800799c:	fa22 f103 	lsr.w	r1, r2, r3
 80079a0:	fa01 f303 	lsl.w	r3, r1, r3
 80079a4:	4293      	cmp	r3, r2
 80079a6:	f040 848e 	bne.w	80082c6 <__ieee754_pow+0x9c6>
 80079aa:	f001 0101 	and.w	r1, r1, #1
 80079ae:	f1c1 0302 	rsb	r3, r1, #2
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	b182      	cbz	r2, 80079d8 <__ieee754_pow+0xd8>
 80079b6:	e05d      	b.n	8007a74 <__ieee754_pow+0x174>
 80079b8:	2a00      	cmp	r2, #0
 80079ba:	d159      	bne.n	8007a70 <__ieee754_pow+0x170>
 80079bc:	f1c3 0314 	rsb	r3, r3, #20
 80079c0:	fa46 f103 	asr.w	r1, r6, r3
 80079c4:	fa01 f303 	lsl.w	r3, r1, r3
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	f040 8479 	bne.w	80082c0 <__ieee754_pow+0x9c0>
 80079ce:	f001 0101 	and.w	r1, r1, #1
 80079d2:	f1c1 0302 	rsb	r3, r1, #2
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	4b58      	ldr	r3, [pc, #352]	; (8007b3c <__ieee754_pow+0x23c>)
 80079da:	429e      	cmp	r6, r3
 80079dc:	d132      	bne.n	8007a44 <__ieee754_pow+0x144>
 80079de:	2f00      	cmp	r7, #0
 80079e0:	f280 846a 	bge.w	80082b8 <__ieee754_pow+0x9b8>
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	2000      	movs	r0, #0
 80079ea:	4954      	ldr	r1, [pc, #336]	; (8007b3c <__ieee754_pow+0x23c>)
 80079ec:	f7f8 fe96 	bl	800071c <__aeabi_ddiv>
 80079f0:	e7a3      	b.n	800793a <__ieee754_pow+0x3a>
 80079f2:	2300      	movs	r3, #0
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	d13c      	bne.n	8007a74 <__ieee754_pow+0x174>
 80079fa:	4b4e      	ldr	r3, [pc, #312]	; (8007b34 <__ieee754_pow+0x234>)
 80079fc:	429e      	cmp	r6, r3
 80079fe:	d1eb      	bne.n	80079d8 <__ieee754_pow+0xd8>
 8007a00:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007a04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007a08:	ea53 030a 	orrs.w	r3, r3, sl
 8007a0c:	f000 8448 	beq.w	80082a0 <__ieee754_pow+0x9a0>
 8007a10:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <__ieee754_pow+0x240>)
 8007a12:	429c      	cmp	r4, r3
 8007a14:	dd0b      	ble.n	8007a2e <__ieee754_pow+0x12e>
 8007a16:	2f00      	cmp	r7, #0
 8007a18:	f2c0 8448 	blt.w	80082ac <__ieee754_pow+0x9ac>
 8007a1c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007a20:	4658      	mov	r0, fp
 8007a22:	4661      	mov	r1, ip
 8007a24:	b013      	add	sp, #76	; 0x4c
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e7e2      	b.n	80079f4 <__ieee754_pow+0xf4>
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	f04f 0b00 	mov.w	fp, #0
 8007a34:	f04f 0c00 	mov.w	ip, #0
 8007a38:	daf2      	bge.n	8007a20 <__ieee754_pow+0x120>
 8007a3a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007a3e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007a42:	e7ed      	b.n	8007a20 <__ieee754_pow+0x120>
 8007a44:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007a48:	d106      	bne.n	8007a58 <__ieee754_pow+0x158>
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f8 fd39 	bl	80004c8 <__aeabi_dmul>
 8007a56:	e770      	b.n	800793a <__ieee754_pow+0x3a>
 8007a58:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <__ieee754_pow+0x244>)
 8007a5a:	429f      	cmp	r7, r3
 8007a5c:	d10a      	bne.n	8007a74 <__ieee754_pow+0x174>
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	db08      	blt.n	8007a74 <__ieee754_pow+0x174>
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	b013      	add	sp, #76	; 0x4c
 8007a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	f000 be58 	b.w	8008720 <__ieee754_sqrt>
 8007a70:	2300      	movs	r3, #0
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f001 fbe4 	bl	8009244 <fabs>
 8007a7c:	4683      	mov	fp, r0
 8007a7e:	468c      	mov	ip, r1
 8007a80:	f1ba 0f00 	cmp.w	sl, #0
 8007a84:	d128      	bne.n	8007ad8 <__ieee754_pow+0x1d8>
 8007a86:	b124      	cbz	r4, 8007a92 <__ieee754_pow+0x192>
 8007a88:	4b2c      	ldr	r3, [pc, #176]	; (8007b3c <__ieee754_pow+0x23c>)
 8007a8a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d122      	bne.n	8007ad8 <__ieee754_pow+0x1d8>
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	da07      	bge.n	8007aa6 <__ieee754_pow+0x1a6>
 8007a96:	465a      	mov	r2, fp
 8007a98:	4663      	mov	r3, ip
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	4927      	ldr	r1, [pc, #156]	; (8007b3c <__ieee754_pow+0x23c>)
 8007a9e:	f7f8 fe3d 	bl	800071c <__aeabi_ddiv>
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	468c      	mov	ip, r1
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	daba      	bge.n	8007a20 <__ieee754_pow+0x120>
 8007aaa:	9b00      	ldr	r3, [sp, #0]
 8007aac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007ab0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ab4:	4323      	orrs	r3, r4
 8007ab6:	d108      	bne.n	8007aca <__ieee754_pow+0x1ca>
 8007ab8:	465a      	mov	r2, fp
 8007aba:	4663      	mov	r3, ip
 8007abc:	4658      	mov	r0, fp
 8007abe:	4661      	mov	r1, ip
 8007ac0:	f7f8 fb4a 	bl	8000158 <__aeabi_dsub>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	e790      	b.n	80079ec <__ieee754_pow+0xec>
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d1a7      	bne.n	8007a20 <__ieee754_pow+0x120>
 8007ad0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007ad4:	469c      	mov	ip, r3
 8007ad6:	e7a3      	b.n	8007a20 <__ieee754_pow+0x120>
 8007ad8:	0feb      	lsrs	r3, r5, #31
 8007ada:	3b01      	subs	r3, #1
 8007adc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	d104      	bne.n	8007af0 <__ieee754_pow+0x1f0>
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	464b      	mov	r3, r9
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	e7e7      	b.n	8007ac0 <__ieee754_pow+0x1c0>
 8007af0:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <__ieee754_pow+0x248>)
 8007af2:	429e      	cmp	r6, r3
 8007af4:	f340 80f6 	ble.w	8007ce4 <__ieee754_pow+0x3e4>
 8007af8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007afc:	429e      	cmp	r6, r3
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <__ieee754_pow+0x240>)
 8007b00:	dd09      	ble.n	8007b16 <__ieee754_pow+0x216>
 8007b02:	429c      	cmp	r4, r3
 8007b04:	dc0c      	bgt.n	8007b20 <__ieee754_pow+0x220>
 8007b06:	2f00      	cmp	r7, #0
 8007b08:	da0c      	bge.n	8007b24 <__ieee754_pow+0x224>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	b013      	add	sp, #76	; 0x4c
 8007b0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	f001 bb92 	b.w	800923a <__math_oflow>
 8007b16:	429c      	cmp	r4, r3
 8007b18:	dbf5      	blt.n	8007b06 <__ieee754_pow+0x206>
 8007b1a:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <__ieee754_pow+0x23c>)
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	dd15      	ble.n	8007b4c <__ieee754_pow+0x24c>
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	dcf2      	bgt.n	8007b0a <__ieee754_pow+0x20a>
 8007b24:	2000      	movs	r0, #0
 8007b26:	b013      	add	sp, #76	; 0x4c
 8007b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	f001 bb80 	b.w	8009230 <__math_uflow>
 8007b30:	fff00000 	.word	0xfff00000
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	433fffff 	.word	0x433fffff
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	3fefffff 	.word	0x3fefffff
 8007b44:	3fe00000 	.word	0x3fe00000
 8007b48:	41e00000 	.word	0x41e00000
 8007b4c:	4661      	mov	r1, ip
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4658      	mov	r0, fp
 8007b52:	4b5f      	ldr	r3, [pc, #380]	; (8007cd0 <__ieee754_pow+0x3d0>)
 8007b54:	f7f8 fb00 	bl	8000158 <__aeabi_dsub>
 8007b58:	a355      	add	r3, pc, #340	; (adr r3, 8007cb0 <__ieee754_pow+0x3b0>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	4604      	mov	r4, r0
 8007b60:	460d      	mov	r5, r1
 8007b62:	f7f8 fcb1 	bl	80004c8 <__aeabi_dmul>
 8007b66:	a354      	add	r3, pc, #336	; (adr r3, 8007cb8 <__ieee754_pow+0x3b8>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	460f      	mov	r7, r1
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fca8 	bl	80004c8 <__aeabi_dmul>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	4b54      	ldr	r3, [pc, #336]	; (8007cd4 <__ieee754_pow+0x3d4>)
 8007b84:	f7f8 fca0 	bl	80004c8 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	a14c      	add	r1, pc, #304	; (adr r1, 8007cc0 <__ieee754_pow+0x3c0>)
 8007b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b92:	f7f8 fae1 	bl	8000158 <__aeabi_dsub>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fc95 	bl	80004c8 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	494c      	ldr	r1, [pc, #304]	; (8007cd8 <__ieee754_pow+0x3d8>)
 8007ba6:	f7f8 fad7 	bl	8000158 <__aeabi_dsub>
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 fc87 	bl	80004c8 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 fc81 	bl	80004c8 <__aeabi_dmul>
 8007bc6:	a340      	add	r3, pc, #256	; (adr r3, 8007cc8 <__ieee754_pow+0x3c8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fc7c 	bl	80004c8 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	f7f8 fabe 	bl	8000158 <__aeabi_dsub>
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4604      	mov	r4, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fab6 	bl	800015c <__adddf3>
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	468b      	mov	fp, r1
 8007bf8:	f7f8 faae 	bl	8000158 <__aeabi_dsub>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 faa8 	bl	8000158 <__aeabi_dsub>
 8007c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c0c:	9b00      	ldr	r3, [sp, #0]
 8007c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f04f 0600 	mov.w	r6, #0
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	bf0c      	ite	eq
 8007c1e:	4b2f      	ldreq	r3, [pc, #188]	; (8007cdc <__ieee754_pow+0x3dc>)
 8007c20:	4b2b      	ldrne	r3, [pc, #172]	; (8007cd0 <__ieee754_pow+0x3d0>)
 8007c22:	4604      	mov	r4, r0
 8007c24:	460d      	mov	r5, r1
 8007c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2a:	e9cd 2300 	strd	r2, r3, [sp]
 8007c2e:	4632      	mov	r2, r6
 8007c30:	463b      	mov	r3, r7
 8007c32:	f7f8 fa91 	bl	8000158 <__aeabi_dsub>
 8007c36:	4652      	mov	r2, sl
 8007c38:	465b      	mov	r3, fp
 8007c3a:	f7f8 fc45 	bl	80004c8 <__aeabi_dmul>
 8007c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fc3d 	bl	80004c8 <__aeabi_dmul>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fa81 	bl	800015c <__adddf3>
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	4680      	mov	r8, r0
 8007c60:	4689      	mov	r9, r1
 8007c62:	4650      	mov	r0, sl
 8007c64:	4659      	mov	r1, fp
 8007c66:	f7f8 fc2f 	bl	80004c8 <__aeabi_dmul>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4602      	mov	r2, r0
 8007c72:	4649      	mov	r1, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c7a:	f7f8 fa6f 	bl	800015c <__adddf3>
 8007c7e:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <__ieee754_pow+0x3e0>)
 8007c80:	4682      	mov	sl, r0
 8007c82:	4299      	cmp	r1, r3
 8007c84:	460f      	mov	r7, r1
 8007c86:	460e      	mov	r6, r1
 8007c88:	f340 82e5 	ble.w	8008256 <__ieee754_pow+0x956>
 8007c8c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c90:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c94:	4303      	orrs	r3, r0
 8007c96:	f000 81df 	beq.w	8008058 <__ieee754_pow+0x758>
 8007c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f7f8 fe83 	bl	80009ac <__aeabi_dcmplt>
 8007ca6:	3800      	subs	r0, #0
 8007ca8:	bf18      	it	ne
 8007caa:	2001      	movne	r0, #1
 8007cac:	e72e      	b.n	8007b0c <__ieee754_pow+0x20c>
 8007cae:	bf00      	nop
 8007cb0:	60000000 	.word	0x60000000
 8007cb4:	3ff71547 	.word	0x3ff71547
 8007cb8:	f85ddf44 	.word	0xf85ddf44
 8007cbc:	3e54ae0b 	.word	0x3e54ae0b
 8007cc0:	55555555 	.word	0x55555555
 8007cc4:	3fd55555 	.word	0x3fd55555
 8007cc8:	652b82fe 	.word	0x652b82fe
 8007ccc:	3ff71547 	.word	0x3ff71547
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	3fd00000 	.word	0x3fd00000
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	bff00000 	.word	0xbff00000
 8007ce0:	408fffff 	.word	0x408fffff
 8007ce4:	4bd2      	ldr	r3, [pc, #840]	; (8008030 <__ieee754_pow+0x730>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	402b      	ands	r3, r5
 8007cea:	b943      	cbnz	r3, 8007cfe <__ieee754_pow+0x3fe>
 8007cec:	4658      	mov	r0, fp
 8007cee:	4661      	mov	r1, ip
 8007cf0:	4bd0      	ldr	r3, [pc, #832]	; (8008034 <__ieee754_pow+0x734>)
 8007cf2:	f7f8 fbe9 	bl	80004c8 <__aeabi_dmul>
 8007cf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	1523      	asrs	r3, r4, #20
 8007d00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d04:	4413      	add	r3, r2
 8007d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d08:	4bcb      	ldr	r3, [pc, #812]	; (8008038 <__ieee754_pow+0x738>)
 8007d0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d12:	429c      	cmp	r4, r3
 8007d14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d18:	dd08      	ble.n	8007d2c <__ieee754_pow+0x42c>
 8007d1a:	4bc8      	ldr	r3, [pc, #800]	; (800803c <__ieee754_pow+0x73c>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	f340 8199 	ble.w	8008054 <__ieee754_pow+0x754>
 8007d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d24:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007d28:	3301      	adds	r3, #1
 8007d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	00f3      	lsls	r3, r6, #3
 8007d30:	930d      	str	r3, [sp, #52]	; 0x34
 8007d32:	4bc3      	ldr	r3, [pc, #780]	; (8008040 <__ieee754_pow+0x740>)
 8007d34:	4658      	mov	r0, fp
 8007d36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d3e:	4629      	mov	r1, r5
 8007d40:	461a      	mov	r2, r3
 8007d42:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007d46:	4623      	mov	r3, r4
 8007d48:	f7f8 fa06 	bl	8000158 <__aeabi_dsub>
 8007d4c:	46da      	mov	sl, fp
 8007d4e:	462b      	mov	r3, r5
 8007d50:	4652      	mov	r2, sl
 8007d52:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007d56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d5a:	f7f8 f9ff 	bl	800015c <__adddf3>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	2000      	movs	r0, #0
 8007d64:	49b7      	ldr	r1, [pc, #732]	; (8008044 <__ieee754_pow+0x744>)
 8007d66:	f7f8 fcd9 	bl	800071c <__aeabi_ddiv>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d76:	f7f8 fba7 	bl	80004c8 <__aeabi_dmul>
 8007d7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d7e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007d82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d86:	2300      	movs	r3, #0
 8007d88:	2200      	movs	r2, #0
 8007d8a:	46ab      	mov	fp, r5
 8007d8c:	106d      	asrs	r5, r5, #1
 8007d8e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d9c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	4614      	mov	r4, r2
 8007da6:	461d      	mov	r5, r3
 8007da8:	f7f8 fb8e 	bl	80004c8 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007db4:	f7f8 f9d0 	bl	8000158 <__aeabi_dsub>
 8007db8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 f9c8 	bl	8000158 <__aeabi_dsub>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4650      	mov	r0, sl
 8007dce:	4659      	mov	r1, fp
 8007dd0:	f7f8 f9c2 	bl	8000158 <__aeabi_dsub>
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f7f8 fb76 	bl	80004c8 <__aeabi_dmul>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	f7f8 f9b8 	bl	8000158 <__aeabi_dsub>
 8007de8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dec:	f7f8 fb6c 	bl	80004c8 <__aeabi_dmul>
 8007df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f7f8 fb64 	bl	80004c8 <__aeabi_dmul>
 8007e00:	a379      	add	r3, pc, #484	; (adr r3, 8007fe8 <__ieee754_pow+0x6e8>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	4604      	mov	r4, r0
 8007e08:	460d      	mov	r5, r1
 8007e0a:	f7f8 fb5d 	bl	80004c8 <__aeabi_dmul>
 8007e0e:	a378      	add	r3, pc, #480	; (adr r3, 8007ff0 <__ieee754_pow+0x6f0>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 f9a2 	bl	800015c <__adddf3>
 8007e18:	4622      	mov	r2, r4
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	f7f8 fb54 	bl	80004c8 <__aeabi_dmul>
 8007e20:	a375      	add	r3, pc, #468	; (adr r3, 8007ff8 <__ieee754_pow+0x6f8>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 f999 	bl	800015c <__adddf3>
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	f7f8 fb4b 	bl	80004c8 <__aeabi_dmul>
 8007e32:	a373      	add	r3, pc, #460	; (adr r3, 8008000 <__ieee754_pow+0x700>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 f990 	bl	800015c <__adddf3>
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	462b      	mov	r3, r5
 8007e40:	f7f8 fb42 	bl	80004c8 <__aeabi_dmul>
 8007e44:	a370      	add	r3, pc, #448	; (adr r3, 8008008 <__ieee754_pow+0x708>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 f987 	bl	800015c <__adddf3>
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	f7f8 fb39 	bl	80004c8 <__aeabi_dmul>
 8007e56:	a36e      	add	r3, pc, #440	; (adr r3, 8008010 <__ieee754_pow+0x710>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 f97e 	bl	800015c <__adddf3>
 8007e60:	4622      	mov	r2, r4
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	462b      	mov	r3, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fb2c 	bl	80004c8 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fb26 	bl	80004c8 <__aeabi_dmul>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e84:	4642      	mov	r2, r8
 8007e86:	464b      	mov	r3, r9
 8007e88:	f7f8 f968 	bl	800015c <__adddf3>
 8007e8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e90:	f7f8 fb1a 	bl	80004c8 <__aeabi_dmul>
 8007e94:	4622      	mov	r2, r4
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 f960 	bl	800015c <__adddf3>
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	f7f8 fb0e 	bl	80004c8 <__aeabi_dmul>
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b66      	ldr	r3, [pc, #408]	; (8008048 <__ieee754_pow+0x748>)
 8007eb0:	4682      	mov	sl, r0
 8007eb2:	468b      	mov	fp, r1
 8007eb4:	f7f8 f952 	bl	800015c <__adddf3>
 8007eb8:	4632      	mov	r2, r6
 8007eba:	463b      	mov	r3, r7
 8007ebc:	f7f8 f94e 	bl	800015c <__adddf3>
 8007ec0:	2400      	movs	r4, #0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4649      	mov	r1, r9
 8007ecc:	f7f8 fafc 	bl	80004c8 <__aeabi_dmul>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4b5b      	ldr	r3, [pc, #364]	; (8008048 <__ieee754_pow+0x748>)
 8007edc:	f7f8 f93c 	bl	8000158 <__aeabi_dsub>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	f7f8 f938 	bl	8000158 <__aeabi_dsub>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 f932 	bl	8000158 <__aeabi_dsub>
 8007ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ef8:	f7f8 fae6 	bl	80004c8 <__aeabi_dmul>
 8007efc:	4622      	mov	r2, r4
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f06:	462b      	mov	r3, r5
 8007f08:	f7f8 fade 	bl	80004c8 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 f922 	bl	800015c <__adddf3>
 8007f18:	2400      	movs	r4, #0
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f919 	bl	800015c <__adddf3>
 8007f2a:	a33b      	add	r3, pc, #236	; (adr r3, 8008018 <__ieee754_pow+0x718>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	4620      	mov	r0, r4
 8007f32:	460d      	mov	r5, r1
 8007f34:	f7f8 fac8 	bl	80004c8 <__aeabi_dmul>
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 f908 	bl	8000158 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 f902 	bl	8000158 <__aeabi_dsub>
 8007f54:	a332      	add	r3, pc, #200	; (adr r3, 8008020 <__ieee754_pow+0x720>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f7f8 fab5 	bl	80004c8 <__aeabi_dmul>
 8007f5e:	a332      	add	r3, pc, #200	; (adr r3, 8008028 <__ieee754_pow+0x728>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	f7f8 faac 	bl	80004c8 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 f8f0 	bl	800015c <__adddf3>
 8007f7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f7e:	4b33      	ldr	r3, [pc, #204]	; (800804c <__ieee754_pow+0x74c>)
 8007f80:	f04f 0a00 	mov.w	sl, #0
 8007f84:	4413      	add	r3, r2
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f8e7 	bl	800015c <__adddf3>
 8007f8e:	4680      	mov	r8, r0
 8007f90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f92:	4689      	mov	r9, r1
 8007f94:	f7f8 fa2e 	bl	80003f4 <__aeabi_i2d>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f9e:	4b2c      	ldr	r3, [pc, #176]	; (8008050 <__ieee754_pow+0x750>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fac:	464b      	mov	r3, r9
 8007fae:	f7f8 f8d5 	bl	800015c <__adddf3>
 8007fb2:	4632      	mov	r2, r6
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	f7f8 f8d1 	bl	800015c <__adddf3>
 8007fba:	4622      	mov	r2, r4
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	f7f8 f8cd 	bl	800015c <__adddf3>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	4650      	mov	r0, sl
 8007fc8:	468b      	mov	fp, r1
 8007fca:	f7f8 f8c5 	bl	8000158 <__aeabi_dsub>
 8007fce:	4632      	mov	r2, r6
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	f7f8 f8c1 	bl	8000158 <__aeabi_dsub>
 8007fd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fda:	f7f8 f8bd 	bl	8000158 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	e60d      	b.n	8007c04 <__ieee754_pow+0x304>
 8007fe8:	4a454eef 	.word	0x4a454eef
 8007fec:	3fca7e28 	.word	0x3fca7e28
 8007ff0:	93c9db65 	.word	0x93c9db65
 8007ff4:	3fcd864a 	.word	0x3fcd864a
 8007ff8:	a91d4101 	.word	0xa91d4101
 8007ffc:	3fd17460 	.word	0x3fd17460
 8008000:	518f264d 	.word	0x518f264d
 8008004:	3fd55555 	.word	0x3fd55555
 8008008:	db6fabff 	.word	0xdb6fabff
 800800c:	3fdb6db6 	.word	0x3fdb6db6
 8008010:	33333303 	.word	0x33333303
 8008014:	3fe33333 	.word	0x3fe33333
 8008018:	e0000000 	.word	0xe0000000
 800801c:	3feec709 	.word	0x3feec709
 8008020:	dc3a03fd 	.word	0xdc3a03fd
 8008024:	3feec709 	.word	0x3feec709
 8008028:	145b01f5 	.word	0x145b01f5
 800802c:	be3e2fe0 	.word	0xbe3e2fe0
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	43400000 	.word	0x43400000
 8008038:	0003988e 	.word	0x0003988e
 800803c:	000bb679 	.word	0x000bb679
 8008040:	080095e8 	.word	0x080095e8
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40080000 	.word	0x40080000
 800804c:	08009608 	.word	0x08009608
 8008050:	080095f8 	.word	0x080095f8
 8008054:	2601      	movs	r6, #1
 8008056:	e66a      	b.n	8007d2e <__ieee754_pow+0x42e>
 8008058:	a39d      	add	r3, pc, #628	; (adr r3, 80082d0 <__ieee754_pow+0x9d0>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 f87b 	bl	800015c <__adddf3>
 8008066:	4622      	mov	r2, r4
 8008068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800806c:	462b      	mov	r3, r5
 800806e:	4650      	mov	r0, sl
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 f871 	bl	8000158 <__aeabi_dsub>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800807e:	f7f8 fcb3 	bl	80009e8 <__aeabi_dcmpgt>
 8008082:	2800      	cmp	r0, #0
 8008084:	f47f ae09 	bne.w	8007c9a <__ieee754_pow+0x39a>
 8008088:	4aa3      	ldr	r2, [pc, #652]	; (8008318 <__ieee754_pow+0xa18>)
 800808a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800808e:	4293      	cmp	r3, r2
 8008090:	f340 8101 	ble.w	8008296 <__ieee754_pow+0x996>
 8008094:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008098:	2000      	movs	r0, #0
 800809a:	151b      	asrs	r3, r3, #20
 800809c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80080a0:	fa4a f303 	asr.w	r3, sl, r3
 80080a4:	4433      	add	r3, r6
 80080a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80080aa:	4f9c      	ldr	r7, [pc, #624]	; (800831c <__ieee754_pow+0xa1c>)
 80080ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80080b0:	4117      	asrs	r7, r2
 80080b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80080b6:	ea23 0107 	bic.w	r1, r3, r7
 80080ba:	f1c2 0214 	rsb	r2, r2, #20
 80080be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80080c2:	460b      	mov	r3, r1
 80080c4:	fa4a fa02 	asr.w	sl, sl, r2
 80080c8:	2e00      	cmp	r6, #0
 80080ca:	4602      	mov	r2, r0
 80080cc:	4629      	mov	r1, r5
 80080ce:	4620      	mov	r0, r4
 80080d0:	bfb8      	it	lt
 80080d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80080d6:	f7f8 f83f 	bl	8000158 <__aeabi_dsub>
 80080da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e2:	2400      	movs	r4, #0
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	f7f8 f838 	bl	800015c <__adddf3>
 80080ec:	a37a      	add	r3, pc, #488	; (adr r3, 80082d8 <__ieee754_pow+0x9d8>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	4620      	mov	r0, r4
 80080f4:	460d      	mov	r5, r1
 80080f6:	f7f8 f9e7 	bl	80004c8 <__aeabi_dmul>
 80080fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	4620      	mov	r0, r4
 8008104:	4629      	mov	r1, r5
 8008106:	f7f8 f827 	bl	8000158 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4640      	mov	r0, r8
 8008110:	4649      	mov	r1, r9
 8008112:	f7f8 f821 	bl	8000158 <__aeabi_dsub>
 8008116:	a372      	add	r3, pc, #456	; (adr r3, 80082e0 <__ieee754_pow+0x9e0>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f7f8 f9d4 	bl	80004c8 <__aeabi_dmul>
 8008120:	a371      	add	r3, pc, #452	; (adr r3, 80082e8 <__ieee754_pow+0x9e8>)
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	4680      	mov	r8, r0
 8008128:	4689      	mov	r9, r1
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 f9cb 	bl	80004c8 <__aeabi_dmul>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 f80f 	bl	800015c <__adddf3>
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4630      	mov	r0, r6
 8008148:	4639      	mov	r1, r7
 800814a:	f7f8 f807 	bl	800015c <__adddf3>
 800814e:	4632      	mov	r2, r6
 8008150:	463b      	mov	r3, r7
 8008152:	4680      	mov	r8, r0
 8008154:	4689      	mov	r9, r1
 8008156:	f7f7 ffff 	bl	8000158 <__aeabi_dsub>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f7 fff9 	bl	8000158 <__aeabi_dsub>
 8008166:	4642      	mov	r2, r8
 8008168:	4606      	mov	r6, r0
 800816a:	460f      	mov	r7, r1
 800816c:	464b      	mov	r3, r9
 800816e:	4640      	mov	r0, r8
 8008170:	4649      	mov	r1, r9
 8008172:	f7f8 f9a9 	bl	80004c8 <__aeabi_dmul>
 8008176:	a35e      	add	r3, pc, #376	; (adr r3, 80082f0 <__ieee754_pow+0x9f0>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	f7f8 f9a2 	bl	80004c8 <__aeabi_dmul>
 8008184:	a35c      	add	r3, pc, #368	; (adr r3, 80082f8 <__ieee754_pow+0x9f8>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f7 ffe5 	bl	8000158 <__aeabi_dsub>
 800818e:	4622      	mov	r2, r4
 8008190:	462b      	mov	r3, r5
 8008192:	f7f8 f999 	bl	80004c8 <__aeabi_dmul>
 8008196:	a35a      	add	r3, pc, #360	; (adr r3, 8008300 <__ieee754_pow+0xa00>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f7 ffde 	bl	800015c <__adddf3>
 80081a0:	4622      	mov	r2, r4
 80081a2:	462b      	mov	r3, r5
 80081a4:	f7f8 f990 	bl	80004c8 <__aeabi_dmul>
 80081a8:	a357      	add	r3, pc, #348	; (adr r3, 8008308 <__ieee754_pow+0xa08>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f7 ffd3 	bl	8000158 <__aeabi_dsub>
 80081b2:	4622      	mov	r2, r4
 80081b4:	462b      	mov	r3, r5
 80081b6:	f7f8 f987 	bl	80004c8 <__aeabi_dmul>
 80081ba:	a355      	add	r3, pc, #340	; (adr r3, 8008310 <__ieee754_pow+0xa10>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f7 ffcc 	bl	800015c <__adddf3>
 80081c4:	4622      	mov	r2, r4
 80081c6:	462b      	mov	r3, r5
 80081c8:	f7f8 f97e 	bl	80004c8 <__aeabi_dmul>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f7 ffc0 	bl	8000158 <__aeabi_dsub>
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f8 f970 	bl	80004c8 <__aeabi_dmul>
 80081e8:	2200      	movs	r2, #0
 80081ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f7 ffaf 	bl	8000158 <__aeabi_dsub>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008202:	f7f8 fa8b 	bl	800071c <__aeabi_ddiv>
 8008206:	4632      	mov	r2, r6
 8008208:	4604      	mov	r4, r0
 800820a:	460d      	mov	r5, r1
 800820c:	463b      	mov	r3, r7
 800820e:	4640      	mov	r0, r8
 8008210:	4649      	mov	r1, r9
 8008212:	f7f8 f959 	bl	80004c8 <__aeabi_dmul>
 8008216:	4632      	mov	r2, r6
 8008218:	463b      	mov	r3, r7
 800821a:	f7f7 ff9f 	bl	800015c <__adddf3>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f7 ff97 	bl	8000158 <__aeabi_dsub>
 800822a:	4642      	mov	r2, r8
 800822c:	464b      	mov	r3, r9
 800822e:	f7f7 ff93 	bl	8000158 <__aeabi_dsub>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	2000      	movs	r0, #0
 8008238:	4939      	ldr	r1, [pc, #228]	; (8008320 <__ieee754_pow+0xa20>)
 800823a:	f7f7 ff8d 	bl	8000158 <__aeabi_dsub>
 800823e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008242:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008246:	da29      	bge.n	800829c <__ieee754_pow+0x99c>
 8008248:	4652      	mov	r2, sl
 800824a:	f001 f885 	bl	8009358 <scalbn>
 800824e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008252:	f7ff bbfe 	b.w	8007a52 <__ieee754_pow+0x152>
 8008256:	4b33      	ldr	r3, [pc, #204]	; (8008324 <__ieee754_pow+0xa24>)
 8008258:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800825c:	429f      	cmp	r7, r3
 800825e:	f77f af13 	ble.w	8008088 <__ieee754_pow+0x788>
 8008262:	4b31      	ldr	r3, [pc, #196]	; (8008328 <__ieee754_pow+0xa28>)
 8008264:	440b      	add	r3, r1
 8008266:	4303      	orrs	r3, r0
 8008268:	d009      	beq.n	800827e <__ieee754_pow+0x97e>
 800826a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	f7f8 fb9b 	bl	80009ac <__aeabi_dcmplt>
 8008276:	3800      	subs	r0, #0
 8008278:	bf18      	it	ne
 800827a:	2001      	movne	r0, #1
 800827c:	e453      	b.n	8007b26 <__ieee754_pow+0x226>
 800827e:	4622      	mov	r2, r4
 8008280:	462b      	mov	r3, r5
 8008282:	f7f7 ff69 	bl	8000158 <__aeabi_dsub>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	f7f8 fba3 	bl	80009d4 <__aeabi_dcmpge>
 800828e:	2800      	cmp	r0, #0
 8008290:	f43f aefa 	beq.w	8008088 <__ieee754_pow+0x788>
 8008294:	e7e9      	b.n	800826a <__ieee754_pow+0x96a>
 8008296:	f04f 0a00 	mov.w	sl, #0
 800829a:	e720      	b.n	80080de <__ieee754_pow+0x7de>
 800829c:	4621      	mov	r1, r4
 800829e:	e7d6      	b.n	800824e <__ieee754_pow+0x94e>
 80082a0:	f04f 0b00 	mov.w	fp, #0
 80082a4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008320 <__ieee754_pow+0xa20>
 80082a8:	f7ff bbba 	b.w	8007a20 <__ieee754_pow+0x120>
 80082ac:	f04f 0b00 	mov.w	fp, #0
 80082b0:	f04f 0c00 	mov.w	ip, #0
 80082b4:	f7ff bbb4 	b.w	8007a20 <__ieee754_pow+0x120>
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7ff bb3d 	b.w	800793a <__ieee754_pow+0x3a>
 80082c0:	9200      	str	r2, [sp, #0]
 80082c2:	f7ff bb89 	b.w	80079d8 <__ieee754_pow+0xd8>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f7ff bb73 	b.w	80079b2 <__ieee754_pow+0xb2>
 80082cc:	f3af 8000 	nop.w
 80082d0:	652b82fe 	.word	0x652b82fe
 80082d4:	3c971547 	.word	0x3c971547
 80082d8:	00000000 	.word	0x00000000
 80082dc:	3fe62e43 	.word	0x3fe62e43
 80082e0:	fefa39ef 	.word	0xfefa39ef
 80082e4:	3fe62e42 	.word	0x3fe62e42
 80082e8:	0ca86c39 	.word	0x0ca86c39
 80082ec:	be205c61 	.word	0xbe205c61
 80082f0:	72bea4d0 	.word	0x72bea4d0
 80082f4:	3e663769 	.word	0x3e663769
 80082f8:	c5d26bf1 	.word	0xc5d26bf1
 80082fc:	3ebbbd41 	.word	0x3ebbbd41
 8008300:	af25de2c 	.word	0xaf25de2c
 8008304:	3f11566a 	.word	0x3f11566a
 8008308:	16bebd93 	.word	0x16bebd93
 800830c:	3f66c16c 	.word	0x3f66c16c
 8008310:	5555553e 	.word	0x5555553e
 8008314:	3fc55555 	.word	0x3fc55555
 8008318:	3fe00000 	.word	0x3fe00000
 800831c:	000fffff 	.word	0x000fffff
 8008320:	3ff00000 	.word	0x3ff00000
 8008324:	4090cbff 	.word	0x4090cbff
 8008328:	3f6f3400 	.word	0x3f6f3400
 800832c:	00000000 	.word	0x00000000

08008330 <__ieee754_rem_pio2>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4614      	mov	r4, r2
 8008336:	4ac4      	ldr	r2, [pc, #784]	; (8008648 <__ieee754_rem_pio2+0x318>)
 8008338:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800833c:	b08d      	sub	sp, #52	; 0x34
 800833e:	4592      	cmp	sl, r2
 8008340:	9104      	str	r1, [sp, #16]
 8008342:	dc07      	bgt.n	8008354 <__ieee754_rem_pio2+0x24>
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	e9c4 0100 	strd	r0, r1, [r4]
 800834c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008350:	2500      	movs	r5, #0
 8008352:	e024      	b.n	800839e <__ieee754_rem_pio2+0x6e>
 8008354:	4abd      	ldr	r2, [pc, #756]	; (800864c <__ieee754_rem_pio2+0x31c>)
 8008356:	4592      	cmp	sl, r2
 8008358:	dc72      	bgt.n	8008440 <__ieee754_rem_pio2+0x110>
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	4dbc      	ldr	r5, [pc, #752]	; (8008650 <__ieee754_rem_pio2+0x320>)
 800835e:	2b00      	cmp	r3, #0
 8008360:	a3ab      	add	r3, pc, #684	; (adr r3, 8008610 <__ieee754_rem_pio2+0x2e0>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	dd36      	ble.n	80083d6 <__ieee754_rem_pio2+0xa6>
 8008368:	f7f7 fef6 	bl	8000158 <__aeabi_dsub>
 800836c:	45aa      	cmp	sl, r5
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	d018      	beq.n	80083a6 <__ieee754_rem_pio2+0x76>
 8008374:	a3a8      	add	r3, pc, #672	; (adr r3, 8008618 <__ieee754_rem_pio2+0x2e8>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f7f7 feed 	bl	8000158 <__aeabi_dsub>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4630      	mov	r0, r6
 8008384:	e9c4 2300 	strd	r2, r3, [r4]
 8008388:	4639      	mov	r1, r7
 800838a:	f7f7 fee5 	bl	8000158 <__aeabi_dsub>
 800838e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008618 <__ieee754_rem_pio2+0x2e8>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f7f7 fee0 	bl	8000158 <__aeabi_dsub>
 8008398:	2501      	movs	r5, #1
 800839a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800839e:	4628      	mov	r0, r5
 80083a0:	b00d      	add	sp, #52	; 0x34
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	a39e      	add	r3, pc, #632	; (adr r3, 8008620 <__ieee754_rem_pio2+0x2f0>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f7 fed4 	bl	8000158 <__aeabi_dsub>
 80083b0:	a39d      	add	r3, pc, #628	; (adr r3, 8008628 <__ieee754_rem_pio2+0x2f8>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	f7f7 fecd 	bl	8000158 <__aeabi_dsub>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4630      	mov	r0, r6
 80083c4:	e9c4 2300 	strd	r2, r3, [r4]
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f7 fec5 	bl	8000158 <__aeabi_dsub>
 80083ce:	a396      	add	r3, pc, #600	; (adr r3, 8008628 <__ieee754_rem_pio2+0x2f8>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	e7de      	b.n	8008394 <__ieee754_rem_pio2+0x64>
 80083d6:	f7f7 fec1 	bl	800015c <__adddf3>
 80083da:	45aa      	cmp	sl, r5
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	d016      	beq.n	8008410 <__ieee754_rem_pio2+0xe0>
 80083e2:	a38d      	add	r3, pc, #564	; (adr r3, 8008618 <__ieee754_rem_pio2+0x2e8>)
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f7 feb8 	bl	800015c <__adddf3>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	e9c4 2300 	strd	r2, r3, [r4]
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f7 feae 	bl	8000158 <__aeabi_dsub>
 80083fc:	a386      	add	r3, pc, #536	; (adr r3, 8008618 <__ieee754_rem_pio2+0x2e8>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 feab 	bl	800015c <__adddf3>
 8008406:	f04f 35ff 	mov.w	r5, #4294967295
 800840a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800840e:	e7c6      	b.n	800839e <__ieee754_rem_pio2+0x6e>
 8008410:	a383      	add	r3, pc, #524	; (adr r3, 8008620 <__ieee754_rem_pio2+0x2f0>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f7 fea1 	bl	800015c <__adddf3>
 800841a:	a383      	add	r3, pc, #524	; (adr r3, 8008628 <__ieee754_rem_pio2+0x2f8>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	f7f7 fe9a 	bl	800015c <__adddf3>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4630      	mov	r0, r6
 800842e:	e9c4 2300 	strd	r2, r3, [r4]
 8008432:	4639      	mov	r1, r7
 8008434:	f7f7 fe90 	bl	8000158 <__aeabi_dsub>
 8008438:	a37b      	add	r3, pc, #492	; (adr r3, 8008628 <__ieee754_rem_pio2+0x2f8>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	e7e0      	b.n	8008402 <__ieee754_rem_pio2+0xd2>
 8008440:	4a84      	ldr	r2, [pc, #528]	; (8008654 <__ieee754_rem_pio2+0x324>)
 8008442:	4592      	cmp	sl, r2
 8008444:	f300 80d5 	bgt.w	80085f2 <__ieee754_rem_pio2+0x2c2>
 8008448:	f000 fefc 	bl	8009244 <fabs>
 800844c:	a378      	add	r3, pc, #480	; (adr r3, 8008630 <__ieee754_rem_pio2+0x300>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	4606      	mov	r6, r0
 8008454:	460f      	mov	r7, r1
 8008456:	f7f8 f837 	bl	80004c8 <__aeabi_dmul>
 800845a:	2200      	movs	r2, #0
 800845c:	4b7e      	ldr	r3, [pc, #504]	; (8008658 <__ieee754_rem_pio2+0x328>)
 800845e:	f7f7 fe7d 	bl	800015c <__adddf3>
 8008462:	f7f8 fae1 	bl	8000a28 <__aeabi_d2iz>
 8008466:	4605      	mov	r5, r0
 8008468:	f7f7 ffc4 	bl	80003f4 <__aeabi_i2d>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008474:	a366      	add	r3, pc, #408	; (adr r3, 8008610 <__ieee754_rem_pio2+0x2e0>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f8 f825 	bl	80004c8 <__aeabi_dmul>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f7 fe67 	bl	8000158 <__aeabi_dsub>
 800848a:	a363      	add	r3, pc, #396	; (adr r3, 8008618 <__ieee754_rem_pio2+0x2e8>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	4680      	mov	r8, r0
 8008492:	4689      	mov	r9, r1
 8008494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008498:	f7f8 f816 	bl	80004c8 <__aeabi_dmul>
 800849c:	2d1f      	cmp	r5, #31
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	dc0e      	bgt.n	80084c2 <__ieee754_rem_pio2+0x192>
 80084a4:	4b6d      	ldr	r3, [pc, #436]	; (800865c <__ieee754_rem_pio2+0x32c>)
 80084a6:	1e6a      	subs	r2, r5, #1
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	4553      	cmp	r3, sl
 80084ae:	d008      	beq.n	80084c2 <__ieee754_rem_pio2+0x192>
 80084b0:	4632      	mov	r2, r6
 80084b2:	463b      	mov	r3, r7
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	f7f7 fe4e 	bl	8000158 <__aeabi_dsub>
 80084bc:	e9c4 0100 	strd	r0, r1, [r4]
 80084c0:	e013      	b.n	80084ea <__ieee754_rem_pio2+0x1ba>
 80084c2:	463b      	mov	r3, r7
 80084c4:	4632      	mov	r2, r6
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f7 fe45 	bl	8000158 <__aeabi_dsub>
 80084ce:	ea4f 532a 	mov.w	r3, sl, asr #20
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80084d8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80084dc:	f1ba 0f10 	cmp.w	sl, #16
 80084e0:	dc1f      	bgt.n	8008522 <__ieee754_rem_pio2+0x1f2>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9c4 2300 	strd	r2, r3, [r4]
 80084ea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80084ee:	4640      	mov	r0, r8
 80084f0:	4653      	mov	r3, sl
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f7 fe30 	bl	8000158 <__aeabi_dsub>
 80084f8:	4632      	mov	r2, r6
 80084fa:	463b      	mov	r3, r7
 80084fc:	f7f7 fe2c 	bl	8000158 <__aeabi_dsub>
 8008500:	460b      	mov	r3, r1
 8008502:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008506:	9904      	ldr	r1, [sp, #16]
 8008508:	4602      	mov	r2, r0
 800850a:	2900      	cmp	r1, #0
 800850c:	f6bf af47 	bge.w	800839e <__ieee754_rem_pio2+0x6e>
 8008510:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008514:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008518:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800851c:	60e3      	str	r3, [r4, #12]
 800851e:	426d      	negs	r5, r5
 8008520:	e73d      	b.n	800839e <__ieee754_rem_pio2+0x6e>
 8008522:	a33f      	add	r3, pc, #252	; (adr r3, 8008620 <__ieee754_rem_pio2+0x2f0>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852c:	f7f7 ffcc 	bl	80004c8 <__aeabi_dmul>
 8008530:	4606      	mov	r6, r0
 8008532:	460f      	mov	r7, r1
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4640      	mov	r0, r8
 800853a:	4649      	mov	r1, r9
 800853c:	f7f7 fe0c 	bl	8000158 <__aeabi_dsub>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4682      	mov	sl, r0
 8008546:	468b      	mov	fp, r1
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 fe04 	bl	8000158 <__aeabi_dsub>
 8008550:	4632      	mov	r2, r6
 8008552:	463b      	mov	r3, r7
 8008554:	f7f7 fe00 	bl	8000158 <__aeabi_dsub>
 8008558:	a333      	add	r3, pc, #204	; (adr r3, 8008628 <__ieee754_rem_pio2+0x2f8>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	4606      	mov	r6, r0
 8008560:	460f      	mov	r7, r1
 8008562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008566:	f7f7 ffaf 	bl	80004c8 <__aeabi_dmul>
 800856a:	4632      	mov	r2, r6
 800856c:	463b      	mov	r3, r7
 800856e:	f7f7 fdf3 	bl	8000158 <__aeabi_dsub>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	4650      	mov	r0, sl
 800857c:	4659      	mov	r1, fp
 800857e:	f7f7 fdeb 	bl	8000158 <__aeabi_dsub>
 8008582:	9a05      	ldr	r2, [sp, #20]
 8008584:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b31      	cmp	r3, #49	; 0x31
 800858c:	dc06      	bgt.n	800859c <__ieee754_rem_pio2+0x26c>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	46d0      	mov	r8, sl
 8008594:	46d9      	mov	r9, fp
 8008596:	e9c4 2300 	strd	r2, r3, [r4]
 800859a:	e7a6      	b.n	80084ea <__ieee754_rem_pio2+0x1ba>
 800859c:	a326      	add	r3, pc, #152	; (adr r3, 8008638 <__ieee754_rem_pio2+0x308>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a6:	f7f7 ff8f 	bl	80004c8 <__aeabi_dmul>
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f7 fdcf 	bl	8000158 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4680      	mov	r8, r0
 80085c0:	4689      	mov	r9, r1
 80085c2:	4650      	mov	r0, sl
 80085c4:	4659      	mov	r1, fp
 80085c6:	f7f7 fdc7 	bl	8000158 <__aeabi_dsub>
 80085ca:	4632      	mov	r2, r6
 80085cc:	463b      	mov	r3, r7
 80085ce:	f7f7 fdc3 	bl	8000158 <__aeabi_dsub>
 80085d2:	a31b      	add	r3, pc, #108	; (adr r3, 8008640 <__ieee754_rem_pio2+0x310>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	4606      	mov	r6, r0
 80085da:	460f      	mov	r7, r1
 80085dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e0:	f7f7 ff72 	bl	80004c8 <__aeabi_dmul>
 80085e4:	4632      	mov	r2, r6
 80085e6:	463b      	mov	r3, r7
 80085e8:	f7f7 fdb6 	bl	8000158 <__aeabi_dsub>
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	e75e      	b.n	80084b0 <__ieee754_rem_pio2+0x180>
 80085f2:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <__ieee754_rem_pio2+0x330>)
 80085f4:	4592      	cmp	sl, r2
 80085f6:	dd35      	ble.n	8008664 <__ieee754_rem_pio2+0x334>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	f7f7 fdac 	bl	8000158 <__aeabi_dsub>
 8008600:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008604:	e9c4 0100 	strd	r0, r1, [r4]
 8008608:	e6a2      	b.n	8008350 <__ieee754_rem_pio2+0x20>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	54400000 	.word	0x54400000
 8008614:	3ff921fb 	.word	0x3ff921fb
 8008618:	1a626331 	.word	0x1a626331
 800861c:	3dd0b461 	.word	0x3dd0b461
 8008620:	1a600000 	.word	0x1a600000
 8008624:	3dd0b461 	.word	0x3dd0b461
 8008628:	2e037073 	.word	0x2e037073
 800862c:	3ba3198a 	.word	0x3ba3198a
 8008630:	6dc9c883 	.word	0x6dc9c883
 8008634:	3fe45f30 	.word	0x3fe45f30
 8008638:	2e000000 	.word	0x2e000000
 800863c:	3ba3198a 	.word	0x3ba3198a
 8008640:	252049c1 	.word	0x252049c1
 8008644:	397b839a 	.word	0x397b839a
 8008648:	3fe921fb 	.word	0x3fe921fb
 800864c:	4002d97b 	.word	0x4002d97b
 8008650:	3ff921fb 	.word	0x3ff921fb
 8008654:	413921fb 	.word	0x413921fb
 8008658:	3fe00000 	.word	0x3fe00000
 800865c:	08009618 	.word	0x08009618
 8008660:	7fefffff 	.word	0x7fefffff
 8008664:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008668:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800866c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008670:	460f      	mov	r7, r1
 8008672:	4606      	mov	r6, r0
 8008674:	f7f8 f9d8 	bl	8000a28 <__aeabi_d2iz>
 8008678:	f7f7 febc 	bl	80003f4 <__aeabi_i2d>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008688:	f7f7 fd66 	bl	8000158 <__aeabi_dsub>
 800868c:	2200      	movs	r2, #0
 800868e:	4b22      	ldr	r3, [pc, #136]	; (8008718 <__ieee754_rem_pio2+0x3e8>)
 8008690:	f7f7 ff1a 	bl	80004c8 <__aeabi_dmul>
 8008694:	460f      	mov	r7, r1
 8008696:	4606      	mov	r6, r0
 8008698:	f7f8 f9c6 	bl	8000a28 <__aeabi_d2iz>
 800869c:	f7f7 feaa 	bl	80003f4 <__aeabi_i2d>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086ac:	f7f7 fd54 	bl	8000158 <__aeabi_dsub>
 80086b0:	2200      	movs	r2, #0
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <__ieee754_rem_pio2+0x3e8>)
 80086b4:	f7f7 ff08 	bl	80004c8 <__aeabi_dmul>
 80086b8:	f04f 0803 	mov.w	r8, #3
 80086bc:	2600      	movs	r6, #0
 80086be:	2700      	movs	r7, #0
 80086c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086c4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80086c8:	4632      	mov	r2, r6
 80086ca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80086ce:	463b      	mov	r3, r7
 80086d0:	46c2      	mov	sl, r8
 80086d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80086d6:	f7f8 f95f 	bl	8000998 <__aeabi_dcmpeq>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1f4      	bne.n	80086c8 <__ieee754_rem_pio2+0x398>
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <__ieee754_rem_pio2+0x3ec>)
 80086e0:	462a      	mov	r2, r5
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	2302      	movs	r3, #2
 80086e6:	4621      	mov	r1, r4
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	a806      	add	r0, sp, #24
 80086ec:	4653      	mov	r3, sl
 80086ee:	f000 f985 	bl	80089fc <__kernel_rem_pio2>
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4605      	mov	r5, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f6bf ae51 	bge.w	800839e <__ieee754_rem_pio2+0x6e>
 80086fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008704:	e9c4 2300 	strd	r2, r3, [r4]
 8008708:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800870c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008710:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008714:	e703      	b.n	800851e <__ieee754_rem_pio2+0x1ee>
 8008716:	bf00      	nop
 8008718:	41700000 	.word	0x41700000
 800871c:	08009698 	.word	0x08009698

08008720 <__ieee754_sqrt>:
 8008720:	f8df c158 	ldr.w	ip, [pc, #344]	; 800887c <__ieee754_sqrt+0x15c>
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	ea3c 0c01 	bics.w	ip, ip, r1
 800872c:	4606      	mov	r6, r0
 800872e:	460d      	mov	r5, r1
 8008730:	460c      	mov	r4, r1
 8008732:	460a      	mov	r2, r1
 8008734:	4607      	mov	r7, r0
 8008736:	4603      	mov	r3, r0
 8008738:	d10f      	bne.n	800875a <__ieee754_sqrt+0x3a>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	f7f7 fec3 	bl	80004c8 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4630      	mov	r0, r6
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 fd07 	bl	800015c <__adddf3>
 800874e:	4606      	mov	r6, r0
 8008750:	460d      	mov	r5, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4629      	mov	r1, r5
 8008756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875a:	2900      	cmp	r1, #0
 800875c:	dc0e      	bgt.n	800877c <__ieee754_sqrt+0x5c>
 800875e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008762:	ea5c 0707 	orrs.w	r7, ip, r7
 8008766:	d0f4      	beq.n	8008752 <__ieee754_sqrt+0x32>
 8008768:	b141      	cbz	r1, 800877c <__ieee754_sqrt+0x5c>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	f7f7 fcf3 	bl	8000158 <__aeabi_dsub>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	f7f7 ffd1 	bl	800071c <__aeabi_ddiv>
 800877a:	e7e8      	b.n	800874e <__ieee754_sqrt+0x2e>
 800877c:	1521      	asrs	r1, r4, #20
 800877e:	d075      	beq.n	800886c <__ieee754_sqrt+0x14c>
 8008780:	07cc      	lsls	r4, r1, #31
 8008782:	f04f 0400 	mov.w	r4, #0
 8008786:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800878a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800878e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008792:	bf5e      	ittt	pl
 8008794:	0fd9      	lsrpl	r1, r3, #31
 8008796:	005b      	lslpl	r3, r3, #1
 8008798:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800879c:	0fd9      	lsrs	r1, r3, #31
 800879e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80087a2:	2516      	movs	r5, #22
 80087a4:	4620      	mov	r0, r4
 80087a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087aa:	107f      	asrs	r7, r7, #1
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	1846      	adds	r6, r0, r1
 80087b0:	4296      	cmp	r6, r2
 80087b2:	bfde      	ittt	le
 80087b4:	1b92      	suble	r2, r2, r6
 80087b6:	1870      	addle	r0, r6, r1
 80087b8:	1864      	addle	r4, r4, r1
 80087ba:	0052      	lsls	r2, r2, #1
 80087bc:	3d01      	subs	r5, #1
 80087be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80087c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80087c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087ca:	d1f0      	bne.n	80087ae <__ieee754_sqrt+0x8e>
 80087cc:	4629      	mov	r1, r5
 80087ce:	f04f 0e20 	mov.w	lr, #32
 80087d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087d6:	4282      	cmp	r2, r0
 80087d8:	eb06 0c05 	add.w	ip, r6, r5
 80087dc:	dc02      	bgt.n	80087e4 <__ieee754_sqrt+0xc4>
 80087de:	d113      	bne.n	8008808 <__ieee754_sqrt+0xe8>
 80087e0:	459c      	cmp	ip, r3
 80087e2:	d811      	bhi.n	8008808 <__ieee754_sqrt+0xe8>
 80087e4:	f1bc 0f00 	cmp.w	ip, #0
 80087e8:	eb0c 0506 	add.w	r5, ip, r6
 80087ec:	da43      	bge.n	8008876 <__ieee754_sqrt+0x156>
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	db41      	blt.n	8008876 <__ieee754_sqrt+0x156>
 80087f2:	f100 0801 	add.w	r8, r0, #1
 80087f6:	1a12      	subs	r2, r2, r0
 80087f8:	4640      	mov	r0, r8
 80087fa:	459c      	cmp	ip, r3
 80087fc:	bf88      	it	hi
 80087fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008802:	eba3 030c 	sub.w	r3, r3, ip
 8008806:	4431      	add	r1, r6
 8008808:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800880c:	f1be 0e01 	subs.w	lr, lr, #1
 8008810:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008818:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800881c:	d1db      	bne.n	80087d6 <__ieee754_sqrt+0xb6>
 800881e:	4313      	orrs	r3, r2
 8008820:	d006      	beq.n	8008830 <__ieee754_sqrt+0x110>
 8008822:	1c48      	adds	r0, r1, #1
 8008824:	bf0b      	itete	eq
 8008826:	4671      	moveq	r1, lr
 8008828:	3101      	addne	r1, #1
 800882a:	3401      	addeq	r4, #1
 800882c:	f021 0101 	bicne.w	r1, r1, #1
 8008830:	1063      	asrs	r3, r4, #1
 8008832:	0849      	lsrs	r1, r1, #1
 8008834:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008838:	07e2      	lsls	r2, r4, #31
 800883a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800883e:	bf48      	it	mi
 8008840:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008844:	460e      	mov	r6, r1
 8008846:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800884a:	e782      	b.n	8008752 <__ieee754_sqrt+0x32>
 800884c:	0ada      	lsrs	r2, r3, #11
 800884e:	3815      	subs	r0, #21
 8008850:	055b      	lsls	r3, r3, #21
 8008852:	2a00      	cmp	r2, #0
 8008854:	d0fa      	beq.n	800884c <__ieee754_sqrt+0x12c>
 8008856:	02d5      	lsls	r5, r2, #11
 8008858:	d50a      	bpl.n	8008870 <__ieee754_sqrt+0x150>
 800885a:	f1c1 0420 	rsb	r4, r1, #32
 800885e:	fa23 f404 	lsr.w	r4, r3, r4
 8008862:	1e4d      	subs	r5, r1, #1
 8008864:	408b      	lsls	r3, r1
 8008866:	4322      	orrs	r2, r4
 8008868:	1b41      	subs	r1, r0, r5
 800886a:	e789      	b.n	8008780 <__ieee754_sqrt+0x60>
 800886c:	4608      	mov	r0, r1
 800886e:	e7f0      	b.n	8008852 <__ieee754_sqrt+0x132>
 8008870:	0052      	lsls	r2, r2, #1
 8008872:	3101      	adds	r1, #1
 8008874:	e7ef      	b.n	8008856 <__ieee754_sqrt+0x136>
 8008876:	4680      	mov	r8, r0
 8008878:	e7bd      	b.n	80087f6 <__ieee754_sqrt+0xd6>
 800887a:	bf00      	nop
 800887c:	7ff00000 	.word	0x7ff00000

08008880 <__kernel_cos>:
 8008880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008888:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800888c:	4680      	mov	r8, r0
 800888e:	460f      	mov	r7, r1
 8008890:	e9cd 2300 	strd	r2, r3, [sp]
 8008894:	da04      	bge.n	80088a0 <__kernel_cos+0x20>
 8008896:	f7f8 f8c7 	bl	8000a28 <__aeabi_d2iz>
 800889a:	2800      	cmp	r0, #0
 800889c:	f000 8086 	beq.w	80089ac <__kernel_cos+0x12c>
 80088a0:	4642      	mov	r2, r8
 80088a2:	463b      	mov	r3, r7
 80088a4:	4640      	mov	r0, r8
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f7 fe0e 	bl	80004c8 <__aeabi_dmul>
 80088ac:	2200      	movs	r2, #0
 80088ae:	4b4e      	ldr	r3, [pc, #312]	; (80089e8 <__kernel_cos+0x168>)
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	f7f7 fe08 	bl	80004c8 <__aeabi_dmul>
 80088b8:	a33f      	add	r3, pc, #252	; (adr r3, 80089b8 <__kernel_cos+0x138>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	4620      	mov	r0, r4
 80088c4:	4629      	mov	r1, r5
 80088c6:	f7f7 fdff 	bl	80004c8 <__aeabi_dmul>
 80088ca:	a33d      	add	r3, pc, #244	; (adr r3, 80089c0 <__kernel_cos+0x140>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fc44 	bl	800015c <__adddf3>
 80088d4:	4622      	mov	r2, r4
 80088d6:	462b      	mov	r3, r5
 80088d8:	f7f7 fdf6 	bl	80004c8 <__aeabi_dmul>
 80088dc:	a33a      	add	r3, pc, #232	; (adr r3, 80089c8 <__kernel_cos+0x148>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fc39 	bl	8000158 <__aeabi_dsub>
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	f7f7 fded 	bl	80004c8 <__aeabi_dmul>
 80088ee:	a338      	add	r3, pc, #224	; (adr r3, 80089d0 <__kernel_cos+0x150>)
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f7f7 fc32 	bl	800015c <__adddf3>
 80088f8:	4622      	mov	r2, r4
 80088fa:	462b      	mov	r3, r5
 80088fc:	f7f7 fde4 	bl	80004c8 <__aeabi_dmul>
 8008900:	a335      	add	r3, pc, #212	; (adr r3, 80089d8 <__kernel_cos+0x158>)
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f7f7 fc27 	bl	8000158 <__aeabi_dsub>
 800890a:	4622      	mov	r2, r4
 800890c:	462b      	mov	r3, r5
 800890e:	f7f7 fddb 	bl	80004c8 <__aeabi_dmul>
 8008912:	a333      	add	r3, pc, #204	; (adr r3, 80089e0 <__kernel_cos+0x160>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f7f7 fc20 	bl	800015c <__adddf3>
 800891c:	4622      	mov	r2, r4
 800891e:	462b      	mov	r3, r5
 8008920:	f7f7 fdd2 	bl	80004c8 <__aeabi_dmul>
 8008924:	4622      	mov	r2, r4
 8008926:	462b      	mov	r3, r5
 8008928:	f7f7 fdce 	bl	80004c8 <__aeabi_dmul>
 800892c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4640      	mov	r0, r8
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fdc6 	bl	80004c8 <__aeabi_dmul>
 800893c:	460b      	mov	r3, r1
 800893e:	4602      	mov	r2, r0
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f7f7 fc08 	bl	8000158 <__aeabi_dsub>
 8008948:	4b28      	ldr	r3, [pc, #160]	; (80089ec <__kernel_cos+0x16c>)
 800894a:	4680      	mov	r8, r0
 800894c:	429e      	cmp	r6, r3
 800894e:	4689      	mov	r9, r1
 8008950:	dc0e      	bgt.n	8008970 <__kernel_cos+0xf0>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4650      	mov	r0, sl
 8008958:	4659      	mov	r1, fp
 800895a:	f7f7 fbfd 	bl	8000158 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	2000      	movs	r0, #0
 8008962:	460b      	mov	r3, r1
 8008964:	4922      	ldr	r1, [pc, #136]	; (80089f0 <__kernel_cos+0x170>)
 8008966:	f7f7 fbf7 	bl	8000158 <__aeabi_dsub>
 800896a:	b003      	add	sp, #12
 800896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008970:	2400      	movs	r4, #0
 8008972:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <__kernel_cos+0x174>)
 8008974:	4622      	mov	r2, r4
 8008976:	429e      	cmp	r6, r3
 8008978:	bfcc      	ite	gt
 800897a:	4d1f      	ldrgt	r5, [pc, #124]	; (80089f8 <__kernel_cos+0x178>)
 800897c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008980:	462b      	mov	r3, r5
 8008982:	2000      	movs	r0, #0
 8008984:	491a      	ldr	r1, [pc, #104]	; (80089f0 <__kernel_cos+0x170>)
 8008986:	f7f7 fbe7 	bl	8000158 <__aeabi_dsub>
 800898a:	4622      	mov	r2, r4
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	462b      	mov	r3, r5
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fbdf 	bl	8000158 <__aeabi_dsub>
 800899a:	4642      	mov	r2, r8
 800899c:	464b      	mov	r3, r9
 800899e:	f7f7 fbdb 	bl	8000158 <__aeabi_dsub>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	e7dc      	b.n	8008966 <__kernel_cos+0xe6>
 80089ac:	2000      	movs	r0, #0
 80089ae:	4910      	ldr	r1, [pc, #64]	; (80089f0 <__kernel_cos+0x170>)
 80089b0:	e7db      	b.n	800896a <__kernel_cos+0xea>
 80089b2:	bf00      	nop
 80089b4:	f3af 8000 	nop.w
 80089b8:	be8838d4 	.word	0xbe8838d4
 80089bc:	bda8fae9 	.word	0xbda8fae9
 80089c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80089c4:	3e21ee9e 	.word	0x3e21ee9e
 80089c8:	809c52ad 	.word	0x809c52ad
 80089cc:	3e927e4f 	.word	0x3e927e4f
 80089d0:	19cb1590 	.word	0x19cb1590
 80089d4:	3efa01a0 	.word	0x3efa01a0
 80089d8:	16c15177 	.word	0x16c15177
 80089dc:	3f56c16c 	.word	0x3f56c16c
 80089e0:	5555554c 	.word	0x5555554c
 80089e4:	3fa55555 	.word	0x3fa55555
 80089e8:	3fe00000 	.word	0x3fe00000
 80089ec:	3fd33332 	.word	0x3fd33332
 80089f0:	3ff00000 	.word	0x3ff00000
 80089f4:	3fe90000 	.word	0x3fe90000
 80089f8:	3fd20000 	.word	0x3fd20000

080089fc <__kernel_rem_pio2>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008a04:	9308      	str	r3, [sp, #32]
 8008a06:	9106      	str	r1, [sp, #24]
 8008a08:	4bb6      	ldr	r3, [pc, #728]	; (8008ce4 <__kernel_rem_pio2+0x2e8>)
 8008a0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008a0c:	f112 0f14 	cmn.w	r2, #20
 8008a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a14:	bfa8      	it	ge
 8008a16:	1ed4      	subge	r4, r2, #3
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	9b08      	ldr	r3, [sp, #32]
 8008a1c:	bfb8      	it	lt
 8008a1e:	2400      	movlt	r4, #0
 8008a20:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a24:	9307      	str	r3, [sp, #28]
 8008a26:	bfa4      	itt	ge
 8008a28:	2318      	movge	r3, #24
 8008a2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008a2e:	f06f 0317 	mvn.w	r3, #23
 8008a32:	fb04 3303 	mla	r3, r4, r3, r3
 8008a36:	eb03 0b02 	add.w	fp, r3, r2
 8008a3a:	9a07      	ldr	r2, [sp, #28]
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	1aa7      	subs	r7, r4, r2
 8008a40:	eb03 0802 	add.w	r8, r3, r2
 8008a44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008a46:	2500      	movs	r5, #0
 8008a48:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9009      	str	r0, [sp, #36]	; 0x24
 8008a52:	ae20      	add	r6, sp, #128	; 0x80
 8008a54:	4545      	cmp	r5, r8
 8008a56:	dd14      	ble.n	8008a82 <__kernel_rem_pio2+0x86>
 8008a58:	f04f 0800 	mov.w	r8, #0
 8008a5c:	9a08      	ldr	r2, [sp, #32]
 8008a5e:	ab20      	add	r3, sp, #128	; 0x80
 8008a60:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008a64:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	4598      	cmp	r8, r3
 8008a6c:	dc35      	bgt.n	8008ada <__kernel_rem_pio2+0xde>
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	2200      	movs	r2, #0
 8008a72:	f1a3 0908 	sub.w	r9, r3, #8
 8008a76:	2300      	movs	r3, #0
 8008a78:	462f      	mov	r7, r5
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8008a80:	e01f      	b.n	8008ac2 <__kernel_rem_pio2+0xc6>
 8008a82:	42ef      	cmn	r7, r5
 8008a84:	d40b      	bmi.n	8008a9e <__kernel_rem_pio2+0xa2>
 8008a86:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8008a8e:	f7f7 fcb1 	bl	80003f4 <__aeabi_i2d>
 8008a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a96:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a9a:	3501      	adds	r5, #1
 8008a9c:	e7da      	b.n	8008a54 <__kernel_rem_pio2+0x58>
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	e7f8      	b.n	8008a96 <__kernel_rem_pio2+0x9a>
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008aac:	f7f7 fd0c 	bl	80004c8 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f7 fb50 	bl	800015c <__adddf3>
 8008abc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac0:	3601      	adds	r6, #1
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	3f08      	subs	r7, #8
 8008ac6:	429e      	cmp	r6, r3
 8008ac8:	ddec      	ble.n	8008aa4 <__kernel_rem_pio2+0xa8>
 8008aca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ace:	f108 0801 	add.w	r8, r8, #1
 8008ad2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008ad6:	3508      	adds	r5, #8
 8008ad8:	e7c6      	b.n	8008a68 <__kernel_rem_pio2+0x6c>
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	aa0c      	add	r2, sp, #48	; 0x30
 8008ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ae4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008ae6:	9e02      	ldr	r6, [sp, #8]
 8008ae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008aec:	930a      	str	r3, [sp, #40]	; 0x28
 8008aee:	ab98      	add	r3, sp, #608	; 0x260
 8008af0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008af4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008af8:	ab70      	add	r3, sp, #448	; 0x1c0
 8008afa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008afe:	46d0      	mov	r8, sl
 8008b00:	46b1      	mov	r9, r6
 8008b02:	af0c      	add	r7, sp, #48	; 0x30
 8008b04:	9700      	str	r7, [sp, #0]
 8008b06:	f1b9 0f00 	cmp.w	r9, #0
 8008b0a:	f1a8 0808 	sub.w	r8, r8, #8
 8008b0e:	dc71      	bgt.n	8008bf4 <__kernel_rem_pio2+0x1f8>
 8008b10:	465a      	mov	r2, fp
 8008b12:	4620      	mov	r0, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	f000 fc1f 	bl	8009358 <scalbn>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b20:	4604      	mov	r4, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	f7f7 fcd0 	bl	80004c8 <__aeabi_dmul>
 8008b28:	f000 fb96 	bl	8009258 <floor>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4b6e      	ldr	r3, [pc, #440]	; (8008ce8 <__kernel_rem_pio2+0x2ec>)
 8008b30:	f7f7 fcca 	bl	80004c8 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fb0c 	bl	8000158 <__aeabi_dsub>
 8008b40:	460d      	mov	r5, r1
 8008b42:	4604      	mov	r4, r0
 8008b44:	f7f7 ff70 	bl	8000a28 <__aeabi_d2iz>
 8008b48:	9004      	str	r0, [sp, #16]
 8008b4a:	f7f7 fc53 	bl	80003f4 <__aeabi_i2d>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 faff 	bl	8000158 <__aeabi_dsub>
 8008b5a:	f1bb 0f00 	cmp.w	fp, #0
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	dd70      	ble.n	8008c46 <__kernel_rem_pio2+0x24a>
 8008b64:	1e72      	subs	r2, r6, #1
 8008b66:	ab0c      	add	r3, sp, #48	; 0x30
 8008b68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b6c:	9c04      	ldr	r4, [sp, #16]
 8008b6e:	f1cb 0118 	rsb	r1, fp, #24
 8008b72:	fa40 f301 	asr.w	r3, r0, r1
 8008b76:	441c      	add	r4, r3
 8008b78:	408b      	lsls	r3, r1
 8008b7a:	1ac0      	subs	r0, r0, r3
 8008b7c:	ab0c      	add	r3, sp, #48	; 0x30
 8008b7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008b82:	f1cb 0317 	rsb	r3, fp, #23
 8008b86:	9404      	str	r4, [sp, #16]
 8008b88:	fa40 f303 	asr.w	r3, r0, r3
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dd66      	ble.n	8008c62 <__kernel_rem_pio2+0x266>
 8008b94:	2200      	movs	r2, #0
 8008b96:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	4296      	cmp	r6, r2
 8008ba4:	f300 80ac 	bgt.w	8008d00 <__kernel_rem_pio2+0x304>
 8008ba8:	f1bb 0f00 	cmp.w	fp, #0
 8008bac:	dd07      	ble.n	8008bbe <__kernel_rem_pio2+0x1c2>
 8008bae:	f1bb 0f01 	cmp.w	fp, #1
 8008bb2:	f000 80b4 	beq.w	8008d1e <__kernel_rem_pio2+0x322>
 8008bb6:	f1bb 0f02 	cmp.w	fp, #2
 8008bba:	f000 80ba 	beq.w	8008d32 <__kernel_rem_pio2+0x336>
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d14e      	bne.n	8008c62 <__kernel_rem_pio2+0x266>
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4948      	ldr	r1, [pc, #288]	; (8008cec <__kernel_rem_pio2+0x2f0>)
 8008bcc:	f7f7 fac4 	bl	8000158 <__aeabi_dsub>
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4689      	mov	r9, r1
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d044      	beq.n	8008c62 <__kernel_rem_pio2+0x266>
 8008bd8:	465a      	mov	r2, fp
 8008bda:	2000      	movs	r0, #0
 8008bdc:	4943      	ldr	r1, [pc, #268]	; (8008cec <__kernel_rem_pio2+0x2f0>)
 8008bde:	f000 fbbb 	bl	8009358 <scalbn>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4640      	mov	r0, r8
 8008be8:	4649      	mov	r1, r9
 8008bea:	f7f7 fab5 	bl	8000158 <__aeabi_dsub>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	4689      	mov	r9, r1
 8008bf2:	e036      	b.n	8008c62 <__kernel_rem_pio2+0x266>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4b3e      	ldr	r3, [pc, #248]	; (8008cf0 <__kernel_rem_pio2+0x2f4>)
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fc64 	bl	80004c8 <__aeabi_dmul>
 8008c00:	f7f7 ff12 	bl	8000a28 <__aeabi_d2iz>
 8008c04:	f7f7 fbf6 	bl	80003f4 <__aeabi_i2d>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b38      	ldr	r3, [pc, #224]	; (8008cf4 <__kernel_rem_pio2+0x2f8>)
 8008c14:	f7f7 fc58 	bl	80004c8 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fa9a 	bl	8000158 <__aeabi_dsub>
 8008c24:	f7f7 ff00 	bl	8000a28 <__aeabi_d2iz>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c2e:	f843 0b04 	str.w	r0, [r3], #4
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c38:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008c3c:	f7f7 fa8e 	bl	800015c <__adddf3>
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	e75f      	b.n	8008b06 <__kernel_rem_pio2+0x10a>
 8008c46:	d105      	bne.n	8008c54 <__kernel_rem_pio2+0x258>
 8008c48:	1e73      	subs	r3, r6, #1
 8008c4a:	aa0c      	add	r2, sp, #48	; 0x30
 8008c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c50:	15c3      	asrs	r3, r0, #23
 8008c52:	e79b      	b.n	8008b8c <__kernel_rem_pio2+0x190>
 8008c54:	2200      	movs	r2, #0
 8008c56:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <__kernel_rem_pio2+0x2fc>)
 8008c58:	f7f7 febc 	bl	80009d4 <__aeabi_dcmpge>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d13e      	bne.n	8008cde <__kernel_rem_pio2+0x2e2>
 8008c60:	9000      	str	r0, [sp, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	2300      	movs	r3, #0
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fe95 	bl	8000998 <__aeabi_dcmpeq>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f000 80b1 	beq.w	8008dd6 <__kernel_rem_pio2+0x3da>
 8008c74:	1e74      	subs	r4, r6, #1
 8008c76:	4623      	mov	r3, r4
 8008c78:	2200      	movs	r2, #0
 8008c7a:	9902      	ldr	r1, [sp, #8]
 8008c7c:	428b      	cmp	r3, r1
 8008c7e:	da5f      	bge.n	8008d40 <__kernel_rem_pio2+0x344>
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	d074      	beq.n	8008d6e <__kernel_rem_pio2+0x372>
 8008c84:	ab0c      	add	r3, sp, #48	; 0x30
 8008c86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008c8a:	f1ab 0b18 	sub.w	fp, fp, #24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 809f 	beq.w	8008dd2 <__kernel_rem_pio2+0x3d6>
 8008c94:	465a      	mov	r2, fp
 8008c96:	2000      	movs	r0, #0
 8008c98:	4914      	ldr	r1, [pc, #80]	; (8008cec <__kernel_rem_pio2+0x2f0>)
 8008c9a:	f000 fb5d 	bl	8009358 <scalbn>
 8008c9e:	46a2      	mov	sl, r4
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	460f      	mov	r7, r1
 8008ca4:	f04f 0800 	mov.w	r8, #0
 8008ca8:	ab70      	add	r3, sp, #448	; 0x1c0
 8008caa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008cf0 <__kernel_rem_pio2+0x2f4>
 8008cae:	00e5      	lsls	r5, r4, #3
 8008cb0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008cb4:	f1ba 0f00 	cmp.w	sl, #0
 8008cb8:	f280 80c3 	bge.w	8008e42 <__kernel_rem_pio2+0x446>
 8008cbc:	4626      	mov	r6, r4
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	f2c0 80f5 	blt.w	8008eae <__kernel_rem_pio2+0x4b2>
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <__kernel_rem_pio2+0x300>)
 8008cc6:	f04f 0a00 	mov.w	sl, #0
 8008cca:	9307      	str	r3, [sp, #28]
 8008ccc:	ab70      	add	r3, sp, #448	; 0x1c0
 8008cce:	f04f 0b00 	mov.w	fp, #0
 8008cd2:	f04f 0800 	mov.w	r8, #0
 8008cd6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008cda:	1ba7      	subs	r7, r4, r6
 8008cdc:	e0db      	b.n	8008e96 <__kernel_rem_pio2+0x49a>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	e757      	b.n	8008b94 <__kernel_rem_pio2+0x198>
 8008ce4:	080097e0 	.word	0x080097e0
 8008ce8:	40200000 	.word	0x40200000
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	3e700000 	.word	0x3e700000
 8008cf4:	41700000 	.word	0x41700000
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	080097a0 	.word	0x080097a0
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	b944      	cbnz	r4, 8008d16 <__kernel_rem_pio2+0x31a>
 8008d04:	b11b      	cbz	r3, 8008d0e <__kernel_rem_pio2+0x312>
 8008d06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	461c      	mov	r4, r3
 8008d10:	3201      	adds	r2, #1
 8008d12:	3704      	adds	r7, #4
 8008d14:	e745      	b.n	8008ba2 <__kernel_rem_pio2+0x1a6>
 8008d16:	1acb      	subs	r3, r1, r3
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4623      	mov	r3, r4
 8008d1c:	e7f7      	b.n	8008d0e <__kernel_rem_pio2+0x312>
 8008d1e:	1e72      	subs	r2, r6, #1
 8008d20:	ab0c      	add	r3, sp, #48	; 0x30
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d2a:	a90c      	add	r1, sp, #48	; 0x30
 8008d2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d30:	e745      	b.n	8008bbe <__kernel_rem_pio2+0x1c2>
 8008d32:	1e72      	subs	r2, r6, #1
 8008d34:	ab0c      	add	r3, sp, #48	; 0x30
 8008d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d3e:	e7f4      	b.n	8008d2a <__kernel_rem_pio2+0x32e>
 8008d40:	a90c      	add	r1, sp, #48	; 0x30
 8008d42:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	e796      	b.n	8008c7a <__kernel_rem_pio2+0x27e>
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d0fa      	beq.n	8008d4c <__kernel_rem_pio2+0x350>
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	f106 0801 	add.w	r8, r6, #1
 8008d5c:	18f5      	adds	r5, r6, r3
 8008d5e:	ab20      	add	r3, sp, #128	; 0x80
 8008d60:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008d64:	4434      	add	r4, r6
 8008d66:	4544      	cmp	r4, r8
 8008d68:	da04      	bge.n	8008d74 <__kernel_rem_pio2+0x378>
 8008d6a:	4626      	mov	r6, r4
 8008d6c:	e6bf      	b.n	8008aee <__kernel_rem_pio2+0xf2>
 8008d6e:	2401      	movs	r4, #1
 8008d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d72:	e7ec      	b.n	8008d4e <__kernel_rem_pio2+0x352>
 8008d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d76:	f04f 0900 	mov.w	r9, #0
 8008d7a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008d7e:	f7f7 fb39 	bl	80003f4 <__aeabi_i2d>
 8008d82:	2600      	movs	r6, #0
 8008d84:	2700      	movs	r7, #0
 8008d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d88:	e9c5 0100 	strd	r0, r1, [r5]
 8008d8c:	3b08      	subs	r3, #8
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	9504      	str	r5, [sp, #16]
 8008d92:	9b07      	ldr	r3, [sp, #28]
 8008d94:	4599      	cmp	r9, r3
 8008d96:	dd05      	ble.n	8008da4 <__kernel_rem_pio2+0x3a8>
 8008d98:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008d9c:	f108 0801 	add.w	r8, r8, #1
 8008da0:	3508      	adds	r5, #8
 8008da2:	e7e0      	b.n	8008d66 <__kernel_rem_pio2+0x36a>
 8008da4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008da8:	9900      	ldr	r1, [sp, #0]
 8008daa:	f109 0901 	add.w	r9, r9, #1
 8008dae:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008db2:	9100      	str	r1, [sp, #0]
 8008db4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008db8:	f8cd c010 	str.w	ip, [sp, #16]
 8008dbc:	f7f7 fb84 	bl	80004c8 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 f9c8 	bl	800015c <__adddf3>
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460f      	mov	r7, r1
 8008dd0:	e7df      	b.n	8008d92 <__kernel_rem_pio2+0x396>
 8008dd2:	3c01      	subs	r4, #1
 8008dd4:	e756      	b.n	8008c84 <__kernel_rem_pio2+0x288>
 8008dd6:	f1cb 0200 	rsb	r2, fp, #0
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f000 fabb 	bl	8009358 <scalbn>
 8008de2:	2200      	movs	r2, #0
 8008de4:	4ba4      	ldr	r3, [pc, #656]	; (8009078 <__kernel_rem_pio2+0x67c>)
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	f7f7 fdf3 	bl	80009d4 <__aeabi_dcmpge>
 8008dee:	b1f8      	cbz	r0, 8008e30 <__kernel_rem_pio2+0x434>
 8008df0:	2200      	movs	r2, #0
 8008df2:	4ba2      	ldr	r3, [pc, #648]	; (800907c <__kernel_rem_pio2+0x680>)
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fb66 	bl	80004c8 <__aeabi_dmul>
 8008dfc:	f7f7 fe14 	bl	8000a28 <__aeabi_d2iz>
 8008e00:	4607      	mov	r7, r0
 8008e02:	f7f7 faf7 	bl	80003f4 <__aeabi_i2d>
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b9b      	ldr	r3, [pc, #620]	; (8009078 <__kernel_rem_pio2+0x67c>)
 8008e0a:	f7f7 fb5d 	bl	80004c8 <__aeabi_dmul>
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4602      	mov	r2, r0
 8008e12:	4629      	mov	r1, r5
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7f7 f99f 	bl	8000158 <__aeabi_dsub>
 8008e1a:	f7f7 fe05 	bl	8000a28 <__aeabi_d2iz>
 8008e1e:	1c74      	adds	r4, r6, #1
 8008e20:	ab0c      	add	r3, sp, #48	; 0x30
 8008e22:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008e26:	f10b 0b18 	add.w	fp, fp, #24
 8008e2a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008e2e:	e731      	b.n	8008c94 <__kernel_rem_pio2+0x298>
 8008e30:	4620      	mov	r0, r4
 8008e32:	4629      	mov	r1, r5
 8008e34:	f7f7 fdf8 	bl	8000a28 <__aeabi_d2iz>
 8008e38:	ab0c      	add	r3, sp, #48	; 0x30
 8008e3a:	4634      	mov	r4, r6
 8008e3c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008e40:	e728      	b.n	8008c94 <__kernel_rem_pio2+0x298>
 8008e42:	ab0c      	add	r3, sp, #48	; 0x30
 8008e44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008e48:	f7f7 fad4 	bl	80003f4 <__aeabi_i2d>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	f7f7 fb3a 	bl	80004c8 <__aeabi_dmul>
 8008e54:	4642      	mov	r2, r8
 8008e56:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fb32 	bl	80004c8 <__aeabi_dmul>
 8008e64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e68:	4606      	mov	r6, r0
 8008e6a:	460f      	mov	r7, r1
 8008e6c:	e722      	b.n	8008cb4 <__kernel_rem_pio2+0x2b8>
 8008e6e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008e72:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008e76:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008e7a:	f8cd c01c 	str.w	ip, [sp, #28]
 8008e7e:	f7f7 fb23 	bl	80004c8 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	f7f7 f967 	bl	800015c <__adddf3>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	f108 0801 	add.w	r8, r8, #1
 8008e96:	9b02      	ldr	r3, [sp, #8]
 8008e98:	4598      	cmp	r8, r3
 8008e9a:	dc01      	bgt.n	8008ea0 <__kernel_rem_pio2+0x4a4>
 8008e9c:	45b8      	cmp	r8, r7
 8008e9e:	dde6      	ble.n	8008e6e <__kernel_rem_pio2+0x472>
 8008ea0:	ab48      	add	r3, sp, #288	; 0x120
 8008ea2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ea6:	e9c7 ab00 	strd	sl, fp, [r7]
 8008eaa:	3e01      	subs	r6, #1
 8008eac:	e707      	b.n	8008cbe <__kernel_rem_pio2+0x2c2>
 8008eae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	dc09      	bgt.n	8008ec8 <__kernel_rem_pio2+0x4cc>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dc32      	bgt.n	8008f1e <__kernel_rem_pio2+0x522>
 8008eb8:	d05a      	beq.n	8008f70 <__kernel_rem_pio2+0x574>
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	f003 0007 	and.w	r0, r3, #7
 8008ec0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d1f5      	bne.n	8008eba <__kernel_rem_pio2+0x4be>
 8008ece:	ab48      	add	r3, sp, #288	; 0x120
 8008ed0:	441d      	add	r5, r3
 8008ed2:	46aa      	mov	sl, r5
 8008ed4:	46a3      	mov	fp, r4
 8008ed6:	f1bb 0f00 	cmp.w	fp, #0
 8008eda:	dc76      	bgt.n	8008fca <__kernel_rem_pio2+0x5ce>
 8008edc:	46aa      	mov	sl, r5
 8008ede:	46a3      	mov	fp, r4
 8008ee0:	f1bb 0f01 	cmp.w	fp, #1
 8008ee4:	f300 8090 	bgt.w	8009008 <__kernel_rem_pio2+0x60c>
 8008ee8:	2700      	movs	r7, #0
 8008eea:	463e      	mov	r6, r7
 8008eec:	2c01      	cmp	r4, #1
 8008eee:	f300 80aa 	bgt.w	8009046 <__kernel_rem_pio2+0x64a>
 8008ef2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008ef6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 80ac 	bne.w	800905a <__kernel_rem_pio2+0x65e>
 8008f02:	4603      	mov	r3, r0
 8008f04:	462a      	mov	r2, r5
 8008f06:	9806      	ldr	r0, [sp, #24]
 8008f08:	e9c0 2300 	strd	r2, r3, [r0]
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f14:	463a      	mov	r2, r7
 8008f16:	4633      	mov	r3, r6
 8008f18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008f1c:	e7cd      	b.n	8008eba <__kernel_rem_pio2+0x4be>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	46a0      	mov	r8, r4
 8008f22:	4601      	mov	r1, r0
 8008f24:	ab48      	add	r3, sp, #288	; 0x120
 8008f26:	441d      	add	r5, r3
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	da3a      	bge.n	8008fa4 <__kernel_rem_pio2+0x5a8>
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03e      	beq.n	8008fb2 <__kernel_rem_pio2+0x5b6>
 8008f34:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008f38:	4602      	mov	r2, r0
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	9d06      	ldr	r5, [sp, #24]
 8008f3e:	2601      	movs	r6, #1
 8008f40:	e9c5 2300 	strd	r2, r3, [r5]
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008f4a:	f7f7 f905 	bl	8000158 <__aeabi_dsub>
 8008f4e:	4684      	mov	ip, r0
 8008f50:	460f      	mov	r7, r1
 8008f52:	ad48      	add	r5, sp, #288	; 0x120
 8008f54:	42b4      	cmp	r4, r6
 8008f56:	f105 0508 	add.w	r5, r5, #8
 8008f5a:	da2c      	bge.n	8008fb6 <__kernel_rem_pio2+0x5ba>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	b10b      	cbz	r3, 8008f64 <__kernel_rem_pio2+0x568>
 8008f60:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008f64:	4662      	mov	r2, ip
 8008f66:	463b      	mov	r3, r7
 8008f68:	9906      	ldr	r1, [sp, #24]
 8008f6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008f6e:	e7a4      	b.n	8008eba <__kernel_rem_pio2+0x4be>
 8008f70:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008f72:	ab48      	add	r3, sp, #288	; 0x120
 8008f74:	4637      	mov	r7, r6
 8008f76:	441d      	add	r5, r3
 8008f78:	2c00      	cmp	r4, #0
 8008f7a:	da09      	bge.n	8008f90 <__kernel_rem_pio2+0x594>
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	b10b      	cbz	r3, 8008f84 <__kernel_rem_pio2+0x588>
 8008f80:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	9906      	ldr	r1, [sp, #24]
 8008f8a:	e9c1 2300 	strd	r2, r3, [r1]
 8008f8e:	e794      	b.n	8008eba <__kernel_rem_pio2+0x4be>
 8008f90:	4630      	mov	r0, r6
 8008f92:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008f96:	4639      	mov	r1, r7
 8008f98:	f7f7 f8e0 	bl	800015c <__adddf3>
 8008f9c:	3c01      	subs	r4, #1
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	e7e9      	b.n	8008f78 <__kernel_rem_pio2+0x57c>
 8008fa4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008fa8:	f7f7 f8d8 	bl	800015c <__adddf3>
 8008fac:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fb0:	e7ba      	b.n	8008f28 <__kernel_rem_pio2+0x52c>
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	e7c0      	b.n	8008f38 <__kernel_rem_pio2+0x53c>
 8008fb6:	4660      	mov	r0, ip
 8008fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	f7f7 f8cd 	bl	800015c <__adddf3>
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	4684      	mov	ip, r0
 8008fc6:	460f      	mov	r7, r1
 8008fc8:	e7c4      	b.n	8008f54 <__kernel_rem_pio2+0x558>
 8008fca:	e9da 6700 	ldrd	r6, r7, [sl]
 8008fce:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008fd2:	4632      	mov	r2, r6
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	4649      	mov	r1, r9
 8008fda:	f7f7 f8bf 	bl	800015c <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 f8b5 	bl	8000158 <__aeabi_dsub>
 8008fee:	4632      	mov	r2, r6
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	f7f7 f8b3 	bl	800015c <__adddf3>
 8008ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ffa:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008ffe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009002:	e9ca 2300 	strd	r2, r3, [sl]
 8009006:	e766      	b.n	8008ed6 <__kernel_rem_pio2+0x4da>
 8009008:	e9da 8900 	ldrd	r8, r9, [sl]
 800900c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f8a0 	bl	800015c <__adddf3>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 f896 	bl	8000158 <__aeabi_dsub>
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	f7f7 f894 	bl	800015c <__adddf3>
 8009034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009038:	e86a 0102 	strd	r0, r1, [sl], #-8
 800903c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009040:	e9ca 2300 	strd	r2, r3, [sl]
 8009044:	e74c      	b.n	8008ee0 <__kernel_rem_pio2+0x4e4>
 8009046:	4638      	mov	r0, r7
 8009048:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800904c:	4631      	mov	r1, r6
 800904e:	f7f7 f885 	bl	800015c <__adddf3>
 8009052:	3c01      	subs	r4, #1
 8009054:	4607      	mov	r7, r0
 8009056:	460e      	mov	r6, r1
 8009058:	e748      	b.n	8008eec <__kernel_rem_pio2+0x4f0>
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009060:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009064:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009068:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800906c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009070:	601d      	str	r5, [r3, #0]
 8009072:	615e      	str	r6, [r3, #20]
 8009074:	e721      	b.n	8008eba <__kernel_rem_pio2+0x4be>
 8009076:	bf00      	nop
 8009078:	41700000 	.word	0x41700000
 800907c:	3e700000 	.word	0x3e700000

08009080 <__kernel_sin>:
 8009080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009084:	b086      	sub	sp, #24
 8009086:	e9cd 2300 	strd	r2, r3, [sp]
 800908a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800908e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009092:	4682      	mov	sl, r0
 8009094:	460c      	mov	r4, r1
 8009096:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009098:	da03      	bge.n	80090a2 <__kernel_sin+0x22>
 800909a:	f7f7 fcc5 	bl	8000a28 <__aeabi_d2iz>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d050      	beq.n	8009144 <__kernel_sin+0xc4>
 80090a2:	4652      	mov	r2, sl
 80090a4:	4623      	mov	r3, r4
 80090a6:	4650      	mov	r0, sl
 80090a8:	4621      	mov	r1, r4
 80090aa:	f7f7 fa0d 	bl	80004c8 <__aeabi_dmul>
 80090ae:	4606      	mov	r6, r0
 80090b0:	460f      	mov	r7, r1
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4650      	mov	r0, sl
 80090b8:	4621      	mov	r1, r4
 80090ba:	f7f7 fa05 	bl	80004c8 <__aeabi_dmul>
 80090be:	a33e      	add	r3, pc, #248	; (adr r3, 80091b8 <__kernel_sin+0x138>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 f9fc 	bl	80004c8 <__aeabi_dmul>
 80090d0:	a33b      	add	r3, pc, #236	; (adr r3, 80091c0 <__kernel_sin+0x140>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 f83f 	bl	8000158 <__aeabi_dsub>
 80090da:	4632      	mov	r2, r6
 80090dc:	463b      	mov	r3, r7
 80090de:	f7f7 f9f3 	bl	80004c8 <__aeabi_dmul>
 80090e2:	a339      	add	r3, pc, #228	; (adr r3, 80091c8 <__kernel_sin+0x148>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f838 	bl	800015c <__adddf3>
 80090ec:	4632      	mov	r2, r6
 80090ee:	463b      	mov	r3, r7
 80090f0:	f7f7 f9ea 	bl	80004c8 <__aeabi_dmul>
 80090f4:	a336      	add	r3, pc, #216	; (adr r3, 80091d0 <__kernel_sin+0x150>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f82d 	bl	8000158 <__aeabi_dsub>
 80090fe:	4632      	mov	r2, r6
 8009100:	463b      	mov	r3, r7
 8009102:	f7f7 f9e1 	bl	80004c8 <__aeabi_dmul>
 8009106:	a334      	add	r3, pc, #208	; (adr r3, 80091d8 <__kernel_sin+0x158>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f826 	bl	800015c <__adddf3>
 8009110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009114:	b9dd      	cbnz	r5, 800914e <__kernel_sin+0xce>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 f9d3 	bl	80004c8 <__aeabi_dmul>
 8009122:	a32f      	add	r3, pc, #188	; (adr r3, 80091e0 <__kernel_sin+0x160>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f816 	bl	8000158 <__aeabi_dsub>
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	f7f7 f9ca 	bl	80004c8 <__aeabi_dmul>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4650      	mov	r0, sl
 800913a:	4621      	mov	r1, r4
 800913c:	f7f7 f80e 	bl	800015c <__adddf3>
 8009140:	4682      	mov	sl, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4650      	mov	r0, sl
 8009146:	4621      	mov	r1, r4
 8009148:	b006      	add	sp, #24
 800914a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914e:	2200      	movs	r2, #0
 8009150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009154:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <__kernel_sin+0x168>)
 8009156:	f7f7 f9b7 	bl	80004c8 <__aeabi_dmul>
 800915a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800915e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	f7f7 f9af 	bl	80004c8 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009172:	f7f6 fff1 	bl	8000158 <__aeabi_dsub>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	f7f7 f9a5 	bl	80004c8 <__aeabi_dmul>
 800917e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009182:	f7f6 ffe9 	bl	8000158 <__aeabi_dsub>
 8009186:	a316      	add	r3, pc, #88	; (adr r3, 80091e0 <__kernel_sin+0x160>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	4640      	mov	r0, r8
 8009192:	4649      	mov	r1, r9
 8009194:	f7f7 f998 	bl	80004c8 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f6 ffdc 	bl	800015c <__adddf3>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4650      	mov	r0, sl
 80091aa:	4621      	mov	r1, r4
 80091ac:	f7f6 ffd4 	bl	8000158 <__aeabi_dsub>
 80091b0:	e7c6      	b.n	8009140 <__kernel_sin+0xc0>
 80091b2:	bf00      	nop
 80091b4:	f3af 8000 	nop.w
 80091b8:	5acfd57c 	.word	0x5acfd57c
 80091bc:	3de5d93a 	.word	0x3de5d93a
 80091c0:	8a2b9ceb 	.word	0x8a2b9ceb
 80091c4:	3e5ae5e6 	.word	0x3e5ae5e6
 80091c8:	57b1fe7d 	.word	0x57b1fe7d
 80091cc:	3ec71de3 	.word	0x3ec71de3
 80091d0:	19c161d5 	.word	0x19c161d5
 80091d4:	3f2a01a0 	.word	0x3f2a01a0
 80091d8:	1110f8a6 	.word	0x1110f8a6
 80091dc:	3f811111 	.word	0x3f811111
 80091e0:	55555549 	.word	0x55555549
 80091e4:	3fc55555 	.word	0x3fc55555
 80091e8:	3fe00000 	.word	0x3fe00000

080091ec <with_errno>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	4616      	mov	r6, r2
 80091f4:	f7fd f9cc 	bl	8006590 <__errno>
 80091f8:	4629      	mov	r1, r5
 80091fa:	6006      	str	r6, [r0, #0]
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd70      	pop	{r4, r5, r6, pc}

08009200 <xflow>:
 8009200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009202:	4615      	mov	r5, r2
 8009204:	461c      	mov	r4, r3
 8009206:	b180      	cbz	r0, 800922a <xflow+0x2a>
 8009208:	4610      	mov	r0, r2
 800920a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800920e:	e9cd 0100 	strd	r0, r1, [sp]
 8009212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009216:	4628      	mov	r0, r5
 8009218:	4621      	mov	r1, r4
 800921a:	f7f7 f955 	bl	80004c8 <__aeabi_dmul>
 800921e:	2222      	movs	r2, #34	; 0x22
 8009220:	b003      	add	sp, #12
 8009222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009226:	f7ff bfe1 	b.w	80091ec <with_errno>
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	e7ee      	b.n	800920e <xflow+0xe>

08009230 <__math_uflow>:
 8009230:	2200      	movs	r2, #0
 8009232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009236:	f7ff bfe3 	b.w	8009200 <xflow>

0800923a <__math_oflow>:
 800923a:	2200      	movs	r2, #0
 800923c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009240:	f7ff bfde 	b.w	8009200 <xflow>

08009244 <fabs>:
 8009244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009248:	4770      	bx	lr

0800924a <finite>:
 800924a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800924e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009252:	0fc0      	lsrs	r0, r0, #31
 8009254:	4770      	bx	lr
	...

08009258 <floor>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009260:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009264:	2e13      	cmp	r6, #19
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4607      	mov	r7, r0
 800926c:	460c      	mov	r4, r1
 800926e:	4605      	mov	r5, r0
 8009270:	dc33      	bgt.n	80092da <floor+0x82>
 8009272:	2e00      	cmp	r6, #0
 8009274:	da14      	bge.n	80092a0 <floor+0x48>
 8009276:	a334      	add	r3, pc, #208	; (adr r3, 8009348 <floor+0xf0>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f6 ff6e 	bl	800015c <__adddf3>
 8009280:	2200      	movs	r2, #0
 8009282:	2300      	movs	r3, #0
 8009284:	f7f7 fbb0 	bl	80009e8 <__aeabi_dcmpgt>
 8009288:	b138      	cbz	r0, 800929a <floor+0x42>
 800928a:	2c00      	cmp	r4, #0
 800928c:	da58      	bge.n	8009340 <floor+0xe8>
 800928e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009292:	431d      	orrs	r5, r3
 8009294:	d001      	beq.n	800929a <floor+0x42>
 8009296:	2500      	movs	r5, #0
 8009298:	4c2d      	ldr	r4, [pc, #180]	; (8009350 <floor+0xf8>)
 800929a:	4623      	mov	r3, r4
 800929c:	462f      	mov	r7, r5
 800929e:	e025      	b.n	80092ec <floor+0x94>
 80092a0:	4a2c      	ldr	r2, [pc, #176]	; (8009354 <floor+0xfc>)
 80092a2:	fa42 f806 	asr.w	r8, r2, r6
 80092a6:	ea01 0208 	and.w	r2, r1, r8
 80092aa:	4302      	orrs	r2, r0
 80092ac:	d01e      	beq.n	80092ec <floor+0x94>
 80092ae:	a326      	add	r3, pc, #152	; (adr r3, 8009348 <floor+0xf0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ff52 	bl	800015c <__adddf3>
 80092b8:	2200      	movs	r2, #0
 80092ba:	2300      	movs	r3, #0
 80092bc:	f7f7 fb94 	bl	80009e8 <__aeabi_dcmpgt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d0ea      	beq.n	800929a <floor+0x42>
 80092c4:	2c00      	cmp	r4, #0
 80092c6:	bfbe      	ittt	lt
 80092c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092cc:	fa43 f606 	asrlt.w	r6, r3, r6
 80092d0:	19a4      	addlt	r4, r4, r6
 80092d2:	2500      	movs	r5, #0
 80092d4:	ea24 0408 	bic.w	r4, r4, r8
 80092d8:	e7df      	b.n	800929a <floor+0x42>
 80092da:	2e33      	cmp	r6, #51	; 0x33
 80092dc:	dd0a      	ble.n	80092f4 <floor+0x9c>
 80092de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80092e2:	d103      	bne.n	80092ec <floor+0x94>
 80092e4:	f7f6 ff3a 	bl	800015c <__adddf3>
 80092e8:	4607      	mov	r7, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4638      	mov	r0, r7
 80092ee:	4619      	mov	r1, r3
 80092f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80092fc:	fa22 f808 	lsr.w	r8, r2, r8
 8009300:	ea18 0f00 	tst.w	r8, r0
 8009304:	d0f2      	beq.n	80092ec <floor+0x94>
 8009306:	a310      	add	r3, pc, #64	; (adr r3, 8009348 <floor+0xf0>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f7f6 ff26 	bl	800015c <__adddf3>
 8009310:	2200      	movs	r2, #0
 8009312:	2300      	movs	r3, #0
 8009314:	f7f7 fb68 	bl	80009e8 <__aeabi_dcmpgt>
 8009318:	2800      	cmp	r0, #0
 800931a:	d0be      	beq.n	800929a <floor+0x42>
 800931c:	2c00      	cmp	r4, #0
 800931e:	da02      	bge.n	8009326 <floor+0xce>
 8009320:	2e14      	cmp	r6, #20
 8009322:	d103      	bne.n	800932c <floor+0xd4>
 8009324:	3401      	adds	r4, #1
 8009326:	ea25 0508 	bic.w	r5, r5, r8
 800932a:	e7b6      	b.n	800929a <floor+0x42>
 800932c:	2301      	movs	r3, #1
 800932e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009332:	fa03 f606 	lsl.w	r6, r3, r6
 8009336:	4435      	add	r5, r6
 8009338:	42bd      	cmp	r5, r7
 800933a:	bf38      	it	cc
 800933c:	18e4      	addcc	r4, r4, r3
 800933e:	e7f2      	b.n	8009326 <floor+0xce>
 8009340:	2500      	movs	r5, #0
 8009342:	462c      	mov	r4, r5
 8009344:	e7a9      	b.n	800929a <floor+0x42>
 8009346:	bf00      	nop
 8009348:	8800759c 	.word	0x8800759c
 800934c:	7e37e43c 	.word	0x7e37e43c
 8009350:	bff00000 	.word	0xbff00000
 8009354:	000fffff 	.word	0x000fffff

08009358 <scalbn>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	4617      	mov	r7, r2
 8009364:	460b      	mov	r3, r1
 8009366:	b996      	cbnz	r6, 800938e <scalbn+0x36>
 8009368:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800936c:	4303      	orrs	r3, r0
 800936e:	d039      	beq.n	80093e4 <scalbn+0x8c>
 8009370:	4b33      	ldr	r3, [pc, #204]	; (8009440 <scalbn+0xe8>)
 8009372:	2200      	movs	r2, #0
 8009374:	f7f7 f8a8 	bl	80004c8 <__aeabi_dmul>
 8009378:	4b32      	ldr	r3, [pc, #200]	; (8009444 <scalbn+0xec>)
 800937a:	4604      	mov	r4, r0
 800937c:	429f      	cmp	r7, r3
 800937e:	460d      	mov	r5, r1
 8009380:	da0f      	bge.n	80093a2 <scalbn+0x4a>
 8009382:	a32b      	add	r3, pc, #172	; (adr r3, 8009430 <scalbn+0xd8>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f7 f89e 	bl	80004c8 <__aeabi_dmul>
 800938c:	e006      	b.n	800939c <scalbn+0x44>
 800938e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009392:	4296      	cmp	r6, r2
 8009394:	d10a      	bne.n	80093ac <scalbn+0x54>
 8009396:	4602      	mov	r2, r0
 8009398:	f7f6 fee0 	bl	800015c <__adddf3>
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	e020      	b.n	80093e4 <scalbn+0x8c>
 80093a2:	460b      	mov	r3, r1
 80093a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093a8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80093ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80093b0:	19b9      	adds	r1, r7, r6
 80093b2:	4291      	cmp	r1, r2
 80093b4:	dd0e      	ble.n	80093d4 <scalbn+0x7c>
 80093b6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80093ba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80093be:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80093c2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80093c6:	4820      	ldr	r0, [pc, #128]	; (8009448 <scalbn+0xf0>)
 80093c8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80093cc:	a31a      	add	r3, pc, #104	; (adr r3, 8009438 <scalbn+0xe0>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	e7d9      	b.n	8009388 <scalbn+0x30>
 80093d4:	2900      	cmp	r1, #0
 80093d6:	dd08      	ble.n	80093ea <scalbn+0x92>
 80093d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80093ee:	da12      	bge.n	8009416 <scalbn+0xbe>
 80093f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80093f4:	429f      	cmp	r7, r3
 80093f6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80093fa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80093fe:	dcdc      	bgt.n	80093ba <scalbn+0x62>
 8009400:	a30b      	add	r3, pc, #44	; (adr r3, 8009430 <scalbn+0xd8>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800940a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800940e:	480f      	ldr	r0, [pc, #60]	; (800944c <scalbn+0xf4>)
 8009410:	f041 011f 	orr.w	r1, r1, #31
 8009414:	e7b8      	b.n	8009388 <scalbn+0x30>
 8009416:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800941a:	3136      	adds	r1, #54	; 0x36
 800941c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009420:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	2200      	movs	r2, #0
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <scalbn+0xf8>)
 800942c:	e7ac      	b.n	8009388 <scalbn+0x30>
 800942e:	bf00      	nop
 8009430:	c2f8f359 	.word	0xc2f8f359
 8009434:	01a56e1f 	.word	0x01a56e1f
 8009438:	8800759c 	.word	0x8800759c
 800943c:	7e37e43c 	.word	0x7e37e43c
 8009440:	43500000 	.word	0x43500000
 8009444:	ffff3cb0 	.word	0xffff3cb0
 8009448:	8800759c 	.word	0x8800759c
 800944c:	c2f8f359 	.word	0xc2f8f359
 8009450:	3c900000 	.word	0x3c900000

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
