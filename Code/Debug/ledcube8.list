
ledcube8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008224  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08008338  08008338  00018338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008688  08008688  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000078  08008708  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08008708  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b0  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8f  00000000  00000000  0002c551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00030100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae10  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b21  00000000  00000000  0004ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3d0  00000000  00000000  0005f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  000ea9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800831c 	.word	0x0800831c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800831c 	.word	0x0800831c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_frsub>:
 8000c20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	e002      	b.n	8000c2c <__addsf3>
 8000c26:	bf00      	nop

08000c28 <__aeabi_fsub>:
 8000c28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c2c <__addsf3>:
 8000c2c:	0042      	lsls	r2, r0, #1
 8000c2e:	bf1f      	itttt	ne
 8000c30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c34:	ea92 0f03 	teqne	r2, r3
 8000c38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c40:	d06a      	beq.n	8000d18 <__addsf3+0xec>
 8000c42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c4a:	bfc1      	itttt	gt
 8000c4c:	18d2      	addgt	r2, r2, r3
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	4048      	eorgt	r0, r1
 8000c52:	4041      	eorgt	r1, r0
 8000c54:	bfb8      	it	lt
 8000c56:	425b      	neglt	r3, r3
 8000c58:	2b19      	cmp	r3, #25
 8000c5a:	bf88      	it	hi
 8000c5c:	4770      	bxhi	lr
 8000c5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c6a:	bf18      	it	ne
 8000c6c:	4240      	negne	r0, r0
 8000c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4249      	negne	r1, r1
 8000c7e:	ea92 0f03 	teq	r2, r3
 8000c82:	d03f      	beq.n	8000d04 <__addsf3+0xd8>
 8000c84:	f1a2 0201 	sub.w	r2, r2, #1
 8000c88:	fa41 fc03 	asr.w	ip, r1, r3
 8000c8c:	eb10 000c 	adds.w	r0, r0, ip
 8000c90:	f1c3 0320 	rsb	r3, r3, #32
 8000c94:	fa01 f103 	lsl.w	r1, r1, r3
 8000c98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__addsf3+0x78>
 8000c9e:	4249      	negs	r1, r1
 8000ca0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca8:	d313      	bcc.n	8000cd2 <__addsf3+0xa6>
 8000caa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cae:	d306      	bcc.n	8000cbe <__addsf3+0x92>
 8000cb0:	0840      	lsrs	r0, r0, #1
 8000cb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb6:	f102 0201 	add.w	r2, r2, #1
 8000cba:	2afe      	cmp	r2, #254	; 0xfe
 8000cbc:	d251      	bcs.n	8000d62 <__addsf3+0x136>
 8000cbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	ea40 0003 	orr.w	r0, r0, r3
 8000cd0:	4770      	bx	lr
 8000cd2:	0049      	lsls	r1, r1, #1
 8000cd4:	eb40 0000 	adc.w	r0, r0, r0
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce0:	d2ed      	bcs.n	8000cbe <__addsf3+0x92>
 8000ce2:	fab0 fc80 	clz	ip, r0
 8000ce6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cea:	ebb2 020c 	subs.w	r2, r2, ip
 8000cee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cf2:	bfaa      	itet	ge
 8000cf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf8:	4252      	neglt	r2, r2
 8000cfa:	4318      	orrge	r0, r3
 8000cfc:	bfbc      	itt	lt
 8000cfe:	40d0      	lsrlt	r0, r2
 8000d00:	4318      	orrlt	r0, r3
 8000d02:	4770      	bx	lr
 8000d04:	f092 0f00 	teq	r2, #0
 8000d08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d0c:	bf06      	itte	eq
 8000d0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d12:	3201      	addeq	r2, #1
 8000d14:	3b01      	subne	r3, #1
 8000d16:	e7b5      	b.n	8000c84 <__addsf3+0x58>
 8000d18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d20:	bf18      	it	ne
 8000d22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d26:	d021      	beq.n	8000d6c <__addsf3+0x140>
 8000d28:	ea92 0f03 	teq	r2, r3
 8000d2c:	d004      	beq.n	8000d38 <__addsf3+0x10c>
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	bf08      	it	eq
 8000d34:	4608      	moveq	r0, r1
 8000d36:	4770      	bx	lr
 8000d38:	ea90 0f01 	teq	r0, r1
 8000d3c:	bf1c      	itt	ne
 8000d3e:	2000      	movne	r0, #0
 8000d40:	4770      	bxne	lr
 8000d42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d46:	d104      	bne.n	8000d52 <__addsf3+0x126>
 8000d48:	0040      	lsls	r0, r0, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d50:	4770      	bx	lr
 8000d52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d56:	bf3c      	itt	cc
 8000d58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d5c:	4770      	bxcc	lr
 8000d5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6a:	4770      	bx	lr
 8000d6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d70:	bf16      	itet	ne
 8000d72:	4608      	movne	r0, r1
 8000d74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d78:	4601      	movne	r1, r0
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	bf06      	itte	eq
 8000d7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d82:	ea90 0f01 	teqeq	r0, r1
 8000d86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_ui2f>:
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e004      	b.n	8000d9c <__aeabi_i2f+0x8>
 8000d92:	bf00      	nop

08000d94 <__aeabi_i2f>:
 8000d94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d98:	bf48      	it	mi
 8000d9a:	4240      	negmi	r0, r0
 8000d9c:	ea5f 0c00 	movs.w	ip, r0
 8000da0:	bf08      	it	eq
 8000da2:	4770      	bxeq	lr
 8000da4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da8:	4601      	mov	r1, r0
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	e01c      	b.n	8000dea <__aeabi_l2f+0x2a>

08000db0 <__aeabi_ul2f>:
 8000db0:	ea50 0201 	orrs.w	r2, r0, r1
 8000db4:	bf08      	it	eq
 8000db6:	4770      	bxeq	lr
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e00a      	b.n	8000dd4 <__aeabi_l2f+0x14>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_l2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dcc:	d502      	bpl.n	8000dd4 <__aeabi_l2f+0x14>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	ea5f 0c01 	movs.w	ip, r1
 8000dd8:	bf02      	ittt	eq
 8000dda:	4684      	moveq	ip, r0
 8000ddc:	4601      	moveq	r1, r0
 8000dde:	2000      	moveq	r0, #0
 8000de0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de4:	bf08      	it	eq
 8000de6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dee:	fabc f28c 	clz	r2, ip
 8000df2:	3a08      	subs	r2, #8
 8000df4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df8:	db10      	blt.n	8000e1c <__aeabi_l2f+0x5c>
 8000dfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfe:	4463      	add	r3, ip
 8000e00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	f020 0001 	biceq.w	r0, r0, #1
 8000e1a:	4770      	bx	lr
 8000e1c:	f102 0220 	add.w	r2, r2, #32
 8000e20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e3a:	4770      	bx	lr

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fc0c 	bl	800165c <HAL_Init>

  /* USER CODE BEGIN Init */
  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 8000e44:	2202      	movs	r2, #2
 8000e46:	490c      	ldr	r1, [pc, #48]	; (8000e78 <main+0x3c>)
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <main+0x40>)
 8000e4a:	f002 fe56 	bl	8003afa <Btn_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f819 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 f93b 	bl	80010cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e56:	f000 f8af 	bl	8000fb8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e5a:	f000 f8e3 	bl	8001024 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e5e:	f000 f90b 	bl	8001078 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e62:	f000 f86b 	bl	8000f3c <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Btn_Handle(&button1);
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <main+0x40>)
 8000e68:	f002 fdbf 	bl	80039ea <Btn_Handle>
	  Led_cube_Handle(currentEffect);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <main+0x44>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 ff0b 	bl	8004c8c <Led_cube_Handle>
	  Btn_Handle(&button1);
 8000e76:	e7f6      	b.n	8000e66 <main+0x2a>
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	200001a4 	.word	0x200001a4
 8000e80:	20000010 	.word	0x20000010

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 f900 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f9a4 	bl	8002228 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ee6:	f000 f95d 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2102      	movs	r1, #2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fc10 	bl	800272c <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f12:	f000 f947 	bl	80011a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f16:	2302      	movs	r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd9a 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f2e:	f000 f939 	bl	80011a4 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	; 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f4e:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <MX_ADC1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f7a:	f000 fbd1 	bl	8001720 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f84:	f000 f90e 	bl	80011a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0x74>)
 8000f9a:	f000 fc99 	bl	80018d0 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fa4:	f000 f8fe 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	40012400 	.word	0x40012400

08000fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SPI1_Init+0x64>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI1_Init+0x64>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI1_Init+0x64>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI1_Init+0x64>)
 8000fec:	2220      	movs	r2, #32
 8000fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI1_Init+0x64>)
 8001004:	220a      	movs	r2, #10
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_SPI1_Init+0x64>)
 800100a:	f001 fddd 	bl	8002bc8 <HAL_SPI_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001014:	f000 f8c6 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000c4 	.word	0x200000c4
 8001020:	40013000 	.word	0x40013000

08001024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART1_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800104a:	2204      	movs	r2, #4
 800104c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800105c:	f002 f81a 	bl	8003094 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f89d 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000011c 	.word	0x2000011c
 8001074:	40013800 	.word	0x40013800

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART2_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f001 fff0 	bl	8003094 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f873 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000160 	.word	0x20000160
 80010c8:	40004400 	.word	0x40004400

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_GPIO_Init+0xcc>)
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <MX_GPIO_Init+0xcc>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_GPIO_Init+0xcc>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <MX_GPIO_Init+0xd0>)
 8001130:	f001 f861 	bl	80021f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4819      	ldr	r0, [pc, #100]	; (80011a0 <MX_GPIO_Init+0xd4>)
 800113a:	f001 f85c 	bl	80021f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_GPIO_Init+0xd0>)
 8001158:	f000 feb2 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_GPIO_Init+0xd4>)
 8001170:	f000 fea6 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_PIN_Pin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2302      	movs	r3, #2
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_GPIO_Init+0xd4>)
 800118c:	f000 fe98 	bl	8001ec0 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	40011000 	.word	0x40011000
 80011a0:	40010800 	.word	0x40010800

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_MspInit+0x5c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_MspInit+0x60>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_MspInit+0x60>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_ADC_MspInit+0x6c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d121      	bne.n	8001278 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_ADC_MspInit+0x70>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_ADC_MspInit+0x70>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_ADC_MspInit+0x70>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_ADC_MspInit+0x70>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_ADC_MspInit+0x70>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_ADC_MspInit+0x70>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	2303      	movs	r3, #3
 800126a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_ADC_MspInit+0x74>)
 8001274:	f000 fe24 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40012400 	.word	0x40012400
 8001284:	40021000 	.word	0x40021000
 8001288:	40010800 	.word	0x40010800

0800128c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_SPI_MspInit+0x70>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d123      	bne.n	80012f4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_SPI_MspInit+0x74>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012dc:	23a0      	movs	r3, #160	; 0xa0
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x78>)
 80012f0:	f000 fde6 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013000 	.word	0x40013000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_UART_MspInit+0x108>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d13a      	bne.n	800139e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a39      	ldr	r2, [pc, #228]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	482a      	ldr	r0, [pc, #168]	; (8001418 <HAL_UART_MspInit+0x110>)
 800136e:	f000 fda7 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <HAL_UART_MspInit+0x110>)
 8001388:	f000 fd9a 	bl	8001ec0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2025      	movs	r0, #37	; 0x25
 8001392:	f000 fcae 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001396:	2025      	movs	r0, #37	; 0x25
 8001398:	f000 fcc7 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139c:	e034      	b.n	8001408 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_UART_MspInit+0x114>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d12f      	bne.n	8001408 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b2:	61d3      	str	r3, [r2, #28]
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d8:	2304      	movs	r3, #4
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <HAL_UART_MspInit+0x110>)
 80013ec:	f000 fd68 	bl	8001ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f0:	2308      	movs	r3, #8
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_UART_MspInit+0x110>)
 8001404:	f000 fd5c 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40004400 	.word	0x40004400

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f93f 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART1_IRQHandler+0x10>)
 8001476:	f001 fe5b 	bl	8003130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000011c 	.word	0x2000011c

08001484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <_kill>:

int _kill(int pid, int sig)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800149c:	f004 fdd2 	bl	8006044 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2216      	movs	r2, #22
 80014a4:	601a      	str	r2, [r3, #0]
	return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_exit>:

void _exit (int status)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014ba:	f04f 31ff 	mov.w	r1, #4294967295
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffe7 	bl	8001492 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014c4:	e7fe      	b.n	80014c4 <_exit+0x12>

080014c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e00a      	b.n	80014ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d8:	f3af 8000 	nop.w
 80014dc:	4601      	mov	r1, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	b2ca      	uxtb	r2, r1
 80014e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3301      	adds	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbf0      	blt.n	80014d8 <_read+0x12>
	}

return len;
 80014f6:	687b      	ldr	r3, [r7, #4]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e009      	b.n	8001526 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	60ba      	str	r2, [r7, #8]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbf1      	blt.n	8001512 <_write+0x12>
	}
	return len;
 800152e:	687b      	ldr	r3, [r7, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_close>:

int _close(int file)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155e:	605a      	str	r2, [r3, #4]
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <_isatty>:

int _isatty(int file)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f004 fd3c 	bl	8006044 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20005000 	.word	0x20005000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	200001bc 	.word	0x200001bc
 8001600:	20000270 	.word	0x20000270

08001604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff ffe5 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f004 fd09 	bl	8006050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fbfd 	bl	8000e3c <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800164c:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 8001650:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001654:	20000270 	.word	0x20000270

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 fb35 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fd9a 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fb4d 	bl	8001d46 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 fb15 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000008 	.word	0x20000008
 8001708:	200001c0 	.word	0x200001c0

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	200001c0 	.word	0x200001c0

08001720 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0be      	b.n	80018c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fd58 	bl	8001214 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f9ab 	bl	8001ac0 <ADC_ConversionStop_Disable>
 800176a:	4603      	mov	r3, r0
 800176c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 8099 	bne.w	80018ae <HAL_ADC_Init+0x18e>
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8095 	bne.w	80018ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178c:	f023 0302 	bic.w	r3, r3, #2
 8001790:	f043 0202 	orr.w	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7b1b      	ldrb	r3, [r3, #12]
 80017a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b8:	d003      	beq.n	80017c2 <HAL_ADC_Init+0xa2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <HAL_ADC_Init+0xa8>
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	e000      	b.n	80017ca <HAL_ADC_Init+0xaa>
 80017c8:	2300      	movs	r3, #0
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7d1b      	ldrb	r3, [r3, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d119      	bne.n	800180c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7b1b      	ldrb	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	035a      	lsls	r2, r3, #13
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	e00b      	b.n	800180c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f043 0220 	orr.w	r2, r3, #32
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_ADC_Init+0x1a8>)
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	430b      	orrs	r3, r1
 8001832:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183c:	d003      	beq.n	8001846 <HAL_ADC_Init+0x126>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d104      	bne.n	8001850 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	3b01      	subs	r3, #1
 800184c:	051b      	lsls	r3, r3, #20
 800184e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	430a      	orrs	r2, r1
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_ADC_Init+0x1ac>)
 800186c:	4013      	ands	r3, r2
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	429a      	cmp	r2, r3
 8001872:	d10b      	bne.n	800188c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f023 0303 	bic.w	r3, r3, #3
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800188a:	e018      	b.n	80018be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f023 0312 	bic.w	r3, r3, #18
 8001894:	f043 0210 	orr.w	r2, r3, #16
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ac:	e007      	b.n	80018be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	f043 0210 	orr.w	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018be:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	ffe1f7fd 	.word	0xffe1f7fd
 80018cc:	ff1f0efe 	.word	0xff1f0efe

080018d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x20>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e0dc      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x1da>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b06      	cmp	r3, #6
 80018fe:	d81c      	bhi.n	800193a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b05      	subs	r3, #5
 8001912:	221f      	movs	r2, #31
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4019      	ands	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b05      	subs	r3, #5
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
 8001938:	e03c      	b.n	80019b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d81c      	bhi.n	800197c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b23      	subs	r3, #35	; 0x23
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b23      	subs	r3, #35	; 0x23
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
 800197a:	e01b      	b.n	80019b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b41      	subs	r3, #65	; 0x41
 800198e:	221f      	movs	r2, #31
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b41      	subs	r3, #65	; 0x41
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d91c      	bls.n	80019f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	3b1e      	subs	r3, #30
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4019      	ands	r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6898      	ldr	r0, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	e019      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	2207      	movs	r2, #7
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4019      	ands	r1, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6898      	ldr	r0, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d132      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d125      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d126      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d11a      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_ADC_ConfigChannel+0x1ec>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x1b2>
 8001a8e:	e007      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40012400 	.word	0x40012400
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d12e      	bne.n	8001b38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aea:	f7ff fe0f 	bl	800170c <HAL_GetTick>
 8001aee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001af0:	e01b      	b.n	8001b2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001af2:	f7ff fe0b 	bl	800170c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d914      	bls.n	8001b2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10d      	bne.n	8001b2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f043 0210 	orr.w	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e007      	b.n	8001b3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d0dc      	beq.n	8001af2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4906      	ldr	r1, [pc, #24]	; (8001bdc <__NVIC_EnableIRQ+0x34>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff90 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff2d 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff42 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff35 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e020      	b.n	8001dc8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 020e 	bic.w	r2, r2, #14
 8001d94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d005      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2204      	movs	r2, #4
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e051      	b.n	8001e9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 020e 	bic.w	r2, r2, #14
 8001e04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_DMA_Abort_IT+0xd0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d029      	beq.n	8001e74 <HAL_DMA_Abort_IT+0xa0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_DMA_Abort_IT+0xd4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x9c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_DMA_Abort_IT+0xd8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d01a      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x96>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_DMA_Abort_IT+0xdc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d012      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x90>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_DMA_Abort_IT+0xe0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00a      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x8a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_DMA_Abort_IT+0xe4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d102      	bne.n	8001e58 <HAL_DMA_Abort_IT+0x84>
 8001e52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e56:	e00e      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5c:	e00b      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e62:	e008      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	e005      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6e:	e002      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e70:	2310      	movs	r3, #16
 8001e72:	e000      	b.n	8001e76 <HAL_DMA_Abort_IT+0xa2>
 8001e74:	2301      	movs	r3, #1
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_DMA_Abort_IT+0xe8>)
 8001e78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
    } 
  }
  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40020008 	.word	0x40020008
 8001ea8:	4002001c 	.word	0x4002001c
 8001eac:	40020030 	.word	0x40020030
 8001eb0:	40020044 	.word	0x40020044
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	4002006c 	.word	0x4002006c
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b08b      	sub	sp, #44	; 0x2c
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	e169      	b.n	80021a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8158 	bne.w	80021a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a9a      	ldr	r2, [pc, #616]	; (8002160 <HAL_GPIO_Init+0x2a0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d05e      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001efc:	4a98      	ldr	r2, [pc, #608]	; (8002160 <HAL_GPIO_Init+0x2a0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d875      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f02:	4a98      	ldr	r2, [pc, #608]	; (8002164 <HAL_GPIO_Init+0x2a4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d058      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f08:	4a96      	ldr	r2, [pc, #600]	; (8002164 <HAL_GPIO_Init+0x2a4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d86f      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f0e:	4a96      	ldr	r2, [pc, #600]	; (8002168 <HAL_GPIO_Init+0x2a8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d052      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f14:	4a94      	ldr	r2, [pc, #592]	; (8002168 <HAL_GPIO_Init+0x2a8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d869      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f1a:	4a94      	ldr	r2, [pc, #592]	; (800216c <HAL_GPIO_Init+0x2ac>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04c      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f20:	4a92      	ldr	r2, [pc, #584]	; (800216c <HAL_GPIO_Init+0x2ac>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d863      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f26:	4a92      	ldr	r2, [pc, #584]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d046      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f2c:	4a90      	ldr	r2, [pc, #576]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d85d      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f32:	2b12      	cmp	r3, #18
 8001f34:	d82a      	bhi.n	8001f8c <HAL_GPIO_Init+0xcc>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d859      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <HAL_GPIO_Init+0x80>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001fbb 	.word	0x08001fbb
 8001f44:	08001f95 	.word	0x08001f95
 8001f48:	08001fa7 	.word	0x08001fa7
 8001f4c:	08001fe9 	.word	0x08001fe9
 8001f50:	08001fef 	.word	0x08001fef
 8001f54:	08001fef 	.word	0x08001fef
 8001f58:	08001fef 	.word	0x08001fef
 8001f5c:	08001fef 	.word	0x08001fef
 8001f60:	08001fef 	.word	0x08001fef
 8001f64:	08001fef 	.word	0x08001fef
 8001f68:	08001fef 	.word	0x08001fef
 8001f6c:	08001fef 	.word	0x08001fef
 8001f70:	08001fef 	.word	0x08001fef
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fef 	.word	0x08001fef
 8001f7c:	08001fef 	.word	0x08001fef
 8001f80:	08001fef 	.word	0x08001fef
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fb1 	.word	0x08001fb1
 8001f8c:	4a79      	ldr	r2, [pc, #484]	; (8002174 <HAL_GPIO_Init+0x2b4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f92:	e02c      	b.n	8001fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e029      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e024      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	3308      	adds	r3, #8
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e01f      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e01a      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e013      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	611a      	str	r2, [r3, #16]
          break;
 8001fda:	e009      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	615a      	str	r2, [r3, #20]
          break;
 8001fe6:	e003      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          break;
 8001fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2bff      	cmp	r3, #255	; 0xff
 8001ff4:	d801      	bhi.n	8001ffa <HAL_GPIO_Init+0x13a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_Init+0x13e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d802      	bhi.n	800200c <HAL_GPIO_Init+0x14c>
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x152>
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3b08      	subs	r3, #8
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	210f      	movs	r1, #15
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	6a39      	ldr	r1, [r7, #32]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80b1 	beq.w	80021a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_GPIO_Init+0x2b8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_GPIO_Init+0x2b8>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <HAL_GPIO_Init+0x2b8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002058:	4a48      	ldr	r2, [pc, #288]	; (800217c <HAL_GPIO_Init+0x2bc>)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a40      	ldr	r2, [pc, #256]	; (8002180 <HAL_GPIO_Init+0x2c0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1ec>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <HAL_GPIO_Init+0x2c4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1e8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <HAL_GPIO_Init+0x2c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1e4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3d      	ldr	r2, [pc, #244]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1e0>
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_GPIO_Init+0x1ee>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e004      	b.n	80020ae <HAL_GPIO_Init+0x1ee>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0x1ee>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_GPIO_Init+0x1ee>
 80020ac:	2300      	movs	r3, #0
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020be:	492f      	ldr	r1, [pc, #188]	; (800217c <HAL_GPIO_Init+0x2bc>)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	492c      	ldr	r1, [pc, #176]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4928      	ldr	r1, [pc, #160]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4922      	ldr	r1, [pc, #136]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	491e      	ldr	r1, [pc, #120]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4918      	ldr	r1, [pc, #96]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	4914      	ldr	r1, [pc, #80]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002140:	4013      	ands	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d021      	beq.n	8002194 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	60cb      	str	r3, [r1, #12]
 800215c:	e021      	b.n	80021a2 <HAL_GPIO_Init+0x2e2>
 800215e:	bf00      	nop
 8002160:	10320000 	.word	0x10320000
 8002164:	10310000 	.word	0x10310000
 8002168:	10220000 	.word	0x10220000
 800216c:	10210000 	.word	0x10210000
 8002170:	10120000 	.word	0x10120000
 8002174:	10110000 	.word	0x10110000
 8002178:	40021000 	.word	0x40021000
 800217c:	40010000 	.word	0x40010000
 8002180:	40010800 	.word	0x40010800
 8002184:	40010c00 	.word	0x40010c00
 8002188:	40011000 	.word	0x40011000
 800218c:	40011400 	.word	0x40011400
 8002190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	43db      	mvns	r3, r3
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <HAL_GPIO_Init+0x304>)
 800219e:	4013      	ands	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3301      	adds	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f ae8e 	bne.w	8001ed4 <HAL_GPIO_Init+0x14>
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	372c      	adds	r7, #44	; 0x2c
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]
 8002202:	4613      	mov	r3, r2
 8002204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002206:	787b      	ldrb	r3, [r7, #1]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002212:	e003      	b.n	800221c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
	...

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e272      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06c      	beq.n	8002354 <HAL_RCC_OscConfig+0x12c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d168      	bne.n	8002354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e24c      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x76>
 8002290:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xbc>
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a71      	ldr	r2, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022e4:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b68      	ldr	r3, [pc, #416]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fa02 	bl	800170c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff f9fe 	bl	800170c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e200      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xe4>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff f9ee 	bl	800170c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff f9ea 	bl	800170c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1ec      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x10c>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b49      	ldr	r3, [pc, #292]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c0      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff f9a3 	bl	800170c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff f99f 	bl	800170c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1a1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4927      	ldr	r1, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f982 	bl	800170c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff f97e 	bl	800170c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e180      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03a      	beq.n	80024ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff f962 	bl	800170c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff f95e 	bl	800170c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e160      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 fad8 	bl	8002a20 <RCC_Delay>
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff f948 	bl	800170c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff f944 	bl	800170c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e146      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420000 	.word	0x42420000
 800249c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b92      	ldr	r3, [pc, #584]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a6 	beq.w	8002606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a87      	ldr	r2, [pc, #540]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff f905 	bl	800170c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff f901 	bl	800170c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	; 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e103      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x334>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x356>
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff f8b5 	bl	800170c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff f8b1 	bl	800170c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0b1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x37e>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff f89f 	bl	800170c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff f89b 	bl	800170c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8087 	beq.w	800271e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d061      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d146      	bne.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff f86f 	bl	800170c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff f86b 	bl	800170c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e06d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d108      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4921      	ldr	r1, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a19      	ldr	r1, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	430b      	orrs	r3, r1
 800267e:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff f83f 	bl	800170c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff f83b 	bl	800170c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x46a>
 80026b0:	e035      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f828 	bl	800170c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff f824 	bl	800170c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e026      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x498>
 80026de:	e01e      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e019      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x500>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d0      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4965      	ldr	r1, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d040      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e073      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4936      	ldr	r1, [pc, #216]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7fe ff76 	bl	800170c <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe ff72 	bl	800170c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e053      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d210      	bcs.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1cc>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fed4 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08008350 	.word	0x08008350
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b490      	push	{r4, r7}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002908:	1d3c      	adds	r4, r7, #4
 800290a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002910:	f240 2301 	movw	r3, #513	; 0x201
 8002914:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d002      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 800293a:	2b08      	cmp	r3, #8
 800293c:	d003      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x46>
 800293e:	e02b      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002942:	623b      	str	r3, [r7, #32]
      break;
 8002944:	e02b      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	0c9b      	lsrs	r3, r3, #18
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3328      	adds	r3, #40	; 0x28
 8002950:	443b      	add	r3, r7
 8002952:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002956:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0c5b      	lsrs	r3, r3, #17
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	3328      	adds	r3, #40	; 0x28
 800296e:	443b      	add	r3, r7
 8002970:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002974:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800297a:	fb03 f202 	mul.w	r2, r3, r2
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e004      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	623b      	str	r3, [r7, #32]
      break;
 8002996:	e002      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299e:	6a3b      	ldr	r3, [r7, #32]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc90      	pop	{r4, r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	08008338 	.word	0x08008338
 80029b0:	40021000 	.word	0x40021000
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	003d0900 	.word	0x003d0900

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_RCC_GetHCLKFreq+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d4:	f7ff fff2 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08008360 	.word	0x08008360

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029fc:	f7ff ffde 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08008360 	.word	0x08008360

08002a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <RCC_Delay+0x34>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <RCC_Delay+0x38>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a3c:	bf00      	nop
  }
  while (Delay --);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <RCC_Delay+0x1c>
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d118      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fe26 	bl	800170c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fe22 	bl	800170c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06d      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d027      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b16:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fdf1 	bl	800170c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fded 	bl	800170c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e036      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	490b      	ldr	r1, [pc, #44]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420440 	.word	0x42420440

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e076      	b.n	8002cc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb36 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	0c1a      	lsrs	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f002 0204 	and.w	r2, r2, #4
 8002ca6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_SPI_Transmit+0x22>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e126      	b.n	8002f40 <HAL_SPI_Transmit+0x270>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cfa:	f7fe fd07 	bl	800170c <HAL_GetTick>
 8002cfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
 8002d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d14:	e10b      	b.n	8002f2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_SPI_Transmit+0x52>
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d26:	e102      	b.n	8002f2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6e:	d10f      	bne.n	8002d90 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d007      	beq.n	8002dae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db6:	d14b      	bne.n	8002e50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_Transmit+0xf6>
 8002dc0:	8afb      	ldrh	r3, [r7, #22]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d13e      	bne.n	8002e44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dea:	e02b      	b.n	8002e44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d112      	bne.n	8002e20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	881a      	ldrh	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	1c9a      	adds	r2, r3, #2
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e1e:	e011      	b.n	8002e44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e20:	f7fe fc74 	bl	800170c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d803      	bhi.n	8002e38 <HAL_SPI_Transmit+0x168>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Transmit+0x16e>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e42:	e074      	b.n	8002f2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ce      	bne.n	8002dec <HAL_SPI_Transmit+0x11c>
 8002e4e:	e04c      	b.n	8002eea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Transmit+0x18e>
 8002e58:	8afb      	ldrh	r3, [r7, #22]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d140      	bne.n	8002ee0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e84:	e02c      	b.n	8002ee0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d113      	bne.n	8002ebc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	7812      	ldrb	r2, [r2, #0]
 8002ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eba:	e011      	b.n	8002ee0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ebc:	f7fe fc26 	bl	800170c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d803      	bhi.n	8002ed4 <HAL_SPI_Transmit+0x204>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Transmit+0x20a>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ede:	e026      	b.n	8002f2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1cd      	bne.n	8002e86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8b2 	bl	8003058 <SPI_EndRxTxTransaction>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e000      	b.n	8002f2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f58:	f7fe fbd8 	bl	800170c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f68:	f7fe fbd0 	bl	800170c <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	0d1b      	lsrs	r3, r3, #20
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f7e:	e054      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d050      	beq.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f88:	f7fe fbc0 	bl	800170c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d902      	bls.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d13d      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb6:	d111      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc0:	d004      	beq.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d107      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d10f      	bne.n	8003006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e017      	b.n	800304a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3b01      	subs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d19b      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000000 	.word	0x20000000

08003058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff ff6a 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e000      	b.n	800308c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03f      	b.n	8003126 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f924 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb49 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_UART_IRQHandler+0x52>
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa4f 	bl	800361e <UART_Receive_IT>
      return;
 8003180:	e17b      	b.n	800347a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80b1 	beq.w	80032ec <HAL_UART_IRQHandler+0x1bc>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_UART_IRQHandler+0x70>
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a6 	beq.w	80032ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_UART_IRQHandler+0x90>
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0xb0>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0202 	orr.w	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_UART_IRQHandler+0xd0>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <HAL_UART_IRQHandler+0xfa>
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_UART_IRQHandler+0xee>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0208 	orr.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 811e 	beq.w	8003470 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_UART_IRQHandler+0x11e>
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9e8 	bl	800361e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <HAL_UART_IRQHandler+0x146>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d031      	beq.n	80032da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f92a 	bl	80034d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d023      	beq.n	80032d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_UART_IRQHandler+0x350>)
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fd90 	bl	8001dd4 <HAL_DMA_Abort_IT>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c4:	4610      	mov	r0, r2
 80032c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00e      	b.n	80032e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8ec 	bl	80034a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00a      	b.n	80032e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8e8 	bl	80034a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e006      	b.n	80032e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8e4 	bl	80034a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032e6:	e0c3      	b.n	8003470 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	bf00      	nop
    return;
 80032ea:	e0c1      	b.n	8003470 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80a1 	bne.w	8003438 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 809b 	beq.w	8003438 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8095 	beq.w	8003438 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04e      	beq.n	80033d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800333c:	8a3b      	ldrh	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8098 	beq.w	8003474 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003348:	8a3a      	ldrh	r2, [r7, #16]
 800334a:	429a      	cmp	r2, r3
 800334c:	f080 8092 	bcs.w	8003474 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8a3a      	ldrh	r2, [r7, #16]
 8003354:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b20      	cmp	r3, #32
 800335e:	d02b      	beq.n	80033b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0210 	bic.w	r2, r2, #16
 80033ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fcd3 	bl	8001d5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f876 	bl	80034ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033ce:	e051      	b.n	8003474 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d047      	beq.n	8003478 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033e8:	8a7b      	ldrh	r3, [r7, #18]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d044      	beq.n	8003478 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0210 	bic.w	r2, r2, #16
 800342a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800342c:	8a7b      	ldrh	r3, [r7, #18]
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f842 	bl	80034ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003436:	e01f      	b.n	8003478 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_UART_IRQHandler+0x324>
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f87f 	bl	8003550 <UART_Transmit_IT>
    return;
 8003452:	e012      	b.n	800347a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_UART_IRQHandler+0x34a>
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8c0 	bl	80035ee <UART_EndTransmit_IT>
    return;
 800346e:	e004      	b.n	800347a <HAL_UART_IRQHandler+0x34a>
    return;
 8003470:	bf00      	nop
 8003472:	e002      	b.n	800347a <HAL_UART_IRQHandler+0x34a>
      return;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <HAL_UART_IRQHandler+0x34a>
      return;
 8003478:	bf00      	nop
  }
}
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	08003529 	.word	0x08003529

08003484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0210 	bic.w	r2, r2, #16
 800350e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ffb0 	bl	80034a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b21      	cmp	r3, #33	; 0x21
 8003562:	d13e      	bne.n	80035e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d114      	bne.n	8003598 <UART_Transmit_IT+0x48>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d110      	bne.n	8003598 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]
 8003596:	e008      	b.n	80035aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6211      	str	r1, [r2, #32]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4619      	mov	r1, r3
 80035b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff38 	bl	8003484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b22      	cmp	r3, #34	; 0x22
 8003630:	f040 8099 	bne.w	8003766 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d117      	bne.n	800366e <UART_Receive_IT+0x50>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	b29a      	uxth	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e026      	b.n	80036bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d007      	beq.n	8003692 <UART_Receive_IT+0x74>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <UART_Receive_IT+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e008      	b.n	80036b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4619      	mov	r1, r3
 80036ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d148      	bne.n	8003762 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0220 	bic.w	r2, r2, #32
 80036de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d123      	bne.n	8003758 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d10a      	bne.n	800374a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff feb2 	bl	80034ba <HAL_UARTEx_RxEventCallback>
 8003756:	e002      	b.n	800375e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fe9c 	bl	8003496 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e002      	b.n	8003768 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037aa:	f023 030c 	bic.w	r3, r3, #12
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <UART_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7ff f90e 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7ff f8f6 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	0119      	lsls	r1, r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	4419      	add	r1, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_SetConfig+0x118>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	440a      	add	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40013800 	.word	0x40013800
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e007      	b.n	80038a8 <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	ddf4      	ble.n	8003898 <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <AroundEdgeCube_Handle+0xcc>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <AroundEdgeCube_Handle+0xd0>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <AroundEdgeCube_Handle+0x36>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d022      	beq.n	8003906 <AroundEdgeCube_Handle+0x7a>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 80038c0:	e043      	b.n	800394a <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x81;
 80038c2:	4b25      	ldr	r3, [pc, #148]	; (8003958 <AroundEdgeCube_Handle+0xcc>)
 80038c4:	2281      	movs	r2, #129	; 0x81
 80038c6:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	71da      	strb	r2, [r3, #7]
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 80038d0:	79da      	ldrb	r2, [r3, #7]
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 80038d4:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80038d6:	2301      	movs	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	e007      	b.n	80038ec <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	2281      	movs	r2, #129	; 0x81
 80038e4:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	ddf4      	ble.n	80038dc <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <AroundEdgeCube_Handle+0xcc>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4816      	ldr	r0, [pc, #88]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 80038fa:	f002 fa8f 	bl	8005e1c <TransmitData>
			position_layer = MIDDLE_CUBE;
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <AroundEdgeCube_Handle+0xd0>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
			break;
 8003904:	e021      	b.n	800394a <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x7e;
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <AroundEdgeCube_Handle+0xcc>)
 8003908:	227e      	movs	r2, #126	; 0x7e
 800390a:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 800390e:	2281      	movs	r2, #129	; 0x81
 8003910:	71da      	strb	r2, [r3, #7]
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 8003914:	79da      	ldrb	r2, [r3, #7]
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 8003918:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800391a:	2301      	movs	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	e007      	b.n	8003930 <AroundEdgeCube_Handle+0xa4>
				column_around_edge[i] = 0;
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3301      	adds	r3, #1
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b06      	cmp	r3, #6
 8003934:	ddf4      	ble.n	8003920 <AroundEdgeCube_Handle+0x94>
			TransmitData(column_around_edge, layer_around_edge);
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <AroundEdgeCube_Handle+0xcc>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4805      	ldr	r0, [pc, #20]	; (8003954 <AroundEdgeCube_Handle+0xc8>)
 800393e:	f002 fa6d 	bl	8005e1c <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <AroundEdgeCube_Handle+0xd0>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
			break;
 8003948:	bf00      	nop
	}
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001c8 	.word	0x200001c8
 8003958:	200001c4 	.word	0x200001c4
 800395c:	200001d0 	.word	0x200001d0

08003960 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <AroundEdgeCube_Set_State+0x3c>)
 8003968:	2205      	movs	r2, #5
 800396a:	701a      	strb	r2, [r3, #0]
	layer_around_edge = 0;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <AroundEdgeCube_Set_State+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	e007      	b.n	8003988 <AroundEdgeCube_Set_State+0x28>
	{
		column_around_edge[i] = 0;
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <AroundEdgeCube_Set_State+0x44>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3301      	adds	r3, #1
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b07      	cmp	r3, #7
 800398c:	ddf4      	ble.n	8003978 <AroundEdgeCube_Set_State+0x18>
	}
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000010 	.word	0x20000010
 80039a0:	200001c4 	.word	0x200001c4
 80039a4:	200001c8 	.word	0x200001c8

080039a8 <Btn_press_short_Callback>:
{

}

__weak void Btn_press_short_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]

}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <Btn_release_Callback>:

__weak void Btn_release_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]

}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <Btn_press_timeout_Callback>:

__weak void Btn_press_timeout_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]

}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <Btn_Handle>:

void Btn_Handle(Btn_Typedef *BtnX)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
//*****************Loc nhieu******************//
	uint8_t status = HAL_GPIO_ReadPin(BtnX->GPIOx, BtnX->GPIO_Pin);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8a9b      	ldrh	r3, [r3, #20]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe fbe3 	bl	80021c8 <HAL_GPIO_ReadPin>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
	if (status != BtnX->Btn_filter)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	789b      	ldrb	r3, [r3, #2]
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d00a      	beq.n	8003a26 <Btn_Handle+0x3c>
	{
		BtnX->Btn_filter = status;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	709a      	strb	r2, [r3, #2]
		BtnX->Is_debouncing = 1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	70da      	strb	r2, [r3, #3]
		BtnX->Time_debounce = HAL_GetTick();
 8003a1c:	f7fd fe76 	bl	800170c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
	}

//*****************Xac nhan tin hieu******************//
	if (BtnX->Is_debouncing && (HAL_GetTick()-BtnX->Time_debounce >= 15))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <Btn_Handle+0x62>
 8003a2e:	f7fd fe6d 	bl	800170c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b0e      	cmp	r3, #14
 8003a3c:	d906      	bls.n	8003a4c <Btn_Handle+0x62>
	{
		BtnX->Btn_current = BtnX->Btn_filter;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	789a      	ldrb	r2, [r3, #2]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	701a      	strb	r2, [r3, #0]
		BtnX->Is_debouncing = 0;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	70da      	strb	r2, [r3, #3]
	}

//*****************Nhan nha******************//
	if (BtnX->Btn_current != BtnX->Btn_last)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d034      	beq.n	8003ac2 <Btn_Handle+0xd8>
	{
		if (BtnX->Btn_current == 0)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <Btn_Handle+0x98>
		{
			BtnX->Is_press_timeout = 1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	711a      	strb	r2, [r3, #4]
			Btn_press_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8a9b      	ldrh	r3, [r3, #20]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f001 f8c1 	bl	8004bf8 <Btn_press_Callback>
			BtnX->Time_start_press = HAL_GetTick();
 8003a76:	f7fd fe49 	bl	800170c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	e01b      	b.n	8003aba <Btn_Handle+0xd0>
		} else
		{
			if (HAL_GetTick() - BtnX->Time_start_press <= 1000)
 8003a82:	f7fd fe43 	bl	800170c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a92:	d807      	bhi.n	8003aa4 <Btn_Handle+0xba>
			{
				Btn_press_short_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8a9b      	ldrh	r3, [r3, #20]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7ff ff82 	bl	80039a8 <Btn_press_short_Callback>
			}
			Btn_release_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8a9b      	ldrh	r3, [r3, #20]
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f7ff ff85 	bl	80039be <Btn_release_Callback>
			BtnX->Is_press_timeout = 0;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	711a      	strb	r2, [r3, #4]
		}
		BtnX->Btn_last = BtnX->Btn_current;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	705a      	strb	r2, [r3, #1]
	}
	//*****************Nhan giu******************//
	if (BtnX->Is_press_timeout && (HAL_GetTick() - BtnX->Time_start_press >= 2000))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	791b      	ldrb	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <Btn_Handle+0x108>
 8003aca:	f7fd fe1f 	bl	800170c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ada:	d30a      	bcc.n	8003af2 <Btn_Handle+0x108>
	{
		Btn_press_timeout_Callback(BtnX->GPIOx,BtnX->GPIO_Pin);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8a9b      	ldrh	r3, [r3, #20]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f7ff ff74 	bl	80039d4 <Btn_press_timeout_Callback>
		BtnX->Is_press_timeout = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	711a      	strb	r2, [r3, #4]
	}
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <Btn_Init>:

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
	BtnX->GPIOx = GPIOx;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	829a      	strh	r2, [r3, #20]

}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 8003b24:	2300      	movs	r3, #0
 8003b26:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i ++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e007      	b.n	8003b3e <clearCube+0x20>
	{
		column[i] = 0x00;
 8003b2e:	463a      	mov	r2, r7
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b07      	cmp	r3, #7
 8003b42:	ddf4      	ble.n	8003b2e <clearCube+0x10>
	}
	TransmitData(column, layer);
 8003b44:	7afa      	ldrb	r2, [r7, #11]
 8003b46:	463b      	mov	r3, r7
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 f966 	bl	8005e1c <TransmitData>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	switch (w_number)
 8003b5c:	4b8b      	ldr	r3, [pc, #556]	; (8003d8c <CountDownCube_Handle+0x234>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b09      	cmp	r3, #9
 8003b62:	f200 829d 	bhi.w	80040a0 <CountDownCube_Handle+0x548>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <CountDownCube_Handle+0x14>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08004023 	.word	0x08004023
 8003b70:	08003fa5 	.word	0x08003fa5
 8003b74:	08003f17 	.word	0x08003f17
 8003b78:	08003e99 	.word	0x08003e99
 8003b7c:	08003e1b 	.word	0x08003e1b
 8003b80:	08003d9d 	.word	0x08003d9d
 8003b84:	08003d0f 	.word	0x08003d0f
 8003b88:	08003c91 	.word	0x08003c91
 8003b8c:	08003c13 	.word	0x08003c13
 8003b90:	08003b95 	.word	0x08003b95
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003b94:	f7fd fdba 	bl	800170c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b7d      	ldr	r3, [pc, #500]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2246      	movs	r2, #70	; 0x46
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d32f      	bcc.n	8003c06 <CountDownCube_Handle+0xae>
			{
				if (direction == 1 && (i < 8))  i++;
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <CountDownCube_Handle+0x68>
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b07      	cmp	r3, #7
 8003bb4:	dc04      	bgt.n	8003bc0 <CountDownCube_Handle+0x68>
 8003bb6:	4b78      	ldr	r3, [pc, #480]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a76      	ldr	r2, [pc, #472]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bbe:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003bc0:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	dd02      	ble.n	8003bce <CountDownCube_Handle+0x76>
 8003bc8:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003bce:	4b71      	ldr	r3, [pc, #452]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <CountDownCube_Handle+0x90>
 8003bd6:	4b70      	ldr	r3, [pc, #448]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd04      	ble.n	8003be8 <CountDownCube_Handle+0x90>
 8003bde:	4b6e      	ldr	r3, [pc, #440]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	4a6c      	ldr	r2, [pc, #432]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003be6:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003be8:	4b6b      	ldr	r3, [pc, #428]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <CountDownCube_Handle+0xa4>
				{
					direction = 1;
 8003bf0:	4b68      	ldr	r3, [pc, #416]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <CountDownCube_Handle+0x234>)
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003bfc:	f7fd fd86 	bl	800170c <HAL_GetTick>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4a63      	ldr	r2, [pc, #396]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003c04:	6013      	str	r3, [r2, #0]
			}

			DigitNine(i);
 8003c06:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fa7c 	bl	8004108 <DigitNine>
		break;
 8003c10:	e247      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003c12:	f7fd fd7b 	bl	800170c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b5d      	ldr	r3, [pc, #372]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2246      	movs	r2, #70	; 0x46
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d32f      	bcc.n	8003c84 <CountDownCube_Handle+0x12c>
			{

				if (direction == 1 && (i < 8))  i++;
 8003c24:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d108      	bne.n	8003c3e <CountDownCube_Handle+0xe6>
 8003c2c:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	dc04      	bgt.n	8003c3e <CountDownCube_Handle+0xe6>
 8003c34:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c3c:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003c3e:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b07      	cmp	r3, #7
 8003c44:	dd02      	ble.n	8003c4c <CountDownCube_Handle+0xf4>
 8003c46:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d108      	bne.n	8003c66 <CountDownCube_Handle+0x10e>
 8003c54:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dd04      	ble.n	8003c66 <CountDownCube_Handle+0x10e>
 8003c5c:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c64:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003c66:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <CountDownCube_Handle+0x122>
				{
					direction = 1;
 8003c6e:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8003c74:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <CountDownCube_Handle+0x234>)
 8003c76:	2207      	movs	r2, #7
 8003c78:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003c7a:	f7fd fd47 	bl	800170c <HAL_GetTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003c82:	6013      	str	r3, [r2, #0]
			}

			DigitEight(i);
 8003c84:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa79 	bl	8004180 <DigitEight>
		break;
 8003c8e:	e208      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003c90:	f7fd fd3c 	bl	800170c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2246      	movs	r2, #70	; 0x46
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d32f      	bcc.n	8003d02 <CountDownCube_Handle+0x1aa>
			{

				if (direction == 1 && (i < 8))  i++;
 8003ca2:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <CountDownCube_Handle+0x164>
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b07      	cmp	r3, #7
 8003cb0:	dc04      	bgt.n	8003cbc <CountDownCube_Handle+0x164>
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	4a37      	ldr	r2, [pc, #220]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cba:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003cbc:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b07      	cmp	r3, #7
 8003cc2:	dd02      	ble.n	8003cca <CountDownCube_Handle+0x172>
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003cca:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <CountDownCube_Handle+0x18c>
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	dd04      	ble.n	8003ce4 <CountDownCube_Handle+0x18c>
 8003cda:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003ce2:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003ce4:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <CountDownCube_Handle+0x1a0>
				{
					direction = 1;
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <CountDownCube_Handle+0x234>)
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003cf8:	f7fd fd08 	bl	800170c <HAL_GetTick>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003d00:	6013      	str	r3, [r2, #0]
			}

			DigitSeven(i);
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa5c 	bl	80041c4 <DigitSeven>

			break;
 8003d0c:	e1c9      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003d0e:	f7fd fcfd 	bl	800170c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2246      	movs	r2, #70	; 0x46
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d32f      	bcc.n	8003d80 <CountDownCube_Handle+0x228>
			{

				if (direction == 1 && (i < 8))  i++;
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <CountDownCube_Handle+0x1e2>
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b07      	cmp	r3, #7
 8003d2e:	dc04      	bgt.n	8003d3a <CountDownCube_Handle+0x1e2>
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d38:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b07      	cmp	r3, #7
 8003d40:	dd02      	ble.n	8003d48 <CountDownCube_Handle+0x1f0>
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003d48:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d108      	bne.n	8003d62 <CountDownCube_Handle+0x20a>
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	dd04      	ble.n	8003d62 <CountDownCube_Handle+0x20a>
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d60:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <CountDownCube_Handle+0x21e>
				{
					direction = 1;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <CountDownCube_Handle+0x23c>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <CountDownCube_Handle+0x234>)
 8003d72:	2205      	movs	r2, #5
 8003d74:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003d76:	f7fd fcc9 	bl	800170c <HAL_GetTick>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <CountDownCube_Handle+0x238>)
 8003d7e:	6013      	str	r3, [r2, #0]
			}

			DigitSix(i);
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <CountDownCube_Handle+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fa51 	bl	800422c <DigitSix>

			break;
 8003d8a:	e18a      	b.n	80040a2 <CountDownCube_Handle+0x54a>
 8003d8c:	20000009 	.word	0x20000009
 8003d90:	200001dc 	.word	0x200001dc
 8003d94:	2000000c 	.word	0x2000000c
 8003d98:	200001e0 	.word	0x200001e0

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003d9c:	f7fd fcb6 	bl	800170c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2246      	movs	r2, #70	; 0x46
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d32f      	bcc.n	8003e0e <CountDownCube_Handle+0x2b6>
			{

				if (direction == 1 && (i < 8))  i++;
 8003dae:	4b7a      	ldr	r3, [pc, #488]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <CountDownCube_Handle+0x270>
 8003db6:	4b79      	ldr	r3, [pc, #484]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	dc04      	bgt.n	8003dc8 <CountDownCube_Handle+0x270>
 8003dbe:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a75      	ldr	r2, [pc, #468]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003dc6:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003dc8:	4b74      	ldr	r3, [pc, #464]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	dd02      	ble.n	8003dd6 <CountDownCube_Handle+0x27e>
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <CountDownCube_Handle+0x298>
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dd04      	ble.n	8003df0 <CountDownCube_Handle+0x298>
 8003de6:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4a6b      	ldr	r2, [pc, #428]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003dee:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <CountDownCube_Handle+0x2ac>
				{
					direction = 1;
 8003df8:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8003dfe:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <CountDownCube_Handle+0x448>)
 8003e00:	2204      	movs	r2, #4
 8003e02:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003e04:	f7fd fc82 	bl	800170c <HAL_GetTick>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4a62      	ldr	r2, [pc, #392]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003e0c:	6013      	str	r3, [r2, #0]
			}

			DigitFive(i);
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa50 	bl	80042b8 <DigitFive>
			break;
 8003e18:	e143      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003e1a:	f7fd fc77 	bl	800170c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b5c      	ldr	r3, [pc, #368]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2246      	movs	r2, #70	; 0x46
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d32f      	bcc.n	8003e8c <CountDownCube_Handle+0x334>
			{

				if (direction == 1 && (i < 8))  i++;
 8003e2c:	4b5a      	ldr	r3, [pc, #360]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d108      	bne.n	8003e46 <CountDownCube_Handle+0x2ee>
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b07      	cmp	r3, #7
 8003e3a:	dc04      	bgt.n	8003e46 <CountDownCube_Handle+0x2ee>
 8003e3c:	4b57      	ldr	r3, [pc, #348]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a56      	ldr	r2, [pc, #344]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e44:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003e46:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b07      	cmp	r3, #7
 8003e4c:	dd02      	ble.n	8003e54 <CountDownCube_Handle+0x2fc>
 8003e4e:	4b52      	ldr	r3, [pc, #328]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <CountDownCube_Handle+0x316>
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dd04      	ble.n	8003e6e <CountDownCube_Handle+0x316>
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e6c:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003e6e:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <CountDownCube_Handle+0x32a>
				{
					direction = 1;
 8003e76:	4b48      	ldr	r3, [pc, #288]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <CountDownCube_Handle+0x448>)
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003e82:	f7fd fc43 	bl	800170c <HAL_GetTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a42      	ldr	r2, [pc, #264]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003e8a:	6013      	str	r3, [r2, #0]
			}

			DigitFour(i);
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fa57 	bl	8004344 <DigitFour>
			break;
 8003e96:	e104      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003e98:	f7fd fc38 	bl	800170c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2246      	movs	r2, #70	; 0x46
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d32f      	bcc.n	8003f0a <CountDownCube_Handle+0x3b2>
			{

				if (direction == 1 && (i < 8))  i++;
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d108      	bne.n	8003ec4 <CountDownCube_Handle+0x36c>
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	dc04      	bgt.n	8003ec4 <CountDownCube_Handle+0x36c>
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003ec2:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	dd02      	ble.n	8003ed2 <CountDownCube_Handle+0x37a>
 8003ecc:	4b32      	ldr	r3, [pc, #200]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <CountDownCube_Handle+0x394>
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	dd04      	ble.n	8003eec <CountDownCube_Handle+0x394>
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003eea:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <CountDownCube_Handle+0x3a8>
				{
					direction = 1;
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <CountDownCube_Handle+0x448>)
 8003efc:	2202      	movs	r2, #2
 8003efe:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003f00:	f7fd fc04 	bl	800170c <HAL_GetTick>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003f08:	6013      	str	r3, [r2, #0]
			}

			DigitThree(i);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fa5c 	bl	80043cc <DigitThree>
			break;
 8003f14:	e0c5      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003f16:	f7fd fbf9 	bl	800170c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2246      	movs	r2, #70	; 0x46
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d32f      	bcc.n	8003f88 <CountDownCube_Handle+0x430>
			{

				if (direction == 1 && (i < 8))  i++;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <CountDownCube_Handle+0x3ea>
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b07      	cmp	r3, #7
 8003f36:	dc04      	bgt.n	8003f42 <CountDownCube_Handle+0x3ea>
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f40:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	dd02      	ble.n	8003f50 <CountDownCube_Handle+0x3f8>
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <CountDownCube_Handle+0x412>
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dd04      	ble.n	8003f6a <CountDownCube_Handle+0x412>
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f68:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <CountDownCube_Handle+0x426>
				{
					direction = 1;
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <CountDownCube_Handle+0x440>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <CountDownCube_Handle+0x448>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8003f7e:	f7fd fbc5 	bl	800170c <HAL_GetTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4a03      	ldr	r2, [pc, #12]	; (8003f94 <CountDownCube_Handle+0x43c>)
 8003f86:	6013      	str	r3, [r2, #0]
			}

			DigitTwo(i);
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <CountDownCube_Handle+0x444>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa51 	bl	8004434 <DigitTwo>
			break;
 8003f92:	e086      	b.n	80040a2 <CountDownCube_Handle+0x54a>
 8003f94:	200001dc 	.word	0x200001dc
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	200001e0 	.word	0x200001e0
 8003fa0:	20000009 	.word	0x20000009

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8003fa4:	f7fd fbb2 	bl	800170c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <CountDownCube_Handle+0x550>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2246      	movs	r2, #70	; 0x46
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d32f      	bcc.n	8004016 <CountDownCube_Handle+0x4be>
			{

				if (direction == 1 && (i < 8))  i++;
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <CountDownCube_Handle+0x554>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <CountDownCube_Handle+0x478>
 8003fbe:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	dc04      	bgt.n	8003fd0 <CountDownCube_Handle+0x478>
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003fce:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8003fd0:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b07      	cmp	r3, #7
 8003fd6:	dd02      	ble.n	8003fde <CountDownCube_Handle+0x486>
 8003fd8:	4b34      	ldr	r3, [pc, #208]	; (80040ac <CountDownCube_Handle+0x554>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <CountDownCube_Handle+0x554>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <CountDownCube_Handle+0x4a0>
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	dd04      	ble.n	8003ff8 <CountDownCube_Handle+0x4a0>
 8003fee:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003ff6:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <CountDownCube_Handle+0x558>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <CountDownCube_Handle+0x4b4>
				{
					direction = 1;
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <CountDownCube_Handle+0x554>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <CountDownCube_Handle+0x55c>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800400c:	f7fd fb7e 	bl	800170c <HAL_GetTick>
 8004010:	4603      	mov	r3, r0
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <CountDownCube_Handle+0x550>)
 8004014:	6013      	str	r3, [r2, #0]
			}

			DigitOne(i);
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fa58 	bl	80044d0 <DigitOne>
			break;
 8004020:	e03f      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004022:	f7fd fb73 	bl	800170c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <CountDownCube_Handle+0x550>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2246      	movs	r2, #70	; 0x46
 8004030:	4293      	cmp	r3, r2
 8004032:	d32f      	bcc.n	8004094 <CountDownCube_Handle+0x53c>
			{

				if (direction == 1 && (i < 8))  i++;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <CountDownCube_Handle+0x554>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <CountDownCube_Handle+0x4f6>
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <CountDownCube_Handle+0x558>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b07      	cmp	r3, #7
 8004042:	dc04      	bgt.n	800404e <CountDownCube_Handle+0x4f6>
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <CountDownCube_Handle+0x558>)
 800404c:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800404e:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b07      	cmp	r3, #7
 8004054:	dd02      	ble.n	800405c <CountDownCube_Handle+0x504>
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <CountDownCube_Handle+0x554>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <CountDownCube_Handle+0x554>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <CountDownCube_Handle+0x51e>
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	dd04      	ble.n	8004076 <CountDownCube_Handle+0x51e>
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <CountDownCube_Handle+0x558>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004074:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <CountDownCube_Handle+0x532>
				{
					direction = 1;
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <CountDownCube_Handle+0x554>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <CountDownCube_Handle+0x55c>)
 8004086:	2209      	movs	r2, #9
 8004088:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 800408a:	f7fd fb3f 	bl	800170c <HAL_GetTick>
 800408e:	4603      	mov	r3, r0
 8004090:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <CountDownCube_Handle+0x550>)
 8004092:	6013      	str	r3, [r2, #0]
			}

			DigitZero(i);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <CountDownCube_Handle+0x558>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fa5f 	bl	800455c <DigitZero>
			break;
 800409e:	e000      	b.n	80040a2 <CountDownCube_Handle+0x54a>

		default:
			break;
 80040a0:	bf00      	nop
	}
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200001dc 	.word	0x200001dc
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	200001e0 	.word	0x200001e0
 80040b4:	20000009 	.word	0x20000009

080040b8 <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <CountDownCube_Set_Sate+0x40>)
 80040c0:	2206      	movs	r2, #6
 80040c2:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <CountDownCube_Set_Sate+0x44>)
 80040c6:	2209      	movs	r2, #9
 80040c8:	701a      	strb	r2, [r3, #0]
	direction = 1;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <CountDownCube_Set_Sate+0x48>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e007      	b.n	80040e6 <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <CountDownCube_Set_Sate+0x4c>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	ddf4      	ble.n	80040d6 <CountDownCube_Set_Sate+0x1e>
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	20000010 	.word	0x20000010
 80040fc:	20000009 	.word	0x20000009
 8004100:	2000000c 	.word	0x2000000c
 8004104:	200001d4 	.word	0x200001d4

08004108 <DigitNine>:

void DigitNine(int i)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <DigitNine+0x74>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	227e      	movs	r2, #126	; 0x7e
 8004118:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 800411a:	2181      	movs	r1, #129	; 0x81
 800411c:	4817      	ldr	r0, [pc, #92]	; (800417c <DigitNine+0x74>)
 800411e:	f001 fe7d 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc3;
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <DigitNine+0x74>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	22c3      	movs	r2, #195	; 0xc3
 800412a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 800412c:	2160      	movs	r1, #96	; 0x60
 800412e:	4813      	ldr	r0, [pc, #76]	; (800417c <DigitNine+0x74>)
 8004130:	f001 fe74 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x03;
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <DigitNine+0x74>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	2203      	movs	r2, #3
 800413c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 800413e:	210c      	movs	r1, #12
 8004140:	480e      	ldr	r0, [pc, #56]	; (800417c <DigitNine+0x74>)
 8004142:	f001 fe6b 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xff;
 8004146:	4a0d      	ldr	r2, [pc, #52]	; (800417c <DigitNine+0x74>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8004150:	2102      	movs	r1, #2
 8004152:	480a      	ldr	r0, [pc, #40]	; (800417c <DigitNine+0x74>)
 8004154:	f001 fe62 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x7f;
 8004158:	4a08      	ldr	r2, [pc, #32]	; (800417c <DigitNine+0x74>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	227f      	movs	r2, #127	; 0x7f
 8004160:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004162:	2110      	movs	r1, #16
 8004164:	4805      	ldr	r0, [pc, #20]	; (800417c <DigitNine+0x74>)
 8004166:	f001 fe59 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <DigitNine+0x74>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200001d4 	.word	0x200001d4

08004180 <DigitEight>:

void DigitEight(int i)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <DigitEight+0x40>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	22c3      	movs	r2, #195	; 0xc3
 8004190:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 8004192:	2166      	movs	r1, #102	; 0x66
 8004194:	480a      	ldr	r0, [pc, #40]	; (80041c0 <DigitEight+0x40>)
 8004196:	f001 fe41 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x7e;
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <DigitEight+0x40>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	227e      	movs	r2, #126	; 0x7e
 80041a2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 80041a4:	2199      	movs	r1, #153	; 0x99
 80041a6:	4806      	ldr	r0, [pc, #24]	; (80041c0 <DigitEight+0x40>)
 80041a8:	f001 fe38 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <DigitEight+0x40>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200001d4 	.word	0x200001d4

080041c4 <DigitSeven>:

void DigitSeven(int i)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <DigitSeven+0x64>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 80041d6:	21c0      	movs	r1, #192	; 0xc0
 80041d8:	4813      	ldr	r0, [pc, #76]	; (8004228 <DigitSeven+0x64>)
 80041da:	f001 fe1f 	bl	8005e1c <TransmitData>

	for (int j = 0; j < 6; j++)
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e015      	b.n	8004210 <DigitSeven+0x4c>
	{
		column_countdown[i] = 0x03 << j;
 80041e4:	2203      	movs	r2, #3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	b2d9      	uxtb	r1, r3
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <DigitSeven+0x64>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	460a      	mov	r2, r1
 80041f6:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 80041f8:	2220      	movs	r2, #32
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	fa42 f303 	asr.w	r3, r2, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	4808      	ldr	r0, [pc, #32]	; (8004228 <DigitSeven+0x64>)
 8004206:	f001 fe09 	bl	8005e1c <TransmitData>
	for (int j = 0; j < 6; j++)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3301      	adds	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b05      	cmp	r3, #5
 8004214:	dde6      	ble.n	80041e4 <DigitSeven+0x20>
	}

	column_countdown[i] = 0;
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <DigitSeven+0x64>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200001d4 	.word	0x200001d4

0800422c <DigitSix>:

void DigitSix(int i)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <DigitSix+0x88>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	22ff      	movs	r2, #255	; 0xff
 800423c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 800423e:	2142      	movs	r1, #66	; 0x42
 8004240:	481c      	ldr	r0, [pc, #112]	; (80042b4 <DigitSix+0x88>)
 8004242:	f001 fdeb 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc3;
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <DigitSix+0x88>)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	22c3      	movs	r2, #195	; 0xc3
 800424e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004250:	210c      	movs	r1, #12
 8004252:	4818      	ldr	r0, [pc, #96]	; (80042b4 <DigitSix+0x88>)
 8004254:	f001 fde2 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x7f;
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <DigitSix+0x88>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	227f      	movs	r2, #127	; 0x7f
 8004260:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	4813      	ldr	r0, [pc, #76]	; (80042b4 <DigitSix+0x88>)
 8004266:	f001 fdd9 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc0;
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <DigitSix+0x88>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	22c0      	movs	r2, #192	; 0xc0
 8004272:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8004274:	2120      	movs	r1, #32
 8004276:	480f      	ldr	r0, [pc, #60]	; (80042b4 <DigitSix+0x88>)
 8004278:	f001 fdd0 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xfe;
 800427c:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <DigitSix+0x88>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	22fe      	movs	r2, #254	; 0xfe
 8004284:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004286:	2110      	movs	r1, #16
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <DigitSix+0x88>)
 800428a:	f001 fdc7 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x7e;
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <DigitSix+0x88>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	227e      	movs	r2, #126	; 0x7e
 8004296:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8004298:	2101      	movs	r1, #1
 800429a:	4806      	ldr	r0, [pc, #24]	; (80042b4 <DigitSix+0x88>)
 800429c:	f001 fdbe 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 80042a0:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <DigitSix+0x88>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200001d4 	.word	0x200001d4

080042b8 <DigitFive>:

void DigitFive(int i)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <DigitFive+0x88>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 80042ca:	21c0      	movs	r1, #192	; 0xc0
 80042cc:	481c      	ldr	r0, [pc, #112]	; (8004340 <DigitFive+0x88>)
 80042ce:	f001 fda5 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc0;
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <DigitFive+0x88>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	22c0      	movs	r2, #192	; 0xc0
 80042da:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 80042dc:	2120      	movs	r1, #32
 80042de:	4818      	ldr	r0, [pc, #96]	; (8004340 <DigitFive+0x88>)
 80042e0:	f001 fd9c 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xfe;
 80042e4:	4a16      	ldr	r2, [pc, #88]	; (8004340 <DigitFive+0x88>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	22fe      	movs	r2, #254	; 0xfe
 80042ec:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 80042ee:	2110      	movs	r1, #16
 80042f0:	4813      	ldr	r0, [pc, #76]	; (8004340 <DigitFive+0x88>)
 80042f2:	f001 fd93 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x03;
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <DigitFive+0x88>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	2203      	movs	r2, #3
 80042fe:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 8004300:	210c      	movs	r1, #12
 8004302:	480f      	ldr	r0, [pc, #60]	; (8004340 <DigitFive+0x88>)
 8004304:	f001 fd8a 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x83;
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <DigitFive+0x88>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	2283      	movs	r2, #131	; 0x83
 8004310:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 8004312:	2102      	movs	r1, #2
 8004314:	480a      	ldr	r0, [pc, #40]	; (8004340 <DigitFive+0x88>)
 8004316:	f001 fd81 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x7e;
 800431a:	4a09      	ldr	r2, [pc, #36]	; (8004340 <DigitFive+0x88>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4413      	add	r3, r2
 8004320:	227e      	movs	r2, #126	; 0x7e
 8004322:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 8004324:	2101      	movs	r1, #1
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <DigitFive+0x88>)
 8004328:	f001 fd78 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <DigitFive+0x88>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200001d4 	.word	0x200001d4

08004344 <DigitFour>:

void DigitFour(int i)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <DigitFour+0x80>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	2206      	movs	r2, #6
 8004354:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 8004356:	21f3      	movs	r1, #243	; 0xf3
 8004358:	481a      	ldr	r0, [pc, #104]	; (80043c4 <DigitFour+0x80>)
 800435a:	f001 fd5f 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xff;
 800435e:	4a19      	ldr	r2, [pc, #100]	; (80043c4 <DigitFour+0x80>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004368:	210c      	movs	r1, #12
 800436a:	4816      	ldr	r0, [pc, #88]	; (80043c4 <DigitFour+0x80>)
 800436c:	f001 fd56 	bl	8005e1c <TransmitData>

	for (int j = 0; j < 4; j++)
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e019      	b.n	80043aa <DigitFour+0x66>
	{
	column_countdown[i] = 0x08 << j;
 8004376:	2208      	movs	r2, #8
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	b2d9      	uxtb	r1, r3
 8004380:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <DigitFour+0x80>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	460a      	mov	r2, r1
 8004388:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	fa42 f303 	asr.w	r3, r2, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <DigitFour+0x84>)
 8004396:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <DigitFour+0x84>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	4619      	mov	r1, r3
 800439e:	4809      	ldr	r0, [pc, #36]	; (80043c4 <DigitFour+0x80>)
 80043a0:	f001 fd3c 	bl	8005e1c <TransmitData>
	for (int j = 0; j < 4; j++)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	dde2      	ble.n	8004376 <DigitFour+0x32>
	}

	column_countdown[i] = 0;
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <DigitFour+0x80>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200001d4 	.word	0x200001d4
 80043c8:	200001d1 	.word	0x200001d1

080043cc <DigitThree>:

void DigitThree(int i)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 80043d4:	4a16      	ldr	r2, [pc, #88]	; (8004430 <DigitThree+0x64>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	227e      	movs	r2, #126	; 0x7e
 80043dc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 80043de:	2181      	movs	r1, #129	; 0x81
 80043e0:	4813      	ldr	r0, [pc, #76]	; (8004430 <DigitThree+0x64>)
 80043e2:	f001 fd1b 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xe7;
 80043e6:	4a12      	ldr	r2, [pc, #72]	; (8004430 <DigitThree+0x64>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	22e7      	movs	r2, #231	; 0xe7
 80043ee:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 80043f0:	2142      	movs	r1, #66	; 0x42
 80043f2:	480f      	ldr	r0, [pc, #60]	; (8004430 <DigitThree+0x64>)
 80043f4:	f001 fd12 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc3;
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <DigitThree+0x64>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	22c3      	movs	r2, #195	; 0xc3
 8004400:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 8004402:	2124      	movs	r1, #36	; 0x24
 8004404:	480a      	ldr	r0, [pc, #40]	; (8004430 <DigitThree+0x64>)
 8004406:	f001 fd09 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x06;
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <DigitThree+0x64>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	2206      	movs	r2, #6
 8004412:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 8004414:	2118      	movs	r1, #24
 8004416:	4806      	ldr	r0, [pc, #24]	; (8004430 <DigitThree+0x64>)
 8004418:	f001 fd00 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <DigitThree+0x64>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200001d4 	.word	0x200001d4

08004434 <DigitTwo>:

void DigitTwo(int i)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 800443c:	4a23      	ldr	r2, [pc, #140]	; (80044cc <DigitTwo+0x98>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	227e      	movs	r2, #126	; 0x7e
 8004444:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	4820      	ldr	r0, [pc, #128]	; (80044cc <DigitTwo+0x98>)
 800444a:	f001 fce7 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc3;
 800444e:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <DigitTwo+0x98>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	22c3      	movs	r2, #195	; 0xc3
 8004456:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	481c      	ldr	r0, [pc, #112]	; (80044cc <DigitTwo+0x98>)
 800445c:	f001 fcde 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x83;
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <DigitTwo+0x98>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	2283      	movs	r2, #131	; 0x83
 8004468:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 800446a:	2120      	movs	r1, #32
 800446c:	4817      	ldr	r0, [pc, #92]	; (80044cc <DigitTwo+0x98>)
 800446e:	f001 fcd5 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x0e;
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <DigitTwo+0x98>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	220e      	movs	r2, #14
 800447a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 800447c:	2110      	movs	r1, #16
 800447e:	4813      	ldr	r0, [pc, #76]	; (80044cc <DigitTwo+0x98>)
 8004480:	f001 fccc 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x1c;
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <DigitTwo+0x98>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	221c      	movs	r2, #28
 800448c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 800448e:	2108      	movs	r1, #8
 8004490:	480e      	ldr	r0, [pc, #56]	; (80044cc <DigitTwo+0x98>)
 8004492:	f001 fcc3 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x70;
 8004496:	4a0d      	ldr	r2, [pc, #52]	; (80044cc <DigitTwo+0x98>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	2270      	movs	r2, #112	; 0x70
 800449e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 80044a0:	2104      	movs	r1, #4
 80044a2:	480a      	ldr	r0, [pc, #40]	; (80044cc <DigitTwo+0x98>)
 80044a4:	f001 fcba 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xff;
 80044a8:	4a08      	ldr	r2, [pc, #32]	; (80044cc <DigitTwo+0x98>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 80044b2:	2103      	movs	r1, #3
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <DigitTwo+0x98>)
 80044b6:	f001 fcb1 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <DigitTwo+0x98>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200001d4 	.word	0x200001d4

080044d0 <DigitOne>:

void DigitOne(int i)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <DigitOne+0x88>)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 80044e2:	2101      	movs	r1, #1
 80044e4:	481c      	ldr	r0, [pc, #112]	; (8004558 <DigitOne+0x88>)
 80044e6:	f001 fc99 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x98;
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <DigitOne+0x88>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	2298      	movs	r2, #152	; 0x98
 80044f2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 80044f4:	2108      	movs	r1, #8
 80044f6:	4818      	ldr	r0, [pc, #96]	; (8004558 <DigitOne+0x88>)
 80044f8:	f001 fc90 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xd8;
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <DigitOne+0x88>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	22d8      	movs	r2, #216	; 0xd8
 8004504:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004506:	2110      	movs	r1, #16
 8004508:	4813      	ldr	r0, [pc, #76]	; (8004558 <DigitOne+0x88>)
 800450a:	f001 fc87 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x78;
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <DigitOne+0x88>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	2278      	movs	r2, #120	; 0x78
 8004516:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8004518:	2120      	movs	r1, #32
 800451a:	480f      	ldr	r0, [pc, #60]	; (8004558 <DigitOne+0x88>)
 800451c:	f001 fc7e 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x38;
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <DigitOne+0x88>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	2238      	movs	r2, #56	; 0x38
 8004528:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 800452a:	2140      	movs	r1, #64	; 0x40
 800452c:	480a      	ldr	r0, [pc, #40]	; (8004558 <DigitOne+0x88>)
 800452e:	f001 fc75 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x18;
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <DigitOne+0x88>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	2218      	movs	r2, #24
 800453a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 800453c:	2186      	movs	r1, #134	; 0x86
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <DigitOne+0x88>)
 8004540:	f001 fc6c 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <DigitOne+0x88>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200001d4 	.word	0x200001d4

0800455c <DigitZero>:

void DigitZero(int i)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 8004564:	4a11      	ldr	r2, [pc, #68]	; (80045ac <DigitZero+0x50>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	223c      	movs	r2, #60	; 0x3c
 800456c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 800456e:	2181      	movs	r1, #129	; 0x81
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <DigitZero+0x50>)
 8004572:	f001 fc53 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0x66;
 8004576:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <DigitZero+0x50>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	2266      	movs	r2, #102	; 0x66
 800457e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004580:	2142      	movs	r1, #66	; 0x42
 8004582:	480a      	ldr	r0, [pc, #40]	; (80045ac <DigitZero+0x50>)
 8004584:	f001 fc4a 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0xc3;
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <DigitZero+0x50>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	22c3      	movs	r2, #195	; 0xc3
 8004590:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 8004592:	213c      	movs	r1, #60	; 0x3c
 8004594:	4805      	ldr	r0, [pc, #20]	; (80045ac <DigitZero+0x50>)
 8004596:	f001 fc41 	bl	8005e1c <TransmitData>

	column_countdown[i] = 0;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <DigitZero+0x50>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200001d4 	.word	0x200001d4

080045b0 <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0

	switch (size_layer)
 80045b6:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <DiagonalCube_Handle+0x200>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	f200 80ea 	bhi.w	8004794 <DiagonalCube_Handle+0x1e4>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <DiagonalCube_Handle+0x18>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	08004649 	.word	0x08004649
 80045d0:	080046b9 	.word	0x080046b9
 80045d4:	08004727 	.word	0x08004727
	{
		case SMALLEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80045d8:	f7fd f898 	bl	800170c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <DiagonalCube_Handle+0x204>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2296      	movs	r2, #150	; 0x96
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f0c0 80d6 	bcc.w	8004798 <DiagonalCube_Handle+0x1e8>
			{
				layer_diagonal = 0x18;
 80045ec:	4b72      	ldr	r3, [pc, #456]	; (80047b8 <DiagonalCube_Handle+0x208>)
 80045ee:	2218      	movs	r2, #24
 80045f0:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80045f2:	2303      	movs	r3, #3
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e007      	b.n	8004608 <DiagonalCube_Handle+0x58>
				{
					column_diagonal[i] = 0x18;
 80045f8:	4a70      	ldr	r2, [pc, #448]	; (80047bc <DiagonalCube_Handle+0x20c>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	2218      	movs	r2, #24
 8004600:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b04      	cmp	r3, #4
 800460c:	ddf4      	ble.n	80045f8 <DiagonalCube_Handle+0x48>
				}
				TransmitData(column_diagonal, layer_diagonal);
 800460e:	4b6a      	ldr	r3, [pc, #424]	; (80047b8 <DiagonalCube_Handle+0x208>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	4619      	mov	r1, r3
 8004614:	4869      	ldr	r0, [pc, #420]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004616:	f001 fc01 	bl	8005e1c <TransmitData>
				for (int i = 0; i < 8; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e007      	b.n	8004630 <DiagonalCube_Handle+0x80>
				{
					column_diagonal[i] = 0;
 8004620:	4a66      	ldr	r2, [pc, #408]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3301      	adds	r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b07      	cmp	r3, #7
 8004634:	ddf4      	ble.n	8004620 <DiagonalCube_Handle+0x70>
				}
				size_layer = MEDIUM;
 8004636:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <DiagonalCube_Handle+0x200>)
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800463c:	f7fd f866 	bl	800170c <HAL_GetTick>
 8004640:	4603      	mov	r3, r0
 8004642:	4a5c      	ldr	r2, [pc, #368]	; (80047b4 <DiagonalCube_Handle+0x204>)
 8004644:	6013      	str	r3, [r2, #0]
			}
			break;
 8004646:	e0a7      	b.n	8004798 <DiagonalCube_Handle+0x1e8>
		case MEDIUM:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004648:	f7fd f860 	bl	800170c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <DiagonalCube_Handle+0x204>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2296      	movs	r2, #150	; 0x96
 8004656:	4293      	cmp	r3, r2
 8004658:	f0c0 80a0 	bcc.w	800479c <DiagonalCube_Handle+0x1ec>
			{
				layer_diagonal = 0x24;
 800465c:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <DiagonalCube_Handle+0x208>)
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004662:	2302      	movs	r3, #2
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e007      	b.n	8004678 <DiagonalCube_Handle+0xc8>
				{
					column_diagonal[i] = 0x3c;
 8004668:	4a54      	ldr	r2, [pc, #336]	; (80047bc <DiagonalCube_Handle+0x20c>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	223c      	movs	r2, #60	; 0x3c
 8004670:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b05      	cmp	r3, #5
 800467c:	ddf4      	ble.n	8004668 <DiagonalCube_Handle+0xb8>
				}
				TransmitData(column_diagonal, layer_diagonal);
 800467e:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <DiagonalCube_Handle+0x208>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	484d      	ldr	r0, [pc, #308]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004686:	f001 fbc9 	bl	8005e1c <TransmitData>
				for (int i = 0; i < 8; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e007      	b.n	80046a0 <DiagonalCube_Handle+0xf0>
				{
					column_diagonal[i] = 0;
 8004690:	4a4a      	ldr	r2, [pc, #296]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3301      	adds	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b07      	cmp	r3, #7
 80046a4:	ddf4      	ble.n	8004690 <DiagonalCube_Handle+0xe0>
				}
				size_layer = LARGE;
 80046a6:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <DiagonalCube_Handle+0x200>)
 80046a8:	2202      	movs	r2, #2
 80046aa:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80046ac:	f7fd f82e 	bl	800170c <HAL_GetTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <DiagonalCube_Handle+0x204>)
 80046b4:	6013      	str	r3, [r2, #0]
			}
			break;
 80046b6:	e071      	b.n	800479c <DiagonalCube_Handle+0x1ec>
		case LARGE:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80046b8:	f7fd f828 	bl	800170c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <DiagonalCube_Handle+0x204>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2296      	movs	r2, #150	; 0x96
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d36a      	bcc.n	80047a0 <DiagonalCube_Handle+0x1f0>
			{
				layer_diagonal = 0x42;
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <DiagonalCube_Handle+0x208>)
 80046cc:	2242      	movs	r2, #66	; 0x42
 80046ce:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80046d0:	2301      	movs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e007      	b.n	80046e6 <DiagonalCube_Handle+0x136>
				{
					column_diagonal[i] = 0x7e;
 80046d6:	4a39      	ldr	r2, [pc, #228]	; (80047bc <DiagonalCube_Handle+0x20c>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	227e      	movs	r2, #126	; 0x7e
 80046de:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	ddf4      	ble.n	80046d6 <DiagonalCube_Handle+0x126>
				}
				TransmitData(column_diagonal, layer_diagonal);
 80046ec:	4b32      	ldr	r3, [pc, #200]	; (80047b8 <DiagonalCube_Handle+0x208>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4832      	ldr	r0, [pc, #200]	; (80047bc <DiagonalCube_Handle+0x20c>)
 80046f4:	f001 fb92 	bl	8005e1c <TransmitData>
				for (int i = 0; i < 8; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	e007      	b.n	800470e <DiagonalCube_Handle+0x15e>
				{
					column_diagonal[i] = 0;
 80046fe:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4413      	add	r3, r2
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3301      	adds	r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b07      	cmp	r3, #7
 8004712:	ddf4      	ble.n	80046fe <DiagonalCube_Handle+0x14e>
				}
				size_layer = LARGEST;
 8004714:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <DiagonalCube_Handle+0x200>)
 8004716:	2203      	movs	r2, #3
 8004718:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 800471a:	f7fc fff7 	bl	800170c <HAL_GetTick>
 800471e:	4603      	mov	r3, r0
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <DiagonalCube_Handle+0x204>)
 8004722:	6013      	str	r3, [r2, #0]
			}
			break;
 8004724:	e03c      	b.n	80047a0 <DiagonalCube_Handle+0x1f0>
		case LARGEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8004726:	f7fc fff1 	bl	800170c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <DiagonalCube_Handle+0x204>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2296      	movs	r2, #150	; 0x96
 8004734:	4293      	cmp	r3, r2
 8004736:	d335      	bcc.n	80047a4 <DiagonalCube_Handle+0x1f4>
			{
				layer_diagonal= 0x81;
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <DiagonalCube_Handle+0x208>)
 800473a:	2281      	movs	r2, #129	; 0x81
 800473c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	e007      	b.n	8004754 <DiagonalCube_Handle+0x1a4>
				{
					column_diagonal[i] = 0xff;
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b07      	cmp	r3, #7
 8004758:	ddf4      	ble.n	8004744 <DiagonalCube_Handle+0x194>
				}
				TransmitData(column_diagonal, layer_diagonal);
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <DiagonalCube_Handle+0x208>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4816      	ldr	r0, [pc, #88]	; (80047bc <DiagonalCube_Handle+0x20c>)
 8004762:	f001 fb5b 	bl	8005e1c <TransmitData>
				for (int i = 0; i < 8; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	e007      	b.n	800477c <DiagonalCube_Handle+0x1cc>
				{
					column_diagonal[i] = 0;
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <DiagonalCube_Handle+0x20c>)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	4413      	add	r3, r2
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b07      	cmp	r3, #7
 8004780:	ddf4      	ble.n	800476c <DiagonalCube_Handle+0x1bc>
				}
				size_layer = SMALLEST;
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <DiagonalCube_Handle+0x200>)
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8004788:	f7fc ffc0 	bl	800170c <HAL_GetTick>
 800478c:	4603      	mov	r3, r0
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <DiagonalCube_Handle+0x204>)
 8004790:	6013      	str	r3, [r2, #0]
			}
			break;
 8004792:	e007      	b.n	80047a4 <DiagonalCube_Handle+0x1f4>
		default:
			break;
 8004794:	bf00      	nop
 8004796:	e006      	b.n	80047a6 <DiagonalCube_Handle+0x1f6>
			break;
 8004798:	bf00      	nop
 800479a:	e004      	b.n	80047a6 <DiagonalCube_Handle+0x1f6>
			break;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <DiagonalCube_Handle+0x1f6>
			break;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <DiagonalCube_Handle+0x1f6>
			break;
 80047a4:	bf00      	nop
	}
}
 80047a6:	bf00      	nop
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200001e4 	.word	0x200001e4
 80047b4:	200001f0 	.word	0x200001f0
 80047b8:	200001e5 	.word	0x200001e5
 80047bc:	200001e8 	.word	0x200001e8

080047c0 <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <DiagonalCube_Set_State+0x40>)
 80047c8:	2204      	movs	r2, #4
 80047ca:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	e007      	b.n	80047e2 <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 80047d2:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <DiagonalCube_Set_State+0x44>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3301      	adds	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b07      	cmp	r3, #7
 80047e6:	ddf4      	ble.n	80047d2 <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <DiagonalCube_Set_State+0x48>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <DiagonalCube_Set_State+0x4c>)
 80047f0:	2203      	movs	r2, #3
 80047f2:	701a      	strb	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000010 	.word	0x20000010
 8004804:	200001e8 	.word	0x200001e8
 8004808:	200001e5 	.word	0x200001e5
 800480c:	200001e4 	.word	0x200001e4

08004810 <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
 800481a:	460b      	mov	r3, r1
 800481c:	71bb      	strb	r3, [r7, #6]
 800481e:	4613      	mov	r3, r2
 8004820:	717b      	strb	r3, [r7, #5]
	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 8004822:	797b      	ldrb	r3, [r7, #5]
 8004824:	019a      	lsls	r2, r3, #6
 8004826:	79bb      	ldrb	r3, [r7, #6]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	441a      	add	r2, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	4413      	add	r3, r2
 8004830:	10db      	asrs	r3, r3, #3
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b34      	ldr	r3, [pc, #208]	; (8004908 <DisplayLed+0xf8>)
 8004836:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 8004838:	797b      	ldrb	r3, [r7, #5]
 800483a:	019b      	lsls	r3, r3, #6
 800483c:	b2da      	uxtb	r2, r3
 800483e:	79bb      	ldrb	r3, [r7, #6]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4413      	add	r3, r2
 8004846:	b2da      	uxtb	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4413      	add	r3, r2
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4b2e      	ldr	r3, [pc, #184]	; (8004908 <DisplayLed+0xf8>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <DisplayLed+0xfc>)
 800485c:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <DisplayLed+0xf8>)
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	797b      	ldrb	r3, [r7, #5]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <DisplayLed+0x100>)
 800486e:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 8004870:	797b      	ldrb	r3, [r7, #5]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d103      	bne.n	800487e <DisplayLed+0x6e>
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <DisplayLed+0x104>)
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e006      	b.n	800488c <DisplayLed+0x7c>
	else IClayer = 0x01 <<  z;
 800487e:	797b      	ldrb	r3, [r7, #5]
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	b2da      	uxtb	r2, r3
 8004888:	4b22      	ldr	r3, [pc, #136]	; (8004914 <DisplayLed+0x104>)
 800488a:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <DisplayLed+0xfc>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	2301      	movs	r3, #1
 8004894:	fa03 f102 	lsl.w	r1, r3, r2
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <DisplayLed+0x100>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	b2c9      	uxtb	r1, r1
 80048a0:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <DisplayLed+0x108>)
 80048a2:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <DisplayLed+0x104>)
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <DisplayLed+0x10c>)
 80048aa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	e009      	b.n	80048c6 <DisplayLed+0xb6>
	{
		dataOut[i] = ICcolumn[i-1];
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	4917      	ldr	r1, [pc, #92]	; (8004918 <DisplayLed+0x108>)
 80048ba:	5c89      	ldrb	r1, [r1, r2]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <DisplayLed+0x10c>)
 80048be:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	3301      	adds	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d9f2      	bls.n	80048b2 <DisplayLed+0xa2>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2140      	movs	r1, #64	; 0x40
 80048d0:	4813      	ldr	r0, [pc, #76]	; (8004920 <DisplayLed+0x110>)
 80048d2:	f7fd fc90 	bl	80021f6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 80048d6:	2364      	movs	r3, #100	; 0x64
 80048d8:	2209      	movs	r2, #9
 80048da:	4910      	ldr	r1, [pc, #64]	; (800491c <DisplayLed+0x10c>)
 80048dc:	4811      	ldr	r0, [pc, #68]	; (8004924 <DisplayLed+0x114>)
 80048de:	f7fe f9f7 	bl	8002cd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 80048e2:	2201      	movs	r2, #1
 80048e4:	2140      	movs	r1, #64	; 0x40
 80048e6:	480e      	ldr	r0, [pc, #56]	; (8004920 <DisplayLed+0x110>)
 80048e8:	f7fd fc85 	bl	80021f6 <HAL_GPIO_WritePin>
	IClayer = 0;
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <DisplayLed+0x104>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <DisplayLed+0x100>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <DisplayLed+0x108>)
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200001fd 	.word	0x200001fd
 800490c:	200001fe 	.word	0x200001fe
 8004910:	200001ff 	.word	0x200001ff
 8004914:	200001fc 	.word	0x200001fc
 8004918:	200001f4 	.word	0x200001f4
 800491c:	20000200 	.word	0x20000200
 8004920:	40010800 	.word	0x40010800
 8004924:	200000c4 	.word	0x200000c4

08004928 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 800492e:	4b93      	ldr	r3, [pc, #588]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	71da      	strb	r2, [r3, #7]
 8004934:	4b91      	ldr	r3, [pc, #580]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004936:	79da      	ldrb	r2, [r3, #7]
 8004938:	4b90      	ldr	r3, [pc, #576]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800493a:	719a      	strb	r2, [r3, #6]
 800493c:	4b8f      	ldr	r3, [pc, #572]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800493e:	799a      	ldrb	r2, [r3, #6]
 8004940:	4b8e      	ldr	r3, [pc, #568]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004942:	715a      	strb	r2, [r3, #5]
 8004944:	4b8d      	ldr	r3, [pc, #564]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004946:	795a      	ldrb	r2, [r3, #5]
 8004948:	4b8c      	ldr	r3, [pc, #560]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800494a:	711a      	strb	r2, [r3, #4]
 800494c:	4b8b      	ldr	r3, [pc, #556]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800494e:	791a      	ldrb	r2, [r3, #4]
 8004950:	4b8a      	ldr	r3, [pc, #552]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004952:	70da      	strb	r2, [r3, #3]
 8004954:	4b89      	ldr	r3, [pc, #548]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004956:	78da      	ldrb	r2, [r3, #3]
 8004958:	4b88      	ldr	r3, [pc, #544]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800495a:	709a      	strb	r2, [r3, #2]
 800495c:	4b87      	ldr	r3, [pc, #540]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800495e:	789a      	ldrb	r2, [r3, #2]
 8004960:	4b86      	ldr	r3, [pc, #536]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004962:	705a      	strb	r2, [r3, #1]
 8004964:	4b85      	ldr	r3, [pc, #532]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004966:	785a      	ldrb	r2, [r3, #1]
 8004968:	4b84      	ldr	r3, [pc, #528]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800496a:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 800496c:	4b83      	ldr	r3, [pc, #524]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800496e:	227e      	movs	r2, #126	; 0x7e
 8004970:	739a      	strb	r2, [r3, #14]
 8004972:	4b82      	ldr	r3, [pc, #520]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004974:	7b9a      	ldrb	r2, [r3, #14]
 8004976:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004978:	735a      	strb	r2, [r3, #13]
 800497a:	4b80      	ldr	r3, [pc, #512]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800497c:	7b5a      	ldrb	r2, [r3, #13]
 800497e:	4b7f      	ldr	r3, [pc, #508]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004980:	731a      	strb	r2, [r3, #12]
 8004982:	4b7e      	ldr	r3, [pc, #504]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004984:	7b1a      	ldrb	r2, [r3, #12]
 8004986:	4b7d      	ldr	r3, [pc, #500]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004988:	72da      	strb	r2, [r3, #11]
 800498a:	4b7c      	ldr	r3, [pc, #496]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800498c:	7ada      	ldrb	r2, [r3, #11]
 800498e:	4b7b      	ldr	r3, [pc, #492]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004990:	729a      	strb	r2, [r3, #10]
 8004992:	4b7a      	ldr	r3, [pc, #488]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004994:	7a9a      	ldrb	r2, [r3, #10]
 8004996:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004998:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 800499a:	4b78      	ldr	r3, [pc, #480]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 800499c:	223c      	movs	r2, #60	; 0x3c
 800499e:	755a      	strb	r2, [r3, #21]
 80049a0:	4b76      	ldr	r3, [pc, #472]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049a2:	7d5a      	ldrb	r2, [r3, #21]
 80049a4:	4b75      	ldr	r3, [pc, #468]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049a6:	751a      	strb	r2, [r3, #20]
 80049a8:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049aa:	7d1a      	ldrb	r2, [r3, #20]
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049ae:	74da      	strb	r2, [r3, #19]
 80049b0:	4b72      	ldr	r3, [pc, #456]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049b2:	7cda      	ldrb	r2, [r3, #19]
 80049b4:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049b6:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 80049b8:	4b70      	ldr	r3, [pc, #448]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049ba:	2218      	movs	r2, #24
 80049bc:	771a      	strb	r2, [r3, #28]
 80049be:	4b6f      	ldr	r3, [pc, #444]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049c0:	7f1a      	ldrb	r2, [r3, #28]
 80049c2:	4b6e      	ldr	r3, [pc, #440]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 80049c4:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 80049c6:	4b6e      	ldr	r3, [pc, #440]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 80049cc:	4b6c      	ldr	r3, [pc, #432]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 80049ce:	227e      	movs	r2, #126	; 0x7e
 80049d0:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 80049d2:	4b6b      	ldr	r3, [pc, #428]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 80049d4:	223c      	movs	r2, #60	; 0x3c
 80049d6:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 80049d8:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 80049da:	2218      	movs	r2, #24
 80049dc:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 80049de:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <GrowShrinkCube_Handle+0x25c>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	f200 80bc 	bhi.w	8004b60 <GrowShrinkCube_Handle+0x238>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <GrowShrinkCube_Handle+0xc8>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a5b 	.word	0x08004a5b
 80049f8:	08004ab3 	.word	0x08004ab3
 80049fc:	08004b0b 	.word	0x08004b0b
	{
		case TWO_X_TWO_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004a00:	f7fc fe84 	bl	800170c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	22c8      	movs	r2, #200	; 0xc8
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f0c0 80a8 	bcc.w	8004b64 <GrowShrinkCube_Handle+0x23c>
			{
				for (int j = 0; j < 8; j++)
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e013      	b.n	8004a42 <GrowShrinkCube_Handle+0x11a>
				{
					temp[j] = column_growshrink[3][j];
 8004a1a:	4a58      	ldr	r2, [pc, #352]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3318      	adds	r3, #24
 8004a22:	7819      	ldrb	r1, [r3, #0]
 8004a24:	463a      	mov	r2, r7
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 8004a2e:	4b54      	ldr	r3, [pc, #336]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 8004a30:	78da      	ldrb	r2, [r3, #3]
 8004a32:	463b      	mov	r3, r7
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f9f0 	bl	8005e1c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b07      	cmp	r3, #7
 8004a46:	dde8      	ble.n	8004a1a <GrowShrinkCube_Handle+0xf2>
				}
				time_start = HAL_GetTick();
 8004a48:	f7fc fe60 	bl	800170c <HAL_GetTick>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004a50:	6013      	str	r3, [r2, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 8004a52:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <GrowShrinkCube_Handle+0x25c>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a58:	e084      	b.n	8004b64 <GrowShrinkCube_Handle+0x23c>
		case FOUR_X_FOUR_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004a5a:	f7fc fe57 	bl	800170c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	22c8      	movs	r2, #200	; 0xc8
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d37d      	bcc.n	8004b68 <GrowShrinkCube_Handle+0x240>
			{
				for (int j = 0; j < 8; j++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e013      	b.n	8004a9a <GrowShrinkCube_Handle+0x172>
				{
					temp[j] = column_growshrink[2][j];
 8004a72:	4a42      	ldr	r2, [pc, #264]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	3310      	adds	r3, #16
 8004a7a:	7819      	ldrb	r1, [r3, #0]
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	460a      	mov	r2, r1
 8004a84:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 8004a88:	789a      	ldrb	r2, [r3, #2]
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 f9c4 	bl	8005e1c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3301      	adds	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	dde8      	ble.n	8004a72 <GrowShrinkCube_Handle+0x14a>
				}
				time_start = HAL_GetTick();
 8004aa0:	f7fc fe34 	bl	800170c <HAL_GetTick>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004aa8:	6013      	str	r3, [r2, #0]
				size_cube = SIX_X_SIX_CUBE;
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <GrowShrinkCube_Handle+0x25c>)
 8004aac:	2202      	movs	r2, #2
 8004aae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004ab0:	e05a      	b.n	8004b68 <GrowShrinkCube_Handle+0x240>
		case SIX_X_SIX_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004ab2:	f7fc fe2b 	bl	800170c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	22c8      	movs	r2, #200	; 0xc8
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d353      	bcc.n	8004b6c <GrowShrinkCube_Handle+0x244>
			{
				for (int j = 0; j < 8; j++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e013      	b.n	8004af2 <GrowShrinkCube_Handle+0x1ca>
				{
					temp[j] = column_growshrink[1][j];
 8004aca:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	7819      	ldrb	r1, [r3, #0]
 8004ad4:	463a      	mov	r2, r7
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	460a      	mov	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 8004ae0:	785a      	ldrb	r2, [r3, #1]
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f998 	bl	8005e1c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b07      	cmp	r3, #7
 8004af6:	dde8      	ble.n	8004aca <GrowShrinkCube_Handle+0x1a2>
				}
				time_start = HAL_GetTick();
 8004af8:	f7fc fe08 	bl	800170c <HAL_GetTick>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004b00:	6013      	str	r3, [r2, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <GrowShrinkCube_Handle+0x25c>)
 8004b04:	2203      	movs	r2, #3
 8004b06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b08:	e030      	b.n	8004b6c <GrowShrinkCube_Handle+0x244>
		case EIGHT_X_EIGHT_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8004b0a:	f7fc fdff 	bl	800170c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	22c8      	movs	r2, #200	; 0xc8
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d329      	bcc.n	8004b70 <GrowShrinkCube_Handle+0x248>
			{
				for (int j = 0; j < 8; j++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	e012      	b.n	8004b48 <GrowShrinkCube_Handle+0x220>
				{
					temp[j] = column_growshrink[0][j];
 8004b22:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <GrowShrinkCube_Handle+0x254>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4413      	add	r3, r2
 8004b28:	7819      	ldrb	r1, [r3, #0]
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4413      	add	r3, r2
 8004b30:	460a      	mov	r2, r1
 8004b32:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <GrowShrinkCube_Handle+0x258>)
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	463b      	mov	r3, r7
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 f96d 	bl	8005e1c <TransmitData>
				for (int j = 0; j < 8; j++)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b07      	cmp	r3, #7
 8004b4c:	dde9      	ble.n	8004b22 <GrowShrinkCube_Handle+0x1fa>
				}
				time_start = HAL_GetTick();
 8004b4e:	f7fc fddd 	bl	800170c <HAL_GetTick>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <GrowShrinkCube_Handle+0x260>)
 8004b56:	6013      	str	r3, [r2, #0]
				size_cube = TWO_X_TWO_CUBE;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <GrowShrinkCube_Handle+0x25c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b5e:	e007      	b.n	8004b70 <GrowShrinkCube_Handle+0x248>
		default:
			break;
 8004b60:	bf00      	nop
 8004b62:	e006      	b.n	8004b72 <GrowShrinkCube_Handle+0x24a>
			break;
 8004b64:	bf00      	nop
 8004b66:	e004      	b.n	8004b72 <GrowShrinkCube_Handle+0x24a>
			break;
 8004b68:	bf00      	nop
 8004b6a:	e002      	b.n	8004b72 <GrowShrinkCube_Handle+0x24a>
			break;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <GrowShrinkCube_Handle+0x24a>
			break;
 8004b70:	bf00      	nop
	}
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000210 	.word	0x20000210
 8004b80:	20000230 	.word	0x20000230
 8004b84:	20000209 	.word	0x20000209
 8004b88:	2000020c 	.word	0x2000020c

08004b8c <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <GrowShrinkCube_Set_State+0x5c>)
 8004b94:	2203      	movs	r2, #3
 8004b96:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e018      	b.n	8004bd0 <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <GrowShrinkCube_Set_State+0x60>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	e00a      	b.n	8004bc4 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 8004bae:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <GrowShrinkCube_Set_State+0x64>)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	441a      	add	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	4413      	add	r3, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b07      	cmp	r3, #7
 8004bc8:	ddf1      	ble.n	8004bae <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	607b      	str	r3, [r7, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	dde3      	ble.n	8004b9e <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <GrowShrinkCube_Set_State+0x68>)
 8004bd8:	2203      	movs	r2, #3
 8004bda:	701a      	strb	r2, [r3, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000010 	.word	0x20000010
 8004bec:	20000230 	.word	0x20000230
 8004bf0:	20000210 	.word	0x20000210
 8004bf4:	20000209 	.word	0x20000209

08004bf8 <Btn_press_Callback>:

Cube_Status currentEffect = WAVE_EFFECT;


void Btn_press_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
	switch(currentEffect){
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <Btn_press_Callback+0x90>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d837      	bhi.n	8004c7c <Btn_press_Callback+0x84>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <Btn_press_Callback+0x1c>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c6f 	.word	0x08004c6f
 8004c38:	08004c75 	.word	0x08004c75
	case TURN_OFF_ALL_LEDS:
		currentEffect = TURN_ON_ALL_LEDS;
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <Btn_press_Callback+0x90>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
		break;
 8004c42:	e01c      	b.n	8004c7e <Btn_press_Callback+0x86>
	case TURN_ON_ALL_LEDS:
		PlaneCube_Set_State();
 8004c44:	f000 fa16 	bl	8005074 <PlaneCube_Set_State>
		break;
 8004c48:	e019      	b.n	8004c7e <Btn_press_Callback+0x86>
	case SWEEP_ALL_LEDS:
		GrowShrinkCube_Set_State();
 8004c4a:	f7ff ff9f 	bl	8004b8c <GrowShrinkCube_Set_State>
		break;
 8004c4e:	e016      	b.n	8004c7e <Btn_press_Callback+0x86>
	case GROW_SHRINK_CUBE:
		DiagonalCube_Set_State();
 8004c50:	f7ff fdb6 	bl	80047c0 <DiagonalCube_Set_State>
		break;
 8004c54:	e013      	b.n	8004c7e <Btn_press_Callback+0x86>
	case DIAGONAL_CUBE:
		AroundEdgeCube_Set_State();
 8004c56:	f7fe fe83 	bl	8003960 <AroundEdgeCube_Set_State>
		break;
 8004c5a:	e010      	b.n	8004c7e <Btn_press_Callback+0x86>
	case AROUND_EDGE_CUBE:
		CountDownCube_Set_Sate();
 8004c5c:	f7ff fa2c 	bl	80040b8 <CountDownCube_Set_Sate>
		break;
 8004c60:	e00d      	b.n	8004c7e <Btn_press_Callback+0x86>
	case COUNT_DOWN_CUBE:
		RandomRainCube_Set_State();
 8004c62:	f000 fa9d 	bl	80051a0 <RandomRainCube_Set_State>
		break;
 8004c66:	e00a      	b.n	8004c7e <Btn_press_Callback+0x86>
	case RANDOM_RAIN_CUBE:
		SpiralCube_Set_State();
 8004c68:	f001 f8b4 	bl	8005dd4 <SpiralCube_Set_State>
		break;
 8004c6c:	e007      	b.n	8004c7e <Btn_press_Callback+0x86>
	case SPIRAL_CUBE:
		WaveCube_Set_State();
 8004c6e:	f001 f9dd 	bl	800602c <WaveCube_Set_State>
		break;
 8004c72:	e004      	b.n	8004c7e <Btn_press_Callback+0x86>
	case WAVE_EFFECT:
		currentEffect = TURN_OFF_ALL_LEDS;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <Btn_press_Callback+0x90>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
		break;
 8004c7a:	e000      	b.n	8004c7e <Btn_press_Callback+0x86>
	default:
		break;
 8004c7c:	bf00      	nop
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000010 	.word	0x20000010

08004c8c <Led_cube_Handle>:

void Led_cube_Handle(Cube_Status cube_state)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	switch (cube_state) {
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d836      	bhi.n	8004d0a <Led_cube_Handle+0x7e>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <Led_cube_Handle+0x18>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	08004cdf 	.word	0x08004cdf
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004ceb 	.word	0x08004ceb
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cff 	.word	0x08004cff
 8004cc8:	08004d05 	.word	0x08004d05
		case TURN_OFF_ALL_LEDS:
			clearCube();
 8004ccc:	f7fe ff27 	bl	8003b1e <clearCube>
			break;
 8004cd0:	e01c      	b.n	8004d0c <Led_cube_Handle+0x80>
		case TURN_ON_ALL_LEDS:
			lightCube();
 8004cd2:	f000 f81f 	bl	8004d14 <lightCube>
			break;
 8004cd6:	e019      	b.n	8004d0c <Led_cube_Handle+0x80>
		case SWEEP_ALL_LEDS:
			PlaneCube_Handle();
 8004cd8:	f000 f840 	bl	8004d5c <PlaneCube_Handle>
			break;
 8004cdc:	e016      	b.n	8004d0c <Led_cube_Handle+0x80>
		case GROW_SHRINK_CUBE:
			GrowShrinkCube_Handle();
 8004cde:	f7ff fe23 	bl	8004928 <GrowShrinkCube_Handle>
			break;
 8004ce2:	e013      	b.n	8004d0c <Led_cube_Handle+0x80>
		case DIAGONAL_CUBE:
			DiagonalCube_Handle();
 8004ce4:	f7ff fc64 	bl	80045b0 <DiagonalCube_Handle>
			break;
 8004ce8:	e010      	b.n	8004d0c <Led_cube_Handle+0x80>
		case AROUND_EDGE_CUBE:
			AroundEdgeCube_Handle();
 8004cea:	f7fe fdcf 	bl	800388c <AroundEdgeCube_Handle>
			break;
 8004cee:	e00d      	b.n	8004d0c <Led_cube_Handle+0x80>
		case COUNT_DOWN_CUBE:
			CountDownCube_Handle();
 8004cf0:	f7fe ff32 	bl	8003b58 <CountDownCube_Handle>
			break;
 8004cf4:	e00a      	b.n	8004d0c <Led_cube_Handle+0x80>
		case RANDOM_RAIN_CUBE:
			RandomRainCube_Handle(10);
 8004cf6:	200a      	movs	r0, #10
 8004cf8:	f000 f9ee 	bl	80050d8 <RandomRainCube_Handle>
			break;
 8004cfc:	e006      	b.n	8004d0c <Led_cube_Handle+0x80>
		case SPIRAL_CUBE:
			SpiralCube_Handle();
 8004cfe:	f000 fa5f 	bl	80051c0 <SpiralCube_Handle>
			break;
 8004d02:	e003      	b.n	8004d0c <Led_cube_Handle+0x80>
		case WAVE_EFFECT:
			WaveCube_Handle();
 8004d04:	f001 f8c0 	bl	8005e88 <WaveCube_Handle>
			break;
 8004d08:	e000      	b.n	8004d0c <Led_cube_Handle+0x80>
		default:
			break;
 8004d0a:	bf00      	nop
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <lightCube>:
#include "light_cube.h"

void lightCube()
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
	uint8_t column[8] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <lightCube+0x44>)
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d22:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0;  i < 8; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e00c      	b.n	8004d46 <lightCube+0x32>
	{
		TransmitData(column, 0x80 >> i);
 8004d2c:	2280      	movs	r2, #128	; 0x80
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	fa42 f303 	asr.w	r3, r2, r3
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f86e 	bl	8005e1c <TransmitData>
	for (int i = 0;  i < 8; i++)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b07      	cmp	r3, #7
 8004d4a:	ddef      	ble.n	8004d2c <lightCube+0x18>
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08008348 	.word	0x08008348

08004d5c <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
	switch(way_state){
 8004d62:	4b9a      	ldr	r3, [pc, #616]	; (8004fcc <PlaneCube_Handle+0x270>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f000 80fd 	beq.w	8004f66 <PlaneCube_Handle+0x20a>
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f300 8169 	bgt.w	8005044 <PlaneCube_Handle+0x2e8>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <PlaneCube_Handle+0x20>
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d06a      	beq.n	8004e50 <PlaneCube_Handle+0xf4>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8004d7a:	e163      	b.n	8005044 <PlaneCube_Handle+0x2e8>
		layer_plane = 0xff;
 8004d7c:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004d82:	f7fc fcc3 	bl	800170c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2264      	movs	r2, #100	; 0x64
 8004d90:	4293      	cmp	r3, r2
 8004d92:	f0c0 8159 	bcc.w	8005048 <PlaneCube_Handle+0x2ec>
			if (way)
 8004d96:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d026      	beq.n	8004dec <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 8004d9e:	4b8f      	ldr	r3, [pc, #572]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a8f      	ldr	r2, [pc, #572]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004da4:	21ff      	movs	r1, #255	; 0xff
 8004da6:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004da8:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	488c      	ldr	r0, [pc, #560]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004db0:	f001 f834 	bl	8005e1c <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8004db4:	4b8a      	ldr	r3, [pc, #552]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004db6:	79db      	ldrb	r3, [r3, #7]
 8004db8:	2bff      	cmp	r3, #255	; 0xff
 8004dba:	d103      	bne.n	8004dc4 <PlaneCube_Handle+0x68>
 8004dbc:	4b86      	ldr	r3, [pc, #536]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e004      	b.n	8004dce <PlaneCube_Handle+0x72>
				else i++;
 8004dc4:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	4a84      	ldr	r2, [pc, #528]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004dcc:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e007      	b.n	8004de4 <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 8004dd4:	4a82      	ldr	r2, [pc, #520]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b07      	cmp	r3, #7
 8004de8:	ddf4      	ble.n	8004dd4 <PlaneCube_Handle+0x78>
 8004dea:	e02b      	b.n	8004e44 <PlaneCube_Handle+0xe8>
				column_plane[i] = 0xff;
 8004dec:	4b7b      	ldr	r3, [pc, #492]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a7b      	ldr	r2, [pc, #492]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004df2:	21ff      	movs	r1, #255	; 0xff
 8004df4:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8004df6:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4878      	ldr	r0, [pc, #480]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004dfe:	f001 f80d 	bl	8005e1c <TransmitData>
				if (column_plane[0] == 0xff)
 8004e02:	4b77      	ldr	r3, [pc, #476]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2bff      	cmp	r3, #255	; 0xff
 8004e08:	d109      	bne.n	8004e1e <PlaneCube_Handle+0xc2>
						way = 1;
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
						i = 0;
 8004e10:	4b72      	ldr	r3, [pc, #456]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8004e16:	4b6d      	ldr	r3, [pc, #436]	; (8004fcc <PlaneCube_Handle+0x270>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e004      	b.n	8004e28 <PlaneCube_Handle+0xcc>
				else i--;
 8004e1e:	4b6f      	ldr	r3, [pc, #444]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a6d      	ldr	r2, [pc, #436]	; (8004fdc <PlaneCube_Handle+0x280>)
 8004e26:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e007      	b.n	8004e3e <PlaneCube_Handle+0xe2>
					column_plane[j] = 0;
 8004e2e:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	4413      	add	r3, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b07      	cmp	r3, #7
 8004e42:	ddf4      	ble.n	8004e2e <PlaneCube_Handle+0xd2>
			timer = HAL_GetTick();
 8004e44:	f7fc fc62 	bl	800170c <HAL_GetTick>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a62      	ldr	r2, [pc, #392]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004e4c:	6013      	str	r3, [r2, #0]
		break;
 8004e4e:	e0fb      	b.n	8005048 <PlaneCube_Handle+0x2ec>
		layer_plane = 0xff;
 8004e50:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8004e56:	4b62      	ldr	r3, [pc, #392]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <PlaneCube_Handle+0x134>
			for (int j = 0; j < 8; j++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e007      	b.n	8004e74 <PlaneCube_Handle+0x118>
				column_plane[j] = 1;
 8004e64:	4a5e      	ldr	r2, [pc, #376]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	ddf4      	ble.n	8004e64 <PlaneCube_Handle+0x108>
			TransmitData(column_plane, layer_plane);
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4857      	ldr	r0, [pc, #348]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004e82:	f000 ffcb 	bl	8005e1c <TransmitData>
			timer = HAL_GetTick();
 8004e86:	f7fc fc41 	bl	800170c <HAL_GetTick>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4a51      	ldr	r2, [pc, #324]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004e8e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8004e90:	f7fc fc3c 	bl	800170c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2264      	movs	r2, #100	; 0x64
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f0c0 80d4 	bcc.w	800504c <PlaneCube_Handle+0x2f0>
			if (way)
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d021      	beq.n	8004ef0 <PlaneCube_Handle+0x194>
				for (int j = 0; j < 8; j++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e00d      	b.n	8004ece <PlaneCube_Handle+0x172>
					column_plane[j] <<= 1;
 8004eb2:	4a4b      	ldr	r2, [pc, #300]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	b2d9      	uxtb	r1, r3
 8004ebe:	4a48      	ldr	r2, [pc, #288]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b07      	cmp	r3, #7
 8004ed2:	ddee      	ble.n	8004eb2 <PlaneCube_Handle+0x156>
				TransmitData(column_plane, layer_plane);
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4841      	ldr	r0, [pc, #260]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004edc:	f000 ff9e 	bl	8005e1c <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d138      	bne.n	8004f5a <PlaneCube_Handle+0x1fe>
 8004ee8:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e034      	b.n	8004f5a <PlaneCube_Handle+0x1fe>
				for (int j = 0; j < 8; j++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e00d      	b.n	8004f12 <PlaneCube_Handle+0x1b6>
					column_plane[j] >>= 1;
 8004ef6:	4a3a      	ldr	r2, [pc, #232]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	b2d9      	uxtb	r1, r3
 8004f02:	4a37      	ldr	r2, [pc, #220]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	460a      	mov	r2, r1
 8004f0a:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b07      	cmp	r3, #7
 8004f16:	ddee      	ble.n	8004ef6 <PlaneCube_Handle+0x19a>
				TransmitData(column_plane, layer_plane);
 8004f18:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4830      	ldr	r0, [pc, #192]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004f20:	f000 ff7c 	bl	8005e1c <TransmitData>
				if (column_plane[0] == 0x00)
 8004f24:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <PlaneCube_Handle+0x1fe>
					for (int j = 0; j < 8; j++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	e007      	b.n	8004f42 <PlaneCube_Handle+0x1e6>
						column_plane[j] = 0xff;
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4413      	add	r3, r2
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b07      	cmp	r3, #7
 8004f46:	ddf4      	ble.n	8004f32 <PlaneCube_Handle+0x1d6>
					layer_plane = 0;
 8004f48:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
					way = 1;
 8004f4e:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <PlaneCube_Handle+0x270>)
 8004f56:	2202      	movs	r2, #2
 8004f58:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8004f5a:	f7fc fbd7 	bl	800170c <HAL_GetTick>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4a1c      	ldr	r2, [pc, #112]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004f62:	6013      	str	r3, [r2, #0]
		break;
 8004f64:	e072      	b.n	800504c <PlaneCube_Handle+0x2f0>
		if(layer_plane == 0)
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <PlaneCube_Handle+0x22e>
			layer_plane = 1;
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8004f74:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4819      	ldr	r0, [pc, #100]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004f7c:	f000 ff4e 	bl	8005e1c <TransmitData>
			timer = HAL_GetTick();
 8004f80:	f7fc fbc4 	bl	800170c <HAL_GetTick>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004f88:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8004f8a:	f7fc fbbf 	bl	800170c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <PlaneCube_Handle+0x278>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2264      	movs	r2, #100	; 0x64
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d359      	bcc.n	8005050 <PlaneCube_Handle+0x2f4>
			if(way)
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <PlaneCube_Handle+0x288>
				layer_plane <<= 1;
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004fae:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	480a      	ldr	r0, [pc, #40]	; (8004fe0 <PlaneCube_Handle+0x284>)
 8004fb8:	f000 ff30 	bl	8005e1c <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <PlaneCube_Handle+0x274>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d139      	bne.n	8005038 <PlaneCube_Handle+0x2dc>
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <PlaneCube_Handle+0x27c>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e035      	b.n	8005038 <PlaneCube_Handle+0x2dc>
 8004fcc:	20000234 	.word	0x20000234
 8004fd0:	2000023c 	.word	0x2000023c
 8004fd4:	20000238 	.word	0x20000238
 8004fd8:	20000235 	.word	0x20000235
 8004fdc:	20000248 	.word	0x20000248
 8004fe0:	20000240 	.word	0x20000240
				layer_plane >>= 1;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <PlaneCube_Handle+0x300>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	4b1b      	ldr	r3, [pc, #108]	; (800505c <PlaneCube_Handle+0x300>)
 8004fee:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <PlaneCube_Handle+0x300>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	481a      	ldr	r0, [pc, #104]	; (8005060 <PlaneCube_Handle+0x304>)
 8004ff8:	f000 ff10 	bl	8005e1c <TransmitData>
				if(layer_plane == 0x01)
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <PlaneCube_Handle+0x300>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d119      	bne.n	8005038 <PlaneCube_Handle+0x2dc>
					for (int j = 0; j < 8; j++)
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e007      	b.n	800501a <PlaneCube_Handle+0x2be>
						column_plane[j] = 0;
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <PlaneCube_Handle+0x304>)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b07      	cmp	r3, #7
 800501e:	ddf4      	ble.n	800500a <PlaneCube_Handle+0x2ae>
					i = 0;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <PlaneCube_Handle+0x308>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
					way = 1;
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <PlaneCube_Handle+0x30c>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <PlaneCube_Handle+0x310>)
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <PlaneCube_Handle+0x300>)
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005038:	f7fc fb68 	bl	800170c <HAL_GetTick>
 800503c:	4603      	mov	r3, r0
 800503e:	4a0c      	ldr	r2, [pc, #48]	; (8005070 <PlaneCube_Handle+0x314>)
 8005040:	6013      	str	r3, [r2, #0]
		break;
 8005042:	e005      	b.n	8005050 <PlaneCube_Handle+0x2f4>
		break;
 8005044:	bf00      	nop
 8005046:	e004      	b.n	8005052 <PlaneCube_Handle+0x2f6>
		break;
 8005048:	bf00      	nop
 800504a:	e002      	b.n	8005052 <PlaneCube_Handle+0x2f6>
		break;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <PlaneCube_Handle+0x2f6>
		break;
 8005050:	bf00      	nop
	}
}
 8005052:	bf00      	nop
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000023c 	.word	0x2000023c
 8005060:	20000240 	.word	0x20000240
 8005064:	20000248 	.word	0x20000248
 8005068:	20000235 	.word	0x20000235
 800506c:	20000234 	.word	0x20000234
 8005070:	20000238 	.word	0x20000238

08005074 <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <PlaneCube_Set_State+0x4c>)
 800507c:	2202      	movs	r2, #2
 800507e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005080:	2300      	movs	r3, #0
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	e007      	b.n	8005096 <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8005086:	4a0f      	ldr	r2, [pc, #60]	; (80050c4 <PlaneCube_Set_State+0x50>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b07      	cmp	r3, #7
 800509a:	ddf4      	ble.n	8005086 <PlaneCube_Set_State+0x12>
	}
	i = 0;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <PlaneCube_Set_State+0x54>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
	way = 1;
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <PlaneCube_Set_State+0x58>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <PlaneCube_Set_State+0x5c>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <PlaneCube_Set_State+0x60>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000010 	.word	0x20000010
 80050c4:	20000240 	.word	0x20000240
 80050c8:	20000248 	.word	0x20000248
 80050cc:	20000235 	.word	0x20000235
 80050d0:	2000023c 	.word	0x2000023c
 80050d4:	20000234 	.word	0x20000234

080050d8 <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static uint8_t x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle(uint8_t rain_times)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
	srand(HAL_GetTick());
 80050e2:	f7fc fb13 	bl	800170c <HAL_GetTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 ffdd 	bl	80060a8 <srand>
	if (HAL_GetTick() - time_rain >= 50)
 80050ee:	f7fc fb0d 	bl	800170c <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <RandomRainCube_Handle+0xb8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b31      	cmp	r3, #49	; 0x31
 80050fc:	d912      	bls.n	8005124 <RandomRainCube_Handle+0x4c>
	{


			if (z == 0) z = 7;
 80050fe:	4b25      	ldr	r3, [pc, #148]	; (8005194 <RandomRainCube_Handle+0xbc>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <RandomRainCube_Handle+0x36>
 8005106:	4b23      	ldr	r3, [pc, #140]	; (8005194 <RandomRainCube_Handle+0xbc>)
 8005108:	2207      	movs	r2, #7
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e005      	b.n	800511a <RandomRainCube_Handle+0x42>
			else z--;
 800510e:	4b21      	ldr	r3, [pc, #132]	; (8005194 <RandomRainCube_Handle+0xbc>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <RandomRainCube_Handle+0xbc>)
 8005118:	701a      	strb	r2, [r3, #0]
			time_rain = HAL_GetTick();
 800511a:	f7fc faf7 	bl	800170c <HAL_GetTick>
 800511e:	4603      	mov	r3, r0
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <RandomRainCube_Handle+0xb8>)
 8005122:	6013      	str	r3, [r2, #0]
	}

	for (uint8_t n = 0; n < rain_times; n++)
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	e029      	b.n	800517e <RandomRainCube_Handle+0xa6>
	{
		if (z == 7)
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <RandomRainCube_Handle+0xbc>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b07      	cmp	r3, #7
 8005130:	d119      	bne.n	8005166 <RandomRainCube_Handle+0x8e>
		{
			x = rand() % 8;
 8005132:	f000 ffe7 	bl	8006104 <rand>
 8005136:	4603      	mov	r3, r0
 8005138:	425a      	negs	r2, r3
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	f002 0207 	and.w	r2, r2, #7
 8005142:	bf58      	it	pl
 8005144:	4253      	negpl	r3, r2
 8005146:	b2da      	uxtb	r2, r3
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <RandomRainCube_Handle+0xc0>)
 800514a:	701a      	strb	r2, [r3, #0]
			y = rand() % 8;
 800514c:	f000 ffda 	bl	8006104 <rand>
 8005150:	4603      	mov	r3, r0
 8005152:	425a      	negs	r2, r3
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	f002 0207 	and.w	r2, r2, #7
 800515c:	bf58      	it	pl
 800515e:	4253      	negpl	r3, r2
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <RandomRainCube_Handle+0xc4>)
 8005164:	701a      	strb	r2, [r3, #0]
		}

		DisplayLed(x, y, z);
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <RandomRainCube_Handle+0xc0>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <RandomRainCube_Handle+0xc4>)
 800516c:	7811      	ldrb	r1, [r2, #0]
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <RandomRainCube_Handle+0xbc>)
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fb4c 	bl	8004810 <DisplayLed>
	for (uint8_t n = 0; n < rain_times; n++)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	3301      	adds	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	7bfa      	ldrb	r2, [r7, #15]
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3d1      	bcc.n	800512a <RandomRainCube_Handle+0x52>
	}

}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000250 	.word	0x20000250
 8005194:	2000024e 	.word	0x2000024e
 8005198:	2000024c 	.word	0x2000024c
 800519c:	2000024d 	.word	0x2000024d

080051a0 <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	z = 7;
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <RandomRainCube_Set_State+0x18>)
 80051a6:	2207      	movs	r2, #7
 80051a8:	701a      	strb	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <RandomRainCube_Set_State+0x1c>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	701a      	strb	r2, [r3, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	2000024e 	.word	0x2000024e
 80051bc:	20000010 	.word	0x20000010

080051c0 <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
	switch (directRotate) {
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <SpiralCube_Handle+0x90>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01f      	beq.n	800520c <SpiralCube_Handle+0x4c>
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d13b      	bne.n	8005248 <SpiralCube_Handle+0x88>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <SpiralCube_Handle+0x94>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d817      	bhi.n	8005208 <SpiralCube_Handle+0x48>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <SpiralCube_Handle+0x20>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	080051f7 	.word	0x080051f7
 80051e8:	080051fd 	.word	0x080051fd
 80051ec:	08005203 	.word	0x08005203
			{
				case ROLL_BIGGEST:
					RollBiggestCounterClockWise_Handle();
 80051f0:	f000 f832 	bl	8005258 <RollBiggestCounterClockWise_Handle>
					break;
 80051f4:	e009      	b.n	800520a <SpiralCube_Handle+0x4a>
				case ROLL_BIGGER:
					RollBiggerCounterClockWise_Handle();
 80051f6:	f000 f8ef 	bl	80053d8 <RollBiggerCounterClockWise_Handle>
					break;
 80051fa:	e006      	b.n	800520a <SpiralCube_Handle+0x4a>
				case ROLL_MEDIUM:
					RollMediumCounterClockWise_Handle();
 80051fc:	f000 f9ac 	bl	8005558 <RollMediumCounterClockWise_Handle>
					break;
 8005200:	e003      	b.n	800520a <SpiralCube_Handle+0x4a>
				case ROLL_SMALL:
					RollSmallCounterClockWise_Handle();
 8005202:	f000 fa69 	bl	80056d8 <RollSmallCounterClockWise_Handle>
					break;
 8005206:	e000      	b.n	800520a <SpiralCube_Handle+0x4a>
				default:
					break;
 8005208:	bf00      	nop
			}
			break;
 800520a:	e01e      	b.n	800524a <SpiralCube_Handle+0x8a>
		case CLOCKWISE:
			switch (rollSize)
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <SpiralCube_Handle+0x94>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d817      	bhi.n	8005244 <SpiralCube_Handle+0x84>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <SpiralCube_Handle+0x5c>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005233 	.word	0x08005233
 8005224:	08005239 	.word	0x08005239
 8005228:	0800523f 	.word	0x0800523f
			{
				case ROLL_BIGGEST:
					RollBiggestClockWise_Handle();
 800522c:	f000 faf2 	bl	8005814 <RollBiggestClockWise_Handle>
					break;
 8005230:	e009      	b.n	8005246 <SpiralCube_Handle+0x86>
				case ROLL_BIGGER:
					RollBiggerClockWise_Handle();
 8005232:	f000 fbaf 	bl	8005994 <RollBiggerClockWise_Handle>
					break;
 8005236:	e006      	b.n	8005246 <SpiralCube_Handle+0x86>
				case ROLL_MEDIUM:
					RollMediumClockWise_Handle();
 8005238:	f000 fc6c 	bl	8005b14 <RollMediumClockWise_Handle>
					break;
 800523c:	e003      	b.n	8005246 <SpiralCube_Handle+0x86>
				case ROLL_SMALL:
					RollSmallClockWise_Handle();
 800523e:	f000 fd29 	bl	8005c94 <RollSmallClockWise_Handle>
					break;
 8005242:	e000      	b.n	8005246 <SpiralCube_Handle+0x86>
				default:
					break;
 8005244:	bf00      	nop
			}
			break;
 8005246:	e000      	b.n	800524a <SpiralCube_Handle+0x8a>
		default:
			break;
 8005248:	bf00      	nop
	}
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000256 	.word	0x20000256
 8005254:	20000254 	.word	0x20000254

08005258 <RollBiggestCounterClockWise_Handle>:

void RollBiggestCounterClockWise_Handle()
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
	switch (axisDirection)
 800525c:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <RollBiggestCounterClockWise_Handle+0x16c>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	f200 80a3 	bhi.w	80053ac <RollBiggestCounterClockWise_Handle+0x154>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <RollBiggestCounterClockWise_Handle+0x14>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	0800527d 	.word	0x0800527d
 8005270:	080052c9 	.word	0x080052c9
 8005274:	08005313 	.word	0x08005313
 8005278:	0800535d 	.word	0x0800535d
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800527c:	f7fc fa46 	bl	800170c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	4b51      	ldr	r3, [pc, #324]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	223c      	movs	r2, #60	; 0x3c
 800528a:	4293      	cmp	r3, r2
 800528c:	f0c0 8090 	bcc.w	80053b0 <RollBiggestCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005290:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4a4e      	ldr	r2, [pc, #312]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 8005296:	7811      	ldrb	r1, [r2, #0]
 8005298:	2208      	movs	r2, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fab8 	bl	8004810 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 80052a0:	4b4b      	ldr	r3, [pc, #300]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	d103      	bne.n	80052b0 <RollBiggestCounterClockWise_Handle+0x58>
 80052a8:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <RollBiggestCounterClockWise_Handle+0x16c>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e005      	b.n	80052bc <RollBiggestCounterClockWise_Handle+0x64>
				else y++;
 80052b0:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 80052ba:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80052bc:	f7fc fa26 	bl	800170c <HAL_GetTick>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 80052c4:	6013      	str	r3, [r2, #0]
			}
			break;
 80052c6:	e073      	b.n	80053b0 <RollBiggestCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80052c8:	f7fc fa20 	bl	800170c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	223c      	movs	r2, #60	; 0x3c
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d36c      	bcc.n	80053b4 <RollBiggestCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 80052e0:	7811      	ldrb	r1, [r2, #0]
 80052e2:	2208      	movs	r2, #8
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fa93 	bl	8004810 <DisplayLed>
				if (x == 7) axisDirection = Y_AXIS_2;
 80052ea:	4b38      	ldr	r3, [pc, #224]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b07      	cmp	r3, #7
 80052f0:	d103      	bne.n	80052fa <RollBiggestCounterClockWise_Handle+0xa2>
 80052f2:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <RollBiggestCounterClockWise_Handle+0x16c>)
 80052f4:	2202      	movs	r2, #2
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e005      	b.n	8005306 <RollBiggestCounterClockWise_Handle+0xae>
				else x++;
 80052fa:	4b34      	ldr	r3, [pc, #208]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b32      	ldr	r3, [pc, #200]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005304:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005306:	f7fc fa01 	bl	800170c <HAL_GetTick>
 800530a:	4603      	mov	r3, r0
 800530c:	4a2e      	ldr	r2, [pc, #184]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 800530e:	6013      	str	r3, [r2, #0]
			}
			break;
 8005310:	e050      	b.n	80053b4 <RollBiggestCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005312:	f7fc f9fb 	bl	800170c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	4b2b      	ldr	r3, [pc, #172]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	223c      	movs	r2, #60	; 0x3c
 8005320:	4293      	cmp	r3, r2
 8005322:	d349      	bcc.n	80053b8 <RollBiggestCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005324:	4b29      	ldr	r3, [pc, #164]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 800532a:	7811      	ldrb	r1, [r2, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fa6e 	bl	8004810 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <RollBiggestCounterClockWise_Handle+0xec>
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <RollBiggestCounterClockWise_Handle+0x16c>)
 800533e:	2203      	movs	r2, #3
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e005      	b.n	8005350 <RollBiggestCounterClockWise_Handle+0xf8>
				else y--;
 8005344:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 800534e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005350:	f7fc f9dc 	bl	800170c <HAL_GetTick>
 8005354:	4603      	mov	r3, r0
 8005356:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 8005358:	6013      	str	r3, [r2, #0]
			}
			break;
 800535a:	e02d      	b.n	80053b8 <RollBiggestCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800535c:	f7fc f9d6 	bl	800170c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	223c      	movs	r2, #60	; 0x3c
 800536a:	4293      	cmp	r3, r2
 800536c:	d326      	bcc.n	80053bc <RollBiggestCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800536e:	4b17      	ldr	r3, [pc, #92]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <RollBiggestCounterClockWise_Handle+0x178>)
 8005374:	7811      	ldrb	r1, [r2, #0]
 8005376:	2208      	movs	r2, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fa49 	bl	8004810 <DisplayLed>
				if (x == 1)
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d106      	bne.n	8005394 <RollBiggestCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <RollBiggestCounterClockWise_Handle+0x16c>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <RollBiggestCounterClockWise_Handle+0x17c>)
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e005      	b.n	80053a0 <RollBiggestCounterClockWise_Handle+0x148>
				}
				else x--;
 8005394:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	3b01      	subs	r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <RollBiggestCounterClockWise_Handle+0x174>)
 800539e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80053a0:	f7fc f9b4 	bl	800170c <HAL_GetTick>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <RollBiggestCounterClockWise_Handle+0x170>)
 80053a8:	6013      	str	r3, [r2, #0]
			}
			break;
 80053aa:	e007      	b.n	80053bc <RollBiggestCounterClockWise_Handle+0x164>
		default:
			break;
 80053ac:	bf00      	nop
 80053ae:	e006      	b.n	80053be <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <RollBiggestCounterClockWise_Handle+0x166>
			break;
 80053bc:	bf00      	nop
	}
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000255 	.word	0x20000255
 80053c8:	2000025c 	.word	0x2000025c
 80053cc:	20000257 	.word	0x20000257
 80053d0:	20000258 	.word	0x20000258
 80053d4:	20000254 	.word	0x20000254

080053d8 <RollBiggerCounterClockWise_Handle>:

void RollBiggerCounterClockWise_Handle()
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	switch (axisDirection)
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <RollBiggerCounterClockWise_Handle+0x16c>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	f200 80a3 	bhi.w	800552c <RollBiggerCounterClockWise_Handle+0x154>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <RollBiggerCounterClockWise_Handle+0x14>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005449 	.word	0x08005449
 80053f4:	08005493 	.word	0x08005493
 80053f8:	080054dd 	.word	0x080054dd
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80053fc:	f7fc f986 	bl	800170c <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	223c      	movs	r2, #60	; 0x3c
 800540a:	4293      	cmp	r3, r2
 800540c:	f0c0 8090 	bcc.w	8005530 <RollBiggerCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005410:	4b4e      	ldr	r3, [pc, #312]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4a4e      	ldr	r2, [pc, #312]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 8005416:	7811      	ldrb	r1, [r2, #0]
 8005418:	2208      	movs	r2, #8
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f9f8 	bl	8004810 <DisplayLed>
				if (y  == 6) axisDirection = X_AXIS_1;
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d103      	bne.n	8005430 <RollBiggerCounterClockWise_Handle+0x58>
 8005428:	4b46      	ldr	r3, [pc, #280]	; (8005544 <RollBiggerCounterClockWise_Handle+0x16c>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e005      	b.n	800543c <RollBiggerCounterClockWise_Handle+0x64>
				else y++;
 8005430:	4b47      	ldr	r3, [pc, #284]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b45      	ldr	r3, [pc, #276]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 800543a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800543c:	f7fc f966 	bl	800170c <HAL_GetTick>
 8005440:	4603      	mov	r3, r0
 8005442:	4a41      	ldr	r2, [pc, #260]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 8005444:	6013      	str	r3, [r2, #0]
			}
			break;
 8005446:	e073      	b.n	8005530 <RollBiggerCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005448:	f7fc f960 	bl	800170c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	4b3e      	ldr	r3, [pc, #248]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	223c      	movs	r2, #60	; 0x3c
 8005456:	4293      	cmp	r3, r2
 8005458:	d36c      	bcc.n	8005534 <RollBiggerCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 800545a:	4b3c      	ldr	r3, [pc, #240]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	4a3c      	ldr	r2, [pc, #240]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 8005460:	7811      	ldrb	r1, [r2, #0]
 8005462:	2208      	movs	r2, #8
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff f9d3 	bl	8004810 <DisplayLed>
				if (x  == 6) axisDirection = Y_AXIS_2;
 800546a:	4b38      	ldr	r3, [pc, #224]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d103      	bne.n	800547a <RollBiggerCounterClockWise_Handle+0xa2>
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <RollBiggerCounterClockWise_Handle+0x16c>)
 8005474:	2202      	movs	r2, #2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e005      	b.n	8005486 <RollBiggerCounterClockWise_Handle+0xae>
				else x++;
 800547a:	4b34      	ldr	r3, [pc, #208]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b32      	ldr	r3, [pc, #200]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 8005484:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005486:	f7fc f941 	bl	800170c <HAL_GetTick>
 800548a:	4603      	mov	r3, r0
 800548c:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 800548e:	6013      	str	r3, [r2, #0]
			}
			break;
 8005490:	e050      	b.n	8005534 <RollBiggerCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005492:	f7fc f93b 	bl	800170c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	223c      	movs	r2, #60	; 0x3c
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d349      	bcc.n	8005538 <RollBiggerCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80054a4:	4b29      	ldr	r3, [pc, #164]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 80054aa:	7811      	ldrb	r1, [r2, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff f9ae 	bl	8004810 <DisplayLed>
				if (y  == 1) axisDirection = X_AXIS_2;
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d103      	bne.n	80054c4 <RollBiggerCounterClockWise_Handle+0xec>
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <RollBiggerCounterClockWise_Handle+0x16c>)
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e005      	b.n	80054d0 <RollBiggerCounterClockWise_Handle+0xf8>
				else y--;
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b20      	ldr	r3, [pc, #128]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 80054ce:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80054d0:	f7fc f91c 	bl	800170c <HAL_GetTick>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 80054d8:	6013      	str	r3, [r2, #0]
			}
			break;
 80054da:	e02d      	b.n	8005538 <RollBiggerCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80054dc:	f7fc f916 	bl	800170c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	223c      	movs	r2, #60	; 0x3c
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d326      	bcc.n	800553c <RollBiggerCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80054ee:	4b17      	ldr	r3, [pc, #92]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <RollBiggerCounterClockWise_Handle+0x178>)
 80054f4:	7811      	ldrb	r1, [r2, #0]
 80054f6:	2208      	movs	r2, #8
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f989 	bl	8004810 <DisplayLed>
				if (x  == 2)
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d106      	bne.n	8005514 <RollBiggerCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <RollBiggerCounterClockWise_Handle+0x16c>)
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <RollBiggerCounterClockWise_Handle+0x17c>)
 800550e:	2202      	movs	r2, #2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e005      	b.n	8005520 <RollBiggerCounterClockWise_Handle+0x148>
				}
				else x--;
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <RollBiggerCounterClockWise_Handle+0x174>)
 800551e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005520:	f7fc f8f4 	bl	800170c <HAL_GetTick>
 8005524:	4603      	mov	r3, r0
 8005526:	4a08      	ldr	r2, [pc, #32]	; (8005548 <RollBiggerCounterClockWise_Handle+0x170>)
 8005528:	6013      	str	r3, [r2, #0]
			}
			break;
 800552a:	e007      	b.n	800553c <RollBiggerCounterClockWise_Handle+0x164>
		default:
			break;
 800552c:	bf00      	nop
 800552e:	e006      	b.n	800553e <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005530:	bf00      	nop
 8005532:	e004      	b.n	800553e <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <RollBiggerCounterClockWise_Handle+0x166>
			break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <RollBiggerCounterClockWise_Handle+0x166>
			break;
 800553c:	bf00      	nop
	}
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000255 	.word	0x20000255
 8005548:	2000025c 	.word	0x2000025c
 800554c:	20000257 	.word	0x20000257
 8005550:	20000258 	.word	0x20000258
 8005554:	20000254 	.word	0x20000254

08005558 <RollMediumCounterClockWise_Handle>:

void RollMediumCounterClockWise_Handle()
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <RollMediumCounterClockWise_Handle+0x16c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b03      	cmp	r3, #3
 8005562:	f200 80a3 	bhi.w	80056ac <RollMediumCounterClockWise_Handle+0x154>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <RollMediumCounterClockWise_Handle+0x14>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	0800557d 	.word	0x0800557d
 8005570:	080055c9 	.word	0x080055c9
 8005574:	08005613 	.word	0x08005613
 8005578:	0800565d 	.word	0x0800565d
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800557c:	f7fc f8c6 	bl	800170c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	223c      	movs	r2, #60	; 0x3c
 800558a:	4293      	cmp	r3, r2
 800558c:	f0c0 8090 	bcc.w	80056b0 <RollMediumCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005590:	4b4e      	ldr	r3, [pc, #312]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	4a4e      	ldr	r2, [pc, #312]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 8005596:	7811      	ldrb	r1, [r2, #0]
 8005598:	2208      	movs	r2, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f938 	bl	8004810 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 80055a0:	4b4b      	ldr	r3, [pc, #300]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b05      	cmp	r3, #5
 80055a6:	d103      	bne.n	80055b0 <RollMediumCounterClockWise_Handle+0x58>
 80055a8:	4b46      	ldr	r3, [pc, #280]	; (80056c4 <RollMediumCounterClockWise_Handle+0x16c>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e005      	b.n	80055bc <RollMediumCounterClockWise_Handle+0x64>
				else y++;
 80055b0:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	4b45      	ldr	r3, [pc, #276]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 80055ba:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80055bc:	f7fc f8a6 	bl	800170c <HAL_GetTick>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4a41      	ldr	r2, [pc, #260]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 80055c4:	6013      	str	r3, [r2, #0]
			}
			break;
 80055c6:	e073      	b.n	80056b0 <RollMediumCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80055c8:	f7fc f8a0 	bl	800170c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b3e      	ldr	r3, [pc, #248]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	223c      	movs	r2, #60	; 0x3c
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d36c      	bcc.n	80056b4 <RollMediumCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80055da:	4b3c      	ldr	r3, [pc, #240]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	4a3c      	ldr	r2, [pc, #240]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 80055e0:	7811      	ldrb	r1, [r2, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff f913 	bl	8004810 <DisplayLed>
				if (x  == 5) axisDirection = Y_AXIS_2;
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d103      	bne.n	80055fa <RollMediumCounterClockWise_Handle+0xa2>
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <RollMediumCounterClockWise_Handle+0x16c>)
 80055f4:	2202      	movs	r2, #2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e005      	b.n	8005606 <RollMediumCounterClockWise_Handle+0xae>
				else x++;
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	4b32      	ldr	r3, [pc, #200]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005604:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005606:	f7fc f881 	bl	800170c <HAL_GetTick>
 800560a:	4603      	mov	r3, r0
 800560c:	4a2e      	ldr	r2, [pc, #184]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 800560e:	6013      	str	r3, [r2, #0]
			}
			break;
 8005610:	e050      	b.n	80056b4 <RollMediumCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005612:	f7fc f87b 	bl	800170c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	223c      	movs	r2, #60	; 0x3c
 8005620:	4293      	cmp	r3, r2
 8005622:	d349      	bcc.n	80056b8 <RollMediumCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005624:	4b29      	ldr	r3, [pc, #164]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 800562a:	7811      	ldrb	r1, [r2, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff f8ee 	bl	8004810 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d103      	bne.n	8005644 <RollMediumCounterClockWise_Handle+0xec>
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <RollMediumCounterClockWise_Handle+0x16c>)
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e005      	b.n	8005650 <RollMediumCounterClockWise_Handle+0xf8>
				else y--;
 8005644:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 800564e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005650:	f7fc f85c 	bl	800170c <HAL_GetTick>
 8005654:	4603      	mov	r3, r0
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 8005658:	6013      	str	r3, [r2, #0]
			}
			break;
 800565a:	e02d      	b.n	80056b8 <RollMediumCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800565c:	f7fc f856 	bl	800170c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	223c      	movs	r2, #60	; 0x3c
 800566a:	4293      	cmp	r3, r2
 800566c:	d326      	bcc.n	80056bc <RollMediumCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800566e:	4b17      	ldr	r3, [pc, #92]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <RollMediumCounterClockWise_Handle+0x178>)
 8005674:	7811      	ldrb	r1, [r2, #0]
 8005676:	2208      	movs	r2, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f8c9 	bl	8004810 <DisplayLed>
				if (x  == 3)
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d106      	bne.n	8005694 <RollMediumCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <RollMediumCounterClockWise_Handle+0x16c>)
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <RollMediumCounterClockWise_Handle+0x17c>)
 800568e:	2203      	movs	r2, #3
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e005      	b.n	80056a0 <RollMediumCounterClockWise_Handle+0x148>
				}
				else x--;
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <RollMediumCounterClockWise_Handle+0x174>)
 800569e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80056a0:	f7fc f834 	bl	800170c <HAL_GetTick>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <RollMediumCounterClockWise_Handle+0x170>)
 80056a8:	6013      	str	r3, [r2, #0]
			}
			break;
 80056aa:	e007      	b.n	80056bc <RollMediumCounterClockWise_Handle+0x164>

		default:
			break;
 80056ac:	bf00      	nop
 80056ae:	e006      	b.n	80056be <RollMediumCounterClockWise_Handle+0x166>
			break;
 80056b0:	bf00      	nop
 80056b2:	e004      	b.n	80056be <RollMediumCounterClockWise_Handle+0x166>
			break;
 80056b4:	bf00      	nop
 80056b6:	e002      	b.n	80056be <RollMediumCounterClockWise_Handle+0x166>
			break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <RollMediumCounterClockWise_Handle+0x166>
			break;
 80056bc:	bf00      	nop
	}
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000255 	.word	0x20000255
 80056c8:	2000025c 	.word	0x2000025c
 80056cc:	20000257 	.word	0x20000257
 80056d0:	20000258 	.word	0x20000258
 80056d4:	20000254 	.word	0x20000254

080056d8 <RollSmallCounterClockWise_Handle>:

void RollSmallCounterClockWise_Handle()
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80056dc:	4b47      	ldr	r3, [pc, #284]	; (80057fc <RollSmallCounterClockWise_Handle+0x124>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d050      	beq.n	8005786 <RollSmallCounterClockWise_Handle+0xae>
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	dc7f      	bgt.n	80057e8 <RollSmallCounterClockWise_Handle+0x110>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <RollSmallCounterClockWise_Handle+0x1a>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d025      	beq.n	800573c <RollSmallCounterClockWise_Handle+0x64>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 80056f0:	e07a      	b.n	80057e8 <RollSmallCounterClockWise_Handle+0x110>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80056f2:	f7fc f80b 	bl	800170c <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4b41      	ldr	r3, [pc, #260]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	223c      	movs	r2, #60	; 0x3c
 8005700:	4293      	cmp	r3, r2
 8005702:	d373      	bcc.n	80057ec <RollSmallCounterClockWise_Handle+0x114>
				DisplayLed(x, y, z);
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 800570a:	7811      	ldrb	r1, [r2, #0]
 800570c:	2208      	movs	r2, #8
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff f87e 	bl	8004810 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8005714:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d103      	bne.n	8005724 <RollSmallCounterClockWise_Handle+0x4c>
 800571c:	4b37      	ldr	r3, [pc, #220]	; (80057fc <RollSmallCounterClockWise_Handle+0x124>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e005      	b.n	8005730 <RollSmallCounterClockWise_Handle+0x58>
				else y++ ;
 8005724:	4b38      	ldr	r3, [pc, #224]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 800572e:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005730:	f7fb ffec 	bl	800170c <HAL_GetTick>
 8005734:	4603      	mov	r3, r0
 8005736:	4a32      	ldr	r2, [pc, #200]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 8005738:	6013      	str	r3, [r2, #0]
			break;
 800573a:	e057      	b.n	80057ec <RollSmallCounterClockWise_Handle+0x114>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800573c:	f7fb ffe6 	bl	800170c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	223c      	movs	r2, #60	; 0x3c
 800574a:	4293      	cmp	r3, r2
 800574c:	d350      	bcc.n	80057f0 <RollSmallCounterClockWise_Handle+0x118>
				DisplayLed(x, y, z);
 800574e:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4a2d      	ldr	r2, [pc, #180]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 8005754:	7811      	ldrb	r1, [r2, #0]
 8005756:	2208      	movs	r2, #8
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f859 	bl	8004810 <DisplayLed>
				if (x  == 4) axisDirection = Y_AXIS_2;
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d103      	bne.n	800576e <RollSmallCounterClockWise_Handle+0x96>
 8005766:	4b25      	ldr	r3, [pc, #148]	; (80057fc <RollSmallCounterClockWise_Handle+0x124>)
 8005768:	2202      	movs	r2, #2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e005      	b.n	800577a <RollSmallCounterClockWise_Handle+0xa2>
				else x++;
 800576e:	4b25      	ldr	r3, [pc, #148]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	b2da      	uxtb	r2, r3
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 8005778:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800577a:	f7fb ffc7 	bl	800170c <HAL_GetTick>
 800577e:	4603      	mov	r3, r0
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 8005782:	6013      	str	r3, [r2, #0]
			break;
 8005784:	e034      	b.n	80057f0 <RollSmallCounterClockWise_Handle+0x118>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8005786:	f7fb ffc1 	bl	800170c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	223c      	movs	r2, #60	; 0x3c
 8005794:	4293      	cmp	r3, r2
 8005796:	d32d      	bcc.n	80057f4 <RollSmallCounterClockWise_Handle+0x11c>
				DisplayLed(x, y, z);
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 800579e:	7811      	ldrb	r1, [r2, #0]
 80057a0:	2208      	movs	r2, #8
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff f834 	bl	8004810 <DisplayLed>
				if (y == 3)
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d10f      	bne.n	80057d0 <RollSmallCounterClockWise_Handle+0xf8>
					directRotate = CLOCKWISE;
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <RollSmallCounterClockWise_Handle+0x134>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <RollSmallCounterClockWise_Handle+0x124>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <RollSmallCounterClockWise_Handle+0x138>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
					y = 0;
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
					x = 7;
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <RollSmallCounterClockWise_Handle+0x12c>)
 80057ca:	2207      	movs	r2, #7
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e005      	b.n	80057dc <RollSmallCounterClockWise_Handle+0x104>
				else y--;
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <RollSmallCounterClockWise_Handle+0x130>)
 80057da:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80057dc:	f7fb ff96 	bl	800170c <HAL_GetTick>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a07      	ldr	r2, [pc, #28]	; (8005800 <RollSmallCounterClockWise_Handle+0x128>)
 80057e4:	6013      	str	r3, [r2, #0]
			break;
 80057e6:	e005      	b.n	80057f4 <RollSmallCounterClockWise_Handle+0x11c>
			break;
 80057e8:	bf00      	nop
 80057ea:	e004      	b.n	80057f6 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 80057f4:	bf00      	nop
	}
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000255 	.word	0x20000255
 8005800:	2000025c 	.word	0x2000025c
 8005804:	20000257 	.word	0x20000257
 8005808:	20000258 	.word	0x20000258
 800580c:	20000256 	.word	0x20000256
 8005810:	20000254 	.word	0x20000254

08005814 <RollBiggestClockWise_Handle>:

void RollBiggestClockWise_Handle()
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <RollBiggestClockWise_Handle+0x16c>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b03      	cmp	r3, #3
 800581e:	f200 80a3 	bhi.w	8005968 <RollBiggestClockWise_Handle+0x154>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <RollBiggestClockWise_Handle+0x14>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005839 	.word	0x08005839
 800582c:	08005885 	.word	0x08005885
 8005830:	080058cf 	.word	0x080058cf
 8005834:	08005919 	.word	0x08005919
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005838:	f7fb ff68 	bl	800170c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	4b51      	ldr	r3, [pc, #324]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	223c      	movs	r2, #60	; 0x3c
 8005846:	4293      	cmp	r3, r2
 8005848:	f0c0 8090 	bcc.w	800596c <RollBiggestClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800584c:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	4a4e      	ldr	r2, [pc, #312]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 8005852:	7811      	ldrb	r1, [r2, #0]
 8005854:	2208      	movs	r2, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe ffda 	bl	8004810 <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 800585c:	4b4b      	ldr	r3, [pc, #300]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b07      	cmp	r3, #7
 8005862:	d103      	bne.n	800586c <RollBiggestClockWise_Handle+0x58>
 8005864:	4b46      	ldr	r3, [pc, #280]	; (8005980 <RollBiggestClockWise_Handle+0x16c>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e005      	b.n	8005878 <RollBiggestClockWise_Handle+0x64>
				else y++;
 800586c:	4b47      	ldr	r3, [pc, #284]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	b2da      	uxtb	r2, r3
 8005874:	4b45      	ldr	r3, [pc, #276]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 8005876:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005878:	f7fb ff48 	bl	800170c <HAL_GetTick>
 800587c:	4603      	mov	r3, r0
 800587e:	4a41      	ldr	r2, [pc, #260]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 8005880:	6013      	str	r3, [r2, #0]
			}
			break;
 8005882:	e073      	b.n	800596c <RollBiggestClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005884:	f7fb ff42 	bl	800170c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	223c      	movs	r2, #60	; 0x3c
 8005892:	4293      	cmp	r3, r2
 8005894:	d36c      	bcc.n	8005970 <RollBiggestClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005896:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	4a3c      	ldr	r2, [pc, #240]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 800589c:	7811      	ldrb	r1, [r2, #0]
 800589e:	2208      	movs	r2, #8
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe ffb5 	bl	8004810 <DisplayLed>
				if (x == 0) axisDirection = Y_AXIS_2;
 80058a6:	4b38      	ldr	r3, [pc, #224]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <RollBiggestClockWise_Handle+0xa2>
 80058ae:	4b34      	ldr	r3, [pc, #208]	; (8005980 <RollBiggestClockWise_Handle+0x16c>)
 80058b0:	2202      	movs	r2, #2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e005      	b.n	80058c2 <RollBiggestClockWise_Handle+0xae>
				else x--;
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b32      	ldr	r3, [pc, #200]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 80058c0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80058c2:	f7fb ff23 	bl	800170c <HAL_GetTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 80058ca:	6013      	str	r3, [r2, #0]
			}
			break;
 80058cc:	e050      	b.n	8005970 <RollBiggestClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80058ce:	f7fb ff1d 	bl	800170c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	223c      	movs	r2, #60	; 0x3c
 80058dc:	4293      	cmp	r3, r2
 80058de:	d349      	bcc.n	8005974 <RollBiggestClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 80058e6:	7811      	ldrb	r1, [r2, #0]
 80058e8:	2208      	movs	r2, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ff90 	bl	8004810 <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <RollBiggestClockWise_Handle+0xec>
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <RollBiggestClockWise_Handle+0x16c>)
 80058fa:	2203      	movs	r2, #3
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e005      	b.n	800590c <RollBiggestClockWise_Handle+0xf8>
				else y--;
 8005900:	4b22      	ldr	r3, [pc, #136]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	3b01      	subs	r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 800590a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800590c:	f7fb fefe 	bl	800170c <HAL_GetTick>
 8005910:	4603      	mov	r3, r0
 8005912:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 8005914:	6013      	str	r3, [r2, #0]
			}
			break;
 8005916:	e02d      	b.n	8005974 <RollBiggestClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005918:	f7fb fef8 	bl	800170c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	4b19      	ldr	r3, [pc, #100]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	223c      	movs	r2, #60	; 0x3c
 8005926:	4293      	cmp	r3, r2
 8005928:	d326      	bcc.n	8005978 <RollBiggestClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800592a:	4b17      	ldr	r3, [pc, #92]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <RollBiggestClockWise_Handle+0x178>)
 8005930:	7811      	ldrb	r1, [r2, #0]
 8005932:	2208      	movs	r2, #8
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe ff6b 	bl	8004810 <DisplayLed>
				if (x == 6)
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d106      	bne.n	8005950 <RollBiggestClockWise_Handle+0x13c>
				{
					rollSize = ROLL_BIGGER;
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <RollBiggestClockWise_Handle+0x17c>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <RollBiggestClockWise_Handle+0x16c>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e005      	b.n	800595c <RollBiggestClockWise_Handle+0x148>
				}
				else x++;
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <RollBiggestClockWise_Handle+0x174>)
 800595a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800595c:	f7fb fed6 	bl	800170c <HAL_GetTick>
 8005960:	4603      	mov	r3, r0
 8005962:	4a08      	ldr	r2, [pc, #32]	; (8005984 <RollBiggestClockWise_Handle+0x170>)
 8005964:	6013      	str	r3, [r2, #0]
			}
			break;
 8005966:	e007      	b.n	8005978 <RollBiggestClockWise_Handle+0x164>
		default:
			break;
 8005968:	bf00      	nop
 800596a:	e006      	b.n	800597a <RollBiggestClockWise_Handle+0x166>
			break;
 800596c:	bf00      	nop
 800596e:	e004      	b.n	800597a <RollBiggestClockWise_Handle+0x166>
			break;
 8005970:	bf00      	nop
 8005972:	e002      	b.n	800597a <RollBiggestClockWise_Handle+0x166>
			break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <RollBiggestClockWise_Handle+0x166>
			break;
 8005978:	bf00      	nop
	}
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000255 	.word	0x20000255
 8005984:	2000025c 	.word	0x2000025c
 8005988:	20000257 	.word	0x20000257
 800598c:	20000258 	.word	0x20000258
 8005990:	20000254 	.word	0x20000254

08005994 <RollBiggerClockWise_Handle>:

void RollBiggerClockWise_Handle()
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005998:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <RollBiggerClockWise_Handle+0x16c>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b03      	cmp	r3, #3
 800599e:	f200 80a3 	bhi.w	8005ae8 <RollBiggerClockWise_Handle+0x154>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <RollBiggerClockWise_Handle+0x14>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a4f 	.word	0x08005a4f
 80059b4:	08005a99 	.word	0x08005a99
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80059b8:	f7fb fea8 	bl	800170c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b51      	ldr	r3, [pc, #324]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	223c      	movs	r2, #60	; 0x3c
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f0c0 8090 	bcc.w	8005aec <RollBiggerClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80059cc:	4b4e      	ldr	r3, [pc, #312]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4a4e      	ldr	r2, [pc, #312]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 80059d2:	7811      	ldrb	r1, [r2, #0]
 80059d4:	2208      	movs	r2, #8
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ff1a 	bl	8004810 <DisplayLed>
				if (y == 6) axisDirection = X_AXIS_1;
 80059dc:	4b4b      	ldr	r3, [pc, #300]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d103      	bne.n	80059ec <RollBiggerClockWise_Handle+0x58>
 80059e4:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <RollBiggerClockWise_Handle+0x16c>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e005      	b.n	80059f8 <RollBiggerClockWise_Handle+0x64>
				else y++;
 80059ec:	4b47      	ldr	r3, [pc, #284]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 80059f6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80059f8:	f7fb fe88 	bl	800170c <HAL_GetTick>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a41      	ldr	r2, [pc, #260]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005a00:	6013      	str	r3, [r2, #0]
			}
			break;
 8005a02:	e073      	b.n	8005aec <RollBiggerClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005a04:	f7fb fe82 	bl	800170c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	223c      	movs	r2, #60	; 0x3c
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d36c      	bcc.n	8005af0 <RollBiggerClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005a16:	4b3c      	ldr	r3, [pc, #240]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005a1c:	7811      	ldrb	r1, [r2, #0]
 8005a1e:	2208      	movs	r2, #8
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fef5 	bl	8004810 <DisplayLed>
				if (x == 1) axisDirection = Y_AXIS_2;
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d103      	bne.n	8005a36 <RollBiggerClockWise_Handle+0xa2>
 8005a2e:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <RollBiggerClockWise_Handle+0x16c>)
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e005      	b.n	8005a42 <RollBiggerClockWise_Handle+0xae>
				else x--;
 8005a36:	4b34      	ldr	r3, [pc, #208]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005a40:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005a42:	f7fb fe63 	bl	800170c <HAL_GetTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4a2e      	ldr	r2, [pc, #184]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005a4a:	6013      	str	r3, [r2, #0]
			}
			break;
 8005a4c:	e050      	b.n	8005af0 <RollBiggerClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005a4e:	f7fb fe5d 	bl	800170c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	223c      	movs	r2, #60	; 0x3c
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d349      	bcc.n	8005af4 <RollBiggerClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005a60:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005a66:	7811      	ldrb	r1, [r2, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fed0 	bl	8004810 <DisplayLed>
				if (y == 1) axisDirection = X_AXIS_2;
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d103      	bne.n	8005a80 <RollBiggerClockWise_Handle+0xec>
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <RollBiggerClockWise_Handle+0x16c>)
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e005      	b.n	8005a8c <RollBiggerClockWise_Handle+0xf8>
				else y--;
 8005a80:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005a8a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005a8c:	f7fb fe3e 	bl	800170c <HAL_GetTick>
 8005a90:	4603      	mov	r3, r0
 8005a92:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005a94:	6013      	str	r3, [r2, #0]
			}
			break;
 8005a96:	e02d      	b.n	8005af4 <RollBiggerClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005a98:	f7fb fe38 	bl	800170c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	223c      	movs	r2, #60	; 0x3c
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d326      	bcc.n	8005af8 <RollBiggerClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <RollBiggerClockWise_Handle+0x178>)
 8005ab0:	7811      	ldrb	r1, [r2, #0]
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe feab 	bl	8004810 <DisplayLed>
				if (x == 5)
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d106      	bne.n	8005ad0 <RollBiggerClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <RollBiggerClockWise_Handle+0x16c>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <RollBiggerClockWise_Handle+0x17c>)
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e005      	b.n	8005adc <RollBiggerClockWise_Handle+0x148>
				}
				else x++;
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <RollBiggerClockWise_Handle+0x174>)
 8005ada:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005adc:	f7fb fe16 	bl	800170c <HAL_GetTick>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <RollBiggerClockWise_Handle+0x170>)
 8005ae4:	6013      	str	r3, [r2, #0]
			}
			break;
 8005ae6:	e007      	b.n	8005af8 <RollBiggerClockWise_Handle+0x164>
		default:
			break;
 8005ae8:	bf00      	nop
 8005aea:	e006      	b.n	8005afa <RollBiggerClockWise_Handle+0x166>
			break;
 8005aec:	bf00      	nop
 8005aee:	e004      	b.n	8005afa <RollBiggerClockWise_Handle+0x166>
			break;
 8005af0:	bf00      	nop
 8005af2:	e002      	b.n	8005afa <RollBiggerClockWise_Handle+0x166>
			break;
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <RollBiggerClockWise_Handle+0x166>
			break;
 8005af8:	bf00      	nop
	}
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000255 	.word	0x20000255
 8005b04:	2000025c 	.word	0x2000025c
 8005b08:	20000257 	.word	0x20000257
 8005b0c:	20000258 	.word	0x20000258
 8005b10:	20000254 	.word	0x20000254

08005b14 <RollMediumClockWise_Handle>:

void RollMediumClockWise_Handle()
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005b18:	4b59      	ldr	r3, [pc, #356]	; (8005c80 <RollMediumClockWise_Handle+0x16c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f200 80a3 	bhi.w	8005c68 <RollMediumClockWise_Handle+0x154>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <RollMediumClockWise_Handle+0x14>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005bcf 	.word	0x08005bcf
 8005b34:	08005c19 	.word	0x08005c19
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005b38:	f7fb fde8 	bl	800170c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b51      	ldr	r3, [pc, #324]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	223c      	movs	r2, #60	; 0x3c
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f0c0 8090 	bcc.w	8005c6c <RollMediumClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8005b4c:	4b4e      	ldr	r3, [pc, #312]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4a4e      	ldr	r2, [pc, #312]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005b52:	7811      	ldrb	r1, [r2, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fe5a 	bl	8004810 <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8005b5c:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d103      	bne.n	8005b6c <RollMediumClockWise_Handle+0x58>
 8005b64:	4b46      	ldr	r3, [pc, #280]	; (8005c80 <RollMediumClockWise_Handle+0x16c>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e005      	b.n	8005b78 <RollMediumClockWise_Handle+0x64>
				else y++;
 8005b6c:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005b76:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005b78:	f7fb fdc8 	bl	800170c <HAL_GetTick>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4a41      	ldr	r2, [pc, #260]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005b80:	6013      	str	r3, [r2, #0]
			}
			break;
 8005b82:	e073      	b.n	8005c6c <RollMediumClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005b84:	f7fb fdc2 	bl	800170c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	223c      	movs	r2, #60	; 0x3c
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d36c      	bcc.n	8005c70 <RollMediumClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8005b96:	4b3c      	ldr	r3, [pc, #240]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	4a3c      	ldr	r2, [pc, #240]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005b9c:	7811      	ldrb	r1, [r2, #0]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe fe35 	bl	8004810 <DisplayLed>
				if (x == 2) axisDirection = Y_AXIS_2;
 8005ba6:	4b38      	ldr	r3, [pc, #224]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d103      	bne.n	8005bb6 <RollMediumClockWise_Handle+0xa2>
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <RollMediumClockWise_Handle+0x16c>)
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	e005      	b.n	8005bc2 <RollMediumClockWise_Handle+0xae>
				else x--;
 8005bb6:	4b34      	ldr	r3, [pc, #208]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005bc0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005bc2:	f7fb fda3 	bl	800170c <HAL_GetTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a2e      	ldr	r2, [pc, #184]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005bca:	6013      	str	r3, [r2, #0]
			}
			break;
 8005bcc:	e050      	b.n	8005c70 <RollMediumClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005bce:	f7fb fd9d 	bl	800170c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	223c      	movs	r2, #60	; 0x3c
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d349      	bcc.n	8005c74 <RollMediumClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8005be0:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005be6:	7811      	ldrb	r1, [r2, #0]
 8005be8:	2208      	movs	r2, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fe10 	bl	8004810 <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8005bf0:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d103      	bne.n	8005c00 <RollMediumClockWise_Handle+0xec>
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <RollMediumClockWise_Handle+0x16c>)
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e005      	b.n	8005c0c <RollMediumClockWise_Handle+0xf8>
				else y--;
 8005c00:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005c0a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005c0c:	f7fb fd7e 	bl	800170c <HAL_GetTick>
 8005c10:	4603      	mov	r3, r0
 8005c12:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005c14:	6013      	str	r3, [r2, #0]
			}
			break;
 8005c16:	e02d      	b.n	8005c74 <RollMediumClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005c18:	f7fb fd78 	bl	800170c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	223c      	movs	r2, #60	; 0x3c
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d326      	bcc.n	8005c78 <RollMediumClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <RollMediumClockWise_Handle+0x178>)
 8005c30:	7811      	ldrb	r1, [r2, #0]
 8005c32:	2208      	movs	r2, #8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fdeb 	bl	8004810 <DisplayLed>
				if (x == 4)
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d106      	bne.n	8005c50 <RollMediumClockWise_Handle+0x13c>
				{
					rollSize = ROLL_SMALL;
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <RollMediumClockWise_Handle+0x17c>)
 8005c44:	2203      	movs	r2, #3
 8005c46:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <RollMediumClockWise_Handle+0x16c>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e005      	b.n	8005c5c <RollMediumClockWise_Handle+0x148>
				}
				else x++;
 8005c50:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <RollMediumClockWise_Handle+0x174>)
 8005c5a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005c5c:	f7fb fd56 	bl	800170c <HAL_GetTick>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <RollMediumClockWise_Handle+0x170>)
 8005c64:	6013      	str	r3, [r2, #0]
			}
			break;
 8005c66:	e007      	b.n	8005c78 <RollMediumClockWise_Handle+0x164>
		default:
			break;
 8005c68:	bf00      	nop
 8005c6a:	e006      	b.n	8005c7a <RollMediumClockWise_Handle+0x166>
			break;
 8005c6c:	bf00      	nop
 8005c6e:	e004      	b.n	8005c7a <RollMediumClockWise_Handle+0x166>
			break;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <RollMediumClockWise_Handle+0x166>
			break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <RollMediumClockWise_Handle+0x166>
			break;
 8005c78:	bf00      	nop
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000255 	.word	0x20000255
 8005c84:	2000025c 	.word	0x2000025c
 8005c88:	20000257 	.word	0x20000257
 8005c8c:	20000258 	.word	0x20000258
 8005c90:	20000254 	.word	0x20000254

08005c94 <RollSmallClockWise_Handle>:

void RollSmallClockWise_Handle()
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8005c98:	4b48      	ldr	r3, [pc, #288]	; (8005dbc <RollSmallClockWise_Handle+0x128>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d051      	beq.n	8005d44 <RollSmallClockWise_Handle+0xb0>
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f300 8082 	bgt.w	8005daa <RollSmallClockWise_Handle+0x116>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <RollSmallClockWise_Handle+0x1c>
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d025      	beq.n	8005cfa <RollSmallClockWise_Handle+0x66>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8005cae:	e07c      	b.n	8005daa <RollSmallClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005cb0:	f7fb fd2c 	bl	800170c <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	223c      	movs	r2, #60	; 0x3c
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d375      	bcc.n	8005dae <RollSmallClockWise_Handle+0x11a>
				DisplayLed(x, y, z);
 8005cc2:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	4a40      	ldr	r2, [pc, #256]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005cc8:	7811      	ldrb	r1, [r2, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fd9f 	bl	8004810 <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d103      	bne.n	8005ce2 <RollSmallClockWise_Handle+0x4e>
 8005cda:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <RollSmallClockWise_Handle+0x128>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	e005      	b.n	8005cee <RollSmallClockWise_Handle+0x5a>
				else y++;
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005cec:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005cee:	f7fb fd0d 	bl	800170c <HAL_GetTick>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a32      	ldr	r2, [pc, #200]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005cf6:	6013      	str	r3, [r2, #0]
			break;
 8005cf8:	e059      	b.n	8005dae <RollSmallClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005cfa:	f7fb fd07 	bl	800170c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	223c      	movs	r2, #60	; 0x3c
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d352      	bcc.n	8005db2 <RollSmallClockWise_Handle+0x11e>
				DisplayLed(x, y, z);
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d12:	7811      	ldrb	r1, [r2, #0]
 8005d14:	2208      	movs	r2, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fd7a 	bl	8004810 <DisplayLed>
				if (x == 3) axisDirection = Y_AXIS_2;
 8005d1c:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d103      	bne.n	8005d2c <RollSmallClockWise_Handle+0x98>
 8005d24:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <RollSmallClockWise_Handle+0x128>)
 8005d26:	2202      	movs	r2, #2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e005      	b.n	8005d38 <RollSmallClockWise_Handle+0xa4>
				else x--;
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d36:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005d38:	f7fb fce8 	bl	800170c <HAL_GetTick>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a20      	ldr	r2, [pc, #128]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005d40:	6013      	str	r3, [r2, #0]
			break;
 8005d42:	e036      	b.n	8005db2 <RollSmallClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8005d44:	f7fb fce2 	bl	800170c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	223c      	movs	r2, #60	; 0x3c
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d32f      	bcc.n	8005db6 <RollSmallClockWise_Handle+0x122>
				DisplayLed(x, y, z);
 8005d56:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d5c:	7811      	ldrb	r1, [r2, #0]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fd55 	bl	8004810 <DisplayLed>
				if (y == 3)
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d111      	bne.n	8005d92 <RollSmallClockWise_Handle+0xfe>
					clearCube();
 8005d6e:	f7fd fed6 	bl	8003b1e <clearCube>
					axisDirection = Y_AXIS_1;
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <RollSmallClockWise_Handle+0x128>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <RollSmallClockWise_Handle+0x138>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
					x = 0;
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <RollSmallClockWise_Handle+0x130>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
					y = 0;
 8005d84:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
					directRotate = COUNTER_CLOCKWISE;
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <RollSmallClockWise_Handle+0x13c>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <RollSmallClockWise_Handle+0x10a>
				else y--;
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <RollSmallClockWise_Handle+0x134>)
 8005d9c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8005d9e:	f7fb fcb5 	bl	800170c <HAL_GetTick>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <RollSmallClockWise_Handle+0x12c>)
 8005da6:	6013      	str	r3, [r2, #0]
			break;
 8005da8:	e005      	b.n	8005db6 <RollSmallClockWise_Handle+0x122>
			break;
 8005daa:	bf00      	nop
 8005dac:	e004      	b.n	8005db8 <RollSmallClockWise_Handle+0x124>
			break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <RollSmallClockWise_Handle+0x124>
			break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <RollSmallClockWise_Handle+0x124>
			break;
 8005db6:	bf00      	nop
	}
}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000255 	.word	0x20000255
 8005dc0:	2000025c 	.word	0x2000025c
 8005dc4:	20000257 	.word	0x20000257
 8005dc8:	20000258 	.word	0x20000258
 8005dcc:	20000254 	.word	0x20000254
 8005dd0:	20000256 	.word	0x20000256

08005dd4 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
	clearCube();
 8005dd8:	f7fd fea1 	bl	8003b1e <clearCube>
	x = 7;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <SpiralCube_Set_State+0x30>)
 8005dde:	2207      	movs	r2, #7
 8005de0:	701a      	strb	r2, [r3, #0]
	y = 0;
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <SpiralCube_Set_State+0x34>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
	rollSize = ROLL_BIGGEST;
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <SpiralCube_Set_State+0x38>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
	directRotate = CLOCKWISE;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <SpiralCube_Set_State+0x3c>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <SpiralCube_Set_State+0x40>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
	currentEffect = SPIRAL_CUBE;
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <SpiralCube_Set_State+0x44>)
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	701a      	strb	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000257 	.word	0x20000257
 8005e08:	20000258 	.word	0x20000258
 8005e0c:	20000254 	.word	0x20000254
 8005e10:	20000256 	.word	0x20000256
 8005e14:	20000255 	.word	0x20000255
 8005e18:	20000010 	.word	0x20000010

08005e1c <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	723b      	strb	r3, [r7, #8]
	for (int i = 1; i < 9; i++)
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e00d      	b.n	8005e4e <TransmitData+0x32>
	{
		dataOut[i] = column_data[i-1];
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	7819      	ldrb	r1, [r3, #0]
 8005e3c:	f107 0208 	add.w	r2, r7, #8
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4413      	add	r3, r2
 8005e44:	460a      	mov	r2, r1
 8005e46:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	ddee      	ble.n	8005e32 <TransmitData+0x16>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	4809      	ldr	r0, [pc, #36]	; (8005e80 <TransmitData+0x64>)
 8005e5a:	f7fc f9cc 	bl	80021f6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8005e5e:	f107 0108 	add.w	r1, r7, #8
 8005e62:	2364      	movs	r3, #100	; 0x64
 8005e64:	2209      	movs	r2, #9
 8005e66:	4807      	ldr	r0, [pc, #28]	; (8005e84 <TransmitData+0x68>)
 8005e68:	f7fc ff32 	bl	8002cd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2140      	movs	r1, #64	; 0x40
 8005e70:	4803      	ldr	r0, [pc, #12]	; (8005e80 <TransmitData+0x64>)
 8005e72:	f7fc f9c0 	bl	80021f6 <HAL_GPIO_WritePin>
}
 8005e76:	bf00      	nop
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40010800 	.word	0x40010800
 8005e84:	200000c4 	.word	0x200000c4

08005e88 <WaveCube_Handle>:
const float A = 3.5; // Biên độ
const float xo = 3.5; // Tọa độ điểm gốc O
const float yo = 3.5;

void WaveCube_Handle()
{
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0

	        uint32_t t = HAL_GetTick(); // Lấy thời gian
 8005e90:	f7fb fc3c 	bl	800170c <HAL_GetTick>
 8005e94:	60b8      	str	r0, [r7, #8]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	e0b0      	b.n	8005ffe <WaveCube_Handle+0x176>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73bb      	strb	r3, [r7, #14]
 8005ea0:	e0a6      	b.n	8005ff0 <WaveCube_Handle+0x168>
	    {
//	        float r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt((x - xo)*(x - xo) + (y - yo)*(y - yo))/L) + 3.5); // Lấy cao độ z, 3.5 là vị trí cân bằng
 8005ea2:	4b5f      	ldr	r3, [pc, #380]	; (8006020 <WaveCube_Handle+0x198>)
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa fb6b 	bl	8000580 <__aeabi_f2d>
 8005eaa:	4604      	mov	r4, r0
 8005eac:	460d      	mov	r5, r1
 8005eae:	68b8      	ldr	r0, [r7, #8]
 8005eb0:	f7fa fb44 	bl	800053c <__aeabi_ui2d>
 8005eb4:	a358      	add	r3, pc, #352	; (adr r3, 8006018 <WaveCube_Handle+0x190>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f7fa fbb9 	bl	8000630 <__aeabi_dmul>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4690      	mov	r8, r2
 8005ec4:	4699      	mov	r9, r3
 8005ec6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fa fb58 	bl	8000580 <__aeabi_f2d>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fcd4 	bl	8000884 <__aeabi_ddiv>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4690      	mov	r8, r2
 8005ee2:	4699      	mov	r9, r3
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa ff54 	bl	8000d94 <__aeabi_i2f>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4a4c      	ldr	r2, [pc, #304]	; (8006020 <WaveCube_Handle+0x198>)
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fa fe98 	bl	8000c28 <__aeabi_fsub>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461e      	mov	r6, r3
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fa ff48 	bl	8000d94 <__aeabi_i2f>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4a46      	ldr	r2, [pc, #280]	; (8006020 <WaveCube_Handle+0x198>)
 8005f08:	4611      	mov	r1, r2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fe8c 	bl	8000c28 <__aeabi_fsub>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4619      	mov	r1, r3
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7fa f91b 	bl	8000150 <__aeabi_fmul>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461e      	mov	r6, r3
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fa ff37 	bl	8000d94 <__aeabi_i2f>
 8005f26:	4603      	mov	r3, r0
 8005f28:	4a3d      	ldr	r2, [pc, #244]	; (8006020 <WaveCube_Handle+0x198>)
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fe7b 	bl	8000c28 <__aeabi_fsub>
 8005f32:	4603      	mov	r3, r0
 8005f34:	469a      	mov	sl, r3
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fa ff2b 	bl	8000d94 <__aeabi_i2f>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <WaveCube_Handle+0x198>)
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fa fe6f 	bl	8000c28 <__aeabi_fsub>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f7fa f8fe 	bl	8000150 <__aeabi_fmul>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4619      	mov	r1, r3
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7fa fe67 	bl	8000c2c <__addsf3>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fa fb0d 	bl	8000580 <__aeabi_f2d>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	f001 f94d 	bl	800720c <sqrt>
 8005f72:	a329      	add	r3, pc, #164	; (adr r3, 8006018 <WaveCube_Handle+0x190>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa fb5a 	bl	8000630 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4692      	mov	sl, r2
 8005f82:	469b      	mov	fp, r3
 8005f84:	4b27      	ldr	r3, [pc, #156]	; (8006024 <WaveCube_Handle+0x19c>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fafa 	bl	8000580 <__aeabi_f2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4650      	mov	r0, sl
 8005f92:	4659      	mov	r1, fp
 8005f94:	f7fa fc76 	bl	8000884 <__aeabi_ddiv>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa f98e 	bl	80002c0 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f001 f8e8 	bl	8007180 <cos>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa fb3a 	bl	8000630 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	4b17      	ldr	r3, [pc, #92]	; (8006028 <WaveCube_Handle+0x1a0>)
 8005fca:	f7fa f97b 	bl	80002c4 <__adddf3>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f7fa fe03 	bl	8000be0 <__aeabi_d2uiz>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 8005fde:	79fa      	ldrb	r2, [r7, #7]
 8005fe0:	7bf9      	ldrb	r1, [r7, #15]
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fc13 	bl	8004810 <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	3301      	adds	r3, #1
 8005fee:	73bb      	strb	r3, [r7, #14]
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b07      	cmp	r3, #7
 8005ff4:	f67f af55 	bls.w	8005ea2 <WaveCube_Handle+0x1a>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b07      	cmp	r3, #7
 8006002:	f67f af4b 	bls.w	8005e9c <WaveCube_Handle+0x14>
	    }
	}
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	51eb851f 	.word	0x51eb851f
 800601c:	40191eb8 	.word	0x40191eb8
 8006020:	40600000 	.word	0x40600000
 8006024:	40e00000 	.word	0x40e00000
 8006028:	400c0000 	.word	0x400c0000

0800602c <WaveCube_Set_State>:

void WaveCube_Set_State()
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
	clearCube();
 8006030:	f7fd fd75 	bl	8003b1e <clearCube>
	currentEffect = WAVE_EFFECT;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <WaveCube_Set_State+0x14>)
 8006036:	2209      	movs	r2, #9
 8006038:	701a      	strb	r2, [r3, #0]
}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000010 	.word	0x20000010

08006044 <__errno>:
 8006044:	4b01      	ldr	r3, [pc, #4]	; (800604c <__errno+0x8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000014 	.word	0x20000014

08006050 <__libc_init_array>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	2600      	movs	r6, #0
 8006054:	4d0c      	ldr	r5, [pc, #48]	; (8006088 <__libc_init_array+0x38>)
 8006056:	4c0d      	ldr	r4, [pc, #52]	; (800608c <__libc_init_array+0x3c>)
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	42a6      	cmp	r6, r4
 800605e:	d109      	bne.n	8006074 <__libc_init_array+0x24>
 8006060:	f002 f95c 	bl	800831c <_init>
 8006064:	2600      	movs	r6, #0
 8006066:	4d0a      	ldr	r5, [pc, #40]	; (8006090 <__libc_init_array+0x40>)
 8006068:	4c0a      	ldr	r4, [pc, #40]	; (8006094 <__libc_init_array+0x44>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	42a6      	cmp	r6, r4
 8006070:	d105      	bne.n	800607e <__libc_init_array+0x2e>
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	f855 3b04 	ldr.w	r3, [r5], #4
 8006078:	4798      	blx	r3
 800607a:	3601      	adds	r6, #1
 800607c:	e7ee      	b.n	800605c <__libc_init_array+0xc>
 800607e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006082:	4798      	blx	r3
 8006084:	3601      	adds	r6, #1
 8006086:	e7f2      	b.n	800606e <__libc_init_array+0x1e>
 8006088:	08008688 	.word	0x08008688
 800608c:	08008688 	.word	0x08008688
 8006090:	08008688 	.word	0x08008688
 8006094:	0800868c 	.word	0x0800868c

08006098 <memset>:
 8006098:	4603      	mov	r3, r0
 800609a:	4402      	add	r2, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <srand>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <srand+0x44>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	681d      	ldr	r5, [r3, #0]
 80060b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80060b2:	b9b3      	cbnz	r3, 80060e2 <srand+0x3a>
 80060b4:	2018      	movs	r0, #24
 80060b6:	f000 f893 	bl	80061e0 <malloc>
 80060ba:	4602      	mov	r2, r0
 80060bc:	63a8      	str	r0, [r5, #56]	; 0x38
 80060be:	b920      	cbnz	r0, 80060ca <srand+0x22>
 80060c0:	2142      	movs	r1, #66	; 0x42
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <srand+0x48>)
 80060c4:	480b      	ldr	r0, [pc, #44]	; (80060f4 <srand+0x4c>)
 80060c6:	f000 f85b 	bl	8006180 <__assert_func>
 80060ca:	490b      	ldr	r1, [pc, #44]	; (80060f8 <srand+0x50>)
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <srand+0x54>)
 80060ce:	e9c0 1300 	strd	r1, r3, [r0]
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <srand+0x58>)
 80060d4:	2100      	movs	r1, #0
 80060d6:	6083      	str	r3, [r0, #8]
 80060d8:	230b      	movs	r3, #11
 80060da:	8183      	strh	r3, [r0, #12]
 80060dc:	2001      	movs	r0, #1
 80060de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060e2:	2200      	movs	r2, #0
 80060e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80060e6:	611c      	str	r4, [r3, #16]
 80060e8:	615a      	str	r2, [r3, #20]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20000014 	.word	0x20000014
 80060f0:	0800836c 	.word	0x0800836c
 80060f4:	08008383 	.word	0x08008383
 80060f8:	abcd330e 	.word	0xabcd330e
 80060fc:	e66d1234 	.word	0xe66d1234
 8006100:	0005deec 	.word	0x0005deec

08006104 <rand>:
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <rand+0x5c>)
 8006106:	b510      	push	{r4, lr}
 8006108:	681c      	ldr	r4, [r3, #0]
 800610a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800610c:	b9b3      	cbnz	r3, 800613c <rand+0x38>
 800610e:	2018      	movs	r0, #24
 8006110:	f000 f866 	bl	80061e0 <malloc>
 8006114:	4602      	mov	r2, r0
 8006116:	63a0      	str	r0, [r4, #56]	; 0x38
 8006118:	b920      	cbnz	r0, 8006124 <rand+0x20>
 800611a:	214e      	movs	r1, #78	; 0x4e
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <rand+0x60>)
 800611e:	4812      	ldr	r0, [pc, #72]	; (8006168 <rand+0x64>)
 8006120:	f000 f82e 	bl	8006180 <__assert_func>
 8006124:	4911      	ldr	r1, [pc, #68]	; (800616c <rand+0x68>)
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <rand+0x6c>)
 8006128:	e9c0 1300 	strd	r1, r3, [r0]
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <rand+0x70>)
 800612e:	2100      	movs	r1, #0
 8006130:	6083      	str	r3, [r0, #8]
 8006132:	230b      	movs	r3, #11
 8006134:	8183      	strh	r3, [r0, #12]
 8006136:	2001      	movs	r0, #1
 8006138:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800613c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800613e:	4a0e      	ldr	r2, [pc, #56]	; (8006178 <rand+0x74>)
 8006140:	6920      	ldr	r0, [r4, #16]
 8006142:	6963      	ldr	r3, [r4, #20]
 8006144:	4342      	muls	r2, r0
 8006146:	490d      	ldr	r1, [pc, #52]	; (800617c <rand+0x78>)
 8006148:	fb01 2203 	mla	r2, r1, r3, r2
 800614c:	fba0 0101 	umull	r0, r1, r0, r1
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	eb42 0001 	adc.w	r0, r2, r1
 8006156:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800615a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800615e:	bd10      	pop	{r4, pc}
 8006160:	20000014 	.word	0x20000014
 8006164:	0800836c 	.word	0x0800836c
 8006168:	08008383 	.word	0x08008383
 800616c:	abcd330e 	.word	0xabcd330e
 8006170:	e66d1234 	.word	0xe66d1234
 8006174:	0005deec 	.word	0x0005deec
 8006178:	5851f42d 	.word	0x5851f42d
 800617c:	4c957f2d 	.word	0x4c957f2d

08006180 <__assert_func>:
 8006180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006182:	4614      	mov	r4, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <__assert_func+0x2c>)
 8006188:	4605      	mov	r5, r0
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68d8      	ldr	r0, [r3, #12]
 800618e:	b14c      	cbz	r4, 80061a4 <__assert_func+0x24>
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <__assert_func+0x30>)
 8006192:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006196:	9100      	str	r1, [sp, #0]
 8006198:	462b      	mov	r3, r5
 800619a:	4906      	ldr	r1, [pc, #24]	; (80061b4 <__assert_func+0x34>)
 800619c:	f000 f80e 	bl	80061bc <fiprintf>
 80061a0:	f000 fcc0 	bl	8006b24 <abort>
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <__assert_func+0x38>)
 80061a6:	461c      	mov	r4, r3
 80061a8:	e7f3      	b.n	8006192 <__assert_func+0x12>
 80061aa:	bf00      	nop
 80061ac:	20000014 	.word	0x20000014
 80061b0:	080083de 	.word	0x080083de
 80061b4:	080083eb 	.word	0x080083eb
 80061b8:	08008419 	.word	0x08008419

080061bc <fiprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b503      	push	{r0, r1, lr}
 80061c0:	4601      	mov	r1, r0
 80061c2:	ab03      	add	r3, sp, #12
 80061c4:	4805      	ldr	r0, [pc, #20]	; (80061dc <fiprintf+0x20>)
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	f000 f913 	bl	80063f8 <_vfiprintf_r>
 80061d2:	b002      	add	sp, #8
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b003      	add	sp, #12
 80061da:	4770      	bx	lr
 80061dc:	20000014 	.word	0x20000014

080061e0 <malloc>:
 80061e0:	4b02      	ldr	r3, [pc, #8]	; (80061ec <malloc+0xc>)
 80061e2:	4601      	mov	r1, r0
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	f000 b86b 	b.w	80062c0 <_malloc_r>
 80061ea:	bf00      	nop
 80061ec:	20000014 	.word	0x20000014

080061f0 <_free_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4605      	mov	r5, r0
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d040      	beq.n	800627a <_free_r+0x8a>
 80061f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061fc:	1f0c      	subs	r4, r1, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bfb8      	it	lt
 8006202:	18e4      	addlt	r4, r4, r3
 8006204:	f000 fec0 	bl	8006f88 <__malloc_lock>
 8006208:	4a1c      	ldr	r2, [pc, #112]	; (800627c <_free_r+0x8c>)
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	b933      	cbnz	r3, 800621c <_free_r+0x2c>
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	6014      	str	r4, [r2, #0]
 8006212:	4628      	mov	r0, r5
 8006214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006218:	f000 bebc 	b.w	8006f94 <__malloc_unlock>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d908      	bls.n	8006232 <_free_r+0x42>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	1821      	adds	r1, r4, r0
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1809      	addeq	r1, r1, r0
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	e7ed      	b.n	800620e <_free_r+0x1e>
 8006232:	461a      	mov	r2, r3
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b10b      	cbz	r3, 800623c <_free_r+0x4c>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d9fa      	bls.n	8006232 <_free_r+0x42>
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	1850      	adds	r0, r2, r1
 8006240:	42a0      	cmp	r0, r4
 8006242:	d10b      	bne.n	800625c <_free_r+0x6c>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	4401      	add	r1, r0
 8006248:	1850      	adds	r0, r2, r1
 800624a:	4283      	cmp	r3, r0
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	d1e0      	bne.n	8006212 <_free_r+0x22>
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4401      	add	r1, r0
 8006256:	6011      	str	r1, [r2, #0]
 8006258:	6053      	str	r3, [r2, #4]
 800625a:	e7da      	b.n	8006212 <_free_r+0x22>
 800625c:	d902      	bls.n	8006264 <_free_r+0x74>
 800625e:	230c      	movs	r3, #12
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	e7d6      	b.n	8006212 <_free_r+0x22>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	1821      	adds	r1, r4, r0
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1809      	addeq	r1, r1, r0
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6054      	str	r4, [r2, #4]
 8006278:	e7cb      	b.n	8006212 <_free_r+0x22>
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20000260 	.word	0x20000260

08006280 <sbrk_aligned>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4e0e      	ldr	r6, [pc, #56]	; (80062bc <sbrk_aligned+0x3c>)
 8006284:	460c      	mov	r4, r1
 8006286:	6831      	ldr	r1, [r6, #0]
 8006288:	4605      	mov	r5, r0
 800628a:	b911      	cbnz	r1, 8006292 <sbrk_aligned+0x12>
 800628c:	f000 fb7a 	bl	8006984 <_sbrk_r>
 8006290:	6030      	str	r0, [r6, #0]
 8006292:	4621      	mov	r1, r4
 8006294:	4628      	mov	r0, r5
 8006296:	f000 fb75 	bl	8006984 <_sbrk_r>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d00a      	beq.n	80062b4 <sbrk_aligned+0x34>
 800629e:	1cc4      	adds	r4, r0, #3
 80062a0:	f024 0403 	bic.w	r4, r4, #3
 80062a4:	42a0      	cmp	r0, r4
 80062a6:	d007      	beq.n	80062b8 <sbrk_aligned+0x38>
 80062a8:	1a21      	subs	r1, r4, r0
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 fb6a 	bl	8006984 <_sbrk_r>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d101      	bne.n	80062b8 <sbrk_aligned+0x38>
 80062b4:	f04f 34ff 	mov.w	r4, #4294967295
 80062b8:	4620      	mov	r0, r4
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	20000264 	.word	0x20000264

080062c0 <_malloc_r>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	1ccd      	adds	r5, r1, #3
 80062c6:	f025 0503 	bic.w	r5, r5, #3
 80062ca:	3508      	adds	r5, #8
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	bf38      	it	cc
 80062d0:	250c      	movcc	r5, #12
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	4607      	mov	r7, r0
 80062d6:	db01      	blt.n	80062dc <_malloc_r+0x1c>
 80062d8:	42a9      	cmp	r1, r5
 80062da:	d905      	bls.n	80062e8 <_malloc_r+0x28>
 80062dc:	230c      	movs	r3, #12
 80062de:	2600      	movs	r6, #0
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4630      	mov	r0, r6
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	4e2e      	ldr	r6, [pc, #184]	; (80063a4 <_malloc_r+0xe4>)
 80062ea:	f000 fe4d 	bl	8006f88 <__malloc_lock>
 80062ee:	6833      	ldr	r3, [r6, #0]
 80062f0:	461c      	mov	r4, r3
 80062f2:	bb34      	cbnz	r4, 8006342 <_malloc_r+0x82>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff ffc2 	bl	8006280 <sbrk_aligned>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	4604      	mov	r4, r0
 8006300:	d14d      	bne.n	800639e <_malloc_r+0xde>
 8006302:	6834      	ldr	r4, [r6, #0]
 8006304:	4626      	mov	r6, r4
 8006306:	2e00      	cmp	r6, #0
 8006308:	d140      	bne.n	800638c <_malloc_r+0xcc>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	4631      	mov	r1, r6
 800630e:	4638      	mov	r0, r7
 8006310:	eb04 0803 	add.w	r8, r4, r3
 8006314:	f000 fb36 	bl	8006984 <_sbrk_r>
 8006318:	4580      	cmp	r8, r0
 800631a:	d13a      	bne.n	8006392 <_malloc_r+0xd2>
 800631c:	6821      	ldr	r1, [r4, #0]
 800631e:	3503      	adds	r5, #3
 8006320:	1a6d      	subs	r5, r5, r1
 8006322:	f025 0503 	bic.w	r5, r5, #3
 8006326:	3508      	adds	r5, #8
 8006328:	2d0c      	cmp	r5, #12
 800632a:	bf38      	it	cc
 800632c:	250c      	movcc	r5, #12
 800632e:	4638      	mov	r0, r7
 8006330:	4629      	mov	r1, r5
 8006332:	f7ff ffa5 	bl	8006280 <sbrk_aligned>
 8006336:	3001      	adds	r0, #1
 8006338:	d02b      	beq.n	8006392 <_malloc_r+0xd2>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	442b      	add	r3, r5
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	e00e      	b.n	8006360 <_malloc_r+0xa0>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	1b52      	subs	r2, r2, r5
 8006346:	d41e      	bmi.n	8006386 <_malloc_r+0xc6>
 8006348:	2a0b      	cmp	r2, #11
 800634a:	d916      	bls.n	800637a <_malloc_r+0xba>
 800634c:	1961      	adds	r1, r4, r5
 800634e:	42a3      	cmp	r3, r4
 8006350:	6025      	str	r5, [r4, #0]
 8006352:	bf18      	it	ne
 8006354:	6059      	strne	r1, [r3, #4]
 8006356:	6863      	ldr	r3, [r4, #4]
 8006358:	bf08      	it	eq
 800635a:	6031      	streq	r1, [r6, #0]
 800635c:	5162      	str	r2, [r4, r5]
 800635e:	604b      	str	r3, [r1, #4]
 8006360:	4638      	mov	r0, r7
 8006362:	f104 060b 	add.w	r6, r4, #11
 8006366:	f000 fe15 	bl	8006f94 <__malloc_unlock>
 800636a:	f026 0607 	bic.w	r6, r6, #7
 800636e:	1d23      	adds	r3, r4, #4
 8006370:	1af2      	subs	r2, r6, r3
 8006372:	d0b6      	beq.n	80062e2 <_malloc_r+0x22>
 8006374:	1b9b      	subs	r3, r3, r6
 8006376:	50a3      	str	r3, [r4, r2]
 8006378:	e7b3      	b.n	80062e2 <_malloc_r+0x22>
 800637a:	6862      	ldr	r2, [r4, #4]
 800637c:	42a3      	cmp	r3, r4
 800637e:	bf0c      	ite	eq
 8006380:	6032      	streq	r2, [r6, #0]
 8006382:	605a      	strne	r2, [r3, #4]
 8006384:	e7ec      	b.n	8006360 <_malloc_r+0xa0>
 8006386:	4623      	mov	r3, r4
 8006388:	6864      	ldr	r4, [r4, #4]
 800638a:	e7b2      	b.n	80062f2 <_malloc_r+0x32>
 800638c:	4634      	mov	r4, r6
 800638e:	6876      	ldr	r6, [r6, #4]
 8006390:	e7b9      	b.n	8006306 <_malloc_r+0x46>
 8006392:	230c      	movs	r3, #12
 8006394:	4638      	mov	r0, r7
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	f000 fdfc 	bl	8006f94 <__malloc_unlock>
 800639c:	e7a1      	b.n	80062e2 <_malloc_r+0x22>
 800639e:	6025      	str	r5, [r4, #0]
 80063a0:	e7de      	b.n	8006360 <_malloc_r+0xa0>
 80063a2:	bf00      	nop
 80063a4:	20000260 	.word	0x20000260

080063a8 <__sfputc_r>:
 80063a8:	6893      	ldr	r3, [r2, #8]
 80063aa:	b410      	push	{r4}
 80063ac:	3b01      	subs	r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	6093      	str	r3, [r2, #8]
 80063b2:	da07      	bge.n	80063c4 <__sfputc_r+0x1c>
 80063b4:	6994      	ldr	r4, [r2, #24]
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	db01      	blt.n	80063be <__sfputc_r+0x16>
 80063ba:	290a      	cmp	r1, #10
 80063bc:	d102      	bne.n	80063c4 <__sfputc_r+0x1c>
 80063be:	bc10      	pop	{r4}
 80063c0:	f000 baf0 	b.w	80069a4 <__swbuf_r>
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	1c58      	adds	r0, r3, #1
 80063c8:	6010      	str	r0, [r2, #0]
 80063ca:	7019      	strb	r1, [r3, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	bc10      	pop	{r4}
 80063d0:	4770      	bx	lr

080063d2 <__sfputs_r>:
 80063d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d4:	4606      	mov	r6, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	18d5      	adds	r5, r2, r3
 80063dc:	42ac      	cmp	r4, r5
 80063de:	d101      	bne.n	80063e4 <__sfputs_r+0x12>
 80063e0:	2000      	movs	r0, #0
 80063e2:	e007      	b.n	80063f4 <__sfputs_r+0x22>
 80063e4:	463a      	mov	r2, r7
 80063e6:	4630      	mov	r0, r6
 80063e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ec:	f7ff ffdc 	bl	80063a8 <__sfputc_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d1f3      	bne.n	80063dc <__sfputs_r+0xa>
 80063f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063f8 <_vfiprintf_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	460d      	mov	r5, r1
 80063fe:	4614      	mov	r4, r2
 8006400:	4698      	mov	r8, r3
 8006402:	4606      	mov	r6, r0
 8006404:	b09d      	sub	sp, #116	; 0x74
 8006406:	b118      	cbz	r0, 8006410 <_vfiprintf_r+0x18>
 8006408:	6983      	ldr	r3, [r0, #24]
 800640a:	b90b      	cbnz	r3, 8006410 <_vfiprintf_r+0x18>
 800640c:	f000 fca8 	bl	8006d60 <__sinit>
 8006410:	4b89      	ldr	r3, [pc, #548]	; (8006638 <_vfiprintf_r+0x240>)
 8006412:	429d      	cmp	r5, r3
 8006414:	d11b      	bne.n	800644e <_vfiprintf_r+0x56>
 8006416:	6875      	ldr	r5, [r6, #4]
 8006418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800641a:	07d9      	lsls	r1, r3, #31
 800641c:	d405      	bmi.n	800642a <_vfiprintf_r+0x32>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	059a      	lsls	r2, r3, #22
 8006422:	d402      	bmi.n	800642a <_vfiprintf_r+0x32>
 8006424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006426:	f000 fd39 	bl	8006e9c <__retarget_lock_acquire_recursive>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	071b      	lsls	r3, r3, #28
 800642e:	d501      	bpl.n	8006434 <_vfiprintf_r+0x3c>
 8006430:	692b      	ldr	r3, [r5, #16]
 8006432:	b9eb      	cbnz	r3, 8006470 <_vfiprintf_r+0x78>
 8006434:	4629      	mov	r1, r5
 8006436:	4630      	mov	r0, r6
 8006438:	f000 fb06 	bl	8006a48 <__swsetup_r>
 800643c:	b1c0      	cbz	r0, 8006470 <_vfiprintf_r+0x78>
 800643e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006440:	07dc      	lsls	r4, r3, #31
 8006442:	d50e      	bpl.n	8006462 <_vfiprintf_r+0x6a>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	b01d      	add	sp, #116	; 0x74
 800644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644e:	4b7b      	ldr	r3, [pc, #492]	; (800663c <_vfiprintf_r+0x244>)
 8006450:	429d      	cmp	r5, r3
 8006452:	d101      	bne.n	8006458 <_vfiprintf_r+0x60>
 8006454:	68b5      	ldr	r5, [r6, #8]
 8006456:	e7df      	b.n	8006418 <_vfiprintf_r+0x20>
 8006458:	4b79      	ldr	r3, [pc, #484]	; (8006640 <_vfiprintf_r+0x248>)
 800645a:	429d      	cmp	r5, r3
 800645c:	bf08      	it	eq
 800645e:	68f5      	ldreq	r5, [r6, #12]
 8006460:	e7da      	b.n	8006418 <_vfiprintf_r+0x20>
 8006462:	89ab      	ldrh	r3, [r5, #12]
 8006464:	0598      	lsls	r0, r3, #22
 8006466:	d4ed      	bmi.n	8006444 <_vfiprintf_r+0x4c>
 8006468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800646a:	f000 fd18 	bl	8006e9e <__retarget_lock_release_recursive>
 800646e:	e7e9      	b.n	8006444 <_vfiprintf_r+0x4c>
 8006470:	2300      	movs	r3, #0
 8006472:	9309      	str	r3, [sp, #36]	; 0x24
 8006474:	2320      	movs	r3, #32
 8006476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800647a:	2330      	movs	r3, #48	; 0x30
 800647c:	f04f 0901 	mov.w	r9, #1
 8006480:	f8cd 800c 	str.w	r8, [sp, #12]
 8006484:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006644 <_vfiprintf_r+0x24c>
 8006488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648c:	4623      	mov	r3, r4
 800648e:	469a      	mov	sl, r3
 8006490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006494:	b10a      	cbz	r2, 800649a <_vfiprintf_r+0xa2>
 8006496:	2a25      	cmp	r2, #37	; 0x25
 8006498:	d1f9      	bne.n	800648e <_vfiprintf_r+0x96>
 800649a:	ebba 0b04 	subs.w	fp, sl, r4
 800649e:	d00b      	beq.n	80064b8 <_vfiprintf_r+0xc0>
 80064a0:	465b      	mov	r3, fp
 80064a2:	4622      	mov	r2, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ff93 	bl	80063d2 <__sfputs_r>
 80064ac:	3001      	adds	r0, #1
 80064ae:	f000 80aa 	beq.w	8006606 <_vfiprintf_r+0x20e>
 80064b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b4:	445a      	add	r2, fp
 80064b6:	9209      	str	r2, [sp, #36]	; 0x24
 80064b8:	f89a 3000 	ldrb.w	r3, [sl]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a2 	beq.w	8006606 <_vfiprintf_r+0x20e>
 80064c2:	2300      	movs	r3, #0
 80064c4:	f04f 32ff 	mov.w	r2, #4294967295
 80064c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064cc:	f10a 0a01 	add.w	sl, sl, #1
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	9307      	str	r3, [sp, #28]
 80064d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064d8:	931a      	str	r3, [sp, #104]	; 0x68
 80064da:	4654      	mov	r4, sl
 80064dc:	2205      	movs	r2, #5
 80064de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e2:	4858      	ldr	r0, [pc, #352]	; (8006644 <_vfiprintf_r+0x24c>)
 80064e4:	f000 fd42 	bl	8006f6c <memchr>
 80064e8:	9a04      	ldr	r2, [sp, #16]
 80064ea:	b9d8      	cbnz	r0, 8006524 <_vfiprintf_r+0x12c>
 80064ec:	06d1      	lsls	r1, r2, #27
 80064ee:	bf44      	itt	mi
 80064f0:	2320      	movmi	r3, #32
 80064f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f6:	0713      	lsls	r3, r2, #28
 80064f8:	bf44      	itt	mi
 80064fa:	232b      	movmi	r3, #43	; 0x2b
 80064fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006500:	f89a 3000 	ldrb.w	r3, [sl]
 8006504:	2b2a      	cmp	r3, #42	; 0x2a
 8006506:	d015      	beq.n	8006534 <_vfiprintf_r+0x13c>
 8006508:	4654      	mov	r4, sl
 800650a:	2000      	movs	r0, #0
 800650c:	f04f 0c0a 	mov.w	ip, #10
 8006510:	9a07      	ldr	r2, [sp, #28]
 8006512:	4621      	mov	r1, r4
 8006514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006518:	3b30      	subs	r3, #48	; 0x30
 800651a:	2b09      	cmp	r3, #9
 800651c:	d94e      	bls.n	80065bc <_vfiprintf_r+0x1c4>
 800651e:	b1b0      	cbz	r0, 800654e <_vfiprintf_r+0x156>
 8006520:	9207      	str	r2, [sp, #28]
 8006522:	e014      	b.n	800654e <_vfiprintf_r+0x156>
 8006524:	eba0 0308 	sub.w	r3, r0, r8
 8006528:	fa09 f303 	lsl.w	r3, r9, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	46a2      	mov	sl, r4
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	e7d2      	b.n	80064da <_vfiprintf_r+0xe2>
 8006534:	9b03      	ldr	r3, [sp, #12]
 8006536:	1d19      	adds	r1, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	9103      	str	r1, [sp, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfbb      	ittet	lt
 8006540:	425b      	neglt	r3, r3
 8006542:	f042 0202 	orrlt.w	r2, r2, #2
 8006546:	9307      	strge	r3, [sp, #28]
 8006548:	9307      	strlt	r3, [sp, #28]
 800654a:	bfb8      	it	lt
 800654c:	9204      	strlt	r2, [sp, #16]
 800654e:	7823      	ldrb	r3, [r4, #0]
 8006550:	2b2e      	cmp	r3, #46	; 0x2e
 8006552:	d10c      	bne.n	800656e <_vfiprintf_r+0x176>
 8006554:	7863      	ldrb	r3, [r4, #1]
 8006556:	2b2a      	cmp	r3, #42	; 0x2a
 8006558:	d135      	bne.n	80065c6 <_vfiprintf_r+0x1ce>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	3402      	adds	r4, #2
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	9203      	str	r2, [sp, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfb8      	it	lt
 8006568:	f04f 33ff 	movlt.w	r3, #4294967295
 800656c:	9305      	str	r3, [sp, #20]
 800656e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006648 <_vfiprintf_r+0x250>
 8006572:	2203      	movs	r2, #3
 8006574:	4650      	mov	r0, sl
 8006576:	7821      	ldrb	r1, [r4, #0]
 8006578:	f000 fcf8 	bl	8006f6c <memchr>
 800657c:	b140      	cbz	r0, 8006590 <_vfiprintf_r+0x198>
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	eba0 000a 	sub.w	r0, r0, sl
 8006584:	fa03 f000 	lsl.w	r0, r3, r0
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	3401      	adds	r4, #1
 800658c:	4303      	orrs	r3, r0
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006594:	2206      	movs	r2, #6
 8006596:	482d      	ldr	r0, [pc, #180]	; (800664c <_vfiprintf_r+0x254>)
 8006598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659c:	f000 fce6 	bl	8006f6c <memchr>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d03f      	beq.n	8006624 <_vfiprintf_r+0x22c>
 80065a4:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <_vfiprintf_r+0x258>)
 80065a6:	bb1b      	cbnz	r3, 80065f0 <_vfiprintf_r+0x1f8>
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	3307      	adds	r3, #7
 80065ac:	f023 0307 	bic.w	r3, r3, #7
 80065b0:	3308      	adds	r3, #8
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	443b      	add	r3, r7
 80065b8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ba:	e767      	b.n	800648c <_vfiprintf_r+0x94>
 80065bc:	460c      	mov	r4, r1
 80065be:	2001      	movs	r0, #1
 80065c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c4:	e7a5      	b.n	8006512 <_vfiprintf_r+0x11a>
 80065c6:	2300      	movs	r3, #0
 80065c8:	f04f 0c0a 	mov.w	ip, #10
 80065cc:	4619      	mov	r1, r3
 80065ce:	3401      	adds	r4, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d8:	3a30      	subs	r2, #48	; 0x30
 80065da:	2a09      	cmp	r2, #9
 80065dc:	d903      	bls.n	80065e6 <_vfiprintf_r+0x1ee>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0c5      	beq.n	800656e <_vfiprintf_r+0x176>
 80065e2:	9105      	str	r1, [sp, #20]
 80065e4:	e7c3      	b.n	800656e <_vfiprintf_r+0x176>
 80065e6:	4604      	mov	r4, r0
 80065e8:	2301      	movs	r3, #1
 80065ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ee:	e7f0      	b.n	80065d2 <_vfiprintf_r+0x1da>
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	462a      	mov	r2, r5
 80065f6:	4630      	mov	r0, r6
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <_vfiprintf_r+0x25c>)
 80065fa:	a904      	add	r1, sp, #16
 80065fc:	f3af 8000 	nop.w
 8006600:	4607      	mov	r7, r0
 8006602:	1c78      	adds	r0, r7, #1
 8006604:	d1d6      	bne.n	80065b4 <_vfiprintf_r+0x1bc>
 8006606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006608:	07d9      	lsls	r1, r3, #31
 800660a:	d405      	bmi.n	8006618 <_vfiprintf_r+0x220>
 800660c:	89ab      	ldrh	r3, [r5, #12]
 800660e:	059a      	lsls	r2, r3, #22
 8006610:	d402      	bmi.n	8006618 <_vfiprintf_r+0x220>
 8006612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006614:	f000 fc43 	bl	8006e9e <__retarget_lock_release_recursive>
 8006618:	89ab      	ldrh	r3, [r5, #12]
 800661a:	065b      	lsls	r3, r3, #25
 800661c:	f53f af12 	bmi.w	8006444 <_vfiprintf_r+0x4c>
 8006620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006622:	e711      	b.n	8006448 <_vfiprintf_r+0x50>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	462a      	mov	r2, r5
 800662a:	4630      	mov	r0, r6
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_vfiprintf_r+0x25c>)
 800662e:	a904      	add	r1, sp, #16
 8006630:	f000 f882 	bl	8006738 <_printf_i>
 8006634:	e7e4      	b.n	8006600 <_vfiprintf_r+0x208>
 8006636:	bf00      	nop
 8006638:	08008470 	.word	0x08008470
 800663c:	08008490 	.word	0x08008490
 8006640:	08008450 	.word	0x08008450
 8006644:	0800841a 	.word	0x0800841a
 8006648:	08008420 	.word	0x08008420
 800664c:	08008424 	.word	0x08008424
 8006650:	00000000 	.word	0x00000000
 8006654:	080063d3 	.word	0x080063d3

08006658 <_printf_common>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	4616      	mov	r6, r2
 800665e:	4699      	mov	r9, r3
 8006660:	688a      	ldr	r2, [r1, #8]
 8006662:	690b      	ldr	r3, [r1, #16]
 8006664:	4607      	mov	r7, r0
 8006666:	4293      	cmp	r3, r2
 8006668:	bfb8      	it	lt
 800666a:	4613      	movlt	r3, r2
 800666c:	6033      	str	r3, [r6, #0]
 800666e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006672:	460c      	mov	r4, r1
 8006674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006678:	b10a      	cbz	r2, 800667e <_printf_common+0x26>
 800667a:	3301      	adds	r3, #1
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	0699      	lsls	r1, r3, #26
 8006682:	bf42      	ittt	mi
 8006684:	6833      	ldrmi	r3, [r6, #0]
 8006686:	3302      	addmi	r3, #2
 8006688:	6033      	strmi	r3, [r6, #0]
 800668a:	6825      	ldr	r5, [r4, #0]
 800668c:	f015 0506 	ands.w	r5, r5, #6
 8006690:	d106      	bne.n	80066a0 <_printf_common+0x48>
 8006692:	f104 0a19 	add.w	sl, r4, #25
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	6832      	ldr	r2, [r6, #0]
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	42ab      	cmp	r3, r5
 800669e:	dc28      	bgt.n	80066f2 <_printf_common+0x9a>
 80066a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066a4:	1e13      	subs	r3, r2, #0
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	bf18      	it	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	0692      	lsls	r2, r2, #26
 80066ae:	d42d      	bmi.n	800670c <_printf_common+0xb4>
 80066b0:	4649      	mov	r1, r9
 80066b2:	4638      	mov	r0, r7
 80066b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b8:	47c0      	blx	r8
 80066ba:	3001      	adds	r0, #1
 80066bc:	d020      	beq.n	8006700 <_printf_common+0xa8>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	68e5      	ldr	r5, [r4, #12]
 80066c2:	f003 0306 	and.w	r3, r3, #6
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	bf18      	it	ne
 80066ca:	2500      	movne	r5, #0
 80066cc:	6832      	ldr	r2, [r6, #0]
 80066ce:	f04f 0600 	mov.w	r6, #0
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	bf08      	it	eq
 80066d6:	1aad      	subeq	r5, r5, r2
 80066d8:	6922      	ldr	r2, [r4, #16]
 80066da:	bf08      	it	eq
 80066dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bfc4      	itt	gt
 80066e4:	1a9b      	subgt	r3, r3, r2
 80066e6:	18ed      	addgt	r5, r5, r3
 80066e8:	341a      	adds	r4, #26
 80066ea:	42b5      	cmp	r5, r6
 80066ec:	d11a      	bne.n	8006724 <_printf_common+0xcc>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e008      	b.n	8006704 <_printf_common+0xac>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4649      	mov	r1, r9
 80066f8:	4638      	mov	r0, r7
 80066fa:	47c0      	blx	r8
 80066fc:	3001      	adds	r0, #1
 80066fe:	d103      	bne.n	8006708 <_printf_common+0xb0>
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	3501      	adds	r5, #1
 800670a:	e7c4      	b.n	8006696 <_printf_common+0x3e>
 800670c:	2030      	movs	r0, #48	; 0x30
 800670e:	18e1      	adds	r1, r4, r3
 8006710:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800671a:	4422      	add	r2, r4
 800671c:	3302      	adds	r3, #2
 800671e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006722:	e7c5      	b.n	80066b0 <_printf_common+0x58>
 8006724:	2301      	movs	r3, #1
 8006726:	4622      	mov	r2, r4
 8006728:	4649      	mov	r1, r9
 800672a:	4638      	mov	r0, r7
 800672c:	47c0      	blx	r8
 800672e:	3001      	adds	r0, #1
 8006730:	d0e6      	beq.n	8006700 <_printf_common+0xa8>
 8006732:	3601      	adds	r6, #1
 8006734:	e7d9      	b.n	80066ea <_printf_common+0x92>
	...

08006738 <_printf_i>:
 8006738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	7e0f      	ldrb	r7, [r1, #24]
 800673e:	4691      	mov	r9, r2
 8006740:	2f78      	cmp	r7, #120	; 0x78
 8006742:	4680      	mov	r8, r0
 8006744:	460c      	mov	r4, r1
 8006746:	469a      	mov	sl, r3
 8006748:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800674a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800674e:	d807      	bhi.n	8006760 <_printf_i+0x28>
 8006750:	2f62      	cmp	r7, #98	; 0x62
 8006752:	d80a      	bhi.n	800676a <_printf_i+0x32>
 8006754:	2f00      	cmp	r7, #0
 8006756:	f000 80d9 	beq.w	800690c <_printf_i+0x1d4>
 800675a:	2f58      	cmp	r7, #88	; 0x58
 800675c:	f000 80a4 	beq.w	80068a8 <_printf_i+0x170>
 8006760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006768:	e03a      	b.n	80067e0 <_printf_i+0xa8>
 800676a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800676e:	2b15      	cmp	r3, #21
 8006770:	d8f6      	bhi.n	8006760 <_printf_i+0x28>
 8006772:	a101      	add	r1, pc, #4	; (adr r1, 8006778 <_printf_i+0x40>)
 8006774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006778:	080067d1 	.word	0x080067d1
 800677c:	080067e5 	.word	0x080067e5
 8006780:	08006761 	.word	0x08006761
 8006784:	08006761 	.word	0x08006761
 8006788:	08006761 	.word	0x08006761
 800678c:	08006761 	.word	0x08006761
 8006790:	080067e5 	.word	0x080067e5
 8006794:	08006761 	.word	0x08006761
 8006798:	08006761 	.word	0x08006761
 800679c:	08006761 	.word	0x08006761
 80067a0:	08006761 	.word	0x08006761
 80067a4:	080068f3 	.word	0x080068f3
 80067a8:	08006815 	.word	0x08006815
 80067ac:	080068d5 	.word	0x080068d5
 80067b0:	08006761 	.word	0x08006761
 80067b4:	08006761 	.word	0x08006761
 80067b8:	08006915 	.word	0x08006915
 80067bc:	08006761 	.word	0x08006761
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006761 	.word	0x08006761
 80067c8:	08006761 	.word	0x08006761
 80067cc:	080068dd 	.word	0x080068dd
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	602a      	str	r2, [r5, #0]
 80067d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0a4      	b.n	800692e <_printf_i+0x1f6>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	6829      	ldr	r1, [r5, #0]
 80067e8:	0606      	lsls	r6, r0, #24
 80067ea:	f101 0304 	add.w	r3, r1, #4
 80067ee:	d50a      	bpl.n	8006806 <_printf_i+0xce>
 80067f0:	680e      	ldr	r6, [r1, #0]
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	2e00      	cmp	r6, #0
 80067f6:	da03      	bge.n	8006800 <_printf_i+0xc8>
 80067f8:	232d      	movs	r3, #45	; 0x2d
 80067fa:	4276      	negs	r6, r6
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006800:	230a      	movs	r3, #10
 8006802:	485e      	ldr	r0, [pc, #376]	; (800697c <_printf_i+0x244>)
 8006804:	e019      	b.n	800683a <_printf_i+0x102>
 8006806:	680e      	ldr	r6, [r1, #0]
 8006808:	f010 0f40 	tst.w	r0, #64	; 0x40
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	bf18      	it	ne
 8006810:	b236      	sxthne	r6, r6
 8006812:	e7ef      	b.n	80067f4 <_printf_i+0xbc>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	6029      	str	r1, [r5, #0]
 800681c:	0601      	lsls	r1, r0, #24
 800681e:	d501      	bpl.n	8006824 <_printf_i+0xec>
 8006820:	681e      	ldr	r6, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0xf2>
 8006824:	0646      	lsls	r6, r0, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0xe8>
 8006828:	881e      	ldrh	r6, [r3, #0]
 800682a:	2f6f      	cmp	r7, #111	; 0x6f
 800682c:	bf0c      	ite	eq
 800682e:	2308      	moveq	r3, #8
 8006830:	230a      	movne	r3, #10
 8006832:	4852      	ldr	r0, [pc, #328]	; (800697c <_printf_i+0x244>)
 8006834:	2100      	movs	r1, #0
 8006836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800683a:	6865      	ldr	r5, [r4, #4]
 800683c:	2d00      	cmp	r5, #0
 800683e:	bfa8      	it	ge
 8006840:	6821      	ldrge	r1, [r4, #0]
 8006842:	60a5      	str	r5, [r4, #8]
 8006844:	bfa4      	itt	ge
 8006846:	f021 0104 	bicge.w	r1, r1, #4
 800684a:	6021      	strge	r1, [r4, #0]
 800684c:	b90e      	cbnz	r6, 8006852 <_printf_i+0x11a>
 800684e:	2d00      	cmp	r5, #0
 8006850:	d04d      	beq.n	80068ee <_printf_i+0x1b6>
 8006852:	4615      	mov	r5, r2
 8006854:	fbb6 f1f3 	udiv	r1, r6, r3
 8006858:	fb03 6711 	mls	r7, r3, r1, r6
 800685c:	5dc7      	ldrb	r7, [r0, r7]
 800685e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006862:	4637      	mov	r7, r6
 8006864:	42bb      	cmp	r3, r7
 8006866:	460e      	mov	r6, r1
 8006868:	d9f4      	bls.n	8006854 <_printf_i+0x11c>
 800686a:	2b08      	cmp	r3, #8
 800686c:	d10b      	bne.n	8006886 <_printf_i+0x14e>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	07de      	lsls	r6, r3, #31
 8006872:	d508      	bpl.n	8006886 <_printf_i+0x14e>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6861      	ldr	r1, [r4, #4]
 8006878:	4299      	cmp	r1, r3
 800687a:	bfde      	ittt	le
 800687c:	2330      	movle	r3, #48	; 0x30
 800687e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006886:	1b52      	subs	r2, r2, r5
 8006888:	6122      	str	r2, [r4, #16]
 800688a:	464b      	mov	r3, r9
 800688c:	4621      	mov	r1, r4
 800688e:	4640      	mov	r0, r8
 8006890:	f8cd a000 	str.w	sl, [sp]
 8006894:	aa03      	add	r2, sp, #12
 8006896:	f7ff fedf 	bl	8006658 <_printf_common>
 800689a:	3001      	adds	r0, #1
 800689c:	d14c      	bne.n	8006938 <_printf_i+0x200>
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	b004      	add	sp, #16
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a8:	4834      	ldr	r0, [pc, #208]	; (800697c <_printf_i+0x244>)
 80068aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068ae:	6829      	ldr	r1, [r5, #0]
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80068b6:	6029      	str	r1, [r5, #0]
 80068b8:	061d      	lsls	r5, r3, #24
 80068ba:	d514      	bpl.n	80068e6 <_printf_i+0x1ae>
 80068bc:	07df      	lsls	r7, r3, #31
 80068be:	bf44      	itt	mi
 80068c0:	f043 0320 	orrmi.w	r3, r3, #32
 80068c4:	6023      	strmi	r3, [r4, #0]
 80068c6:	b91e      	cbnz	r6, 80068d0 <_printf_i+0x198>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	2310      	movs	r3, #16
 80068d2:	e7af      	b.n	8006834 <_printf_i+0xfc>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	f043 0320 	orr.w	r3, r3, #32
 80068da:	6023      	str	r3, [r4, #0]
 80068dc:	2378      	movs	r3, #120	; 0x78
 80068de:	4828      	ldr	r0, [pc, #160]	; (8006980 <_printf_i+0x248>)
 80068e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e4:	e7e3      	b.n	80068ae <_printf_i+0x176>
 80068e6:	0659      	lsls	r1, r3, #25
 80068e8:	bf48      	it	mi
 80068ea:	b2b6      	uxthmi	r6, r6
 80068ec:	e7e6      	b.n	80068bc <_printf_i+0x184>
 80068ee:	4615      	mov	r5, r2
 80068f0:	e7bb      	b.n	800686a <_printf_i+0x132>
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	6826      	ldr	r6, [r4, #0]
 80068f6:	1d18      	adds	r0, r3, #4
 80068f8:	6961      	ldr	r1, [r4, #20]
 80068fa:	6028      	str	r0, [r5, #0]
 80068fc:	0635      	lsls	r5, r6, #24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	d501      	bpl.n	8006906 <_printf_i+0x1ce>
 8006902:	6019      	str	r1, [r3, #0]
 8006904:	e002      	b.n	800690c <_printf_i+0x1d4>
 8006906:	0670      	lsls	r0, r6, #25
 8006908:	d5fb      	bpl.n	8006902 <_printf_i+0x1ca>
 800690a:	8019      	strh	r1, [r3, #0]
 800690c:	2300      	movs	r3, #0
 800690e:	4615      	mov	r5, r2
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	e7ba      	b.n	800688a <_printf_i+0x152>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	2100      	movs	r1, #0
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	602a      	str	r2, [r5, #0]
 800691c:	681d      	ldr	r5, [r3, #0]
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	4628      	mov	r0, r5
 8006922:	f000 fb23 	bl	8006f6c <memchr>
 8006926:	b108      	cbz	r0, 800692c <_printf_i+0x1f4>
 8006928:	1b40      	subs	r0, r0, r5
 800692a:	6060      	str	r0, [r4, #4]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	6123      	str	r3, [r4, #16]
 8006930:	2300      	movs	r3, #0
 8006932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006936:	e7a8      	b.n	800688a <_printf_i+0x152>
 8006938:	462a      	mov	r2, r5
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	47d0      	blx	sl
 8006942:	3001      	adds	r0, #1
 8006944:	d0ab      	beq.n	800689e <_printf_i+0x166>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	079b      	lsls	r3, r3, #30
 800694a:	d413      	bmi.n	8006974 <_printf_i+0x23c>
 800694c:	68e0      	ldr	r0, [r4, #12]
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	4298      	cmp	r0, r3
 8006952:	bfb8      	it	lt
 8006954:	4618      	movlt	r0, r3
 8006956:	e7a4      	b.n	80068a2 <_printf_i+0x16a>
 8006958:	2301      	movs	r3, #1
 800695a:	4632      	mov	r2, r6
 800695c:	4649      	mov	r1, r9
 800695e:	4640      	mov	r0, r8
 8006960:	47d0      	blx	sl
 8006962:	3001      	adds	r0, #1
 8006964:	d09b      	beq.n	800689e <_printf_i+0x166>
 8006966:	3501      	adds	r5, #1
 8006968:	68e3      	ldr	r3, [r4, #12]
 800696a:	9903      	ldr	r1, [sp, #12]
 800696c:	1a5b      	subs	r3, r3, r1
 800696e:	42ab      	cmp	r3, r5
 8006970:	dcf2      	bgt.n	8006958 <_printf_i+0x220>
 8006972:	e7eb      	b.n	800694c <_printf_i+0x214>
 8006974:	2500      	movs	r5, #0
 8006976:	f104 0619 	add.w	r6, r4, #25
 800697a:	e7f5      	b.n	8006968 <_printf_i+0x230>
 800697c:	0800842b 	.word	0x0800842b
 8006980:	0800843c 	.word	0x0800843c

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	2300      	movs	r3, #0
 8006988:	4d05      	ldr	r5, [pc, #20]	; (80069a0 <_sbrk_r+0x1c>)
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa fe02 	bl	8001598 <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	2000026c 	.word	0x2000026c

080069a4 <__swbuf_r>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	460e      	mov	r6, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	4605      	mov	r5, r0
 80069ac:	b118      	cbz	r0, 80069b6 <__swbuf_r+0x12>
 80069ae:	6983      	ldr	r3, [r0, #24]
 80069b0:	b90b      	cbnz	r3, 80069b6 <__swbuf_r+0x12>
 80069b2:	f000 f9d5 	bl	8006d60 <__sinit>
 80069b6:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <__swbuf_r+0x98>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d12b      	bne.n	8006a14 <__swbuf_r+0x70>
 80069bc:	686c      	ldr	r4, [r5, #4]
 80069be:	69a3      	ldr	r3, [r4, #24]
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	071a      	lsls	r2, r3, #28
 80069c6:	d52f      	bpl.n	8006a28 <__swbuf_r+0x84>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	b36b      	cbz	r3, 8006a28 <__swbuf_r+0x84>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	b2f6      	uxtb	r6, r6
 80069d2:	1ac0      	subs	r0, r0, r3
 80069d4:	6963      	ldr	r3, [r4, #20]
 80069d6:	4637      	mov	r7, r6
 80069d8:	4283      	cmp	r3, r0
 80069da:	dc04      	bgt.n	80069e6 <__swbuf_r+0x42>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f92a 	bl	8006c38 <_fflush_r>
 80069e4:	bb30      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 80069e6:	68a3      	ldr	r3, [r4, #8]
 80069e8:	3001      	adds	r0, #1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	6022      	str	r2, [r4, #0]
 80069f4:	701e      	strb	r6, [r3, #0]
 80069f6:	6963      	ldr	r3, [r4, #20]
 80069f8:	4283      	cmp	r3, r0
 80069fa:	d004      	beq.n	8006a06 <__swbuf_r+0x62>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	07db      	lsls	r3, r3, #31
 8006a00:	d506      	bpl.n	8006a10 <__swbuf_r+0x6c>
 8006a02:	2e0a      	cmp	r6, #10
 8006a04:	d104      	bne.n	8006a10 <__swbuf_r+0x6c>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f915 	bl	8006c38 <_fflush_r>
 8006a0e:	b988      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 8006a10:	4638      	mov	r0, r7
 8006a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <__swbuf_r+0x9c>)
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d101      	bne.n	8006a1e <__swbuf_r+0x7a>
 8006a1a:	68ac      	ldr	r4, [r5, #8]
 8006a1c:	e7cf      	b.n	80069be <__swbuf_r+0x1a>
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <__swbuf_r+0xa0>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	bf08      	it	eq
 8006a24:	68ec      	ldreq	r4, [r5, #12]
 8006a26:	e7ca      	b.n	80069be <__swbuf_r+0x1a>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f80c 	bl	8006a48 <__swsetup_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0cb      	beq.n	80069cc <__swbuf_r+0x28>
 8006a34:	f04f 37ff 	mov.w	r7, #4294967295
 8006a38:	e7ea      	b.n	8006a10 <__swbuf_r+0x6c>
 8006a3a:	bf00      	nop
 8006a3c:	08008470 	.word	0x08008470
 8006a40:	08008490 	.word	0x08008490
 8006a44:	08008450 	.word	0x08008450

08006a48 <__swsetup_r>:
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <__swsetup_r+0xcc>)
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	b125      	cbz	r5, 8006a5e <__swsetup_r+0x16>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	b913      	cbnz	r3, 8006a5e <__swsetup_r+0x16>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 f981 	bl	8006d60 <__sinit>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <__swsetup_r+0xd0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d10f      	bne.n	8006a84 <__swsetup_r+0x3c>
 8006a64:	686c      	ldr	r4, [r5, #4]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	d42c      	bmi.n	8006aca <__swsetup_r+0x82>
 8006a70:	06dd      	lsls	r5, r3, #27
 8006a72:	d411      	bmi.n	8006a98 <__swsetup_r+0x50>
 8006a74:	2309      	movs	r3, #9
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e03e      	b.n	8006b02 <__swsetup_r+0xba>
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <__swsetup_r+0xd4>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swsetup_r+0x46>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7eb      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__swsetup_r+0xd8>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7e6      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a98:	0758      	lsls	r0, r3, #29
 8006a9a:	d512      	bpl.n	8006ac2 <__swsetup_r+0x7a>
 8006a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9e:	b141      	cbz	r1, 8006ab2 <__swsetup_r+0x6a>
 8006aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d002      	beq.n	8006aae <__swsetup_r+0x66>
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fba1 	bl	80061f0 <_free_r>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0308 	orr.w	r3, r3, #8
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <__swsetup_r+0x9a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d003      	beq.n	8006ae2 <__swsetup_r+0x9a>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 fa05 	bl	8006eec <__smakebuf_r>
 8006ae2:	89a0      	ldrh	r0, [r4, #12]
 8006ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae8:	f010 0301 	ands.w	r3, r0, #1
 8006aec:	d00a      	beq.n	8006b04 <__swsetup_r+0xbc>
 8006aee:	2300      	movs	r3, #0
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6963      	ldr	r3, [r4, #20]
 8006af4:	425b      	negs	r3, r3
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	b943      	cbnz	r3, 8006b0e <__swsetup_r+0xc6>
 8006afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b00:	d1ba      	bne.n	8006a78 <__swsetup_r+0x30>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	0781      	lsls	r1, r0, #30
 8006b06:	bf58      	it	pl
 8006b08:	6963      	ldrpl	r3, [r4, #20]
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	e7f4      	b.n	8006af8 <__swsetup_r+0xb0>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f7      	b.n	8006b02 <__swsetup_r+0xba>
 8006b12:	bf00      	nop
 8006b14:	20000014 	.word	0x20000014
 8006b18:	08008470 	.word	0x08008470
 8006b1c:	08008490 	.word	0x08008490
 8006b20:	08008450 	.word	0x08008450

08006b24 <abort>:
 8006b24:	2006      	movs	r0, #6
 8006b26:	b508      	push	{r3, lr}
 8006b28:	f000 fa62 	bl	8006ff0 <raise>
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	f7fa fcc0 	bl	80014b2 <_exit>
	...

08006b34 <__sflush_r>:
 8006b34:	898a      	ldrh	r2, [r1, #12]
 8006b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b38:	4605      	mov	r5, r0
 8006b3a:	0710      	lsls	r0, r2, #28
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	d457      	bmi.n	8006bf0 <__sflush_r+0xbc>
 8006b40:	684b      	ldr	r3, [r1, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dc04      	bgt.n	8006b50 <__sflush_r+0x1c>
 8006b46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc01      	bgt.n	8006b50 <__sflush_r+0x1c>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d0fa      	beq.n	8006b4c <__sflush_r+0x18>
 8006b56:	2300      	movs	r3, #0
 8006b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b5c:	682f      	ldr	r7, [r5, #0]
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	d032      	beq.n	8006bc8 <__sflush_r+0x94>
 8006b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	075a      	lsls	r2, r3, #29
 8006b68:	d505      	bpl.n	8006b76 <__sflush_r+0x42>
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	1ac0      	subs	r0, r0, r3
 8006b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b70:	b10b      	cbz	r3, 8006b76 <__sflush_r+0x42>
 8006b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b74:	1ac0      	subs	r0, r0, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	6a21      	ldr	r1, [r4, #32]
 8006b80:	47b0      	blx	r6
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	d106      	bne.n	8006b96 <__sflush_r+0x62>
 8006b88:	6829      	ldr	r1, [r5, #0]
 8006b8a:	291d      	cmp	r1, #29
 8006b8c:	d82c      	bhi.n	8006be8 <__sflush_r+0xb4>
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <__sflush_r+0x100>)
 8006b90:	40ca      	lsrs	r2, r1
 8006b92:	07d6      	lsls	r6, r2, #31
 8006b94:	d528      	bpl.n	8006be8 <__sflush_r+0xb4>
 8006b96:	2200      	movs	r2, #0
 8006b98:	6062      	str	r2, [r4, #4]
 8006b9a:	6922      	ldr	r2, [r4, #16]
 8006b9c:	04d9      	lsls	r1, r3, #19
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	d504      	bpl.n	8006bac <__sflush_r+0x78>
 8006ba2:	1c42      	adds	r2, r0, #1
 8006ba4:	d101      	bne.n	8006baa <__sflush_r+0x76>
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	b903      	cbnz	r3, 8006bac <__sflush_r+0x78>
 8006baa:	6560      	str	r0, [r4, #84]	; 0x54
 8006bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bae:	602f      	str	r7, [r5, #0]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d0cb      	beq.n	8006b4c <__sflush_r+0x18>
 8006bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <__sflush_r+0x8e>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f7ff fb17 	bl	80061f0 <_free_r>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bc6:	e7c2      	b.n	8006b4e <__sflush_r+0x1a>
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b0      	blx	r6
 8006bd0:	1c41      	adds	r1, r0, #1
 8006bd2:	d1c7      	bne.n	8006b64 <__sflush_r+0x30>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0c4      	beq.n	8006b64 <__sflush_r+0x30>
 8006bda:	2b1d      	cmp	r3, #29
 8006bdc:	d001      	beq.n	8006be2 <__sflush_r+0xae>
 8006bde:	2b16      	cmp	r3, #22
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0xb2>
 8006be2:	602f      	str	r7, [r5, #0]
 8006be4:	e7b2      	b.n	8006b4c <__sflush_r+0x18>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e7ae      	b.n	8006b4e <__sflush_r+0x1a>
 8006bf0:	690f      	ldr	r7, [r1, #16]
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d0aa      	beq.n	8006b4c <__sflush_r+0x18>
 8006bf6:	0793      	lsls	r3, r2, #30
 8006bf8:	bf18      	it	ne
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	680e      	ldr	r6, [r1, #0]
 8006bfe:	bf08      	it	eq
 8006c00:	694b      	ldreq	r3, [r1, #20]
 8006c02:	1bf6      	subs	r6, r6, r7
 8006c04:	600f      	str	r7, [r1, #0]
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	dd9f      	ble.n	8006b4c <__sflush_r+0x18>
 8006c0c:	4633      	mov	r3, r6
 8006c0e:	463a      	mov	r2, r7
 8006c10:	4628      	mov	r0, r5
 8006c12:	6a21      	ldr	r1, [r4, #32]
 8006c14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c18:	47e0      	blx	ip
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	dc06      	bgt.n	8006c2c <__sflush_r+0xf8>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e790      	b.n	8006b4e <__sflush_r+0x1a>
 8006c2c:	4407      	add	r7, r0
 8006c2e:	1a36      	subs	r6, r6, r0
 8006c30:	e7ea      	b.n	8006c08 <__sflush_r+0xd4>
 8006c32:	bf00      	nop
 8006c34:	20400001 	.word	0x20400001

08006c38 <_fflush_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	690b      	ldr	r3, [r1, #16]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	b913      	cbnz	r3, 8006c48 <_fflush_r+0x10>
 8006c42:	2500      	movs	r5, #0
 8006c44:	4628      	mov	r0, r5
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	b118      	cbz	r0, 8006c52 <_fflush_r+0x1a>
 8006c4a:	6983      	ldr	r3, [r0, #24]
 8006c4c:	b90b      	cbnz	r3, 8006c52 <_fflush_r+0x1a>
 8006c4e:	f000 f887 	bl	8006d60 <__sinit>
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <_fflush_r+0x6c>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d11b      	bne.n	8006c90 <_fflush_r+0x58>
 8006c58:	686c      	ldr	r4, [r5, #4]
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ef      	beq.n	8006c42 <_fflush_r+0xa>
 8006c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d404      	bmi.n	8006c72 <_fflush_r+0x3a>
 8006c68:	0599      	lsls	r1, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_fflush_r+0x3a>
 8006c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6e:	f000 f915 	bl	8006e9c <__retarget_lock_acquire_recursive>
 8006c72:	4628      	mov	r0, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7ff ff5d 	bl	8006b34 <__sflush_r>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	07da      	lsls	r2, r3, #31
 8006c80:	d4e0      	bmi.n	8006c44 <_fflush_r+0xc>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	059b      	lsls	r3, r3, #22
 8006c86:	d4dd      	bmi.n	8006c44 <_fflush_r+0xc>
 8006c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8a:	f000 f908 	bl	8006e9e <__retarget_lock_release_recursive>
 8006c8e:	e7d9      	b.n	8006c44 <_fflush_r+0xc>
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <_fflush_r+0x70>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d101      	bne.n	8006c9a <_fflush_r+0x62>
 8006c96:	68ac      	ldr	r4, [r5, #8]
 8006c98:	e7df      	b.n	8006c5a <_fflush_r+0x22>
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <_fflush_r+0x74>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	bf08      	it	eq
 8006ca0:	68ec      	ldreq	r4, [r5, #12]
 8006ca2:	e7da      	b.n	8006c5a <_fflush_r+0x22>
 8006ca4:	08008470 	.word	0x08008470
 8006ca8:	08008490 	.word	0x08008490
 8006cac:	08008450 	.word	0x08008450

08006cb0 <std>:
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cbe:	6083      	str	r3, [r0, #8]
 8006cc0:	8181      	strh	r1, [r0, #12]
 8006cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8006cc4:	81c2      	strh	r2, [r0, #14]
 8006cc6:	6183      	str	r3, [r0, #24]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2208      	movs	r2, #8
 8006ccc:	305c      	adds	r0, #92	; 0x5c
 8006cce:	f7ff f9e3 	bl	8006098 <memset>
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <std+0x38>)
 8006cd4:	6224      	str	r4, [r4, #32]
 8006cd6:	6263      	str	r3, [r4, #36]	; 0x24
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <std+0x3c>)
 8006cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <std+0x40>)
 8006cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <std+0x44>)
 8006ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08007029 	.word	0x08007029
 8006cec:	0800704b 	.word	0x0800704b
 8006cf0:	08007083 	.word	0x08007083
 8006cf4:	080070a7 	.word	0x080070a7

08006cf8 <_cleanup_r>:
 8006cf8:	4901      	ldr	r1, [pc, #4]	; (8006d00 <_cleanup_r+0x8>)
 8006cfa:	f000 b8af 	b.w	8006e5c <_fwalk_reent>
 8006cfe:	bf00      	nop
 8006d00:	08006c39 	.word	0x08006c39

08006d04 <__sfmoreglue>:
 8006d04:	2268      	movs	r2, #104	; 0x68
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	1e4d      	subs	r5, r1, #1
 8006d0a:	4355      	muls	r5, r2
 8006d0c:	460e      	mov	r6, r1
 8006d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d12:	f7ff fad5 	bl	80062c0 <_malloc_r>
 8006d16:	4604      	mov	r4, r0
 8006d18:	b140      	cbz	r0, 8006d2c <__sfmoreglue+0x28>
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d20:	300c      	adds	r0, #12
 8006d22:	60a0      	str	r0, [r4, #8]
 8006d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d28:	f7ff f9b6 	bl	8006098 <memset>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}

08006d30 <__sfp_lock_acquire>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__sfp_lock_acquire+0x8>)
 8006d32:	f000 b8b3 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006d36:	bf00      	nop
 8006d38:	20000269 	.word	0x20000269

08006d3c <__sfp_lock_release>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sfp_lock_release+0x8>)
 8006d3e:	f000 b8ae 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006d42:	bf00      	nop
 8006d44:	20000269 	.word	0x20000269

08006d48 <__sinit_lock_acquire>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__sinit_lock_acquire+0x8>)
 8006d4a:	f000 b8a7 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	2000026a 	.word	0x2000026a

08006d54 <__sinit_lock_release>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__sinit_lock_release+0x8>)
 8006d56:	f000 b8a2 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	2000026a 	.word	0x2000026a

08006d60 <__sinit>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	4604      	mov	r4, r0
 8006d64:	f7ff fff0 	bl	8006d48 <__sinit_lock_acquire>
 8006d68:	69a3      	ldr	r3, [r4, #24]
 8006d6a:	b11b      	cbz	r3, 8006d74 <__sinit+0x14>
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d70:	f7ff bff0 	b.w	8006d54 <__sinit_lock_release>
 8006d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d78:	6523      	str	r3, [r4, #80]	; 0x50
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <__sinit+0x68>)
 8006d7c:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <__sinit+0x6c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	bf08      	it	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bf08      	it	eq
 8006d8c:	61a3      	streq	r3, [r4, #24]
 8006d8e:	f000 f81f 	bl	8006dd0 <__sfp>
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 f81b 	bl	8006dd0 <__sfp>
 8006d9a:	60a0      	str	r0, [r4, #8]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f817 	bl	8006dd0 <__sfp>
 8006da2:	2200      	movs	r2, #0
 8006da4:	2104      	movs	r1, #4
 8006da6:	60e0      	str	r0, [r4, #12]
 8006da8:	6860      	ldr	r0, [r4, #4]
 8006daa:	f7ff ff81 	bl	8006cb0 <std>
 8006dae:	2201      	movs	r2, #1
 8006db0:	2109      	movs	r1, #9
 8006db2:	68a0      	ldr	r0, [r4, #8]
 8006db4:	f7ff ff7c 	bl	8006cb0 <std>
 8006db8:	2202      	movs	r2, #2
 8006dba:	2112      	movs	r1, #18
 8006dbc:	68e0      	ldr	r0, [r4, #12]
 8006dbe:	f7ff ff77 	bl	8006cb0 <std>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61a3      	str	r3, [r4, #24]
 8006dc6:	e7d1      	b.n	8006d6c <__sinit+0xc>
 8006dc8:	08008368 	.word	0x08008368
 8006dcc:	08006cf9 	.word	0x08006cf9

08006dd0 <__sfp>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	f7ff ffac 	bl	8006d30 <__sfp_lock_acquire>
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <__sfp+0x84>)
 8006dda:	681e      	ldr	r6, [r3, #0]
 8006ddc:	69b3      	ldr	r3, [r6, #24]
 8006dde:	b913      	cbnz	r3, 8006de6 <__sfp+0x16>
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff ffbd 	bl	8006d60 <__sinit>
 8006de6:	3648      	adds	r6, #72	; 0x48
 8006de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	d503      	bpl.n	8006df8 <__sfp+0x28>
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	b30b      	cbz	r3, 8006e38 <__sfp+0x68>
 8006df4:	6836      	ldr	r6, [r6, #0]
 8006df6:	e7f7      	b.n	8006de8 <__sfp+0x18>
 8006df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dfc:	b9d5      	cbnz	r5, 8006e34 <__sfp+0x64>
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <__sfp+0x88>)
 8006e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e04:	60e3      	str	r3, [r4, #12]
 8006e06:	6665      	str	r5, [r4, #100]	; 0x64
 8006e08:	f000 f847 	bl	8006e9a <__retarget_lock_init_recursive>
 8006e0c:	f7ff ff96 	bl	8006d3c <__sfp_lock_release>
 8006e10:	2208      	movs	r2, #8
 8006e12:	4629      	mov	r1, r5
 8006e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	61a5      	str	r5, [r4, #24]
 8006e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e24:	f7ff f938 	bl	8006098 <memset>
 8006e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e30:	4620      	mov	r0, r4
 8006e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e34:	3468      	adds	r4, #104	; 0x68
 8006e36:	e7d9      	b.n	8006dec <__sfp+0x1c>
 8006e38:	2104      	movs	r1, #4
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	f7ff ff62 	bl	8006d04 <__sfmoreglue>
 8006e40:	4604      	mov	r4, r0
 8006e42:	6030      	str	r0, [r6, #0]
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1d5      	bne.n	8006df4 <__sfp+0x24>
 8006e48:	f7ff ff78 	bl	8006d3c <__sfp_lock_release>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	e7ee      	b.n	8006e30 <__sfp+0x60>
 8006e52:	bf00      	nop
 8006e54:	08008368 	.word	0x08008368
 8006e58:	ffff0001 	.word	0xffff0001

08006e5c <_fwalk_reent>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4606      	mov	r6, r0
 8006e62:	4688      	mov	r8, r1
 8006e64:	2700      	movs	r7, #0
 8006e66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e72:	d505      	bpl.n	8006e80 <_fwalk_reent+0x24>
 8006e74:	6824      	ldr	r4, [r4, #0]
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	d1f7      	bne.n	8006e6a <_fwalk_reent+0xe>
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e80:	89ab      	ldrh	r3, [r5, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d907      	bls.n	8006e96 <_fwalk_reent+0x3a>
 8006e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	d003      	beq.n	8006e96 <_fwalk_reent+0x3a>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	47c0      	blx	r8
 8006e94:	4307      	orrs	r7, r0
 8006e96:	3568      	adds	r5, #104	; 0x68
 8006e98:	e7e9      	b.n	8006e6e <_fwalk_reent+0x12>

08006e9a <__retarget_lock_init_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_acquire_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <__retarget_lock_release_recursive>:
 8006e9e:	4770      	bx	lr

08006ea0 <__swhatbuf_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	461d      	mov	r5, r3
 8006eae:	b096      	sub	sp, #88	; 0x58
 8006eb0:	da08      	bge.n	8006ec4 <__swhatbuf_r+0x24>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	061a      	lsls	r2, r3, #24
 8006ebc:	d410      	bmi.n	8006ee0 <__swhatbuf_r+0x40>
 8006ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec2:	e00e      	b.n	8006ee2 <__swhatbuf_r+0x42>
 8006ec4:	466a      	mov	r2, sp
 8006ec6:	f000 f915 	bl	80070f4 <_fstat_r>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	dbf1      	blt.n	8006eb2 <__swhatbuf_r+0x12>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ed4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ed8:	425a      	negs	r2, r3
 8006eda:	415a      	adcs	r2, r3
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	e7ee      	b.n	8006ebe <__swhatbuf_r+0x1e>
 8006ee0:	2340      	movs	r3, #64	; 0x40
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	b016      	add	sp, #88	; 0x58
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eec <__smakebuf_r>:
 8006eec:	898b      	ldrh	r3, [r1, #12]
 8006eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef0:	079d      	lsls	r5, r3, #30
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	d507      	bpl.n	8006f08 <__smakebuf_r+0x1c>
 8006ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	6123      	str	r3, [r4, #16]
 8006f00:	2301      	movs	r3, #1
 8006f02:	6163      	str	r3, [r4, #20]
 8006f04:	b002      	add	sp, #8
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	466a      	mov	r2, sp
 8006f0a:	ab01      	add	r3, sp, #4
 8006f0c:	f7ff ffc8 	bl	8006ea0 <__swhatbuf_r>
 8006f10:	9900      	ldr	r1, [sp, #0]
 8006f12:	4605      	mov	r5, r0
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff f9d3 	bl	80062c0 <_malloc_r>
 8006f1a:	b948      	cbnz	r0, 8006f30 <__smakebuf_r+0x44>
 8006f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d4ef      	bmi.n	8006f04 <__smakebuf_r+0x18>
 8006f24:	f023 0303 	bic.w	r3, r3, #3
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	e7e3      	b.n	8006ef8 <__smakebuf_r+0xc>
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <__smakebuf_r+0x7c>)
 8006f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	6020      	str	r0, [r4, #0]
 8006f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	6120      	str	r0, [r4, #16]
 8006f42:	6163      	str	r3, [r4, #20]
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	b15b      	cbz	r3, 8006f60 <__smakebuf_r+0x74>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4e:	f000 f8e3 	bl	8007118 <_isatty_r>
 8006f52:	b128      	cbz	r0, 8006f60 <__smakebuf_r+0x74>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	89a0      	ldrh	r0, [r4, #12]
 8006f62:	4305      	orrs	r5, r0
 8006f64:	81a5      	strh	r5, [r4, #12]
 8006f66:	e7cd      	b.n	8006f04 <__smakebuf_r+0x18>
 8006f68:	08006cf9 	.word	0x08006cf9

08006f6c <memchr>:
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	b2c9      	uxtb	r1, r1
 8006f72:	4402      	add	r2, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	d101      	bne.n	8006f7e <memchr+0x12>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e003      	b.n	8006f86 <memchr+0x1a>
 8006f7e:	7804      	ldrb	r4, [r0, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	428c      	cmp	r4, r1
 8006f84:	d1f6      	bne.n	8006f74 <memchr+0x8>
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f7ff bf87 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000268 	.word	0x20000268

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f7ff bf82 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20000268 	.word	0x20000268

08006fa0 <_raise_r>:
 8006fa0:	291f      	cmp	r1, #31
 8006fa2:	b538      	push	{r3, r4, r5, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	d904      	bls.n	8006fb4 <_raise_r+0x14>
 8006faa:	2316      	movs	r3, #22
 8006fac:	6003      	str	r3, [r0, #0]
 8006fae:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fb6:	b112      	cbz	r2, 8006fbe <_raise_r+0x1e>
 8006fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fbc:	b94b      	cbnz	r3, 8006fd2 <_raise_r+0x32>
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 f830 	bl	8007024 <_getpid_r>
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	4620      	mov	r0, r4
 8006fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fce:	f000 b817 	b.w	8007000 <_kill_r>
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d00a      	beq.n	8006fec <_raise_r+0x4c>
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	d103      	bne.n	8006fe2 <_raise_r+0x42>
 8006fda:	2316      	movs	r3, #22
 8006fdc:	6003      	str	r3, [r0, #0]
 8006fde:	2001      	movs	r0, #1
 8006fe0:	e7e7      	b.n	8006fb2 <_raise_r+0x12>
 8006fe2:	2400      	movs	r4, #0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fea:	4798      	blx	r3
 8006fec:	2000      	movs	r0, #0
 8006fee:	e7e0      	b.n	8006fb2 <_raise_r+0x12>

08006ff0 <raise>:
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <raise+0xc>)
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f7ff bfd3 	b.w	8006fa0 <_raise_r>
 8006ffa:	bf00      	nop
 8006ffc:	20000014 	.word	0x20000014

08007000 <_kill_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	2300      	movs	r3, #0
 8007004:	4d06      	ldr	r5, [pc, #24]	; (8007020 <_kill_r+0x20>)
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	4611      	mov	r1, r2
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	f7fa fa40 	bl	8001492 <_kill>
 8007012:	1c43      	adds	r3, r0, #1
 8007014:	d102      	bne.n	800701c <_kill_r+0x1c>
 8007016:	682b      	ldr	r3, [r5, #0]
 8007018:	b103      	cbz	r3, 800701c <_kill_r+0x1c>
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	bd38      	pop	{r3, r4, r5, pc}
 800701e:	bf00      	nop
 8007020:	2000026c 	.word	0x2000026c

08007024 <_getpid_r>:
 8007024:	f7fa ba2e 	b.w	8001484 <_getpid>

08007028 <__sread>:
 8007028:	b510      	push	{r4, lr}
 800702a:	460c      	mov	r4, r1
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	f000 f894 	bl	800715c <_read_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	bfab      	itete	ge
 8007038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800703a:	89a3      	ldrhlt	r3, [r4, #12]
 800703c:	181b      	addge	r3, r3, r0
 800703e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007042:	bfac      	ite	ge
 8007044:	6563      	strge	r3, [r4, #84]	; 0x54
 8007046:	81a3      	strhlt	r3, [r4, #12]
 8007048:	bd10      	pop	{r4, pc}

0800704a <__swrite>:
 800704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704e:	461f      	mov	r7, r3
 8007050:	898b      	ldrh	r3, [r1, #12]
 8007052:	4605      	mov	r5, r0
 8007054:	05db      	lsls	r3, r3, #23
 8007056:	460c      	mov	r4, r1
 8007058:	4616      	mov	r6, r2
 800705a:	d505      	bpl.n	8007068 <__swrite+0x1e>
 800705c:	2302      	movs	r3, #2
 800705e:	2200      	movs	r2, #0
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f868 	bl	8007138 <_lseek_r>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	4632      	mov	r2, r6
 800706c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	4628      	mov	r0, r5
 8007074:	463b      	mov	r3, r7
 8007076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800707a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800707e:	f000 b817 	b.w	80070b0 <_write_r>

08007082 <__sseek>:
 8007082:	b510      	push	{r4, lr}
 8007084:	460c      	mov	r4, r1
 8007086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708a:	f000 f855 	bl	8007138 <_lseek_r>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	bf15      	itete	ne
 8007094:	6560      	strne	r0, [r4, #84]	; 0x54
 8007096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800709a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800709e:	81a3      	strheq	r3, [r4, #12]
 80070a0:	bf18      	it	ne
 80070a2:	81a3      	strhne	r3, [r4, #12]
 80070a4:	bd10      	pop	{r4, pc}

080070a6 <__sclose>:
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	f000 b813 	b.w	80070d4 <_close_r>
	...

080070b0 <_write_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	2200      	movs	r2, #0
 80070ba:	4d05      	ldr	r5, [pc, #20]	; (80070d0 <_write_r+0x20>)
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa fa1e 	bl	8001500 <_write>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_write_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_write_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	2000026c 	.word	0x2000026c

080070d4 <_close_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	2300      	movs	r3, #0
 80070d8:	4d05      	ldr	r5, [pc, #20]	; (80070f0 <_close_r+0x1c>)
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7fa fa2a 	bl	8001538 <_close>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_close_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_close_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	2000026c 	.word	0x2000026c

080070f4 <_fstat_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	2300      	movs	r3, #0
 80070f8:	4d06      	ldr	r5, [pc, #24]	; (8007114 <_fstat_r+0x20>)
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f7fa fa24 	bl	800154e <_fstat>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d102      	bne.n	8007110 <_fstat_r+0x1c>
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	b103      	cbz	r3, 8007110 <_fstat_r+0x1c>
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	bf00      	nop
 8007114:	2000026c 	.word	0x2000026c

08007118 <_isatty_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d05      	ldr	r5, [pc, #20]	; (8007134 <_isatty_r+0x1c>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fa fa22 	bl	800156c <_isatty>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_isatty_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_isatty_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	2000026c 	.word	0x2000026c

08007138 <_lseek_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	2200      	movs	r2, #0
 8007142:	4d05      	ldr	r5, [pc, #20]	; (8007158 <_lseek_r+0x20>)
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa fa1a 	bl	8001580 <_lseek>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_lseek_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_lseek_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	2000026c 	.word	0x2000026c

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	2200      	movs	r2, #0
 8007166:	4d05      	ldr	r5, [pc, #20]	; (800717c <_read_r+0x20>)
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa f9ab 	bl	80014c6 <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	2000026c 	.word	0x2000026c

08007180 <cos>:
 8007180:	b530      	push	{r4, r5, lr}
 8007182:	4a20      	ldr	r2, [pc, #128]	; (8007204 <cos+0x84>)
 8007184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007188:	4293      	cmp	r3, r2
 800718a:	b087      	sub	sp, #28
 800718c:	dc06      	bgt.n	800719c <cos+0x1c>
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	b007      	add	sp, #28
 8007194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007198:	f000 bb06 	b.w	80077a8 <__kernel_cos>
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <cos+0x88>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	dd05      	ble.n	80071ae <cos+0x2e>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	f7f9 f88b 	bl	80002c0 <__aeabi_dsub>
 80071aa:	b007      	add	sp, #28
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	aa02      	add	r2, sp, #8
 80071b0:	f000 f852 	bl	8007258 <__ieee754_rem_pio2>
 80071b4:	f000 0003 	and.w	r0, r0, #3
 80071b8:	2801      	cmp	r0, #1
 80071ba:	d009      	beq.n	80071d0 <cos+0x50>
 80071bc:	2802      	cmp	r0, #2
 80071be:	d011      	beq.n	80071e4 <cos+0x64>
 80071c0:	b9b8      	cbnz	r0, 80071f2 <cos+0x72>
 80071c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ca:	f000 faed 	bl	80077a8 <__kernel_cos>
 80071ce:	e7ec      	b.n	80071aa <cos+0x2a>
 80071d0:	9000      	str	r0, [sp, #0]
 80071d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071da:	f000 fee5 	bl	8007fa8 <__kernel_sin>
 80071de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80071e2:	e7e2      	b.n	80071aa <cos+0x2a>
 80071e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ec:	f000 fadc 	bl	80077a8 <__kernel_cos>
 80071f0:	e7f5      	b.n	80071de <cos+0x5e>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071fe:	f000 fed3 	bl	8007fa8 <__kernel_sin>
 8007202:	e7d2      	b.n	80071aa <cos+0x2a>
 8007204:	3fe921fb 	.word	0x3fe921fb
 8007208:	7fefffff 	.word	0x7fefffff

0800720c <sqrt>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	f000 fa19 	bl	8007648 <__ieee754_sqrt>
 8007216:	4632      	mov	r2, r6
 8007218:	4604      	mov	r4, r0
 800721a:	460d      	mov	r5, r1
 800721c:	463b      	mov	r3, r7
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 fc9f 	bl	8000b64 <__aeabi_dcmpun>
 8007226:	b990      	cbnz	r0, 800724e <sqrt+0x42>
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	4630      	mov	r0, r6
 800722e:	4639      	mov	r1, r7
 8007230:	f7f9 fc70 	bl	8000b14 <__aeabi_dcmplt>
 8007234:	b158      	cbz	r0, 800724e <sqrt+0x42>
 8007236:	f7fe ff05 	bl	8006044 <__errno>
 800723a:	2321      	movs	r3, #33	; 0x21
 800723c:	2200      	movs	r2, #0
 800723e:	6003      	str	r3, [r0, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	f7f9 fb1d 	bl	8000884 <__aeabi_ddiv>
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007254:	0000      	movs	r0, r0
	...

08007258 <__ieee754_rem_pio2>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	4614      	mov	r4, r2
 800725e:	4ac4      	ldr	r2, [pc, #784]	; (8007570 <__ieee754_rem_pio2+0x318>)
 8007260:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007264:	b08d      	sub	sp, #52	; 0x34
 8007266:	4592      	cmp	sl, r2
 8007268:	9104      	str	r1, [sp, #16]
 800726a:	dc07      	bgt.n	800727c <__ieee754_rem_pio2+0x24>
 800726c:	2200      	movs	r2, #0
 800726e:	2300      	movs	r3, #0
 8007270:	e9c4 0100 	strd	r0, r1, [r4]
 8007274:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007278:	2500      	movs	r5, #0
 800727a:	e024      	b.n	80072c6 <__ieee754_rem_pio2+0x6e>
 800727c:	4abd      	ldr	r2, [pc, #756]	; (8007574 <__ieee754_rem_pio2+0x31c>)
 800727e:	4592      	cmp	sl, r2
 8007280:	dc72      	bgt.n	8007368 <__ieee754_rem_pio2+0x110>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	4dbc      	ldr	r5, [pc, #752]	; (8007578 <__ieee754_rem_pio2+0x320>)
 8007286:	2b00      	cmp	r3, #0
 8007288:	a3ab      	add	r3, pc, #684	; (adr r3, 8007538 <__ieee754_rem_pio2+0x2e0>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	dd36      	ble.n	80072fe <__ieee754_rem_pio2+0xa6>
 8007290:	f7f9 f816 	bl	80002c0 <__aeabi_dsub>
 8007294:	45aa      	cmp	sl, r5
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	d018      	beq.n	80072ce <__ieee754_rem_pio2+0x76>
 800729c:	a3a8      	add	r3, pc, #672	; (adr r3, 8007540 <__ieee754_rem_pio2+0x2e8>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f80d 	bl	80002c0 <__aeabi_dsub>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4630      	mov	r0, r6
 80072ac:	e9c4 2300 	strd	r2, r3, [r4]
 80072b0:	4639      	mov	r1, r7
 80072b2:	f7f9 f805 	bl	80002c0 <__aeabi_dsub>
 80072b6:	a3a2      	add	r3, pc, #648	; (adr r3, 8007540 <__ieee754_rem_pio2+0x2e8>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f7f9 f800 	bl	80002c0 <__aeabi_dsub>
 80072c0:	2501      	movs	r5, #1
 80072c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072c6:	4628      	mov	r0, r5
 80072c8:	b00d      	add	sp, #52	; 0x34
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	a39e      	add	r3, pc, #632	; (adr r3, 8007548 <__ieee754_rem_pio2+0x2f0>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f8 fff4 	bl	80002c0 <__aeabi_dsub>
 80072d8:	a39d      	add	r3, pc, #628	; (adr r3, 8007550 <__ieee754_rem_pio2+0x2f8>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	f7f8 ffed 	bl	80002c0 <__aeabi_dsub>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4630      	mov	r0, r6
 80072ec:	e9c4 2300 	strd	r2, r3, [r4]
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f8 ffe5 	bl	80002c0 <__aeabi_dsub>
 80072f6:	a396      	add	r3, pc, #600	; (adr r3, 8007550 <__ieee754_rem_pio2+0x2f8>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	e7de      	b.n	80072bc <__ieee754_rem_pio2+0x64>
 80072fe:	f7f8 ffe1 	bl	80002c4 <__adddf3>
 8007302:	45aa      	cmp	sl, r5
 8007304:	4606      	mov	r6, r0
 8007306:	460f      	mov	r7, r1
 8007308:	d016      	beq.n	8007338 <__ieee754_rem_pio2+0xe0>
 800730a:	a38d      	add	r3, pc, #564	; (adr r3, 8007540 <__ieee754_rem_pio2+0x2e8>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f8 ffd8 	bl	80002c4 <__adddf3>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4630      	mov	r0, r6
 800731a:	e9c4 2300 	strd	r2, r3, [r4]
 800731e:	4639      	mov	r1, r7
 8007320:	f7f8 ffce 	bl	80002c0 <__aeabi_dsub>
 8007324:	a386      	add	r3, pc, #536	; (adr r3, 8007540 <__ieee754_rem_pio2+0x2e8>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f8 ffcb 	bl	80002c4 <__adddf3>
 800732e:	f04f 35ff 	mov.w	r5, #4294967295
 8007332:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007336:	e7c6      	b.n	80072c6 <__ieee754_rem_pio2+0x6e>
 8007338:	a383      	add	r3, pc, #524	; (adr r3, 8007548 <__ieee754_rem_pio2+0x2f0>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f8 ffc1 	bl	80002c4 <__adddf3>
 8007342:	a383      	add	r3, pc, #524	; (adr r3, 8007550 <__ieee754_rem_pio2+0x2f8>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	4606      	mov	r6, r0
 800734a:	460f      	mov	r7, r1
 800734c:	f7f8 ffba 	bl	80002c4 <__adddf3>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4630      	mov	r0, r6
 8007356:	e9c4 2300 	strd	r2, r3, [r4]
 800735a:	4639      	mov	r1, r7
 800735c:	f7f8 ffb0 	bl	80002c0 <__aeabi_dsub>
 8007360:	a37b      	add	r3, pc, #492	; (adr r3, 8007550 <__ieee754_rem_pio2+0x2f8>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e7e0      	b.n	800732a <__ieee754_rem_pio2+0xd2>
 8007368:	4a84      	ldr	r2, [pc, #528]	; (800757c <__ieee754_rem_pio2+0x324>)
 800736a:	4592      	cmp	sl, r2
 800736c:	f300 80d5 	bgt.w	800751a <__ieee754_rem_pio2+0x2c2>
 8007370:	f000 fed0 	bl	8008114 <fabs>
 8007374:	a378      	add	r3, pc, #480	; (adr r3, 8007558 <__ieee754_rem_pio2+0x300>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	f7f9 f957 	bl	8000630 <__aeabi_dmul>
 8007382:	2200      	movs	r2, #0
 8007384:	4b7e      	ldr	r3, [pc, #504]	; (8007580 <__ieee754_rem_pio2+0x328>)
 8007386:	f7f8 ff9d 	bl	80002c4 <__adddf3>
 800738a:	f7f9 fc01 	bl	8000b90 <__aeabi_d2iz>
 800738e:	4605      	mov	r5, r0
 8007390:	f7f9 f8e4 	bl	800055c <__aeabi_i2d>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800739c:	a366      	add	r3, pc, #408	; (adr r3, 8007538 <__ieee754_rem_pio2+0x2e0>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f9 f945 	bl	8000630 <__aeabi_dmul>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f8 ff87 	bl	80002c0 <__aeabi_dsub>
 80073b2:	a363      	add	r3, pc, #396	; (adr r3, 8007540 <__ieee754_rem_pio2+0x2e8>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	4680      	mov	r8, r0
 80073ba:	4689      	mov	r9, r1
 80073bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c0:	f7f9 f936 	bl	8000630 <__aeabi_dmul>
 80073c4:	2d1f      	cmp	r5, #31
 80073c6:	4606      	mov	r6, r0
 80073c8:	460f      	mov	r7, r1
 80073ca:	dc0e      	bgt.n	80073ea <__ieee754_rem_pio2+0x192>
 80073cc:	4b6d      	ldr	r3, [pc, #436]	; (8007584 <__ieee754_rem_pio2+0x32c>)
 80073ce:	1e6a      	subs	r2, r5, #1
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	4553      	cmp	r3, sl
 80073d6:	d008      	beq.n	80073ea <__ieee754_rem_pio2+0x192>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f8 ff6e 	bl	80002c0 <__aeabi_dsub>
 80073e4:	e9c4 0100 	strd	r0, r1, [r4]
 80073e8:	e013      	b.n	8007412 <__ieee754_rem_pio2+0x1ba>
 80073ea:	463b      	mov	r3, r7
 80073ec:	4632      	mov	r2, r6
 80073ee:	4640      	mov	r0, r8
 80073f0:	4649      	mov	r1, r9
 80073f2:	f7f8 ff65 	bl	80002c0 <__aeabi_dsub>
 80073f6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007400:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007404:	f1ba 0f10 	cmp.w	sl, #16
 8007408:	dc1f      	bgt.n	800744a <__ieee754_rem_pio2+0x1f2>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9c4 2300 	strd	r2, r3, [r4]
 8007412:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007416:	4640      	mov	r0, r8
 8007418:	4653      	mov	r3, sl
 800741a:	4649      	mov	r1, r9
 800741c:	f7f8 ff50 	bl	80002c0 <__aeabi_dsub>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	f7f8 ff4c 	bl	80002c0 <__aeabi_dsub>
 8007428:	460b      	mov	r3, r1
 800742a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800742e:	9904      	ldr	r1, [sp, #16]
 8007430:	4602      	mov	r2, r0
 8007432:	2900      	cmp	r1, #0
 8007434:	f6bf af47 	bge.w	80072c6 <__ieee754_rem_pio2+0x6e>
 8007438:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800743c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007440:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007444:	60e3      	str	r3, [r4, #12]
 8007446:	426d      	negs	r5, r5
 8007448:	e73d      	b.n	80072c6 <__ieee754_rem_pio2+0x6e>
 800744a:	a33f      	add	r3, pc, #252	; (adr r3, 8007548 <__ieee754_rem_pio2+0x2f0>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007454:	f7f9 f8ec 	bl	8000630 <__aeabi_dmul>
 8007458:	4606      	mov	r6, r0
 800745a:	460f      	mov	r7, r1
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	f7f8 ff2c 	bl	80002c0 <__aeabi_dsub>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4682      	mov	sl, r0
 800746e:	468b      	mov	fp, r1
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f8 ff24 	bl	80002c0 <__aeabi_dsub>
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	f7f8 ff20 	bl	80002c0 <__aeabi_dsub>
 8007480:	a333      	add	r3, pc, #204	; (adr r3, 8007550 <__ieee754_rem_pio2+0x2f8>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748e:	f7f9 f8cf 	bl	8000630 <__aeabi_dmul>
 8007492:	4632      	mov	r2, r6
 8007494:	463b      	mov	r3, r7
 8007496:	f7f8 ff13 	bl	80002c0 <__aeabi_dsub>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	4650      	mov	r0, sl
 80074a4:	4659      	mov	r1, fp
 80074a6:	f7f8 ff0b 	bl	80002c0 <__aeabi_dsub>
 80074aa:	9a05      	ldr	r2, [sp, #20]
 80074ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b31      	cmp	r3, #49	; 0x31
 80074b4:	dc06      	bgt.n	80074c4 <__ieee754_rem_pio2+0x26c>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	46d0      	mov	r8, sl
 80074bc:	46d9      	mov	r9, fp
 80074be:	e9c4 2300 	strd	r2, r3, [r4]
 80074c2:	e7a6      	b.n	8007412 <__ieee754_rem_pio2+0x1ba>
 80074c4:	a326      	add	r3, pc, #152	; (adr r3, 8007560 <__ieee754_rem_pio2+0x308>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	f7f9 f8af 	bl	8000630 <__aeabi_dmul>
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4650      	mov	r0, sl
 80074dc:	4659      	mov	r1, fp
 80074de:	f7f8 feef 	bl	80002c0 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4680      	mov	r8, r0
 80074e8:	4689      	mov	r9, r1
 80074ea:	4650      	mov	r0, sl
 80074ec:	4659      	mov	r1, fp
 80074ee:	f7f8 fee7 	bl	80002c0 <__aeabi_dsub>
 80074f2:	4632      	mov	r2, r6
 80074f4:	463b      	mov	r3, r7
 80074f6:	f7f8 fee3 	bl	80002c0 <__aeabi_dsub>
 80074fa:	a31b      	add	r3, pc, #108	; (adr r3, 8007568 <__ieee754_rem_pio2+0x310>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007508:	f7f9 f892 	bl	8000630 <__aeabi_dmul>
 800750c:	4632      	mov	r2, r6
 800750e:	463b      	mov	r3, r7
 8007510:	f7f8 fed6 	bl	80002c0 <__aeabi_dsub>
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	e75e      	b.n	80073d8 <__ieee754_rem_pio2+0x180>
 800751a:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <__ieee754_rem_pio2+0x330>)
 800751c:	4592      	cmp	sl, r2
 800751e:	dd35      	ble.n	800758c <__ieee754_rem_pio2+0x334>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	f7f8 fecc 	bl	80002c0 <__aeabi_dsub>
 8007528:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800752c:	e9c4 0100 	strd	r0, r1, [r4]
 8007530:	e6a2      	b.n	8007278 <__ieee754_rem_pio2+0x20>
 8007532:	bf00      	nop
 8007534:	f3af 8000 	nop.w
 8007538:	54400000 	.word	0x54400000
 800753c:	3ff921fb 	.word	0x3ff921fb
 8007540:	1a626331 	.word	0x1a626331
 8007544:	3dd0b461 	.word	0x3dd0b461
 8007548:	1a600000 	.word	0x1a600000
 800754c:	3dd0b461 	.word	0x3dd0b461
 8007550:	2e037073 	.word	0x2e037073
 8007554:	3ba3198a 	.word	0x3ba3198a
 8007558:	6dc9c883 	.word	0x6dc9c883
 800755c:	3fe45f30 	.word	0x3fe45f30
 8007560:	2e000000 	.word	0x2e000000
 8007564:	3ba3198a 	.word	0x3ba3198a
 8007568:	252049c1 	.word	0x252049c1
 800756c:	397b839a 	.word	0x397b839a
 8007570:	3fe921fb 	.word	0x3fe921fb
 8007574:	4002d97b 	.word	0x4002d97b
 8007578:	3ff921fb 	.word	0x3ff921fb
 800757c:	413921fb 	.word	0x413921fb
 8007580:	3fe00000 	.word	0x3fe00000
 8007584:	080084b0 	.word	0x080084b0
 8007588:	7fefffff 	.word	0x7fefffff
 800758c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007590:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007594:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007598:	460f      	mov	r7, r1
 800759a:	4606      	mov	r6, r0
 800759c:	f7f9 faf8 	bl	8000b90 <__aeabi_d2iz>
 80075a0:	f7f8 ffdc 	bl	800055c <__aeabi_i2d>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075b0:	f7f8 fe86 	bl	80002c0 <__aeabi_dsub>
 80075b4:	2200      	movs	r2, #0
 80075b6:	4b22      	ldr	r3, [pc, #136]	; (8007640 <__ieee754_rem_pio2+0x3e8>)
 80075b8:	f7f9 f83a 	bl	8000630 <__aeabi_dmul>
 80075bc:	460f      	mov	r7, r1
 80075be:	4606      	mov	r6, r0
 80075c0:	f7f9 fae6 	bl	8000b90 <__aeabi_d2iz>
 80075c4:	f7f8 ffca 	bl	800055c <__aeabi_i2d>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075d4:	f7f8 fe74 	bl	80002c0 <__aeabi_dsub>
 80075d8:	2200      	movs	r2, #0
 80075da:	4b19      	ldr	r3, [pc, #100]	; (8007640 <__ieee754_rem_pio2+0x3e8>)
 80075dc:	f7f9 f828 	bl	8000630 <__aeabi_dmul>
 80075e0:	f04f 0803 	mov.w	r8, #3
 80075e4:	2600      	movs	r6, #0
 80075e6:	2700      	movs	r7, #0
 80075e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075ec:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80075f0:	4632      	mov	r2, r6
 80075f2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80075f6:	463b      	mov	r3, r7
 80075f8:	46c2      	mov	sl, r8
 80075fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fe:	f7f9 fa7f 	bl	8000b00 <__aeabi_dcmpeq>
 8007602:	2800      	cmp	r0, #0
 8007604:	d1f4      	bne.n	80075f0 <__ieee754_rem_pio2+0x398>
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <__ieee754_rem_pio2+0x3ec>)
 8007608:	462a      	mov	r2, r5
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	2302      	movs	r3, #2
 800760e:	4621      	mov	r1, r4
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	a806      	add	r0, sp, #24
 8007614:	4653      	mov	r3, sl
 8007616:	f000 f985 	bl	8007924 <__kernel_rem_pio2>
 800761a:	9b04      	ldr	r3, [sp, #16]
 800761c:	4605      	mov	r5, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	f6bf ae51 	bge.w	80072c6 <__ieee754_rem_pio2+0x6e>
 8007624:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800762c:	e9c4 2300 	strd	r2, r3, [r4]
 8007630:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007638:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800763c:	e703      	b.n	8007446 <__ieee754_rem_pio2+0x1ee>
 800763e:	bf00      	nop
 8007640:	41700000 	.word	0x41700000
 8007644:	08008530 	.word	0x08008530

08007648 <__ieee754_sqrt>:
 8007648:	f8df c158 	ldr.w	ip, [pc, #344]	; 80077a4 <__ieee754_sqrt+0x15c>
 800764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	ea3c 0c01 	bics.w	ip, ip, r1
 8007654:	4606      	mov	r6, r0
 8007656:	460d      	mov	r5, r1
 8007658:	460c      	mov	r4, r1
 800765a:	460a      	mov	r2, r1
 800765c:	4607      	mov	r7, r0
 800765e:	4603      	mov	r3, r0
 8007660:	d10f      	bne.n	8007682 <__ieee754_sqrt+0x3a>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	f7f8 ffe3 	bl	8000630 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4630      	mov	r0, r6
 8007670:	4629      	mov	r1, r5
 8007672:	f7f8 fe27 	bl	80002c4 <__adddf3>
 8007676:	4606      	mov	r6, r0
 8007678:	460d      	mov	r5, r1
 800767a:	4630      	mov	r0, r6
 800767c:	4629      	mov	r1, r5
 800767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007682:	2900      	cmp	r1, #0
 8007684:	dc0e      	bgt.n	80076a4 <__ieee754_sqrt+0x5c>
 8007686:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800768a:	ea5c 0707 	orrs.w	r7, ip, r7
 800768e:	d0f4      	beq.n	800767a <__ieee754_sqrt+0x32>
 8007690:	b141      	cbz	r1, 80076a4 <__ieee754_sqrt+0x5c>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	f7f8 fe13 	bl	80002c0 <__aeabi_dsub>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	f7f9 f8f1 	bl	8000884 <__aeabi_ddiv>
 80076a2:	e7e8      	b.n	8007676 <__ieee754_sqrt+0x2e>
 80076a4:	1521      	asrs	r1, r4, #20
 80076a6:	d075      	beq.n	8007794 <__ieee754_sqrt+0x14c>
 80076a8:	07cc      	lsls	r4, r1, #31
 80076aa:	f04f 0400 	mov.w	r4, #0
 80076ae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80076b2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80076b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076ba:	bf5e      	ittt	pl
 80076bc:	0fd9      	lsrpl	r1, r3, #31
 80076be:	005b      	lslpl	r3, r3, #1
 80076c0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80076c4:	0fd9      	lsrs	r1, r3, #31
 80076c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80076ca:	2516      	movs	r5, #22
 80076cc:	4620      	mov	r0, r4
 80076ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076d2:	107f      	asrs	r7, r7, #1
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	1846      	adds	r6, r0, r1
 80076d8:	4296      	cmp	r6, r2
 80076da:	bfde      	ittt	le
 80076dc:	1b92      	suble	r2, r2, r6
 80076de:	1870      	addle	r0, r6, r1
 80076e0:	1864      	addle	r4, r4, r1
 80076e2:	0052      	lsls	r2, r2, #1
 80076e4:	3d01      	subs	r5, #1
 80076e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80076ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076f2:	d1f0      	bne.n	80076d6 <__ieee754_sqrt+0x8e>
 80076f4:	4629      	mov	r1, r5
 80076f6:	f04f 0e20 	mov.w	lr, #32
 80076fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80076fe:	4282      	cmp	r2, r0
 8007700:	eb06 0c05 	add.w	ip, r6, r5
 8007704:	dc02      	bgt.n	800770c <__ieee754_sqrt+0xc4>
 8007706:	d113      	bne.n	8007730 <__ieee754_sqrt+0xe8>
 8007708:	459c      	cmp	ip, r3
 800770a:	d811      	bhi.n	8007730 <__ieee754_sqrt+0xe8>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	eb0c 0506 	add.w	r5, ip, r6
 8007714:	da43      	bge.n	800779e <__ieee754_sqrt+0x156>
 8007716:	2d00      	cmp	r5, #0
 8007718:	db41      	blt.n	800779e <__ieee754_sqrt+0x156>
 800771a:	f100 0801 	add.w	r8, r0, #1
 800771e:	1a12      	subs	r2, r2, r0
 8007720:	4640      	mov	r0, r8
 8007722:	459c      	cmp	ip, r3
 8007724:	bf88      	it	hi
 8007726:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800772a:	eba3 030c 	sub.w	r3, r3, ip
 800772e:	4431      	add	r1, r6
 8007730:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007734:	f1be 0e01 	subs.w	lr, lr, #1
 8007738:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800773c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007740:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007744:	d1db      	bne.n	80076fe <__ieee754_sqrt+0xb6>
 8007746:	4313      	orrs	r3, r2
 8007748:	d006      	beq.n	8007758 <__ieee754_sqrt+0x110>
 800774a:	1c48      	adds	r0, r1, #1
 800774c:	bf0b      	itete	eq
 800774e:	4671      	moveq	r1, lr
 8007750:	3101      	addne	r1, #1
 8007752:	3401      	addeq	r4, #1
 8007754:	f021 0101 	bicne.w	r1, r1, #1
 8007758:	1063      	asrs	r3, r4, #1
 800775a:	0849      	lsrs	r1, r1, #1
 800775c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007760:	07e2      	lsls	r2, r4, #31
 8007762:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007766:	bf48      	it	mi
 8007768:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800776c:	460e      	mov	r6, r1
 800776e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007772:	e782      	b.n	800767a <__ieee754_sqrt+0x32>
 8007774:	0ada      	lsrs	r2, r3, #11
 8007776:	3815      	subs	r0, #21
 8007778:	055b      	lsls	r3, r3, #21
 800777a:	2a00      	cmp	r2, #0
 800777c:	d0fa      	beq.n	8007774 <__ieee754_sqrt+0x12c>
 800777e:	02d5      	lsls	r5, r2, #11
 8007780:	d50a      	bpl.n	8007798 <__ieee754_sqrt+0x150>
 8007782:	f1c1 0420 	rsb	r4, r1, #32
 8007786:	fa23 f404 	lsr.w	r4, r3, r4
 800778a:	1e4d      	subs	r5, r1, #1
 800778c:	408b      	lsls	r3, r1
 800778e:	4322      	orrs	r2, r4
 8007790:	1b41      	subs	r1, r0, r5
 8007792:	e789      	b.n	80076a8 <__ieee754_sqrt+0x60>
 8007794:	4608      	mov	r0, r1
 8007796:	e7f0      	b.n	800777a <__ieee754_sqrt+0x132>
 8007798:	0052      	lsls	r2, r2, #1
 800779a:	3101      	adds	r1, #1
 800779c:	e7ef      	b.n	800777e <__ieee754_sqrt+0x136>
 800779e:	4680      	mov	r8, r0
 80077a0:	e7bd      	b.n	800771e <__ieee754_sqrt+0xd6>
 80077a2:	bf00      	nop
 80077a4:	7ff00000 	.word	0x7ff00000

080077a8 <__kernel_cos>:
 80077a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80077b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80077b4:	4680      	mov	r8, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	e9cd 2300 	strd	r2, r3, [sp]
 80077bc:	da04      	bge.n	80077c8 <__kernel_cos+0x20>
 80077be:	f7f9 f9e7 	bl	8000b90 <__aeabi_d2iz>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f000 8086 	beq.w	80078d4 <__kernel_cos+0x12c>
 80077c8:	4642      	mov	r2, r8
 80077ca:	463b      	mov	r3, r7
 80077cc:	4640      	mov	r0, r8
 80077ce:	4639      	mov	r1, r7
 80077d0:	f7f8 ff2e 	bl	8000630 <__aeabi_dmul>
 80077d4:	2200      	movs	r2, #0
 80077d6:	4b4e      	ldr	r3, [pc, #312]	; (8007910 <__kernel_cos+0x168>)
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	f7f8 ff28 	bl	8000630 <__aeabi_dmul>
 80077e0:	a33f      	add	r3, pc, #252	; (adr r3, 80078e0 <__kernel_cos+0x138>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	4682      	mov	sl, r0
 80077e8:	468b      	mov	fp, r1
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f7f8 ff1f 	bl	8000630 <__aeabi_dmul>
 80077f2:	a33d      	add	r3, pc, #244	; (adr r3, 80078e8 <__kernel_cos+0x140>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fd64 	bl	80002c4 <__adddf3>
 80077fc:	4622      	mov	r2, r4
 80077fe:	462b      	mov	r3, r5
 8007800:	f7f8 ff16 	bl	8000630 <__aeabi_dmul>
 8007804:	a33a      	add	r3, pc, #232	; (adr r3, 80078f0 <__kernel_cos+0x148>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f8 fd59 	bl	80002c0 <__aeabi_dsub>
 800780e:	4622      	mov	r2, r4
 8007810:	462b      	mov	r3, r5
 8007812:	f7f8 ff0d 	bl	8000630 <__aeabi_dmul>
 8007816:	a338      	add	r3, pc, #224	; (adr r3, 80078f8 <__kernel_cos+0x150>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fd52 	bl	80002c4 <__adddf3>
 8007820:	4622      	mov	r2, r4
 8007822:	462b      	mov	r3, r5
 8007824:	f7f8 ff04 	bl	8000630 <__aeabi_dmul>
 8007828:	a335      	add	r3, pc, #212	; (adr r3, 8007900 <__kernel_cos+0x158>)
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f7f8 fd47 	bl	80002c0 <__aeabi_dsub>
 8007832:	4622      	mov	r2, r4
 8007834:	462b      	mov	r3, r5
 8007836:	f7f8 fefb 	bl	8000630 <__aeabi_dmul>
 800783a:	a333      	add	r3, pc, #204	; (adr r3, 8007908 <__kernel_cos+0x160>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd40 	bl	80002c4 <__adddf3>
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 fef2 	bl	8000630 <__aeabi_dmul>
 800784c:	4622      	mov	r2, r4
 800784e:	462b      	mov	r3, r5
 8007850:	f7f8 feee 	bl	8000630 <__aeabi_dmul>
 8007854:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	4640      	mov	r0, r8
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fee6 	bl	8000630 <__aeabi_dmul>
 8007864:	460b      	mov	r3, r1
 8007866:	4602      	mov	r2, r0
 8007868:	4629      	mov	r1, r5
 800786a:	4620      	mov	r0, r4
 800786c:	f7f8 fd28 	bl	80002c0 <__aeabi_dsub>
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <__kernel_cos+0x16c>)
 8007872:	4680      	mov	r8, r0
 8007874:	429e      	cmp	r6, r3
 8007876:	4689      	mov	r9, r1
 8007878:	dc0e      	bgt.n	8007898 <__kernel_cos+0xf0>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4650      	mov	r0, sl
 8007880:	4659      	mov	r1, fp
 8007882:	f7f8 fd1d 	bl	80002c0 <__aeabi_dsub>
 8007886:	4602      	mov	r2, r0
 8007888:	2000      	movs	r0, #0
 800788a:	460b      	mov	r3, r1
 800788c:	4922      	ldr	r1, [pc, #136]	; (8007918 <__kernel_cos+0x170>)
 800788e:	f7f8 fd17 	bl	80002c0 <__aeabi_dsub>
 8007892:	b003      	add	sp, #12
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	2400      	movs	r4, #0
 800789a:	4b20      	ldr	r3, [pc, #128]	; (800791c <__kernel_cos+0x174>)
 800789c:	4622      	mov	r2, r4
 800789e:	429e      	cmp	r6, r3
 80078a0:	bfcc      	ite	gt
 80078a2:	4d1f      	ldrgt	r5, [pc, #124]	; (8007920 <__kernel_cos+0x178>)
 80078a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80078a8:	462b      	mov	r3, r5
 80078aa:	2000      	movs	r0, #0
 80078ac:	491a      	ldr	r1, [pc, #104]	; (8007918 <__kernel_cos+0x170>)
 80078ae:	f7f8 fd07 	bl	80002c0 <__aeabi_dsub>
 80078b2:	4622      	mov	r2, r4
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	462b      	mov	r3, r5
 80078ba:	4650      	mov	r0, sl
 80078bc:	4659      	mov	r1, fp
 80078be:	f7f8 fcff 	bl	80002c0 <__aeabi_dsub>
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	f7f8 fcfb 	bl	80002c0 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4630      	mov	r0, r6
 80078d0:	4639      	mov	r1, r7
 80078d2:	e7dc      	b.n	800788e <__kernel_cos+0xe6>
 80078d4:	2000      	movs	r0, #0
 80078d6:	4910      	ldr	r1, [pc, #64]	; (8007918 <__kernel_cos+0x170>)
 80078d8:	e7db      	b.n	8007892 <__kernel_cos+0xea>
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	be8838d4 	.word	0xbe8838d4
 80078e4:	bda8fae9 	.word	0xbda8fae9
 80078e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80078ec:	3e21ee9e 	.word	0x3e21ee9e
 80078f0:	809c52ad 	.word	0x809c52ad
 80078f4:	3e927e4f 	.word	0x3e927e4f
 80078f8:	19cb1590 	.word	0x19cb1590
 80078fc:	3efa01a0 	.word	0x3efa01a0
 8007900:	16c15177 	.word	0x16c15177
 8007904:	3f56c16c 	.word	0x3f56c16c
 8007908:	5555554c 	.word	0x5555554c
 800790c:	3fa55555 	.word	0x3fa55555
 8007910:	3fe00000 	.word	0x3fe00000
 8007914:	3fd33332 	.word	0x3fd33332
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	3fe90000 	.word	0x3fe90000
 8007920:	3fd20000 	.word	0x3fd20000

08007924 <__kernel_rem_pio2>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800792c:	9308      	str	r3, [sp, #32]
 800792e:	9106      	str	r1, [sp, #24]
 8007930:	4bb6      	ldr	r3, [pc, #728]	; (8007c0c <__kernel_rem_pio2+0x2e8>)
 8007932:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007934:	f112 0f14 	cmn.w	r2, #20
 8007938:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800793c:	bfa8      	it	ge
 800793e:	1ed4      	subge	r4, r2, #3
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	bfb8      	it	lt
 8007946:	2400      	movlt	r4, #0
 8007948:	f103 33ff 	add.w	r3, r3, #4294967295
 800794c:	9307      	str	r3, [sp, #28]
 800794e:	bfa4      	itt	ge
 8007950:	2318      	movge	r3, #24
 8007952:	fb94 f4f3 	sdivge	r4, r4, r3
 8007956:	f06f 0317 	mvn.w	r3, #23
 800795a:	fb04 3303 	mla	r3, r4, r3, r3
 800795e:	eb03 0b02 	add.w	fp, r3, r2
 8007962:	9a07      	ldr	r2, [sp, #28]
 8007964:	9b02      	ldr	r3, [sp, #8]
 8007966:	1aa7      	subs	r7, r4, r2
 8007968:	eb03 0802 	add.w	r8, r3, r2
 800796c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800796e:	2500      	movs	r5, #0
 8007970:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	9009      	str	r0, [sp, #36]	; 0x24
 800797a:	ae20      	add	r6, sp, #128	; 0x80
 800797c:	4545      	cmp	r5, r8
 800797e:	dd14      	ble.n	80079aa <__kernel_rem_pio2+0x86>
 8007980:	f04f 0800 	mov.w	r8, #0
 8007984:	9a08      	ldr	r2, [sp, #32]
 8007986:	ab20      	add	r3, sp, #128	; 0x80
 8007988:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800798c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	4598      	cmp	r8, r3
 8007994:	dc35      	bgt.n	8007a02 <__kernel_rem_pio2+0xde>
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	2200      	movs	r2, #0
 800799a:	f1a3 0908 	sub.w	r9, r3, #8
 800799e:	2300      	movs	r3, #0
 80079a0:	462f      	mov	r7, r5
 80079a2:	2600      	movs	r6, #0
 80079a4:	e9cd 2300 	strd	r2, r3, [sp]
 80079a8:	e01f      	b.n	80079ea <__kernel_rem_pio2+0xc6>
 80079aa:	42ef      	cmn	r7, r5
 80079ac:	d40b      	bmi.n	80079c6 <__kernel_rem_pio2+0xa2>
 80079ae:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80079b2:	e9cd 2300 	strd	r2, r3, [sp]
 80079b6:	f7f8 fdd1 	bl	800055c <__aeabi_i2d>
 80079ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079be:	e8e6 0102 	strd	r0, r1, [r6], #8
 80079c2:	3501      	adds	r5, #1
 80079c4:	e7da      	b.n	800797c <__kernel_rem_pio2+0x58>
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	e7f8      	b.n	80079be <__kernel_rem_pio2+0x9a>
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80079d4:	f7f8 fe2c 	bl	8000630 <__aeabi_dmul>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079e0:	f7f8 fc70 	bl	80002c4 <__adddf3>
 80079e4:	e9cd 0100 	strd	r0, r1, [sp]
 80079e8:	3601      	adds	r6, #1
 80079ea:	9b07      	ldr	r3, [sp, #28]
 80079ec:	3f08      	subs	r7, #8
 80079ee:	429e      	cmp	r6, r3
 80079f0:	ddec      	ble.n	80079cc <__kernel_rem_pio2+0xa8>
 80079f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f6:	f108 0801 	add.w	r8, r8, #1
 80079fa:	e8ea 2302 	strd	r2, r3, [sl], #8
 80079fe:	3508      	adds	r5, #8
 8007a00:	e7c6      	b.n	8007990 <__kernel_rem_pio2+0x6c>
 8007a02:	9b02      	ldr	r3, [sp, #8]
 8007a04:	aa0c      	add	r2, sp, #48	; 0x30
 8007a06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a0c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007a0e:	9e02      	ldr	r6, [sp, #8]
 8007a10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007a14:	930a      	str	r3, [sp, #40]	; 0x28
 8007a16:	ab98      	add	r3, sp, #608	; 0x260
 8007a18:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a1c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007a20:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a22:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8007a26:	46d0      	mov	r8, sl
 8007a28:	46b1      	mov	r9, r6
 8007a2a:	af0c      	add	r7, sp, #48	; 0x30
 8007a2c:	9700      	str	r7, [sp, #0]
 8007a2e:	f1b9 0f00 	cmp.w	r9, #0
 8007a32:	f1a8 0808 	sub.w	r8, r8, #8
 8007a36:	dc71      	bgt.n	8007b1c <__kernel_rem_pio2+0x1f8>
 8007a38:	465a      	mov	r2, fp
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f000 fbef 	bl	8008220 <scalbn>
 8007a42:	2200      	movs	r2, #0
 8007a44:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	f7f8 fdf0 	bl	8000630 <__aeabi_dmul>
 8007a50:	f000 fb66 	bl	8008120 <floor>
 8007a54:	2200      	movs	r2, #0
 8007a56:	4b6e      	ldr	r3, [pc, #440]	; (8007c10 <__kernel_rem_pio2+0x2ec>)
 8007a58:	f7f8 fdea 	bl	8000630 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc2c 	bl	80002c0 <__aeabi_dsub>
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	f7f9 f890 	bl	8000b90 <__aeabi_d2iz>
 8007a70:	9004      	str	r0, [sp, #16]
 8007a72:	f7f8 fd73 	bl	800055c <__aeabi_i2d>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f8 fc1f 	bl	80002c0 <__aeabi_dsub>
 8007a82:	f1bb 0f00 	cmp.w	fp, #0
 8007a86:	4680      	mov	r8, r0
 8007a88:	4689      	mov	r9, r1
 8007a8a:	dd70      	ble.n	8007b6e <__kernel_rem_pio2+0x24a>
 8007a8c:	1e72      	subs	r2, r6, #1
 8007a8e:	ab0c      	add	r3, sp, #48	; 0x30
 8007a90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a94:	9c04      	ldr	r4, [sp, #16]
 8007a96:	f1cb 0118 	rsb	r1, fp, #24
 8007a9a:	fa40 f301 	asr.w	r3, r0, r1
 8007a9e:	441c      	add	r4, r3
 8007aa0:	408b      	lsls	r3, r1
 8007aa2:	1ac0      	subs	r0, r0, r3
 8007aa4:	ab0c      	add	r3, sp, #48	; 0x30
 8007aa6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007aaa:	f1cb 0317 	rsb	r3, fp, #23
 8007aae:	9404      	str	r4, [sp, #16]
 8007ab0:	fa40 f303 	asr.w	r3, r0, r3
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dd66      	ble.n	8007b8a <__kernel_rem_pio2+0x266>
 8007abc:	2200      	movs	r2, #0
 8007abe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ac2:	4614      	mov	r4, r2
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	4296      	cmp	r6, r2
 8007acc:	f300 80ac 	bgt.w	8007c28 <__kernel_rem_pio2+0x304>
 8007ad0:	f1bb 0f00 	cmp.w	fp, #0
 8007ad4:	dd07      	ble.n	8007ae6 <__kernel_rem_pio2+0x1c2>
 8007ad6:	f1bb 0f01 	cmp.w	fp, #1
 8007ada:	f000 80b4 	beq.w	8007c46 <__kernel_rem_pio2+0x322>
 8007ade:	f1bb 0f02 	cmp.w	fp, #2
 8007ae2:	f000 80ba 	beq.w	8007c5a <__kernel_rem_pio2+0x336>
 8007ae6:	9b00      	ldr	r3, [sp, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d14e      	bne.n	8007b8a <__kernel_rem_pio2+0x266>
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	2000      	movs	r0, #0
 8007af2:	4948      	ldr	r1, [pc, #288]	; (8007c14 <__kernel_rem_pio2+0x2f0>)
 8007af4:	f7f8 fbe4 	bl	80002c0 <__aeabi_dsub>
 8007af8:	4680      	mov	r8, r0
 8007afa:	4689      	mov	r9, r1
 8007afc:	2c00      	cmp	r4, #0
 8007afe:	d044      	beq.n	8007b8a <__kernel_rem_pio2+0x266>
 8007b00:	465a      	mov	r2, fp
 8007b02:	2000      	movs	r0, #0
 8007b04:	4943      	ldr	r1, [pc, #268]	; (8007c14 <__kernel_rem_pio2+0x2f0>)
 8007b06:	f000 fb8b 	bl	8008220 <scalbn>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 fbd5 	bl	80002c0 <__aeabi_dsub>
 8007b16:	4680      	mov	r8, r0
 8007b18:	4689      	mov	r9, r1
 8007b1a:	e036      	b.n	8007b8a <__kernel_rem_pio2+0x266>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4b3e      	ldr	r3, [pc, #248]	; (8007c18 <__kernel_rem_pio2+0x2f4>)
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fd84 	bl	8000630 <__aeabi_dmul>
 8007b28:	f7f9 f832 	bl	8000b90 <__aeabi_d2iz>
 8007b2c:	f7f8 fd16 	bl	800055c <__aeabi_i2d>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4b38      	ldr	r3, [pc, #224]	; (8007c1c <__kernel_rem_pio2+0x2f8>)
 8007b3c:	f7f8 fd78 	bl	8000630 <__aeabi_dmul>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4620      	mov	r0, r4
 8007b46:	4629      	mov	r1, r5
 8007b48:	f7f8 fbba 	bl	80002c0 <__aeabi_dsub>
 8007b4c:	f7f9 f820 	bl	8000b90 <__aeabi_d2iz>
 8007b50:	9b00      	ldr	r3, [sp, #0]
 8007b52:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b56:	f843 0b04 	str.w	r0, [r3], #4
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b60:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b64:	f7f8 fbae 	bl	80002c4 <__adddf3>
 8007b68:	4604      	mov	r4, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	e75f      	b.n	8007a2e <__kernel_rem_pio2+0x10a>
 8007b6e:	d105      	bne.n	8007b7c <__kernel_rem_pio2+0x258>
 8007b70:	1e73      	subs	r3, r6, #1
 8007b72:	aa0c      	add	r2, sp, #48	; 0x30
 8007b74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b78:	15c3      	asrs	r3, r0, #23
 8007b7a:	e79b      	b.n	8007ab4 <__kernel_rem_pio2+0x190>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4b28      	ldr	r3, [pc, #160]	; (8007c20 <__kernel_rem_pio2+0x2fc>)
 8007b80:	f7f8 ffdc 	bl	8000b3c <__aeabi_dcmpge>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d13e      	bne.n	8007c06 <__kernel_rem_pio2+0x2e2>
 8007b88:	9000      	str	r0, [sp, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4640      	mov	r0, r8
 8007b90:	4649      	mov	r1, r9
 8007b92:	f7f8 ffb5 	bl	8000b00 <__aeabi_dcmpeq>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f000 80b1 	beq.w	8007cfe <__kernel_rem_pio2+0x3da>
 8007b9c:	1e74      	subs	r4, r6, #1
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	9902      	ldr	r1, [sp, #8]
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	da5f      	bge.n	8007c68 <__kernel_rem_pio2+0x344>
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d074      	beq.n	8007c96 <__kernel_rem_pio2+0x372>
 8007bac:	ab0c      	add	r3, sp, #48	; 0x30
 8007bae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007bb2:	f1ab 0b18 	sub.w	fp, fp, #24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 809f 	beq.w	8007cfa <__kernel_rem_pio2+0x3d6>
 8007bbc:	465a      	mov	r2, fp
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	4914      	ldr	r1, [pc, #80]	; (8007c14 <__kernel_rem_pio2+0x2f0>)
 8007bc2:	f000 fb2d 	bl	8008220 <scalbn>
 8007bc6:	46a2      	mov	sl, r4
 8007bc8:	4606      	mov	r6, r0
 8007bca:	460f      	mov	r7, r1
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	ab70      	add	r3, sp, #448	; 0x1c0
 8007bd2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007c18 <__kernel_rem_pio2+0x2f4>
 8007bd6:	00e5      	lsls	r5, r4, #3
 8007bd8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007bdc:	f1ba 0f00 	cmp.w	sl, #0
 8007be0:	f280 80c3 	bge.w	8007d6a <__kernel_rem_pio2+0x446>
 8007be4:	4626      	mov	r6, r4
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	f2c0 80f5 	blt.w	8007dd6 <__kernel_rem_pio2+0x4b2>
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <__kernel_rem_pio2+0x300>)
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	ab70      	add	r3, sp, #448	; 0x1c0
 8007bf6:	f04f 0b00 	mov.w	fp, #0
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007c02:	1ba7      	subs	r7, r4, r6
 8007c04:	e0db      	b.n	8007dbe <__kernel_rem_pio2+0x49a>
 8007c06:	2302      	movs	r3, #2
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	e757      	b.n	8007abc <__kernel_rem_pio2+0x198>
 8007c0c:	08008678 	.word	0x08008678
 8007c10:	40200000 	.word	0x40200000
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	3e700000 	.word	0x3e700000
 8007c1c:	41700000 	.word	0x41700000
 8007c20:	3fe00000 	.word	0x3fe00000
 8007c24:	08008638 	.word	0x08008638
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	b944      	cbnz	r4, 8007c3e <__kernel_rem_pio2+0x31a>
 8007c2c:	b11b      	cbz	r3, 8007c36 <__kernel_rem_pio2+0x312>
 8007c2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	2301      	movs	r3, #1
 8007c36:	461c      	mov	r4, r3
 8007c38:	3201      	adds	r2, #1
 8007c3a:	3704      	adds	r7, #4
 8007c3c:	e745      	b.n	8007aca <__kernel_rem_pio2+0x1a6>
 8007c3e:	1acb      	subs	r3, r1, r3
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	4623      	mov	r3, r4
 8007c44:	e7f7      	b.n	8007c36 <__kernel_rem_pio2+0x312>
 8007c46:	1e72      	subs	r2, r6, #1
 8007c48:	ab0c      	add	r3, sp, #48	; 0x30
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007c52:	a90c      	add	r1, sp, #48	; 0x30
 8007c54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007c58:	e745      	b.n	8007ae6 <__kernel_rem_pio2+0x1c2>
 8007c5a:	1e72      	subs	r2, r6, #1
 8007c5c:	ab0c      	add	r3, sp, #48	; 0x30
 8007c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c62:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c66:	e7f4      	b.n	8007c52 <__kernel_rem_pio2+0x32e>
 8007c68:	a90c      	add	r1, sp, #48	; 0x30
 8007c6a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	430a      	orrs	r2, r1
 8007c72:	e796      	b.n	8007ba2 <__kernel_rem_pio2+0x27e>
 8007c74:	3401      	adds	r4, #1
 8007c76:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	d0fa      	beq.n	8007c74 <__kernel_rem_pio2+0x350>
 8007c7e:	9b08      	ldr	r3, [sp, #32]
 8007c80:	f106 0801 	add.w	r8, r6, #1
 8007c84:	18f5      	adds	r5, r6, r3
 8007c86:	ab20      	add	r3, sp, #128	; 0x80
 8007c88:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c8c:	4434      	add	r4, r6
 8007c8e:	4544      	cmp	r4, r8
 8007c90:	da04      	bge.n	8007c9c <__kernel_rem_pio2+0x378>
 8007c92:	4626      	mov	r6, r4
 8007c94:	e6bf      	b.n	8007a16 <__kernel_rem_pio2+0xf2>
 8007c96:	2401      	movs	r4, #1
 8007c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c9a:	e7ec      	b.n	8007c76 <__kernel_rem_pio2+0x352>
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	f04f 0900 	mov.w	r9, #0
 8007ca2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ca6:	f7f8 fc59 	bl	800055c <__aeabi_i2d>
 8007caa:	2600      	movs	r6, #0
 8007cac:	2700      	movs	r7, #0
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8007cb4:	3b08      	subs	r3, #8
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	9504      	str	r5, [sp, #16]
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	4599      	cmp	r9, r3
 8007cbe:	dd05      	ble.n	8007ccc <__kernel_rem_pio2+0x3a8>
 8007cc0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007cc4:	f108 0801 	add.w	r8, r8, #1
 8007cc8:	3508      	adds	r5, #8
 8007cca:	e7e0      	b.n	8007c8e <__kernel_rem_pio2+0x36a>
 8007ccc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007cd0:	9900      	ldr	r1, [sp, #0]
 8007cd2:	f109 0901 	add.w	r9, r9, #1
 8007cd6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007cda:	9100      	str	r1, [sp, #0]
 8007cdc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007ce0:	f8cd c010 	str.w	ip, [sp, #16]
 8007ce4:	f7f8 fca4 	bl	8000630 <__aeabi_dmul>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f7f8 fae8 	bl	80002c4 <__adddf3>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	e7df      	b.n	8007cba <__kernel_rem_pio2+0x396>
 8007cfa:	3c01      	subs	r4, #1
 8007cfc:	e756      	b.n	8007bac <__kernel_rem_pio2+0x288>
 8007cfe:	f1cb 0200 	rsb	r2, fp, #0
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f000 fa8b 	bl	8008220 <scalbn>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4ba4      	ldr	r3, [pc, #656]	; (8007fa0 <__kernel_rem_pio2+0x67c>)
 8007d0e:	4604      	mov	r4, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	f7f8 ff13 	bl	8000b3c <__aeabi_dcmpge>
 8007d16:	b1f8      	cbz	r0, 8007d58 <__kernel_rem_pio2+0x434>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4ba2      	ldr	r3, [pc, #648]	; (8007fa4 <__kernel_rem_pio2+0x680>)
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fc86 	bl	8000630 <__aeabi_dmul>
 8007d24:	f7f8 ff34 	bl	8000b90 <__aeabi_d2iz>
 8007d28:	4607      	mov	r7, r0
 8007d2a:	f7f8 fc17 	bl	800055c <__aeabi_i2d>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4b9b      	ldr	r3, [pc, #620]	; (8007fa0 <__kernel_rem_pio2+0x67c>)
 8007d32:	f7f8 fc7d 	bl	8000630 <__aeabi_dmul>
 8007d36:	460b      	mov	r3, r1
 8007d38:	4602      	mov	r2, r0
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7f8 fabf 	bl	80002c0 <__aeabi_dsub>
 8007d42:	f7f8 ff25 	bl	8000b90 <__aeabi_d2iz>
 8007d46:	1c74      	adds	r4, r6, #1
 8007d48:	ab0c      	add	r3, sp, #48	; 0x30
 8007d4a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007d4e:	f10b 0b18 	add.w	fp, fp, #24
 8007d52:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007d56:	e731      	b.n	8007bbc <__kernel_rem_pio2+0x298>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7f8 ff18 	bl	8000b90 <__aeabi_d2iz>
 8007d60:	ab0c      	add	r3, sp, #48	; 0x30
 8007d62:	4634      	mov	r4, r6
 8007d64:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007d68:	e728      	b.n	8007bbc <__kernel_rem_pio2+0x298>
 8007d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007d70:	f7f8 fbf4 	bl	800055c <__aeabi_i2d>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 fc5a 	bl	8000630 <__aeabi_dmul>
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007d82:	464b      	mov	r3, r9
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fc52 	bl	8000630 <__aeabi_dmul>
 8007d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	e722      	b.n	8007bdc <__kernel_rem_pio2+0x2b8>
 8007d96:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007d9a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d9e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007da2:	f8cd c01c 	str.w	ip, [sp, #28]
 8007da6:	f7f8 fc43 	bl	8000630 <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4650      	mov	r0, sl
 8007db0:	4659      	mov	r1, fp
 8007db2:	f7f8 fa87 	bl	80002c4 <__adddf3>
 8007db6:	4682      	mov	sl, r0
 8007db8:	468b      	mov	fp, r1
 8007dba:	f108 0801 	add.w	r8, r8, #1
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	4598      	cmp	r8, r3
 8007dc2:	dc01      	bgt.n	8007dc8 <__kernel_rem_pio2+0x4a4>
 8007dc4:	45b8      	cmp	r8, r7
 8007dc6:	dde6      	ble.n	8007d96 <__kernel_rem_pio2+0x472>
 8007dc8:	ab48      	add	r3, sp, #288	; 0x120
 8007dca:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007dce:	e9c7 ab00 	strd	sl, fp, [r7]
 8007dd2:	3e01      	subs	r6, #1
 8007dd4:	e707      	b.n	8007be6 <__kernel_rem_pio2+0x2c2>
 8007dd6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	dc09      	bgt.n	8007df0 <__kernel_rem_pio2+0x4cc>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc32      	bgt.n	8007e46 <__kernel_rem_pio2+0x522>
 8007de0:	d05a      	beq.n	8007e98 <__kernel_rem_pio2+0x574>
 8007de2:	9b04      	ldr	r3, [sp, #16]
 8007de4:	f003 0007 	and.w	r0, r3, #7
 8007de8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d1f5      	bne.n	8007de2 <__kernel_rem_pio2+0x4be>
 8007df6:	ab48      	add	r3, sp, #288	; 0x120
 8007df8:	441d      	add	r5, r3
 8007dfa:	46aa      	mov	sl, r5
 8007dfc:	46a3      	mov	fp, r4
 8007dfe:	f1bb 0f00 	cmp.w	fp, #0
 8007e02:	dc76      	bgt.n	8007ef2 <__kernel_rem_pio2+0x5ce>
 8007e04:	46aa      	mov	sl, r5
 8007e06:	46a3      	mov	fp, r4
 8007e08:	f1bb 0f01 	cmp.w	fp, #1
 8007e0c:	f300 8090 	bgt.w	8007f30 <__kernel_rem_pio2+0x60c>
 8007e10:	2700      	movs	r7, #0
 8007e12:	463e      	mov	r6, r7
 8007e14:	2c01      	cmp	r4, #1
 8007e16:	f300 80aa 	bgt.w	8007f6e <__kernel_rem_pio2+0x64a>
 8007e1a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007e1e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007e22:	9b00      	ldr	r3, [sp, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f040 80ac 	bne.w	8007f82 <__kernel_rem_pio2+0x65e>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	9806      	ldr	r0, [sp, #24]
 8007e30:	e9c0 2300 	strd	r2, r3, [r0]
 8007e34:	4622      	mov	r2, r4
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007e3c:	463a      	mov	r2, r7
 8007e3e:	4633      	mov	r3, r6
 8007e40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007e44:	e7cd      	b.n	8007de2 <__kernel_rem_pio2+0x4be>
 8007e46:	2000      	movs	r0, #0
 8007e48:	46a0      	mov	r8, r4
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	ab48      	add	r3, sp, #288	; 0x120
 8007e4e:	441d      	add	r5, r3
 8007e50:	f1b8 0f00 	cmp.w	r8, #0
 8007e54:	da3a      	bge.n	8007ecc <__kernel_rem_pio2+0x5a8>
 8007e56:	9b00      	ldr	r3, [sp, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d03e      	beq.n	8007eda <__kernel_rem_pio2+0x5b6>
 8007e5c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007e60:	4602      	mov	r2, r0
 8007e62:	462b      	mov	r3, r5
 8007e64:	9d06      	ldr	r5, [sp, #24]
 8007e66:	2601      	movs	r6, #1
 8007e68:	e9c5 2300 	strd	r2, r3, [r5]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007e72:	f7f8 fa25 	bl	80002c0 <__aeabi_dsub>
 8007e76:	4684      	mov	ip, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	ad48      	add	r5, sp, #288	; 0x120
 8007e7c:	42b4      	cmp	r4, r6
 8007e7e:	f105 0508 	add.w	r5, r5, #8
 8007e82:	da2c      	bge.n	8007ede <__kernel_rem_pio2+0x5ba>
 8007e84:	9b00      	ldr	r3, [sp, #0]
 8007e86:	b10b      	cbz	r3, 8007e8c <__kernel_rem_pio2+0x568>
 8007e88:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007e8c:	4662      	mov	r2, ip
 8007e8e:	463b      	mov	r3, r7
 8007e90:	9906      	ldr	r1, [sp, #24]
 8007e92:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007e96:	e7a4      	b.n	8007de2 <__kernel_rem_pio2+0x4be>
 8007e98:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007e9a:	ab48      	add	r3, sp, #288	; 0x120
 8007e9c:	4637      	mov	r7, r6
 8007e9e:	441d      	add	r5, r3
 8007ea0:	2c00      	cmp	r4, #0
 8007ea2:	da09      	bge.n	8007eb8 <__kernel_rem_pio2+0x594>
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	b10b      	cbz	r3, 8007eac <__kernel_rem_pio2+0x588>
 8007ea8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007eac:	4632      	mov	r2, r6
 8007eae:	463b      	mov	r3, r7
 8007eb0:	9906      	ldr	r1, [sp, #24]
 8007eb2:	e9c1 2300 	strd	r2, r3, [r1]
 8007eb6:	e794      	b.n	8007de2 <__kernel_rem_pio2+0x4be>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	f7f8 fa00 	bl	80002c4 <__adddf3>
 8007ec4:	3c01      	subs	r4, #1
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	e7e9      	b.n	8007ea0 <__kernel_rem_pio2+0x57c>
 8007ecc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007ed0:	f7f8 f9f8 	bl	80002c4 <__adddf3>
 8007ed4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ed8:	e7ba      	b.n	8007e50 <__kernel_rem_pio2+0x52c>
 8007eda:	460d      	mov	r5, r1
 8007edc:	e7c0      	b.n	8007e60 <__kernel_rem_pio2+0x53c>
 8007ede:	4660      	mov	r0, ip
 8007ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	f7f8 f9ed 	bl	80002c4 <__adddf3>
 8007eea:	3601      	adds	r6, #1
 8007eec:	4684      	mov	ip, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	e7c4      	b.n	8007e7c <__kernel_rem_pio2+0x558>
 8007ef2:	e9da 6700 	ldrd	r6, r7, [sl]
 8007ef6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007efa:	4632      	mov	r2, r6
 8007efc:	463b      	mov	r3, r7
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 f9df 	bl	80002c4 <__adddf3>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 f9d5 	bl	80002c0 <__aeabi_dsub>
 8007f16:	4632      	mov	r2, r6
 8007f18:	463b      	mov	r3, r7
 8007f1a:	f7f8 f9d3 	bl	80002c4 <__adddf3>
 8007f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f22:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007f26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f2a:	e9ca 2300 	strd	r2, r3, [sl]
 8007f2e:	e766      	b.n	8007dfe <__kernel_rem_pio2+0x4da>
 8007f30:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f34:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4639      	mov	r1, r7
 8007f40:	f7f8 f9c0 	bl	80002c4 <__adddf3>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 f9b6 	bl	80002c0 <__aeabi_dsub>
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	f7f8 f9b4 	bl	80002c4 <__adddf3>
 8007f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f60:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f68:	e9ca 2300 	strd	r2, r3, [sl]
 8007f6c:	e74c      	b.n	8007e08 <__kernel_rem_pio2+0x4e4>
 8007f6e:	4638      	mov	r0, r7
 8007f70:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007f74:	4631      	mov	r1, r6
 8007f76:	f7f8 f9a5 	bl	80002c4 <__adddf3>
 8007f7a:	3c01      	subs	r4, #1
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	460e      	mov	r6, r1
 8007f80:	e748      	b.n	8007e14 <__kernel_rem_pio2+0x4f0>
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007f88:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007f8c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007f90:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007f94:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007f98:	601d      	str	r5, [r3, #0]
 8007f9a:	615e      	str	r6, [r3, #20]
 8007f9c:	e721      	b.n	8007de2 <__kernel_rem_pio2+0x4be>
 8007f9e:	bf00      	nop
 8007fa0:	41700000 	.word	0x41700000
 8007fa4:	3e700000 	.word	0x3e700000

08007fa8 <__kernel_sin>:
 8007fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	e9cd 2300 	strd	r2, r3, [sp]
 8007fb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fb6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007fba:	4682      	mov	sl, r0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007fc0:	da03      	bge.n	8007fca <__kernel_sin+0x22>
 8007fc2:	f7f8 fde5 	bl	8000b90 <__aeabi_d2iz>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d050      	beq.n	800806c <__kernel_sin+0xc4>
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4623      	mov	r3, r4
 8007fce:	4650      	mov	r0, sl
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f7f8 fb2d 	bl	8000630 <__aeabi_dmul>
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	460f      	mov	r7, r1
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4650      	mov	r0, sl
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	f7f8 fb25 	bl	8000630 <__aeabi_dmul>
 8007fe6:	a33e      	add	r3, pc, #248	; (adr r3, 80080e0 <__kernel_sin+0x138>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fb1c 	bl	8000630 <__aeabi_dmul>
 8007ff8:	a33b      	add	r3, pc, #236	; (adr r3, 80080e8 <__kernel_sin+0x140>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 f95f 	bl	80002c0 <__aeabi_dsub>
 8008002:	4632      	mov	r2, r6
 8008004:	463b      	mov	r3, r7
 8008006:	f7f8 fb13 	bl	8000630 <__aeabi_dmul>
 800800a:	a339      	add	r3, pc, #228	; (adr r3, 80080f0 <__kernel_sin+0x148>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f958 	bl	80002c4 <__adddf3>
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	f7f8 fb0a 	bl	8000630 <__aeabi_dmul>
 800801c:	a336      	add	r3, pc, #216	; (adr r3, 80080f8 <__kernel_sin+0x150>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f94d 	bl	80002c0 <__aeabi_dsub>
 8008026:	4632      	mov	r2, r6
 8008028:	463b      	mov	r3, r7
 800802a:	f7f8 fb01 	bl	8000630 <__aeabi_dmul>
 800802e:	a334      	add	r3, pc, #208	; (adr r3, 8008100 <__kernel_sin+0x158>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f946 	bl	80002c4 <__adddf3>
 8008038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803c:	b9dd      	cbnz	r5, 8008076 <__kernel_sin+0xce>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 faf3 	bl	8000630 <__aeabi_dmul>
 800804a:	a32f      	add	r3, pc, #188	; (adr r3, 8008108 <__kernel_sin+0x160>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f936 	bl	80002c0 <__aeabi_dsub>
 8008054:	4642      	mov	r2, r8
 8008056:	464b      	mov	r3, r9
 8008058:	f7f8 faea 	bl	8000630 <__aeabi_dmul>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4650      	mov	r0, sl
 8008062:	4621      	mov	r1, r4
 8008064:	f7f8 f92e 	bl	80002c4 <__adddf3>
 8008068:	4682      	mov	sl, r0
 800806a:	460c      	mov	r4, r1
 800806c:	4650      	mov	r0, sl
 800806e:	4621      	mov	r1, r4
 8008070:	b006      	add	sp, #24
 8008072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008076:	2200      	movs	r2, #0
 8008078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <__kernel_sin+0x168>)
 800807e:	f7f8 fad7 	bl	8000630 <__aeabi_dmul>
 8008082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	f7f8 facf 	bl	8000630 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800809a:	f7f8 f911 	bl	80002c0 <__aeabi_dsub>
 800809e:	4632      	mov	r2, r6
 80080a0:	463b      	mov	r3, r7
 80080a2:	f7f8 fac5 	bl	8000630 <__aeabi_dmul>
 80080a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080aa:	f7f8 f909 	bl	80002c0 <__aeabi_dsub>
 80080ae:	a316      	add	r3, pc, #88	; (adr r3, 8008108 <__kernel_sin+0x160>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 fab8 	bl	8000630 <__aeabi_dmul>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4630      	mov	r0, r6
 80080c6:	4639      	mov	r1, r7
 80080c8:	f7f8 f8fc 	bl	80002c4 <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4650      	mov	r0, sl
 80080d2:	4621      	mov	r1, r4
 80080d4:	f7f8 f8f4 	bl	80002c0 <__aeabi_dsub>
 80080d8:	e7c6      	b.n	8008068 <__kernel_sin+0xc0>
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w
 80080e0:	5acfd57c 	.word	0x5acfd57c
 80080e4:	3de5d93a 	.word	0x3de5d93a
 80080e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80080ec:	3e5ae5e6 	.word	0x3e5ae5e6
 80080f0:	57b1fe7d 	.word	0x57b1fe7d
 80080f4:	3ec71de3 	.word	0x3ec71de3
 80080f8:	19c161d5 	.word	0x19c161d5
 80080fc:	3f2a01a0 	.word	0x3f2a01a0
 8008100:	1110f8a6 	.word	0x1110f8a6
 8008104:	3f811111 	.word	0x3f811111
 8008108:	55555549 	.word	0x55555549
 800810c:	3fc55555 	.word	0x3fc55555
 8008110:	3fe00000 	.word	0x3fe00000

08008114 <fabs>:
 8008114:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008118:	4770      	bx	lr
 800811a:	0000      	movs	r0, r0
 800811c:	0000      	movs	r0, r0
	...

08008120 <floor>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008128:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800812c:	2e13      	cmp	r6, #19
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4607      	mov	r7, r0
 8008134:	460c      	mov	r4, r1
 8008136:	4605      	mov	r5, r0
 8008138:	dc33      	bgt.n	80081a2 <floor+0x82>
 800813a:	2e00      	cmp	r6, #0
 800813c:	da14      	bge.n	8008168 <floor+0x48>
 800813e:	a334      	add	r3, pc, #208	; (adr r3, 8008210 <floor+0xf0>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 f8be 	bl	80002c4 <__adddf3>
 8008148:	2200      	movs	r2, #0
 800814a:	2300      	movs	r3, #0
 800814c:	f7f8 fd00 	bl	8000b50 <__aeabi_dcmpgt>
 8008150:	b138      	cbz	r0, 8008162 <floor+0x42>
 8008152:	2c00      	cmp	r4, #0
 8008154:	da58      	bge.n	8008208 <floor+0xe8>
 8008156:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800815a:	431d      	orrs	r5, r3
 800815c:	d001      	beq.n	8008162 <floor+0x42>
 800815e:	2500      	movs	r5, #0
 8008160:	4c2d      	ldr	r4, [pc, #180]	; (8008218 <floor+0xf8>)
 8008162:	4623      	mov	r3, r4
 8008164:	462f      	mov	r7, r5
 8008166:	e025      	b.n	80081b4 <floor+0x94>
 8008168:	4a2c      	ldr	r2, [pc, #176]	; (800821c <floor+0xfc>)
 800816a:	fa42 f806 	asr.w	r8, r2, r6
 800816e:	ea01 0208 	and.w	r2, r1, r8
 8008172:	4302      	orrs	r2, r0
 8008174:	d01e      	beq.n	80081b4 <floor+0x94>
 8008176:	a326      	add	r3, pc, #152	; (adr r3, 8008210 <floor+0xf0>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f7f8 f8a2 	bl	80002c4 <__adddf3>
 8008180:	2200      	movs	r2, #0
 8008182:	2300      	movs	r3, #0
 8008184:	f7f8 fce4 	bl	8000b50 <__aeabi_dcmpgt>
 8008188:	2800      	cmp	r0, #0
 800818a:	d0ea      	beq.n	8008162 <floor+0x42>
 800818c:	2c00      	cmp	r4, #0
 800818e:	bfbe      	ittt	lt
 8008190:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008194:	fa43 f606 	asrlt.w	r6, r3, r6
 8008198:	19a4      	addlt	r4, r4, r6
 800819a:	2500      	movs	r5, #0
 800819c:	ea24 0408 	bic.w	r4, r4, r8
 80081a0:	e7df      	b.n	8008162 <floor+0x42>
 80081a2:	2e33      	cmp	r6, #51	; 0x33
 80081a4:	dd0a      	ble.n	80081bc <floor+0x9c>
 80081a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081aa:	d103      	bne.n	80081b4 <floor+0x94>
 80081ac:	f7f8 f88a 	bl	80002c4 <__adddf3>
 80081b0:	4607      	mov	r7, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4638      	mov	r0, r7
 80081b6:	4619      	mov	r1, r3
 80081b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081bc:	f04f 32ff 	mov.w	r2, #4294967295
 80081c0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80081c4:	fa22 f808 	lsr.w	r8, r2, r8
 80081c8:	ea18 0f00 	tst.w	r8, r0
 80081cc:	d0f2      	beq.n	80081b4 <floor+0x94>
 80081ce:	a310      	add	r3, pc, #64	; (adr r3, 8008210 <floor+0xf0>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f8 f876 	bl	80002c4 <__adddf3>
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	f7f8 fcb8 	bl	8000b50 <__aeabi_dcmpgt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d0be      	beq.n	8008162 <floor+0x42>
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	da02      	bge.n	80081ee <floor+0xce>
 80081e8:	2e14      	cmp	r6, #20
 80081ea:	d103      	bne.n	80081f4 <floor+0xd4>
 80081ec:	3401      	adds	r4, #1
 80081ee:	ea25 0508 	bic.w	r5, r5, r8
 80081f2:	e7b6      	b.n	8008162 <floor+0x42>
 80081f4:	2301      	movs	r3, #1
 80081f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80081fa:	fa03 f606 	lsl.w	r6, r3, r6
 80081fe:	4435      	add	r5, r6
 8008200:	42bd      	cmp	r5, r7
 8008202:	bf38      	it	cc
 8008204:	18e4      	addcc	r4, r4, r3
 8008206:	e7f2      	b.n	80081ee <floor+0xce>
 8008208:	2500      	movs	r5, #0
 800820a:	462c      	mov	r4, r5
 800820c:	e7a9      	b.n	8008162 <floor+0x42>
 800820e:	bf00      	nop
 8008210:	8800759c 	.word	0x8800759c
 8008214:	7e37e43c 	.word	0x7e37e43c
 8008218:	bff00000 	.word	0xbff00000
 800821c:	000fffff 	.word	0x000fffff

08008220 <scalbn>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	4617      	mov	r7, r2
 800822c:	460b      	mov	r3, r1
 800822e:	b996      	cbnz	r6, 8008256 <scalbn+0x36>
 8008230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008234:	4303      	orrs	r3, r0
 8008236:	d039      	beq.n	80082ac <scalbn+0x8c>
 8008238:	4b33      	ldr	r3, [pc, #204]	; (8008308 <scalbn+0xe8>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f9f8 	bl	8000630 <__aeabi_dmul>
 8008240:	4b32      	ldr	r3, [pc, #200]	; (800830c <scalbn+0xec>)
 8008242:	4604      	mov	r4, r0
 8008244:	429f      	cmp	r7, r3
 8008246:	460d      	mov	r5, r1
 8008248:	da0f      	bge.n	800826a <scalbn+0x4a>
 800824a:	a32b      	add	r3, pc, #172	; (adr r3, 80082f8 <scalbn+0xd8>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 f9ee 	bl	8000630 <__aeabi_dmul>
 8008254:	e006      	b.n	8008264 <scalbn+0x44>
 8008256:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800825a:	4296      	cmp	r6, r2
 800825c:	d10a      	bne.n	8008274 <scalbn+0x54>
 800825e:	4602      	mov	r2, r0
 8008260:	f7f8 f830 	bl	80002c4 <__adddf3>
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	e020      	b.n	80082ac <scalbn+0x8c>
 800826a:	460b      	mov	r3, r1
 800826c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008270:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008274:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008278:	19b9      	adds	r1, r7, r6
 800827a:	4291      	cmp	r1, r2
 800827c:	dd0e      	ble.n	800829c <scalbn+0x7c>
 800827e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008282:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008286:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800828a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800828e:	4820      	ldr	r0, [pc, #128]	; (8008310 <scalbn+0xf0>)
 8008290:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008294:	a31a      	add	r3, pc, #104	; (adr r3, 8008300 <scalbn+0xe0>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e7d9      	b.n	8008250 <scalbn+0x30>
 800829c:	2900      	cmp	r1, #0
 800829e:	dd08      	ble.n	80082b2 <scalbn+0x92>
 80082a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80082b6:	da12      	bge.n	80082de <scalbn+0xbe>
 80082b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082bc:	429f      	cmp	r7, r3
 80082be:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80082c2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80082c6:	dcdc      	bgt.n	8008282 <scalbn+0x62>
 80082c8:	a30b      	add	r3, pc, #44	; (adr r3, 80082f8 <scalbn+0xd8>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80082d2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80082d6:	480f      	ldr	r0, [pc, #60]	; (8008314 <scalbn+0xf4>)
 80082d8:	f041 011f 	orr.w	r1, r1, #31
 80082dc:	e7b8      	b.n	8008250 <scalbn+0x30>
 80082de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082e2:	3136      	adds	r1, #54	; 0x36
 80082e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80082ec:	4620      	mov	r0, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	2200      	movs	r2, #0
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <scalbn+0xf8>)
 80082f4:	e7ac      	b.n	8008250 <scalbn+0x30>
 80082f6:	bf00      	nop
 80082f8:	c2f8f359 	.word	0xc2f8f359
 80082fc:	01a56e1f 	.word	0x01a56e1f
 8008300:	8800759c 	.word	0x8800759c
 8008304:	7e37e43c 	.word	0x7e37e43c
 8008308:	43500000 	.word	0x43500000
 800830c:	ffff3cb0 	.word	0xffff3cb0
 8008310:	8800759c 	.word	0x8800759c
 8008314:	c2f8f359 	.word	0xc2f8f359
 8008318:	3c900000 	.word	0x3c900000

0800831c <_init>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr

08008328 <_fini>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr
