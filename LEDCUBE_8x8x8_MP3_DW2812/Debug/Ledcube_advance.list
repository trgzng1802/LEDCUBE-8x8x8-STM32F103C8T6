
Ledcube_advance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800a1b8  0800a1b8  0001a1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a530  0800a530  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a530  0800a530  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a530  0800a530  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000078  0800a5b0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a5b0  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015522  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426a  00000000  00000000  000355c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  00039830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2ce  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202b1  00000000  00000000  0005951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009602c  00000000  00000000  000797cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006848  00000000  00000000  0010f84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a19c 	.word	0x0800a19c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800a19c 	.word	0x0800a19c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <Btn_Init>:
		BtnX->Is_press_timeout = 0;
	}
}

void Btn_Init(Btn_Typedef *BtnX, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	4613      	mov	r3, r2
 8001020:	80fb      	strh	r3, [r7, #6]
	BtnX->GPIOx = GPIOx;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	611a      	str	r2, [r3, #16]
	BtnX->GPIO_Pin = GPIO_Pin;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	829a      	strh	r2, [r3, #20]

}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_ADC1_Init+0x74>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_ADC1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_ADC1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_ADC1_Init+0x74>)
 8001062:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_ADC1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC1_Init+0x74>)
 8001070:	2201      	movs	r2, #1
 8001072:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_ADC1_Init+0x74>)
 8001076:	f000 fd55 	bl	8001b24 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f9b9 	bl	80013f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001088:	2301      	movs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_ADC1_Init+0x74>)
 8001096:	f000 fe1d 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 f9a9 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000094 	.word	0x20000094
 80010b0:	40012400 	.word	0x40012400

080010b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_ADC_MspInit+0x6c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d121      	bne.n	8001118 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_ADC_MspInit+0x70>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_ADC_MspInit+0x74>)
 8001114:	f001 f8d6 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40012400 	.word	0x40012400
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <MX_GPIO_Init+0xe4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <MX_GPIO_Init+0xe4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <MX_GPIO_Init+0xe4>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MX_GPIO_Init+0xe4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_GPIO_Init+0xe4>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a20      	ldr	r2, [pc, #128]	; (8001210 <MX_GPIO_Init+0xe4>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_GPIO_Init+0xe4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	481b      	ldr	r0, [pc, #108]	; (8001214 <MX_GPIO_Init+0xe8>)
 80011a8:	f001 fa10 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <MX_GPIO_Init+0xec>)
 80011b2:	f001 fa0b 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_GPIO_Init+0xe8>)
 80011d0:	f001 f878 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0xec>)
 80011e8:	f001 f86c 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LATCH_PIN_Pin;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LATCH_PIN_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_GPIO_Init+0xec>)
 8001204:	f001 f85e 	bl	80022c4 <HAL_GPIO_Init>

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	40011000 	.word	0x40011000
 8001218:	40010800 	.word	0x40010800

0800121c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_I2C1_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_I2C1_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_I2C1_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_I2C1_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_I2C1_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_I2C1_Init+0x50>)
 800125a:	f001 f9cf 	bl	80025fc <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 f8c7 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000c4 	.word	0x200000c4
 8001270:	40005400 	.word	0x40005400
 8001274:	000186a0 	.word	0x000186a0

08001278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_I2C_MspInit+0x70>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d123      	bne.n	80012e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_I2C_MspInit+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_I2C_MspInit+0x74>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_I2C_MspInit+0x74>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b0:	23c0      	movs	r3, #192	; 0xc0
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b4:	2312      	movs	r3, #18
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_I2C_MspInit+0x78>)
 80012c4:	f000 fffe 	bl	80022c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_I2C_MspInit+0x74>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_I2C_MspInit+0x74>)
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d2:	61d3      	str	r3, [r2, #28]
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_I2C_MspInit+0x74>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010c00 	.word	0x40010c00

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f000 fbb2 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f820 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f7ff ff14 	bl	800112c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001304:	f000 f87c 	bl	8001400 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001308:	f000 fa9c 	bl	8001844 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800130c:	f000 fac4 	bl	8001898 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001310:	f7ff fe92 	bl	8001038 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001314:	f000 fa26 	bl	8001764 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001318:	f7ff ff80 	bl	800121c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Btn_Init(&button1, GPIOA, GPIO_PIN_1);
 800131c:	2202      	movs	r2, #2
 800131e:	4905      	ldr	r1, [pc, #20]	; (8001334 <main+0x40>)
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <main+0x44>)
 8001322:	f7ff fe77 	bl	8001014 <Btn_Init>
  //Btn_app(&button1);
  Effect_app();
 8001326:	f004 fb21 	bl	800596c <Effect_app>
  HAL_TIM_Base_Start_IT(&htim2);
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <main+0x48>)
 800132c:	f002 fa30 	bl	8003790 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x3c>
 8001332:	bf00      	nop
 8001334:	40010800 	.word	0x40010800
 8001338:	20000118 	.word	0x20000118
 800133c:	2000018c 	.word	0x2000018c

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	2228      	movs	r2, #40	; 0x28
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f005 ffee 	bl	8007330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800138c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fa74 	bl	8002884 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013a2:	f000 f828 	bl	80013f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2102      	movs	r1, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fce0 	bl	8002d88 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ce:	f000 f812 	bl	80013f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013d2:	2302      	movs	r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fe6a 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ea:	f000 f804 	bl	80013f6 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	; 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fa:	b672      	cpsid	i
}
 80013fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fe:	e7fe      	b.n	80013fe <Error_Handler+0x8>

08001400 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_SPI1_Init+0x64>)
 8001406:	4a18      	ldr	r2, [pc, #96]	; (8001468 <MX_SPI1_Init+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_SPI1_Init+0x64>)
 800140c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_SPI1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_SPI1_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_SPI1_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_SPI1_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_SPI1_Init+0x64>)
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_SPI1_Init+0x64>)
 8001434:	2220      	movs	r2, #32
 8001436:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_SPI1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_SPI1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_SPI1_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_SPI1_Init+0x64>)
 800144c:	220a      	movs	r2, #10
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_SPI1_Init+0x64>)
 8001452:	f001 fee7 	bl	8003224 <HAL_SPI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800145c:	f7ff ffcb 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000130 	.word	0x20000130
 8001468:	40013000 	.word	0x40013000

0800146c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <HAL_SPI_MspInit+0x70>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d123      	bne.n	80014d4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 8001492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_SPI_MspInit+0x74>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_SPI_MspInit+0x78>)
 80014d0:	f000 fef8 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 faab 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f002 f947 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000018c 	.word	0x2000018c

080015b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <USART1_IRQHandler+0x10>)
 80015b6:	f002 fce3 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001d4 	.word	0x200001d4

080015c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <USART2_IRQHandler+0x10>)
 80015ca:	f002 fcd9 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000218 	.word	0x20000218

080015d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	return 1;
 80015dc:	2301      	movs	r3, #1
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_kill>:

int _kill(int pid, int sig)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f0:	f005 fe74 	bl	80072dc <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2216      	movs	r2, #22
 80015f8:	601a      	str	r2, [r3, #0]
	return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_exit>:

void _exit (int status)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800160e:	f04f 31ff 	mov.w	r1, #4294967295
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffe7 	bl	80015e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001618:	e7fe      	b.n	8001618 <_exit+0x12>

0800161a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e00a      	b.n	8001642 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162c:	f3af 8000 	nop.w
 8001630:	4601      	mov	r1, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbf0      	blt.n	800162c <_read+0x12>
	}

return len;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
	}
	return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_close>:

int _close(int file)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f005 fdde 	bl	80072dc <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20005000 	.word	0x20005000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000188 	.word	0x20000188
 8001754:	200004a0 	.word	0x200004a0

08001758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_TIM2_Init+0x94>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_TIM2_Init+0x94>)
 800178a:	2223      	movs	r2, #35	; 0x23
 800178c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM2_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_TIM2_Init+0x94>)
 8001796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800179a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_TIM2_Init+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM2_Init+0x94>)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <MX_TIM2_Init+0x94>)
 80017aa:	f001 ffa1 	bl	80036f0 <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017b4:	f7ff fe1f 	bl	80013f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_TIM2_Init+0x94>)
 80017c6:	f002 f93d 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017d0:	f7ff fe11 	bl	80013f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_TIM2_Init+0x94>)
 80017e2:	f002 fb0f 	bl	8003e04 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f7ff fe03 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000018c 	.word	0x2000018c

080017fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d113      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	61d3      	str	r3, [r2, #28]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2102      	movs	r1, #2
 800182a:	201c      	movs	r0, #28
 800182c:	f000 fc63 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001830:	201c      	movs	r0, #28
 8001832:	f000 fc7c 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	2204      	movs	r2, #4
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f002 fb32 	bl	8003ee4 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f7ff fdb6 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200001d4 	.word	0x200001d4
 8001894:	40013800 	.word	0x40013800

08001898 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART2_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f002 fb08 	bl	8003ee4 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f7ff fd8c 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000218 	.word	0x20000218
 80018e8:	40004400 	.word	0x40004400

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_UART_MspInit+0x118>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d13a      	bne.n	8001982 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a37      	ldr	r2, [pc, #220]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800193c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	4619      	mov	r1, r3
 8001950:	482e      	ldr	r0, [pc, #184]	; (8001a0c <HAL_UART_MspInit+0x120>)
 8001952:	f000 fcb7 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	4619      	mov	r1, r3
 800196a:	4828      	ldr	r0, [pc, #160]	; (8001a0c <HAL_UART_MspInit+0x120>)
 800196c:	f000 fcaa 	bl	80022c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2025      	movs	r0, #37	; 0x25
 8001976:	f000 fbbe 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800197a:	2025      	movs	r0, #37	; 0x25
 800197c:	f000 fbd7 	bl	800212e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001980:	e03c      	b.n	80019fc <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_UART_MspInit+0x124>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d137      	bne.n	80019fc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 8001992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_MspInit+0x11c>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019bc:	2304      	movs	r3, #4
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4619      	mov	r1, r3
 80019ce:	480f      	ldr	r0, [pc, #60]	; (8001a0c <HAL_UART_MspInit+0x120>)
 80019d0:	f000 fc78 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d4:	2308      	movs	r3, #8
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4619      	mov	r1, r3
 80019e6:	4809      	ldr	r0, [pc, #36]	; (8001a0c <HAL_UART_MspInit+0x120>)
 80019e8:	f000 fc6c 	bl	80022c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2026      	movs	r0, #38	; 0x26
 80019f2:	f000 fb80 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f6:	2026      	movs	r0, #38	; 0x26
 80019f8:	f000 fb99 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	40004400 	.word	0x40004400

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a3a:	f7ff fe8d 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f005 fc53 	bl	80072e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fc57 	bl	80012f4 <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a50:	0800a538 	.word	0x0800a538
  ldr r2, =_sbss
 8001a54:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a58:	200004a0 	.word	0x200004a0

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 fb35 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fd34 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fb4d 	bl	800214a <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 fb15 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_IncTick+0x20>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	2000025c 	.word	0x2000025c

08001b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	2000025c 	.word	0x2000025c

08001b24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0be      	b.n	8001cc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff faa6 	bl	80010b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f9ab 	bl	8001ec4 <ADC_ConversionStop_Disable>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8099 	bne.w	8001cb2 <HAL_ADC_Init+0x18e>
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8095 	bne.w	8001cb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b90:	f023 0302 	bic.w	r3, r3, #2
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7b1b      	ldrb	r3, [r3, #12]
 8001baa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bbc:	d003      	beq.n	8001bc6 <HAL_ADC_Init+0xa2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_ADC_Init+0xa8>
 8001bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bca:	e000      	b.n	8001bce <HAL_ADC_Init+0xaa>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7d1b      	ldrb	r3, [r3, #20]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d119      	bne.n	8001c10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	035a      	lsls	r2, r3, #13
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e00b      	b.n	8001c10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f043 0220 	orr.w	r2, r3, #32
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_ADC_Init+0x1a8>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c40:	d003      	beq.n	8001c4a <HAL_ADC_Init+0x126>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d104      	bne.n	8001c54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	051b      	lsls	r3, r3, #20
 8001c52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_ADC_Init+0x1ac>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10b      	bne.n	8001c90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c8e:	e018      	b.n	8001cc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f023 0312 	bic.w	r3, r3, #18
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cb0:	e007      	b.n	8001cc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	ffe1f7fd 	.word	0xffe1f7fd
 8001cd0:	ff1f0efe 	.word	0xff1f0efe

08001cd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x20>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e0dc      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1da>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d81c      	bhi.n	8001d3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b05      	subs	r3, #5
 8001d16:	221f      	movs	r2, #31
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4019      	ands	r1, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b05      	subs	r3, #5
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d3c:	e03c      	b.n	8001db8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d81c      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3b23      	subs	r3, #35	; 0x23
 8001d58:	221f      	movs	r2, #31
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	4019      	ands	r1, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b23      	subs	r3, #35	; 0x23
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7e:	e01b      	b.n	8001db8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b41      	subs	r3, #65	; 0x41
 8001d92:	221f      	movs	r2, #31
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b41      	subs	r3, #65	; 0x41
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d91c      	bls.n	8001dfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68d9      	ldr	r1, [r3, #12]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	3b1e      	subs	r3, #30
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	e019      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6898      	ldr	r0, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d003      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e3a:	2b11      	cmp	r3, #17
 8001e3c:	d132      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d125      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d126      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_ADC_ConfigChannel+0x1e8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9a      	lsrs	r2, r3, #18
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x1b2>
 8001e92:	e007      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40012400 	.word	0x40012400
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d12e      	bne.n	8001f3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fe0f 	bl	8001b10 <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	e01b      	b.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef6:	f7ff fe0b 	bl	8001b10 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d914      	bls.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10d      	bne.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d0dc      	beq.n	8001ef6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <__NVIC_EnableIRQ+0x34>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff90 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff2d 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff42 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff35 	bl	8001fac <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002174:	2b02      	cmp	r3, #2
 8002176:	d008      	beq.n	800218a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e020      	b.n	80021cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d005      	beq.n	80021fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e051      	b.n	800229e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 020e 	bic.w	r2, r2, #14
 8002208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <HAL_DMA_Abort_IT+0xd0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d029      	beq.n	8002278 <HAL_DMA_Abort_IT+0xa0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_DMA_Abort_IT+0xd4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Abort_IT+0x9c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_DMA_Abort_IT+0xd8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01a      	beq.n	800226e <HAL_DMA_Abort_IT+0x96>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_DMA_Abort_IT+0xdc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d012      	beq.n	8002268 <HAL_DMA_Abort_IT+0x90>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_DMA_Abort_IT+0xe0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00a      	beq.n	8002262 <HAL_DMA_Abort_IT+0x8a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_DMA_Abort_IT+0xe4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d102      	bne.n	800225c <HAL_DMA_Abort_IT+0x84>
 8002256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800225a:	e00e      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 800225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002260:	e00b      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 8002262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002266:	e008      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	e005      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 800226e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002272:	e002      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 8002274:	2310      	movs	r3, #16
 8002276:	e000      	b.n	800227a <HAL_DMA_Abort_IT+0xa2>
 8002278:	2301      	movs	r3, #1
 800227a:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_DMA_Abort_IT+0xe8>)
 800227c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
    } 
  }
  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40020008 	.word	0x40020008
 80022ac:	4002001c 	.word	0x4002001c
 80022b0:	40020030 	.word	0x40020030
 80022b4:	40020044 	.word	0x40020044
 80022b8:	40020058 	.word	0x40020058
 80022bc:	4002006c 	.word	0x4002006c
 80022c0:	40020000 	.word	0x40020000

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e169      	b.n	80025ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d8:	2201      	movs	r2, #1
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8158 	bne.w	80025a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d05e      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002300:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d875      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002306:	4a98      	ldr	r2, [pc, #608]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d058      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 800230c:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d86f      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002312:	4a96      	ldr	r2, [pc, #600]	; (800256c <HAL_GPIO_Init+0x2a8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d052      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002318:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d869      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800231e:	4a94      	ldr	r2, [pc, #592]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d04c      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002324:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d863      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800232a:	4a92      	ldr	r2, [pc, #584]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d046      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002330:	4a90      	ldr	r2, [pc, #576]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d85d      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d82a      	bhi.n	8002390 <HAL_GPIO_Init+0xcc>
 800233a:	2b12      	cmp	r3, #18
 800233c:	d859      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_GPIO_Init+0x80>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	080023bf 	.word	0x080023bf
 8002348:	08002399 	.word	0x08002399
 800234c:	080023ab 	.word	0x080023ab
 8002350:	080023ed 	.word	0x080023ed
 8002354:	080023f3 	.word	0x080023f3
 8002358:	080023f3 	.word	0x080023f3
 800235c:	080023f3 	.word	0x080023f3
 8002360:	080023f3 	.word	0x080023f3
 8002364:	080023f3 	.word	0x080023f3
 8002368:	080023f3 	.word	0x080023f3
 800236c:	080023f3 	.word	0x080023f3
 8002370:	080023f3 	.word	0x080023f3
 8002374:	080023f3 	.word	0x080023f3
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023f3 	.word	0x080023f3
 8002380:	080023f3 	.word	0x080023f3
 8002384:	080023f3 	.word	0x080023f3
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023b5 	.word	0x080023b5
 8002390:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_GPIO_Init+0x2b4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002396:	e02c      	b.n	80023f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e029      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e024      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	3308      	adds	r3, #8
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e01f      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	330c      	adds	r3, #12
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e01a      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c6:	2304      	movs	r3, #4
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e013      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	611a      	str	r2, [r3, #16]
          break;
 80023de:	e009      	b.n	80023f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	615a      	str	r2, [r3, #20]
          break;
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          break;
 80023f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2bff      	cmp	r3, #255	; 0xff
 80023f8:	d801      	bhi.n	80023fe <HAL_GPIO_Init+0x13a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_Init+0x13e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2bff      	cmp	r3, #255	; 0xff
 8002408:	d802      	bhi.n	8002410 <HAL_GPIO_Init+0x14c>
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x152>
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3b08      	subs	r3, #8
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	210f      	movs	r1, #15
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80b1 	beq.w	80025a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x2b8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a40      	ldr	r2, [pc, #256]	; (8002584 <HAL_GPIO_Init+0x2c0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <HAL_GPIO_Init+0x2c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1e8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3e      	ldr	r2, [pc, #248]	; (800258c <HAL_GPIO_Init+0x2c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_GPIO_Init+0x2cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1e0>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024b0:	2300      	movs	r3, #0
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c2:	492f      	ldr	r1, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	492c      	ldr	r1, [pc, #176]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4928      	ldr	r1, [pc, #160]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	491e      	ldr	r1, [pc, #120]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4918      	ldr	r1, [pc, #96]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d021      	beq.n	8002598 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e021      	b.n	80025a6 <HAL_GPIO_Init+0x2e2>
 8002562:	bf00      	nop
 8002564:	10320000 	.word	0x10320000
 8002568:	10310000 	.word	0x10310000
 800256c:	10220000 	.word	0x10220000
 8002570:	10210000 	.word	0x10210000
 8002574:	10120000 	.word	0x10120000
 8002578:	10110000 	.word	0x10110000
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	40010800 	.word	0x40010800
 8002588:	40010c00 	.word	0x40010c00
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_GPIO_Init+0x304>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_GPIO_Init+0x304>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f47f ae8e 	bne.w	80022d8 <HAL_GPIO_Init+0x14>
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	372c      	adds	r7, #44	; 0x2c
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	611a      	str	r2, [r3, #16]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e12b      	b.n	8002866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fe28 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002660:	f000 fce4 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_I2C_Init+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <HAL_I2C_Init+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_I2C_Init+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e006      	b.n	800268e <HAL_I2C_Init+0x92>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_I2C_Init+0x27c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e7      	b.n	8002866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_I2C_Init+0x280>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_I2C_Init+0x274>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d802      	bhi.n	80026d0 <HAL_I2C_Init+0xd4>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e009      	b.n	80026e4 <HAL_I2C_Init+0xe8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_I2C_Init+0x284>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	3301      	adds	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_I2C_Init+0x274>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d819      	bhi.n	8002738 <HAL_I2C_Init+0x13c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e59      	subs	r1, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_I2C_Init+0x138>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	e051      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e04f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_I2C_Init+0x168>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_I2C_Init+0x18e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x196>
 800278e:	2301      	movs	r3, #1
 8002790:	e022      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_I2C_Init+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e58      	subs	r0, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6911      	ldr	r1, [r2, #16]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	000186a0 	.word	0x000186a0
 8002874:	001e847f 	.word	0x001e847f
 8002878:	003d08ff 	.word	0x003d08ff
 800287c:	431bde83 	.word	0x431bde83
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e272      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d00c      	beq.n	80028ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b0:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d112      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
 80028bc:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x12c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d168      	bne.n	80029b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e24c      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x76>
 80028ec:	4b80      	ldr	r3, [pc, #512]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7f      	ldr	r2, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x98>
 8002902:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7a      	ldr	r2, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0xbc>
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6a      	ldr	r2, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a67      	ldr	r2, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff f8d6 	bl	8001b10 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff f8d2 	bl	8001b10 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e200      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xe4>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff f8c2 	bl	8001b10 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7ff f8be 	bl	8001b10 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1ec      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x10c>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c0      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4939      	ldr	r1, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f877 	bl	8001b10 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7ff f873 	bl	8001b10 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a1      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4927      	ldr	r1, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff f856 	bl	8001b10 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff f852 	bl	8001b10 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e180      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03a      	beq.n	8002b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f836 	bl	8001b10 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7ff f832 	bl	8001b10 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e160      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 fad8 	bl	800307c <RCC_Delay>
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7ff f81c 	bl	8001b10 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff f818 	bl	8001b10 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d908      	bls.n	8002afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e146      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	42420000 	.word	0x42420000
 8002af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e9      	bne.n	8002adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a6 	beq.w	8002c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61d3      	str	r3, [r2, #28]
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b82      	ldr	r3, [pc, #520]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe ffd9 	bl	8001b10 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe ffd5 	bl	8001b10 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e103      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x312>
 8002b88:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6213      	str	r3, [r2, #32]
 8002b94:	e02d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x334>
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a66      	ldr	r2, [pc, #408]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	e01c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x356>
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a60      	ldr	r2, [pc, #384]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bda:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d015      	beq.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe ff89 	bl	8001b10 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe ff85 	bl	8001b10 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0b1      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ee      	beq.n	8002c02 <HAL_RCC_OscConfig+0x37e>
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe ff73 	bl	8001b10 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe ff6f 	bl	8001b10 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8087 	beq.w	8002d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d061      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d146      	bne.n	8002d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe ff43 	bl	8001b10 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe ff3f 	bl	8001b10 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e06d      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4921      	ldr	r1, [pc, #132]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a19      	ldr	r1, [r3, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe ff13 	bl	8001b10 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe ff0f 	bl	8001b10 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e03d      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x46a>
 8002d0c:	e035      	b.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fefc 	bl	8001b10 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fef8 	bl	8001b10 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e026      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x498>
 8002d3a:	e01e      	b.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e019      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d0      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d910      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4965      	ldr	r1, [pc, #404]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b8      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	494d      	ldr	r1, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d040      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d115      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e073      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06b      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4936      	ldr	r1, [pc, #216]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fe4a 	bl	8001b10 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fe46 	bl	8001b10 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e053      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d210      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4922      	ldr	r1, [pc, #136]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e032      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4916      	ldr	r1, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	490e      	ldr	r1, [pc, #56]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f16:	f000 f821 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1cc>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fda8 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800a1c8 	.word	0x0800a1c8
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000004 	.word	0x20000004

08002f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b490      	push	{r4, r7}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f64:	1d3c      	adds	r4, r7, #4
 8002f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f6c:	f240 2301 	movw	r3, #513	; 0x201
 8002f70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x40>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x46>
 8002f9a:	e02b      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f9e:	623b      	str	r3, [r7, #32]
      break;
 8002fa0:	e02b      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3328      	adds	r3, #40	; 0x28
 8002fac:	443b      	add	r3, r7
 8002fae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0c5b      	lsrs	r3, r3, #17
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	3328      	adds	r3, #40	; 0x28
 8002fca:	443b      	add	r3, r7
 8002fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fd6:	fb03 f202 	mul.w	r2, r3, r2
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e004      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	623b      	str	r3, [r7, #32]
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ff6:	623b      	str	r3, [r7, #32]
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc90      	pop	{r4, r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0800a1b8 	.word	0x0800a1b8
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	003d0900 	.word	0x003d0900

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_RCC_GetHCLKFreq+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	0800a1d8 	.word	0x0800a1d8

08003054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003058:	f7ff ffde 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0adb      	lsrs	r3, r3, #11
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	0800a1d8 	.word	0x0800a1d8

0800307c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <RCC_Delay+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <RCC_Delay+0x38>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0a5b      	lsrs	r3, r3, #9
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003098:	bf00      	nop
  }
  while (Delay --);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	60fa      	str	r2, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f9      	bne.n	8003098 <RCC_Delay+0x1c>
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	20000000 	.word	0x20000000
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	61d3      	str	r3, [r2, #28]
 80030f0:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d118      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a42      	ldr	r2, [pc, #264]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7fe fcfa 	bl	8001b10 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe fcf6 	bl	8001b10 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e06d      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02e      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d027      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d014      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fcc5 	bl	8001b10 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fcc1 	bl	8001b10 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e036      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4917      	ldr	r1, [pc, #92]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	490b      	ldr	r1, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	42420440 	.word	0x42420440

08003224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e076      	b.n	8003324 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003246:	d009      	beq.n	800325c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
 800324e:	e005      	b.n	800325c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe f8f8 	bl	800146c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	ea42 0103 	orr.w	r1, r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	0c1a      	lsrs	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f002 0204 	and.w	r2, r2, #4
 8003302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_SPI_Transmit+0x22>
 800334a:	2302      	movs	r3, #2
 800334c:	e126      	b.n	800359c <HAL_SPI_Transmit+0x270>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003356:	f7fe fbdb 	bl	8001b10 <HAL_GetTick>
 800335a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d002      	beq.n	8003372 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800336c:	2302      	movs	r3, #2
 800336e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003370:	e10b      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_Transmit+0x52>
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003382:	e102      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2203      	movs	r2, #3
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d10f      	bne.n	80033ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d007      	beq.n	800340a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d14b      	bne.n	80034ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0xf6>
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d13e      	bne.n	80034a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003446:	e02b      	b.n	80034a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d112      	bne.n	800347c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	86da      	strh	r2, [r3, #54]	; 0x36
 800347a:	e011      	b.n	80034a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347c:	f7fe fb48 	bl	8001b10 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d803      	bhi.n	8003494 <HAL_SPI_Transmit+0x168>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d102      	bne.n	800349a <HAL_SPI_Transmit+0x16e>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800349e:	e074      	b.n	800358a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ce      	bne.n	8003448 <HAL_SPI_Transmit+0x11c>
 80034aa:	e04c      	b.n	8003546 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_Transmit+0x18e>
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d140      	bne.n	800353c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034e0:	e02c      	b.n	800353c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d113      	bne.n	8003518 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	86da      	strh	r2, [r3, #54]	; 0x36
 8003516:	e011      	b.n	800353c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003518:	f7fe fafa 	bl	8001b10 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d803      	bhi.n	8003530 <HAL_SPI_Transmit+0x204>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d102      	bne.n	8003536 <HAL_SPI_Transmit+0x20a>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353a:	e026      	b.n	800358a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cd      	bne.n	80034e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8b2 	bl	80036b4 <SPI_EndRxTxTransaction>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e000      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003588:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035b4:	f7fe faac 	bl	8001b10 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035c4:	f7fe faa4 	bl	8001b10 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	015b      	lsls	r3, r3, #5
 80035d0:	0d1b      	lsrs	r3, r3, #20
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035da:	e054      	b.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d050      	beq.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035e4:	f7fe fa94 	bl	8001b10 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d902      	bls.n	80035fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d13d      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d111      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361c:	d004      	beq.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d107      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003640:	d10f      	bne.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e017      	b.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3b01      	subs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d19b      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ff6a 	bl	80035a4 <SPI_WaitFlagStateUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e000      	b.n	80036e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e041      	b.n	8003786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe f870 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 fa70 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e03a      	b.n	800381e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_Base_Start_IT+0x98>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_TIM_Base_Start_IT+0x9c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x58>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_TIM_Base_Start_IT+0xa0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d111      	bne.n	800380c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d010      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	e007      	b.n	800381c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9b1 	bl	8003bde <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9a4 	bl	8003bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9b3 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0204 	mvn.w	r2, #4
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f987 	bl	8003bde <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f97a 	bl	8003bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f989 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0208 	mvn.w	r2, #8
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f95d 	bl	8003bde <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f950 	bl	8003bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f95f 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2208      	movs	r2, #8
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f933 	bl	8003bde <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f926 	bl	8003bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f935 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f003 fc80 	bl	80072b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa77 	bl	8003ed2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8f9 	bl	8003c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0220 	mvn.w	r2, #32
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa42 	bl	8003ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_ConfigClockSource+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0b3      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x180>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d03e      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0xd0>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f200 8087 	bhi.w	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	f000 8085 	beq.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d87f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d01a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xa2>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d87b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d050      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x116>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d877      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d03c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xf6>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d873      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d058      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x136>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d86f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d064      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d86b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d060      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d867      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d05a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ae4:	e062      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f000 f966 	bl	8003dc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	609a      	str	r2, [r3, #8]
      break;
 8003b12:	e04e      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f000 f94f 	bl	8003dc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e03b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 f8c6 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2150      	movs	r1, #80	; 0x50
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f91d 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e02b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 f8e4 	bl	8003d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f90d 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e01b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f8a6 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2140      	movs	r1, #64	; 0x40
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f8fd 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 f8f4 	bl	8003d92 <TIM_ITRx_SetConfig>
        break;
 8003baa:	e002      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <TIM_Base_SetConfig+0xb8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_Base_SetConfig+0x30>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d007      	beq.n	8003c44 <TIM_Base_SetConfig+0x30>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <TIM_Base_SetConfig+0xbc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0x30>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <TIM_Base_SetConfig+0xc0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <TIM_Base_SetConfig+0xb8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <TIM_Base_SetConfig+0xbc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_Base_SetConfig+0xc0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <TIM_Base_SetConfig+0xb8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d103      	bne.n	8003cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800

08003cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 030a 	bic.w	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f023 0210 	bic.w	r2, r3, #16
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	031b      	lsls	r3, r3, #12
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f043 0307 	orr.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e046      	b.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d009      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10c      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800

08003ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e03f      	b.n	8003f76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fcee 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fb49 	bl	80045c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa4f 	bl	800446e <UART_Receive_IT>
      return;
 8003fd0:	e17b      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b1 	beq.w	800413c <HAL_UART_IRQHandler+0x1bc>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x70>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a6 	beq.w	800413c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f043 0202 	orr.w	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_UART_IRQHandler+0xee>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0208 	orr.w	r2, r3, #8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 811e 	beq.w	80042c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_UART_IRQHandler+0x11e>
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9e8 	bl	800446e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <HAL_UART_IRQHandler+0x146>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d031      	beq.n	800412a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f92a 	bl	8004320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4a76      	ldr	r2, [pc, #472]	; (80042d0 <HAL_UART_IRQHandler+0x350>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe f86a 	bl	80021d8 <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00e      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8ec 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00a      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8e8 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8e4 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004136:	e0c3      	b.n	80042c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	bf00      	nop
    return;
 800413a:	e0c1      	b.n	80042c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 80a1 	bne.w	8004288 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 809b 	beq.w	8004288 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8095 	beq.w	8004288 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04e      	beq.n	8004220 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800418c:	8a3b      	ldrh	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8098 	beq.w	80042c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004198:	8a3a      	ldrh	r2, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	f080 8092 	bcs.w	80042c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8a3a      	ldrh	r2, [r7, #16]
 80041a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d02b      	beq.n	8004208 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0210 	bic.w	r2, r2, #16
 80041fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd ffad 	bl	8002162 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004210:	b29b      	uxth	r3, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f876 	bl	800430a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800421e:	e051      	b.n	80042c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d047      	beq.n	80042c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004238:	8a7b      	ldrh	r3, [r7, #18]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d044      	beq.n	80042c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800424c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800427c:	8a7b      	ldrh	r3, [r7, #18]
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f842 	bl	800430a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004286:	e01f      	b.n	80042c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_UART_IRQHandler+0x324>
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f87f 	bl	80043a0 <UART_Transmit_IT>
    return;
 80042a2:	e012      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_UART_IRQHandler+0x34a>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8c0 	bl	800443e <UART_EndTransmit_IT>
    return;
 80042be:	e004      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
    return;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
      return;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
      return;
 80042c8:	bf00      	nop
  }
}
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08004379 	.word	0x08004379

080042d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004336:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0210 	bic.w	r2, r2, #16
 800435e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff ffb0 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b21      	cmp	r3, #33	; 0x21
 80043b2:	d13e      	bne.n	8004432 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d114      	bne.n	80043e8 <UART_Transmit_IT+0x48>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d110      	bne.n	80043e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	621a      	str	r2, [r3, #32]
 80043e6:	e008      	b.n	80043fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6211      	str	r1, [r2, #32]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4619      	mov	r1, r3
 8004408:	84d1      	strh	r1, [r2, #38]	; 0x26
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10f      	bne.n	800442e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004454:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ff38 	bl	80042d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	f040 8099 	bne.w	80045b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448c:	d117      	bne.n	80044be <UART_Receive_IT+0x50>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
 80044bc:	e026      	b.n	800450c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d007      	beq.n	80044e2 <UART_Receive_IT+0x74>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <UART_Receive_IT+0x82>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e008      	b.n	8004502 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29b      	uxth	r3, r3
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4619      	mov	r1, r3
 800451a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800451c:	2b00      	cmp	r3, #0
 800451e:	d148      	bne.n	80045b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0220 	bic.w	r2, r2, #32
 800452e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800453e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b01      	cmp	r3, #1
 800455e:	d123      	bne.n	80045a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0210 	bic.w	r2, r2, #16
 8004574:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d10a      	bne.n	800459a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff feb2 	bl	800430a <HAL_UARTEx_RxEventCallback>
 80045a6:	e002      	b.n	80045ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fe9c 	bl	80042e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e002      	b.n	80045b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045fa:	f023 030c 	bic.w	r3, r3, #12
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	430b      	orrs	r3, r1
 8004606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2c      	ldr	r2, [pc, #176]	; (80046d4 <UART_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe fd14 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	e002      	b.n	8004636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe fcfc 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8004634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <UART_SetConfig+0x118>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	0119      	lsls	r1, r3, #4
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009a      	lsls	r2, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	fbb2 f2f3 	udiv	r2, r2, r3
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <UART_SetConfig+0x118>)
 800466e:	fba3 0302 	umull	r0, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2064      	movs	r0, #100	; 0x64
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	3332      	adds	r3, #50	; 0x32
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <UART_SetConfig+0x118>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	4419      	add	r1, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <UART_SetConfig+0x118>)
 80046a6:	fba3 0302 	umull	r0, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2064      	movs	r0, #100	; 0x64
 80046ae:	fb00 f303 	mul.w	r3, r0, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	; 0x32
 80046b8:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <UART_SetConfig+0x118>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	440a      	add	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40013800 	.word	0x40013800
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <AroundEdgeCube_Handle>:

uint8_t layer_around_edge, column_around_edge[8];
position_cube position_layer;

void AroundEdgeCube_Handle()
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e007      	b.n	80046f8 <AroundEdgeCube_Handle+0x1c>
	{
		column_around_edge[i] = 0;
 80046e8:	4a2e      	ldr	r2, [pc, #184]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b07      	cmp	r3, #7
 80046fc:	ddf4      	ble.n	80046e8 <AroundEdgeCube_Handle+0xc>
	}
	layer_around_edge = 0;
 80046fe:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <AroundEdgeCube_Handle+0xcc>)
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
	switch (position_layer) {
 8004704:	4b29      	ldr	r3, [pc, #164]	; (80047ac <AroundEdgeCube_Handle+0xd0>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <AroundEdgeCube_Handle+0x36>
 800470c:	2b01      	cmp	r3, #1
 800470e:	d022      	beq.n	8004756 <AroundEdgeCube_Handle+0x7a>
			}
			TransmitData(column_around_edge, layer_around_edge);
			position_layer = TOP_N_BOTTOM_CUBE;
			break;
		default:
			break;
 8004710:	e043      	b.n	800479a <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x81;
 8004712:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <AroundEdgeCube_Handle+0xcc>)
 8004714:	2281      	movs	r2, #129	; 0x81
 8004716:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0xff;
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	71da      	strb	r2, [r3, #7]
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 8004720:	79da      	ldrb	r2, [r3, #7]
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 8004724:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8004726:	2301      	movs	r3, #1
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	e007      	b.n	800473c <AroundEdgeCube_Handle+0x60>
				column_around_edge[i] = 0x81;
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	2281      	movs	r2, #129	; 0x81
 8004734:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b06      	cmp	r3, #6
 8004740:	ddf4      	ble.n	800472c <AroundEdgeCube_Handle+0x50>
			TransmitData(column_around_edge, layer_around_edge);
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <AroundEdgeCube_Handle+0xcc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4816      	ldr	r0, [pc, #88]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 800474a:	f002 fb9d 	bl	8006e88 <TransmitData>
			position_layer = MIDDLE_CUBE;
 800474e:	4b17      	ldr	r3, [pc, #92]	; (80047ac <AroundEdgeCube_Handle+0xd0>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
			break;
 8004754:	e021      	b.n	800479a <AroundEdgeCube_Handle+0xbe>
			layer_around_edge = 0x7e;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <AroundEdgeCube_Handle+0xcc>)
 8004758:	227e      	movs	r2, #126	; 0x7e
 800475a:	701a      	strb	r2, [r3, #0]
			column_around_edge[0] = column_around_edge[7] = 0x81;
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 800475e:	2281      	movs	r2, #129	; 0x81
 8004760:	71da      	strb	r2, [r3, #7]
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 8004764:	79da      	ldrb	r2, [r3, #7]
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 8004768:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800476a:	2301      	movs	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	e007      	b.n	8004780 <AroundEdgeCube_Handle+0xa4>
				column_around_edge[i] = 0;
 8004770:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < 7; i++)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3301      	adds	r3, #1
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b06      	cmp	r3, #6
 8004784:	ddf4      	ble.n	8004770 <AroundEdgeCube_Handle+0x94>
			TransmitData(column_around_edge, layer_around_edge);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <AroundEdgeCube_Handle+0xcc>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	4805      	ldr	r0, [pc, #20]	; (80047a4 <AroundEdgeCube_Handle+0xc8>)
 800478e:	f002 fb7b 	bl	8006e88 <TransmitData>
			position_layer = TOP_N_BOTTOM_CUBE;
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <AroundEdgeCube_Handle+0xd0>)
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
			break;
 8004798:	bf00      	nop
	}
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000264 	.word	0x20000264
 80047a8:	20000260 	.word	0x20000260
 80047ac:	2000026c 	.word	0x2000026c

080047b0 <AroundEdgeCube_Set_State>:

void AroundEdgeCube_Set_State()
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	currentEffect = AROUND_EDGE_CUBE;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <AroundEdgeCube_Set_State+0x14>)
 80047b6:	2205      	movs	r2, #5
 80047b8:	701a      	strb	r2, [r3, #0]
//	layer_around_edge = 0;
//	for (int i = 0; i < 8; i++)
//	{
//		column_around_edge[i] = 0;
//	}
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000010 	.word	0x20000010

080047c8 <clearCube>:
#include "clear_cube.h"
#include "main.h"
#include "transmit_data.h"

void clearCube()
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
	uint8_t column[8], layer;
	layer = 0x00;
 80047ce:	2300      	movs	r3, #0
 80047d0:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i ++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e007      	b.n	80047e8 <clearCube+0x20>
	{
		column[i] = 0x00;
 80047d8:	463a      	mov	r2, r7
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i ++)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b07      	cmp	r3, #7
 80047ec:	ddf4      	ble.n	80047d8 <clearCube+0x10>
	}
	TransmitData(column, layer);
 80047ee:	7afa      	ldrb	r2, [r7, #11]
 80047f0:	463b      	mov	r3, r7
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f002 fb47 	bl	8006e88 <TransmitData>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <CountDownCube_Handle>:
const uint32_t time_do_countdown = 70;
const uint32_t time_per_countdown = 0;
static int i = 0;

void CountDownCube_Handle()
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
	switch (w_number)
 8004808:	4b8b      	ldr	r3, [pc, #556]	; (8004a38 <CountDownCube_Handle+0x234>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b09      	cmp	r3, #9
 800480e:	f200 829d 	bhi.w	8004d4c <CountDownCube_Handle+0x548>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <CountDownCube_Handle+0x14>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004ccf 	.word	0x08004ccf
 800481c:	08004c51 	.word	0x08004c51
 8004820:	08004bc3 	.word	0x08004bc3
 8004824:	08004b45 	.word	0x08004b45
 8004828:	08004ac7 	.word	0x08004ac7
 800482c:	08004a49 	.word	0x08004a49
 8004830:	080049bb 	.word	0x080049bb
 8004834:	0800493d 	.word	0x0800493d
 8004838:	080048bf 	.word	0x080048bf
 800483c:	08004841 	.word	0x08004841
	{
		case DIGIT_NINE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004840:	f7fd f966 	bl	8001b10 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <CountDownCube_Handle+0x238>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2246      	movs	r2, #70	; 0x46
 800484e:	4293      	cmp	r3, r2
 8004850:	d32f      	bcc.n	80048b2 <CountDownCube_Handle+0xae>
			{
				if (direction == 1 && (i < 8))  i++;
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <CountDownCube_Handle+0x68>
 800485a:	4b7a      	ldr	r3, [pc, #488]	; (8004a44 <CountDownCube_Handle+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b07      	cmp	r3, #7
 8004860:	dc04      	bgt.n	800486c <CountDownCube_Handle+0x68>
 8004862:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a76      	ldr	r2, [pc, #472]	; (8004a44 <CountDownCube_Handle+0x240>)
 800486a:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 800486c:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <CountDownCube_Handle+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b07      	cmp	r3, #7
 8004872:	dd02      	ble.n	800487a <CountDownCube_Handle+0x76>
 8004874:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 800487a:	4b71      	ldr	r3, [pc, #452]	; (8004a40 <CountDownCube_Handle+0x23c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <CountDownCube_Handle+0x90>
 8004882:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	dd04      	ble.n	8004894 <CountDownCube_Handle+0x90>
 800488a:	4b6e      	ldr	r3, [pc, #440]	; (8004a44 <CountDownCube_Handle+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a6c      	ldr	r2, [pc, #432]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004892:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004894:	4b6b      	ldr	r3, [pc, #428]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <CountDownCube_Handle+0xa4>
				{
					direction = 1;
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <CountDownCube_Handle+0x23c>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_EIGHT;
 80048a2:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <CountDownCube_Handle+0x234>)
 80048a4:	2208      	movs	r2, #8
 80048a6:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80048a8:	f7fd f932 	bl	8001b10 <HAL_GetTick>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4a63      	ldr	r2, [pc, #396]	; (8004a3c <CountDownCube_Handle+0x238>)
 80048b0:	6013      	str	r3, [r2, #0]
			}

			DigitNine(i);
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <CountDownCube_Handle+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa7c 	bl	8004db4 <DigitNine>
		break;
 80048bc:	e247      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_EIGHT:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80048be:	f7fd f927 	bl	8001b10 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <CountDownCube_Handle+0x238>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2246      	movs	r2, #70	; 0x46
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d32f      	bcc.n	8004930 <CountDownCube_Handle+0x12c>
			{

				if (direction == 1 && (i < 8))  i++;
 80048d0:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d108      	bne.n	80048ea <CountDownCube_Handle+0xe6>
 80048d8:	4b5a      	ldr	r3, [pc, #360]	; (8004a44 <CountDownCube_Handle+0x240>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b07      	cmp	r3, #7
 80048de:	dc04      	bgt.n	80048ea <CountDownCube_Handle+0xe6>
 80048e0:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <CountDownCube_Handle+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <CountDownCube_Handle+0x240>)
 80048e8:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80048ea:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <CountDownCube_Handle+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b07      	cmp	r3, #7
 80048f0:	dd02      	ble.n	80048f8 <CountDownCube_Handle+0xf4>
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80048f8:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d108      	bne.n	8004912 <CountDownCube_Handle+0x10e>
 8004900:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dd04      	ble.n	8004912 <CountDownCube_Handle+0x10e>
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <CountDownCube_Handle+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a4d      	ldr	r2, [pc, #308]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004910:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004912:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <CountDownCube_Handle+0x122>
				{
					direction = 1;
 800491a:	4b49      	ldr	r3, [pc, #292]	; (8004a40 <CountDownCube_Handle+0x23c>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SEVEN;
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <CountDownCube_Handle+0x234>)
 8004922:	2207      	movs	r2, #7
 8004924:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004926:	f7fd f8f3 	bl	8001b10 <HAL_GetTick>
 800492a:	4603      	mov	r3, r0
 800492c:	4a43      	ldr	r2, [pc, #268]	; (8004a3c <CountDownCube_Handle+0x238>)
 800492e:	6013      	str	r3, [r2, #0]
			}

			DigitEight(i);
 8004930:	4b44      	ldr	r3, [pc, #272]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fa79 	bl	8004e2c <DigitEight>
		break;
 800493a:	e208      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_SEVEN:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 800493c:	f7fd f8e8 	bl	8001b10 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <CountDownCube_Handle+0x238>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2246      	movs	r2, #70	; 0x46
 800494a:	4293      	cmp	r3, r2
 800494c:	d32f      	bcc.n	80049ae <CountDownCube_Handle+0x1aa>
			{

				if (direction == 1 && (i < 8))  i++;
 800494e:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <CountDownCube_Handle+0x164>
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b07      	cmp	r3, #7
 800495c:	dc04      	bgt.n	8004968 <CountDownCube_Handle+0x164>
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a37      	ldr	r2, [pc, #220]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004966:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <CountDownCube_Handle+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b07      	cmp	r3, #7
 800496e:	dd02      	ble.n	8004976 <CountDownCube_Handle+0x172>
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004976:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <CountDownCube_Handle+0x18c>
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	dd04      	ble.n	8004990 <CountDownCube_Handle+0x18c>
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3b01      	subs	r3, #1
 800498c:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <CountDownCube_Handle+0x240>)
 800498e:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004990:	4b2c      	ldr	r3, [pc, #176]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <CountDownCube_Handle+0x1a0>
				{
					direction = 1;
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <CountDownCube_Handle+0x23c>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_SIX;
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <CountDownCube_Handle+0x234>)
 80049a0:	2206      	movs	r2, #6
 80049a2:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 80049a4:	f7fd f8b4 	bl	8001b10 <HAL_GetTick>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <CountDownCube_Handle+0x238>)
 80049ac:	6013      	str	r3, [r2, #0]
			}

			DigitSeven(i);
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa5c 	bl	8004e70 <DigitSeven>

			break;
 80049b8:	e1c9      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_SIX:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 80049ba:	f7fd f8a9 	bl	8001b10 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <CountDownCube_Handle+0x238>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2246      	movs	r2, #70	; 0x46
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d32f      	bcc.n	8004a2c <CountDownCube_Handle+0x228>
			{

				if (direction == 1 && (i < 8))  i++;
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d108      	bne.n	80049e6 <CountDownCube_Handle+0x1e2>
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b07      	cmp	r3, #7
 80049da:	dc04      	bgt.n	80049e6 <CountDownCube_Handle+0x1e2>
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049e4:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b07      	cmp	r3, #7
 80049ec:	dd02      	ble.n	80049f4 <CountDownCube_Handle+0x1f0>
 80049ee:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <CountDownCube_Handle+0x23c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <CountDownCube_Handle+0x20a>
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <CountDownCube_Handle+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	dd04      	ble.n	8004a0e <CountDownCube_Handle+0x20a>
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004a0c:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <CountDownCube_Handle+0x21e>
				{
					direction = 1;
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <CountDownCube_Handle+0x23c>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FIVE;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <CountDownCube_Handle+0x234>)
 8004a1e:	2205      	movs	r2, #5
 8004a20:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004a22:	f7fd f875 	bl	8001b10 <HAL_GetTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <CountDownCube_Handle+0x238>)
 8004a2a:	6013      	str	r3, [r2, #0]
			}

			DigitSix(i);
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <CountDownCube_Handle+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa51 	bl	8004ed8 <DigitSix>

			break;
 8004a36:	e18a      	b.n	8004d4e <CountDownCube_Handle+0x54a>
 8004a38:	20000009 	.word	0x20000009
 8004a3c:	20000278 	.word	0x20000278
 8004a40:	2000000c 	.word	0x2000000c
 8004a44:	2000027c 	.word	0x2000027c

		case DIGIT_FIVE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004a48:	f7fd f862 	bl	8001b10 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2246      	movs	r2, #70	; 0x46
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d32f      	bcc.n	8004aba <CountDownCube_Handle+0x2b6>
			{

				if (direction == 1 && (i < 8))  i++;
 8004a5a:	4b7a      	ldr	r3, [pc, #488]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d108      	bne.n	8004a74 <CountDownCube_Handle+0x270>
 8004a62:	4b79      	ldr	r3, [pc, #484]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	dc04      	bgt.n	8004a74 <CountDownCube_Handle+0x270>
 8004a6a:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a75      	ldr	r2, [pc, #468]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a72:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004a74:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	dd02      	ble.n	8004a82 <CountDownCube_Handle+0x27e>
 8004a7c:	4b71      	ldr	r3, [pc, #452]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004a82:	4b70      	ldr	r3, [pc, #448]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <CountDownCube_Handle+0x298>
 8004a8a:	4b6f      	ldr	r3, [pc, #444]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dd04      	ble.n	8004a9c <CountDownCube_Handle+0x298>
 8004a92:	4b6d      	ldr	r3, [pc, #436]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4a6b      	ldr	r2, [pc, #428]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a9a:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004a9c:	4b6a      	ldr	r3, [pc, #424]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <CountDownCube_Handle+0x2ac>
				{
					direction = 1;
 8004aa4:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_FOUR;
 8004aaa:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <CountDownCube_Handle+0x448>)
 8004aac:	2204      	movs	r2, #4
 8004aae:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004ab0:	f7fd f82e 	bl	8001b10 <HAL_GetTick>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a62      	ldr	r2, [pc, #392]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004ab8:	6013      	str	r3, [r2, #0]
			}

			DigitFive(i);
 8004aba:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa50 	bl	8004f64 <DigitFive>
			break;
 8004ac4:	e143      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_FOUR:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004ac6:	f7fd f823 	bl	8001b10 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2246      	movs	r2, #70	; 0x46
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d32f      	bcc.n	8004b38 <CountDownCube_Handle+0x334>
			{

				if (direction == 1 && (i < 8))  i++;
 8004ad8:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d108      	bne.n	8004af2 <CountDownCube_Handle+0x2ee>
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b07      	cmp	r3, #7
 8004ae6:	dc04      	bgt.n	8004af2 <CountDownCube_Handle+0x2ee>
 8004ae8:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004af0:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004af2:	4b55      	ldr	r3, [pc, #340]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	dd02      	ble.n	8004b00 <CountDownCube_Handle+0x2fc>
 8004afa:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d108      	bne.n	8004b1a <CountDownCube_Handle+0x316>
 8004b08:	4b4f      	ldr	r3, [pc, #316]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd04      	ble.n	8004b1a <CountDownCube_Handle+0x316>
 8004b10:	4b4d      	ldr	r3, [pc, #308]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	4a4c      	ldr	r2, [pc, #304]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b18:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004b1a:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <CountDownCube_Handle+0x32a>
				{
					direction = 1;
 8004b22:	4b48      	ldr	r3, [pc, #288]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_THREE;
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <CountDownCube_Handle+0x448>)
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004b2e:	f7fc ffef 	bl	8001b10 <HAL_GetTick>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4a42      	ldr	r2, [pc, #264]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004b36:	6013      	str	r3, [r2, #0]
			}

			DigitFour(i);
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fa57 	bl	8004ff0 <DigitFour>
			break;
 8004b42:	e104      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_THREE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004b44:	f7fc ffe4 	bl	8001b10 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2246      	movs	r2, #70	; 0x46
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d32f      	bcc.n	8004bb6 <CountDownCube_Handle+0x3b2>
			{

				if (direction == 1 && (i < 8))  i++;
 8004b56:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d108      	bne.n	8004b70 <CountDownCube_Handle+0x36c>
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b07      	cmp	r3, #7
 8004b64:	dc04      	bgt.n	8004b70 <CountDownCube_Handle+0x36c>
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	4a36      	ldr	r2, [pc, #216]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b6e:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b07      	cmp	r3, #7
 8004b76:	dd02      	ble.n	8004b7e <CountDownCube_Handle+0x37a>
 8004b78:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <CountDownCube_Handle+0x394>
 8004b86:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dd04      	ble.n	8004b98 <CountDownCube_Handle+0x394>
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b96:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <CountDownCube_Handle+0x3a8>
				{
					direction = 1;
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_TWO;
 8004ba6:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <CountDownCube_Handle+0x448>)
 8004ba8:	2202      	movs	r2, #2
 8004baa:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004bac:	f7fc ffb0 	bl	8001b10 <HAL_GetTick>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004bb4:	6013      	str	r3, [r2, #0]
			}

			DigitThree(i);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fa5c 	bl	8005078 <DigitThree>
			break;
 8004bc0:	e0c5      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_TWO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004bc2:	f7fc ffa5 	bl	8001b10 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2246      	movs	r2, #70	; 0x46
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d32f      	bcc.n	8004c34 <CountDownCube_Handle+0x430>
			{

				if (direction == 1 && (i < 8))  i++;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d108      	bne.n	8004bee <CountDownCube_Handle+0x3ea>
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	dc04      	bgt.n	8004bee <CountDownCube_Handle+0x3ea>
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004bec:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004bee:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b07      	cmp	r3, #7
 8004bf4:	dd02      	ble.n	8004bfc <CountDownCube_Handle+0x3f8>
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <CountDownCube_Handle+0x412>
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	dd04      	ble.n	8004c16 <CountDownCube_Handle+0x412>
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004c14:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <CountDownCube_Handle+0x426>
				{
					direction = 1;
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <CountDownCube_Handle+0x440>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ONE;
 8004c24:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <CountDownCube_Handle+0x448>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004c2a:	f7fc ff71 	bl	8001b10 <HAL_GetTick>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <CountDownCube_Handle+0x43c>)
 8004c32:	6013      	str	r3, [r2, #0]
			}

			DigitTwo(i);
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <CountDownCube_Handle+0x444>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fa51 	bl	80050e0 <DigitTwo>
			break;
 8004c3e:	e086      	b.n	8004d4e <CountDownCube_Handle+0x54a>
 8004c40:	20000278 	.word	0x20000278
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	2000027c 	.word	0x2000027c
 8004c4c:	20000009 	.word	0x20000009

		case DIGIT_ONE:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004c50:	f7fc ff5e 	bl	8001b10 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <CountDownCube_Handle+0x550>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2246      	movs	r2, #70	; 0x46
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d32f      	bcc.n	8004cc2 <CountDownCube_Handle+0x4be>
			{

				if (direction == 1 && (i < 8))  i++;
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <CountDownCube_Handle+0x478>
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b07      	cmp	r3, #7
 8004c70:	dc04      	bgt.n	8004c7c <CountDownCube_Handle+0x478>
 8004c72:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	4a38      	ldr	r2, [pc, #224]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c7a:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b07      	cmp	r3, #7
 8004c82:	dd02      	ble.n	8004c8a <CountDownCube_Handle+0x486>
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004c8a:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <CountDownCube_Handle+0x4a0>
 8004c92:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dd04      	ble.n	8004ca4 <CountDownCube_Handle+0x4a0>
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004ca2:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <CountDownCube_Handle+0x4b4>
				{
					direction = 1;
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_ZERO;
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <CountDownCube_Handle+0x55c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004cb8:	f7fc ff2a 	bl	8001b10 <HAL_GetTick>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <CountDownCube_Handle+0x550>)
 8004cc0:	6013      	str	r3, [r2, #0]
			}

			DigitOne(i);
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fa58 	bl	800517c <DigitOne>
			break;
 8004ccc:	e03f      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		case DIGIT_ZERO:
			if (HAL_GetTick() - time_start_countdown >= time_do_countdown)
 8004cce:	f7fc ff1f 	bl	8001b10 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <CountDownCube_Handle+0x550>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2246      	movs	r2, #70	; 0x46
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d32f      	bcc.n	8004d40 <CountDownCube_Handle+0x53c>
			{

				if (direction == 1 && (i < 8))  i++;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <CountDownCube_Handle+0x4f6>
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	dc04      	bgt.n	8004cfa <CountDownCube_Handle+0x4f6>
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004cf8:	6013      	str	r3, [r2, #0]
				if (i > 7) direction = 0;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b07      	cmp	r3, #7
 8004d00:	dd02      	ble.n	8004d08 <CountDownCube_Handle+0x504>
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
				if (direction == 0 && (i > 0))  i--;
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d108      	bne.n	8004d22 <CountDownCube_Handle+0x51e>
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dd04      	ble.n	8004d22 <CountDownCube_Handle+0x51e>
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004d20:	6013      	str	r3, [r2, #0]
				if (i == 0)
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <CountDownCube_Handle+0x532>
				{
					direction = 1;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <CountDownCube_Handle+0x554>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
					w_number = DIGIT_NINE;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <CountDownCube_Handle+0x55c>)
 8004d32:	2209      	movs	r2, #9
 8004d34:	701a      	strb	r2, [r3, #0]
				}
				time_start_countdown = HAL_GetTick();
 8004d36:	f7fc feeb 	bl	8001b10 <HAL_GetTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <CountDownCube_Handle+0x550>)
 8004d3e:	6013      	str	r3, [r2, #0]
			}

			DigitZero(i);
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <CountDownCube_Handle+0x558>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa5f 	bl	8005208 <DigitZero>
			break;
 8004d4a:	e000      	b.n	8004d4e <CountDownCube_Handle+0x54a>

		default:
			break;
 8004d4c:	bf00      	nop
	}
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000278 	.word	0x20000278
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	2000027c 	.word	0x2000027c
 8004d60:	20000009 	.word	0x20000009

08004d64 <CountDownCube_Set_Sate>:

void CountDownCube_Set_Sate()
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	currentEffect = COUNT_DOWN_CUBE;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <CountDownCube_Set_Sate+0x40>)
 8004d6c:	2206      	movs	r2, #6
 8004d6e:	701a      	strb	r2, [r3, #0]
	w_number = DIGIT_NINE;
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <CountDownCube_Set_Sate+0x44>)
 8004d72:	2209      	movs	r2, #9
 8004d74:	701a      	strb	r2, [r3, #0]
	direction = 1;
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <CountDownCube_Set_Sate+0x48>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e007      	b.n	8004d92 <CountDownCube_Set_Sate+0x2e>
	{
		column_countdown[j] = 0;
 8004d82:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <CountDownCube_Set_Sate+0x4c>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b07      	cmp	r3, #7
 8004d96:	ddf4      	ble.n	8004d82 <CountDownCube_Set_Sate+0x1e>
	}
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	20000010 	.word	0x20000010
 8004da8:	20000009 	.word	0x20000009
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	20000270 	.word	0x20000270

08004db4 <DigitNine>:

void DigitNine(int i)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <DigitNine+0x74>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	227e      	movs	r2, #126	; 0x7e
 8004dc4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 8004dc6:	2181      	movs	r1, #129	; 0x81
 8004dc8:	4817      	ldr	r0, [pc, #92]	; (8004e28 <DigitNine+0x74>)
 8004dca:	f002 f85d 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc3;
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <DigitNine+0x74>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	22c3      	movs	r2, #195	; 0xc3
 8004dd6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x60);
 8004dd8:	2160      	movs	r1, #96	; 0x60
 8004dda:	4813      	ldr	r0, [pc, #76]	; (8004e28 <DigitNine+0x74>)
 8004ddc:	f002 f854 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x03;
 8004de0:	4a11      	ldr	r2, [pc, #68]	; (8004e28 <DigitNine+0x74>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	2203      	movs	r2, #3
 8004de8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004dea:	210c      	movs	r1, #12
 8004dec:	480e      	ldr	r0, [pc, #56]	; (8004e28 <DigitNine+0x74>)
 8004dee:	f002 f84b 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xff;
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <DigitNine+0x74>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x02);
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	480a      	ldr	r0, [pc, #40]	; (8004e28 <DigitNine+0x74>)
 8004e00:	f002 f842 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x7f;
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <DigitNine+0x74>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	227f      	movs	r2, #127	; 0x7f
 8004e0c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004e0e:	2110      	movs	r1, #16
 8004e10:	4805      	ldr	r0, [pc, #20]	; (8004e28 <DigitNine+0x74>)
 8004e12:	f002 f839 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <DigitNine+0x74>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000270 	.word	0x20000270

08004e2c <DigitEight>:

void DigitEight(int i)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xc3;
 8004e34:	4a0d      	ldr	r2, [pc, #52]	; (8004e6c <DigitEight+0x40>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	22c3      	movs	r2, #195	; 0xc3
 8004e3c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x66);
 8004e3e:	2166      	movs	r1, #102	; 0x66
 8004e40:	480a      	ldr	r0, [pc, #40]	; (8004e6c <DigitEight+0x40>)
 8004e42:	f002 f821 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x7e;
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <DigitEight+0x40>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	227e      	movs	r2, #126	; 0x7e
 8004e4e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x99);
 8004e50:	2199      	movs	r1, #153	; 0x99
 8004e52:	4806      	ldr	r0, [pc, #24]	; (8004e6c <DigitEight+0x40>)
 8004e54:	f002 f818 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <DigitEight+0x40>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000270 	.word	0x20000270

08004e70 <DigitSeven>:

void DigitSeven(int i)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004e78:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <DigitSeven+0x64>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xc0);
 8004e82:	21c0      	movs	r1, #192	; 0xc0
 8004e84:	4813      	ldr	r0, [pc, #76]	; (8004ed4 <DigitSeven+0x64>)
 8004e86:	f001 ffff 	bl	8006e88 <TransmitData>

	for (int j = 0; j < 6; j++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e015      	b.n	8004ebc <DigitSeven+0x4c>
	{
		column_countdown[i] = 0x03 << j;
 8004e90:	2203      	movs	r2, #3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <DigitSeven+0x64>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	460a      	mov	r2, r1
 8004ea2:	701a      	strb	r2, [r3, #0]
		TransmitData(column_countdown, 0x20 >> j);
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	fa42 f303 	asr.w	r3, r2, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4808      	ldr	r0, [pc, #32]	; (8004ed4 <DigitSeven+0x64>)
 8004eb2:	f001 ffe9 	bl	8006e88 <TransmitData>
	for (int j = 0; j < 6; j++)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b05      	cmp	r3, #5
 8004ec0:	dde6      	ble.n	8004e90 <DigitSeven+0x20>
	}

	column_countdown[i] = 0;
 8004ec2:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <DigitSeven+0x64>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000270 	.word	0x20000270

08004ed8 <DigitSix>:

void DigitSix(int i)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <DigitSix+0x88>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	22ff      	movs	r2, #255	; 0xff
 8004ee8:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 8004eea:	2142      	movs	r1, #66	; 0x42
 8004eec:	481c      	ldr	r0, [pc, #112]	; (8004f60 <DigitSix+0x88>)
 8004eee:	f001 ffcb 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc3;
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <DigitSix+0x88>)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	22c3      	movs	r2, #195	; 0xc3
 8004efa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8004efc:	210c      	movs	r1, #12
 8004efe:	4818      	ldr	r0, [pc, #96]	; (8004f60 <DigitSix+0x88>)
 8004f00:	f001 ffc2 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x7f;
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <DigitSix+0x88>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	227f      	movs	r2, #127	; 0x7f
 8004f0c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	4813      	ldr	r0, [pc, #76]	; (8004f60 <DigitSix+0x88>)
 8004f12:	f001 ffb9 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc0;
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <DigitSix+0x88>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	22c0      	movs	r2, #192	; 0xc0
 8004f1e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8004f20:	2120      	movs	r1, #32
 8004f22:	480f      	ldr	r0, [pc, #60]	; (8004f60 <DigitSix+0x88>)
 8004f24:	f001 ffb0 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xfe;
 8004f28:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <DigitSix+0x88>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	22fe      	movs	r2, #254	; 0xfe
 8004f30:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8004f32:	2110      	movs	r1, #16
 8004f34:	480a      	ldr	r0, [pc, #40]	; (8004f60 <DigitSix+0x88>)
 8004f36:	f001 ffa7 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x7e;
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <DigitSix+0x88>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	227e      	movs	r2, #126	; 0x7e
 8004f42:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 8004f44:	2101      	movs	r1, #1
 8004f46:	4806      	ldr	r0, [pc, #24]	; (8004f60 <DigitSix+0x88>)
 8004f48:	f001 ff9e 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <DigitSix+0x88>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000270 	.word	0x20000270

08004f64 <DigitFive>:

void DigitFive(int i)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

	column_countdown[i] = 0xff;
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <DigitFive+0x88>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	22ff      	movs	r2, #255	; 0xff
 8004f74:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0xc0);
 8004f76:	21c0      	movs	r1, #192	; 0xc0
 8004f78:	481c      	ldr	r0, [pc, #112]	; (8004fec <DigitFive+0x88>)
 8004f7a:	f001 ff85 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc0;
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <DigitFive+0x88>)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	22c0      	movs	r2, #192	; 0xc0
 8004f86:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x20);
 8004f88:	2120      	movs	r1, #32
 8004f8a:	4818      	ldr	r0, [pc, #96]	; (8004fec <DigitFive+0x88>)
 8004f8c:	f001 ff7c 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xfe;
 8004f90:	4a16      	ldr	r2, [pc, #88]	; (8004fec <DigitFive+0x88>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4413      	add	r3, r2
 8004f96:	22fe      	movs	r2, #254	; 0xfe
 8004f98:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x10);
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	4813      	ldr	r0, [pc, #76]	; (8004fec <DigitFive+0x88>)
 8004f9e:	f001 ff73 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x03;
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <DigitFive+0x88>)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	2203      	movs	r2, #3
 8004faa:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x0c);
 8004fac:	210c      	movs	r1, #12
 8004fae:	480f      	ldr	r0, [pc, #60]	; (8004fec <DigitFive+0x88>)
 8004fb0:	f001 ff6a 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x83;
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <DigitFive+0x88>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	2283      	movs	r2, #131	; 0x83
 8004fbc:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x02);
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	480a      	ldr	r0, [pc, #40]	; (8004fec <DigitFive+0x88>)
 8004fc2:	f001 ff61 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x7e;
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <DigitFive+0x88>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	227e      	movs	r2, #126	; 0x7e
 8004fce:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown,0x01);
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4806      	ldr	r0, [pc, #24]	; (8004fec <DigitFive+0x88>)
 8004fd4:	f001 ff58 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <DigitFive+0x88>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000270 	.word	0x20000270

08004ff0 <DigitFour>:

void DigitFour(int i)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x06;
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <DigitFour+0x80>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	2206      	movs	r2, #6
 8005000:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0xf3);
 8005002:	21f3      	movs	r1, #243	; 0xf3
 8005004:	481a      	ldr	r0, [pc, #104]	; (8005070 <DigitFour+0x80>)
 8005006:	f001 ff3f 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xff;
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <DigitFour+0x80>)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x0c);
 8005014:	210c      	movs	r1, #12
 8005016:	4816      	ldr	r0, [pc, #88]	; (8005070 <DigitFour+0x80>)
 8005018:	f001 ff36 	bl	8006e88 <TransmitData>

	for (int j = 0; j < 4; j++)
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e019      	b.n	8005056 <DigitFour+0x66>
	{
	column_countdown[i] = 0x08 << j;
 8005022:	2208      	movs	r2, #8
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	b2d9      	uxtb	r1, r3
 800502c:	4a10      	ldr	r2, [pc, #64]	; (8005070 <DigitFour+0x80>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	460a      	mov	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
	layer_countdown = 0x80 >> j;
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	fa42 f303 	asr.w	r3, r2, r3
 800503e:	b2da      	uxtb	r2, r3
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <DigitFour+0x84>)
 8005042:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, layer_countdown);
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <DigitFour+0x84>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	4809      	ldr	r0, [pc, #36]	; (8005070 <DigitFour+0x80>)
 800504c:	f001 ff1c 	bl	8006e88 <TransmitData>
	for (int j = 0; j < 4; j++)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b03      	cmp	r3, #3
 800505a:	dde2      	ble.n	8005022 <DigitFour+0x32>
	}

	column_countdown[i] = 0;
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <DigitFour+0x80>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000270 	.word	0x20000270
 8005074:	2000026d 	.word	0x2000026d

08005078 <DigitThree>:

void DigitThree(int i)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 8005080:	4a16      	ldr	r2, [pc, #88]	; (80050dc <DigitThree+0x64>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	227e      	movs	r2, #126	; 0x7e
 8005088:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 800508a:	2181      	movs	r1, #129	; 0x81
 800508c:	4813      	ldr	r0, [pc, #76]	; (80050dc <DigitThree+0x64>)
 800508e:	f001 fefb 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xe7;
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <DigitThree+0x64>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	22e7      	movs	r2, #231	; 0xe7
 800509a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 800509c:	2142      	movs	r1, #66	; 0x42
 800509e:	480f      	ldr	r0, [pc, #60]	; (80050dc <DigitThree+0x64>)
 80050a0:	f001 fef2 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc3;
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <DigitThree+0x64>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	22c3      	movs	r2, #195	; 0xc3
 80050ac:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x24);
 80050ae:	2124      	movs	r1, #36	; 0x24
 80050b0:	480a      	ldr	r0, [pc, #40]	; (80050dc <DigitThree+0x64>)
 80050b2:	f001 fee9 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x06;
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <DigitThree+0x64>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	2206      	movs	r2, #6
 80050be:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x18);
 80050c0:	2118      	movs	r1, #24
 80050c2:	4806      	ldr	r0, [pc, #24]	; (80050dc <DigitThree+0x64>)
 80050c4:	f001 fee0 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <DigitThree+0x64>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000270 	.word	0x20000270

080050e0 <DigitTwo>:

void DigitTwo(int i)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x7e;
 80050e8:	4a23      	ldr	r2, [pc, #140]	; (8005178 <DigitTwo+0x98>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	227e      	movs	r2, #126	; 0x7e
 80050f0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x80);
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	4820      	ldr	r0, [pc, #128]	; (8005178 <DigitTwo+0x98>)
 80050f6:	f001 fec7 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc3;
 80050fa:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <DigitTwo+0x98>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	22c3      	movs	r2, #195	; 0xc3
 8005102:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	481c      	ldr	r0, [pc, #112]	; (8005178 <DigitTwo+0x98>)
 8005108:	f001 febe 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x83;
 800510c:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <DigitTwo+0x98>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	2283      	movs	r2, #131	; 0x83
 8005114:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 8005116:	2120      	movs	r1, #32
 8005118:	4817      	ldr	r0, [pc, #92]	; (8005178 <DigitTwo+0x98>)
 800511a:	f001 feb5 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x0e;
 800511e:	4a16      	ldr	r2, [pc, #88]	; (8005178 <DigitTwo+0x98>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	220e      	movs	r2, #14
 8005126:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 8005128:	2110      	movs	r1, #16
 800512a:	4813      	ldr	r0, [pc, #76]	; (8005178 <DigitTwo+0x98>)
 800512c:	f001 feac 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x1c;
 8005130:	4a11      	ldr	r2, [pc, #68]	; (8005178 <DigitTwo+0x98>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	221c      	movs	r2, #28
 8005138:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 800513a:	2108      	movs	r1, #8
 800513c:	480e      	ldr	r0, [pc, #56]	; (8005178 <DigitTwo+0x98>)
 800513e:	f001 fea3 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x70;
 8005142:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <DigitTwo+0x98>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	2270      	movs	r2, #112	; 0x70
 800514a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x04);
 800514c:	2104      	movs	r1, #4
 800514e:	480a      	ldr	r0, [pc, #40]	; (8005178 <DigitTwo+0x98>)
 8005150:	f001 fe9a 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xff;
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <DigitTwo+0x98>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x03);
 800515e:	2103      	movs	r1, #3
 8005160:	4805      	ldr	r0, [pc, #20]	; (8005178 <DigitTwo+0x98>)
 8005162:	f001 fe91 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <DigitTwo+0x98>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000270 	.word	0x20000270

0800517c <DigitOne>:

void DigitOne(int i)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0xff;
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <DigitOne+0x88>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x01);
 800518e:	2101      	movs	r1, #1
 8005190:	481c      	ldr	r0, [pc, #112]	; (8005204 <DigitOne+0x88>)
 8005192:	f001 fe79 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x98;
 8005196:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <DigitOne+0x88>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	2298      	movs	r2, #152	; 0x98
 800519e:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x08);
 80051a0:	2108      	movs	r1, #8
 80051a2:	4818      	ldr	r0, [pc, #96]	; (8005204 <DigitOne+0x88>)
 80051a4:	f001 fe70 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xd8;
 80051a8:	4a16      	ldr	r2, [pc, #88]	; (8005204 <DigitOne+0x88>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	22d8      	movs	r2, #216	; 0xd8
 80051b0:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x10);
 80051b2:	2110      	movs	r1, #16
 80051b4:	4813      	ldr	r0, [pc, #76]	; (8005204 <DigitOne+0x88>)
 80051b6:	f001 fe67 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x78;
 80051ba:	4a12      	ldr	r2, [pc, #72]	; (8005204 <DigitOne+0x88>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	2278      	movs	r2, #120	; 0x78
 80051c2:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x20);
 80051c4:	2120      	movs	r1, #32
 80051c6:	480f      	ldr	r0, [pc, #60]	; (8005204 <DigitOne+0x88>)
 80051c8:	f001 fe5e 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x38;
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <DigitOne+0x88>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	2238      	movs	r2, #56	; 0x38
 80051d4:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x40);
 80051d6:	2140      	movs	r1, #64	; 0x40
 80051d8:	480a      	ldr	r0, [pc, #40]	; (8005204 <DigitOne+0x88>)
 80051da:	f001 fe55 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x18;
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <DigitOne+0x88>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	2218      	movs	r2, #24
 80051e6:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x86);
 80051e8:	2186      	movs	r1, #134	; 0x86
 80051ea:	4806      	ldr	r0, [pc, #24]	; (8005204 <DigitOne+0x88>)
 80051ec:	f001 fe4c 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <DigitOne+0x88>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000270 	.word	0x20000270

08005208 <DigitZero>:

void DigitZero(int i)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	column_countdown[i] = 0x3c;
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <DigitZero+0x50>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	223c      	movs	r2, #60	; 0x3c
 8005218:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x81);
 800521a:	2181      	movs	r1, #129	; 0x81
 800521c:	480e      	ldr	r0, [pc, #56]	; (8005258 <DigitZero+0x50>)
 800521e:	f001 fe33 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0x66;
 8005222:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <DigitZero+0x50>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4413      	add	r3, r2
 8005228:	2266      	movs	r2, #102	; 0x66
 800522a:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x42);
 800522c:	2142      	movs	r1, #66	; 0x42
 800522e:	480a      	ldr	r0, [pc, #40]	; (8005258 <DigitZero+0x50>)
 8005230:	f001 fe2a 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0xc3;
 8005234:	4a08      	ldr	r2, [pc, #32]	; (8005258 <DigitZero+0x50>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	22c3      	movs	r2, #195	; 0xc3
 800523c:	701a      	strb	r2, [r3, #0]
	TransmitData(column_countdown, 0x3c);
 800523e:	213c      	movs	r1, #60	; 0x3c
 8005240:	4805      	ldr	r0, [pc, #20]	; (8005258 <DigitZero+0x50>)
 8005242:	f001 fe21 	bl	8006e88 <TransmitData>

	column_countdown[i] = 0;
 8005246:	4a04      	ldr	r2, [pc, #16]	; (8005258 <DigitZero+0x50>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000270 	.word	0x20000270

0800525c <DiagonalCube_Handle>:
static uint8_t layer_diagonal, column_diagonal[8];
static uint32_t time_start = 0;
const uint32_t time_todo_diagonal = 150;

void DiagonalCube_Handle()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0

	switch (size_layer)
 8005262:	4b7e      	ldr	r3, [pc, #504]	; (800545c <DiagonalCube_Handle+0x200>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b03      	cmp	r3, #3
 8005268:	f200 80ea 	bhi.w	8005440 <DiagonalCube_Handle+0x1e4>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <DiagonalCube_Handle+0x18>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005285 	.word	0x08005285
 8005278:	080052f5 	.word	0x080052f5
 800527c:	08005365 	.word	0x08005365
 8005280:	080053d3 	.word	0x080053d3
	{
		case SMALLEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8005284:	f7fc fc44 	bl	8001b10 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	4b75      	ldr	r3, [pc, #468]	; (8005460 <DiagonalCube_Handle+0x204>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2296      	movs	r2, #150	; 0x96
 8005292:	4293      	cmp	r3, r2
 8005294:	f0c0 80d6 	bcc.w	8005444 <DiagonalCube_Handle+0x1e8>
			{
				layer_diagonal = 0x18;
 8005298:	4b72      	ldr	r3, [pc, #456]	; (8005464 <DiagonalCube_Handle+0x208>)
 800529a:	2218      	movs	r2, #24
 800529c:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 800529e:	2303      	movs	r3, #3
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e007      	b.n	80052b4 <DiagonalCube_Handle+0x58>
				{
					column_diagonal[i] = 0x18;
 80052a4:	4a70      	ldr	r2, [pc, #448]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	2218      	movs	r2, #24
 80052ac:	701a      	strb	r2, [r3, #0]
				for (int i = 3; i < 5; i++)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3301      	adds	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	ddf4      	ble.n	80052a4 <DiagonalCube_Handle+0x48>
				}
				TransmitData(column_diagonal, layer_diagonal);
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <DiagonalCube_Handle+0x208>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4869      	ldr	r0, [pc, #420]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80052c2:	f001 fde1 	bl	8006e88 <TransmitData>
				for (int i = 0; i < 8; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e007      	b.n	80052dc <DiagonalCube_Handle+0x80>
				{
					column_diagonal[i] = 0;
 80052cc:	4a66      	ldr	r2, [pc, #408]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3301      	adds	r3, #1
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b07      	cmp	r3, #7
 80052e0:	ddf4      	ble.n	80052cc <DiagonalCube_Handle+0x70>
				}
				size_layer = MEDIUM;
 80052e2:	4b5e      	ldr	r3, [pc, #376]	; (800545c <DiagonalCube_Handle+0x200>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80052e8:	f7fc fc12 	bl	8001b10 <HAL_GetTick>
 80052ec:	4603      	mov	r3, r0
 80052ee:	4a5c      	ldr	r2, [pc, #368]	; (8005460 <DiagonalCube_Handle+0x204>)
 80052f0:	6013      	str	r3, [r2, #0]
			}
			break;
 80052f2:	e0a7      	b.n	8005444 <DiagonalCube_Handle+0x1e8>
		case MEDIUM:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80052f4:	f7fc fc0c 	bl	8001b10 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b59      	ldr	r3, [pc, #356]	; (8005460 <DiagonalCube_Handle+0x204>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2296      	movs	r2, #150	; 0x96
 8005302:	4293      	cmp	r3, r2
 8005304:	f0c0 80a0 	bcc.w	8005448 <DiagonalCube_Handle+0x1ec>
			{
				layer_diagonal = 0x24;
 8005308:	4b56      	ldr	r3, [pc, #344]	; (8005464 <DiagonalCube_Handle+0x208>)
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 800530e:	2302      	movs	r3, #2
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e007      	b.n	8005324 <DiagonalCube_Handle+0xc8>
				{
					column_diagonal[i] = 0x3c;
 8005314:	4a54      	ldr	r2, [pc, #336]	; (8005468 <DiagonalCube_Handle+0x20c>)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	223c      	movs	r2, #60	; 0x3c
 800531c:	701a      	strb	r2, [r3, #0]
				for (int i = 2; i < 6; i++)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b05      	cmp	r3, #5
 8005328:	ddf4      	ble.n	8005314 <DiagonalCube_Handle+0xb8>
				}
				TransmitData(column_diagonal, layer_diagonal);
 800532a:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <DiagonalCube_Handle+0x208>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	484d      	ldr	r0, [pc, #308]	; (8005468 <DiagonalCube_Handle+0x20c>)
 8005332:	f001 fda9 	bl	8006e88 <TransmitData>
				for (int i = 0; i < 8; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e007      	b.n	800534c <DiagonalCube_Handle+0xf0>
				{
					column_diagonal[i] = 0;
 800533c:	4a4a      	ldr	r2, [pc, #296]	; (8005468 <DiagonalCube_Handle+0x20c>)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3301      	adds	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b07      	cmp	r3, #7
 8005350:	ddf4      	ble.n	800533c <DiagonalCube_Handle+0xe0>
				}
				size_layer = LARGE;
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <DiagonalCube_Handle+0x200>)
 8005354:	2202      	movs	r2, #2
 8005356:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8005358:	f7fc fbda 	bl	8001b10 <HAL_GetTick>
 800535c:	4603      	mov	r3, r0
 800535e:	4a40      	ldr	r2, [pc, #256]	; (8005460 <DiagonalCube_Handle+0x204>)
 8005360:	6013      	str	r3, [r2, #0]
			}
			break;
 8005362:	e071      	b.n	8005448 <DiagonalCube_Handle+0x1ec>
		case LARGE:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 8005364:	f7fc fbd4 	bl	8001b10 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <DiagonalCube_Handle+0x204>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2296      	movs	r2, #150	; 0x96
 8005372:	4293      	cmp	r3, r2
 8005374:	d36a      	bcc.n	800544c <DiagonalCube_Handle+0x1f0>
			{
				layer_diagonal = 0x42;
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <DiagonalCube_Handle+0x208>)
 8005378:	2242      	movs	r2, #66	; 0x42
 800537a:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 800537c:	2301      	movs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e007      	b.n	8005392 <DiagonalCube_Handle+0x136>
				{
					column_diagonal[i] = 0x7e;
 8005382:	4a39      	ldr	r2, [pc, #228]	; (8005468 <DiagonalCube_Handle+0x20c>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	227e      	movs	r2, #126	; 0x7e
 800538a:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i < 7; i++)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b06      	cmp	r3, #6
 8005396:	ddf4      	ble.n	8005382 <DiagonalCube_Handle+0x126>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8005398:	4b32      	ldr	r3, [pc, #200]	; (8005464 <DiagonalCube_Handle+0x208>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	4832      	ldr	r0, [pc, #200]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80053a0:	f001 fd72 	bl	8006e88 <TransmitData>
				for (int i = 0; i < 8; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	e007      	b.n	80053ba <DiagonalCube_Handle+0x15e>
				{
					column_diagonal[i] = 0;
 80053aa:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4413      	add	r3, r2
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b07      	cmp	r3, #7
 80053be:	ddf4      	ble.n	80053aa <DiagonalCube_Handle+0x14e>
				}
				size_layer = LARGEST;
 80053c0:	4b26      	ldr	r3, [pc, #152]	; (800545c <DiagonalCube_Handle+0x200>)
 80053c2:	2203      	movs	r2, #3
 80053c4:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 80053c6:	f7fc fba3 	bl	8001b10 <HAL_GetTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a24      	ldr	r2, [pc, #144]	; (8005460 <DiagonalCube_Handle+0x204>)
 80053ce:	6013      	str	r3, [r2, #0]
			}
			break;
 80053d0:	e03c      	b.n	800544c <DiagonalCube_Handle+0x1f0>
		case LARGEST:
			if (HAL_GetTick() - time_start >= time_todo_diagonal)
 80053d2:	f7fc fb9d 	bl	8001b10 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <DiagonalCube_Handle+0x204>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2296      	movs	r2, #150	; 0x96
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d335      	bcc.n	8005450 <DiagonalCube_Handle+0x1f4>
			{
				layer_diagonal= 0x81;
 80053e4:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <DiagonalCube_Handle+0x208>)
 80053e6:	2281      	movs	r2, #129	; 0x81
 80053e8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	e007      	b.n	8005400 <DiagonalCube_Handle+0x1a4>
				{
					column_diagonal[i] = 0xff;
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <DiagonalCube_Handle+0x20c>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3301      	adds	r3, #1
 80053fe:	607b      	str	r3, [r7, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b07      	cmp	r3, #7
 8005404:	ddf4      	ble.n	80053f0 <DiagonalCube_Handle+0x194>
				}
				TransmitData(column_diagonal, layer_diagonal);
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <DiagonalCube_Handle+0x208>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4816      	ldr	r0, [pc, #88]	; (8005468 <DiagonalCube_Handle+0x20c>)
 800540e:	f001 fd3b 	bl	8006e88 <TransmitData>
				for (int i = 0; i < 8; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	e007      	b.n	8005428 <DiagonalCube_Handle+0x1cc>
				{
					column_diagonal[i] = 0;
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <DiagonalCube_Handle+0x20c>)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4413      	add	r3, r2
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b07      	cmp	r3, #7
 800542c:	ddf4      	ble.n	8005418 <DiagonalCube_Handle+0x1bc>
				}
				size_layer = SMALLEST;
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <DiagonalCube_Handle+0x200>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
				time_start = HAL_GetTick();
 8005434:	f7fc fb6c 	bl	8001b10 <HAL_GetTick>
 8005438:	4603      	mov	r3, r0
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <DiagonalCube_Handle+0x204>)
 800543c:	6013      	str	r3, [r2, #0]
			}
			break;
 800543e:	e007      	b.n	8005450 <DiagonalCube_Handle+0x1f4>
		default:
			break;
 8005440:	bf00      	nop
 8005442:	e006      	b.n	8005452 <DiagonalCube_Handle+0x1f6>
			break;
 8005444:	bf00      	nop
 8005446:	e004      	b.n	8005452 <DiagonalCube_Handle+0x1f6>
			break;
 8005448:	bf00      	nop
 800544a:	e002      	b.n	8005452 <DiagonalCube_Handle+0x1f6>
			break;
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <DiagonalCube_Handle+0x1f6>
			break;
 8005450:	bf00      	nop
	}
}
 8005452:	bf00      	nop
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000280 	.word	0x20000280
 8005460:	2000028c 	.word	0x2000028c
 8005464:	20000281 	.word	0x20000281
 8005468:	20000284 	.word	0x20000284

0800546c <DiagonalCube_Set_State>:

void DiagonalCube_Set_State()
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
	currentEffect = DIAGONAL_CUBE;
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <DiagonalCube_Set_State+0x40>)
 8005474:	2204      	movs	r2, #4
 8005476:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	e007      	b.n	800548e <DiagonalCube_Set_State+0x22>
	{
		column_diagonal[j] = 0;
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <DiagonalCube_Set_State+0x44>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3301      	adds	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b07      	cmp	r3, #7
 8005492:	ddf4      	ble.n	800547e <DiagonalCube_Set_State+0x12>
	}
	layer_diagonal = 0;
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <DiagonalCube_Set_State+0x48>)
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
	size_layer = LARGEST;
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <DiagonalCube_Set_State+0x4c>)
 800549c:	2203      	movs	r2, #3
 800549e:	701a      	strb	r2, [r3, #0]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000010 	.word	0x20000010
 80054b0:	20000284 	.word	0x20000284
 80054b4:	20000281 	.word	0x20000281
 80054b8:	20000280 	.word	0x20000280

080054bc <DisplayLed>:
uint8_t WhichByte, WhichBit, WhichColumn;
uint8_t dataOut[9];
extern SPI_HandleTypeDef hspi1;

void DisplayLed(uint8_t x, uint8_t y, uint8_t  z)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	460b      	mov	r3, r1
 80054c8:	71bb      	strb	r3, [r7, #6]
 80054ca:	4613      	mov	r3, r2
 80054cc:	717b      	strb	r3, [r7, #5]
	WhichByte = (((z << 6)+(y << 3) + x) >> 3);
 80054ce:	797b      	ldrb	r3, [r7, #5]
 80054d0:	019a      	lsls	r2, r3, #6
 80054d2:	79bb      	ldrb	r3, [r7, #6]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	441a      	add	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	4413      	add	r3, r2
 80054dc:	10db      	asrs	r3, r3, #3
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <DisplayLed+0xf8>)
 80054e2:	701a      	strb	r2, [r3, #0]
	WhichBit = ((z << 6) + (y << 3) + x) - (WhichByte << 3);
 80054e4:	797b      	ldrb	r3, [r7, #5]
 80054e6:	019b      	lsls	r3, r3, #6
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	79bb      	ldrb	r3, [r7, #6]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4413      	add	r3, r2
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <DisplayLed+0xf8>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <DisplayLed+0xfc>)
 8005508:	701a      	strb	r2, [r3, #0]
	WhichColumn = WhichByte - (z*8);
 800550a:	4b2a      	ldr	r3, [pc, #168]	; (80055b4 <DisplayLed+0xf8>)
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	797b      	ldrb	r3, [r7, #5]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b28      	ldr	r3, [pc, #160]	; (80055bc <DisplayLed+0x100>)
 800551a:	701a      	strb	r2, [r3, #0]
	if (z == 8) IClayer = 0xff;
 800551c:	797b      	ldrb	r3, [r7, #5]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d103      	bne.n	800552a <DisplayLed+0x6e>
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <DisplayLed+0x104>)
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e006      	b.n	8005538 <DisplayLed+0x7c>
	else IClayer = 0x01 <<  z;
 800552a:	797b      	ldrb	r3, [r7, #5]
 800552c:	2201      	movs	r2, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	b2da      	uxtb	r2, r3
 8005534:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <DisplayLed+0x104>)
 8005536:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0x01 << WhichBit;
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <DisplayLed+0xfc>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	2301      	movs	r3, #1
 8005540:	fa03 f102 	lsl.w	r1, r3, r2
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <DisplayLed+0x100>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	b2c9      	uxtb	r1, r1
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <DisplayLed+0x108>)
 800554e:	5499      	strb	r1, [r3, r2]
	dataOut[0] = IClayer;
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <DisplayLed+0x104>)
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <DisplayLed+0x10c>)
 8005556:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < 9; i++)
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e009      	b.n	8005572 <DisplayLed+0xb6>
	{
		dataOut[i] = ICcolumn[i-1];
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	4917      	ldr	r1, [pc, #92]	; (80055c4 <DisplayLed+0x108>)
 8005566:	5c89      	ldrb	r1, [r1, r2]
 8005568:	4a17      	ldr	r2, [pc, #92]	; (80055c8 <DisplayLed+0x10c>)
 800556a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < 9; i++)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	3301      	adds	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d9f2      	bls.n	800555e <DisplayLed+0xa2>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8005578:	2200      	movs	r2, #0
 800557a:	2140      	movs	r1, #64	; 0x40
 800557c:	4813      	ldr	r0, [pc, #76]	; (80055cc <DisplayLed+0x110>)
 800557e:	f7fd f825 	bl	80025cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8005582:	2364      	movs	r3, #100	; 0x64
 8005584:	2209      	movs	r2, #9
 8005586:	4910      	ldr	r1, [pc, #64]	; (80055c8 <DisplayLed+0x10c>)
 8005588:	4811      	ldr	r0, [pc, #68]	; (80055d0 <DisplayLed+0x114>)
 800558a:	f7fd fecf 	bl	800332c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 800558e:	2201      	movs	r2, #1
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	480e      	ldr	r0, [pc, #56]	; (80055cc <DisplayLed+0x110>)
 8005594:	f7fd f81a 	bl	80025cc <HAL_GPIO_WritePin>
	IClayer = 0;
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <DisplayLed+0x104>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
	ICcolumn[WhichColumn] = 0;
 800559e:	4b07      	ldr	r3, [pc, #28]	; (80055bc <DisplayLed+0x100>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <DisplayLed+0x108>)
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000299 	.word	0x20000299
 80055b8:	2000029a 	.word	0x2000029a
 80055bc:	2000029b 	.word	0x2000029b
 80055c0:	20000298 	.word	0x20000298
 80055c4:	20000290 	.word	0x20000290
 80055c8:	2000029c 	.word	0x2000029c
 80055cc:	40010800 	.word	0x40010800
 80055d0:	20000130 	.word	0x20000130

080055d4 <GrowShrinkCube_Handle>:
static uint32_t time_start = 0;
uint8_t column_growshrink[4][8];
uint8_t layer_growshrink[4];

void GrowShrinkCube_Handle() //ok
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
	uint8_t temp[8];
	column_growshrink[0][0] = column_growshrink[0][1] = column_growshrink[0][2] = column_growshrink[0][3] = column_growshrink[0][4] = column_growshrink[0][5] = column_growshrink[0][6] = column_growshrink[0][7] = 0xff;
 80055da:	4b93      	ldr	r3, [pc, #588]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	71da      	strb	r2, [r3, #7]
 80055e0:	4b91      	ldr	r3, [pc, #580]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055e2:	79da      	ldrb	r2, [r3, #7]
 80055e4:	4b90      	ldr	r3, [pc, #576]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055e6:	719a      	strb	r2, [r3, #6]
 80055e8:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055ea:	799a      	ldrb	r2, [r3, #6]
 80055ec:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055ee:	715a      	strb	r2, [r3, #5]
 80055f0:	4b8d      	ldr	r3, [pc, #564]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055f2:	795a      	ldrb	r2, [r3, #5]
 80055f4:	4b8c      	ldr	r3, [pc, #560]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055f6:	711a      	strb	r2, [r3, #4]
 80055f8:	4b8b      	ldr	r3, [pc, #556]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055fa:	791a      	ldrb	r2, [r3, #4]
 80055fc:	4b8a      	ldr	r3, [pc, #552]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80055fe:	70da      	strb	r2, [r3, #3]
 8005600:	4b89      	ldr	r3, [pc, #548]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005602:	78da      	ldrb	r2, [r3, #3]
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005606:	709a      	strb	r2, [r3, #2]
 8005608:	4b87      	ldr	r3, [pc, #540]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800560a:	789a      	ldrb	r2, [r3, #2]
 800560c:	4b86      	ldr	r3, [pc, #536]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800560e:	705a      	strb	r2, [r3, #1]
 8005610:	4b85      	ldr	r3, [pc, #532]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005612:	785a      	ldrb	r2, [r3, #1]
 8005614:	4b84      	ldr	r3, [pc, #528]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005616:	701a      	strb	r2, [r3, #0]
	column_growshrink[1][1] = column_growshrink[1][2] = column_growshrink[1][3] = column_growshrink[1][4] = column_growshrink[1][5] = column_growshrink[1][6] = 0x7e;
 8005618:	4b83      	ldr	r3, [pc, #524]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800561a:	227e      	movs	r2, #126	; 0x7e
 800561c:	739a      	strb	r2, [r3, #14]
 800561e:	4b82      	ldr	r3, [pc, #520]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005620:	7b9a      	ldrb	r2, [r3, #14]
 8005622:	4b81      	ldr	r3, [pc, #516]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005624:	735a      	strb	r2, [r3, #13]
 8005626:	4b80      	ldr	r3, [pc, #512]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005628:	7b5a      	ldrb	r2, [r3, #13]
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800562c:	731a      	strb	r2, [r3, #12]
 800562e:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005630:	7b1a      	ldrb	r2, [r3, #12]
 8005632:	4b7d      	ldr	r3, [pc, #500]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005634:	72da      	strb	r2, [r3, #11]
 8005636:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005638:	7ada      	ldrb	r2, [r3, #11]
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800563c:	729a      	strb	r2, [r3, #10]
 800563e:	4b7a      	ldr	r3, [pc, #488]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005640:	7a9a      	ldrb	r2, [r3, #10]
 8005642:	4b79      	ldr	r3, [pc, #484]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005644:	725a      	strb	r2, [r3, #9]
    column_growshrink[2][2] = column_growshrink[2][3] = column_growshrink[2][4] = column_growshrink[2][5] = 0x3c;
 8005646:	4b78      	ldr	r3, [pc, #480]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005648:	223c      	movs	r2, #60	; 0x3c
 800564a:	755a      	strb	r2, [r3, #21]
 800564c:	4b76      	ldr	r3, [pc, #472]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800564e:	7d5a      	ldrb	r2, [r3, #21]
 8005650:	4b75      	ldr	r3, [pc, #468]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005652:	751a      	strb	r2, [r3, #20]
 8005654:	4b74      	ldr	r3, [pc, #464]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005656:	7d1a      	ldrb	r2, [r3, #20]
 8005658:	4b73      	ldr	r3, [pc, #460]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800565a:	74da      	strb	r2, [r3, #19]
 800565c:	4b72      	ldr	r3, [pc, #456]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800565e:	7cda      	ldrb	r2, [r3, #19]
 8005660:	4b71      	ldr	r3, [pc, #452]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005662:	749a      	strb	r2, [r3, #18]
    column_growshrink[3][3] = column_growshrink[3][4] = 0x18;
 8005664:	4b70      	ldr	r3, [pc, #448]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005666:	2218      	movs	r2, #24
 8005668:	771a      	strb	r2, [r3, #28]
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 800566c:	7f1a      	ldrb	r2, [r3, #28]
 800566e:	4b6e      	ldr	r3, [pc, #440]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005670:	76da      	strb	r2, [r3, #27]

    layer_growshrink[0] = 0xff;
 8005672:	4b6e      	ldr	r3, [pc, #440]	; (800582c <GrowShrinkCube_Handle+0x258>)
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	701a      	strb	r2, [r3, #0]
    layer_growshrink[1] = 0x7e;
 8005678:	4b6c      	ldr	r3, [pc, #432]	; (800582c <GrowShrinkCube_Handle+0x258>)
 800567a:	227e      	movs	r2, #126	; 0x7e
 800567c:	705a      	strb	r2, [r3, #1]
    layer_growshrink[2] = 0x3c;
 800567e:	4b6b      	ldr	r3, [pc, #428]	; (800582c <GrowShrinkCube_Handle+0x258>)
 8005680:	223c      	movs	r2, #60	; 0x3c
 8005682:	709a      	strb	r2, [r3, #2]
    layer_growshrink[3] = 0x18;
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <GrowShrinkCube_Handle+0x258>)
 8005686:	2218      	movs	r2, #24
 8005688:	70da      	strb	r2, [r3, #3]

	switch (size_cube)
 800568a:	4b69      	ldr	r3, [pc, #420]	; (8005830 <GrowShrinkCube_Handle+0x25c>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b03      	cmp	r3, #3
 8005690:	f200 80bc 	bhi.w	800580c <GrowShrinkCube_Handle+0x238>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <GrowShrinkCube_Handle+0xc8>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056ad 	.word	0x080056ad
 80056a0:	08005707 	.word	0x08005707
 80056a4:	0800575f 	.word	0x0800575f
 80056a8:	080057b7 	.word	0x080057b7
	{
		case TWO_X_TWO_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 80056ac:	f7fc fa30 	bl	8001b10 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b60      	ldr	r3, [pc, #384]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	22c8      	movs	r2, #200	; 0xc8
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f0c0 80a8 	bcc.w	8005810 <GrowShrinkCube_Handle+0x23c>
			{
				for (int j = 0; j < 8; j++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e013      	b.n	80056ee <GrowShrinkCube_Handle+0x11a>
				{
					temp[j] = column_growshrink[3][j];
 80056c6:	4a58      	ldr	r2, [pc, #352]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	3318      	adds	r3, #24
 80056ce:	7819      	ldrb	r1, [r3, #0]
 80056d0:	463a      	mov	r2, r7
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	460a      	mov	r2, r1
 80056d8:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[3]);
 80056da:	4b54      	ldr	r3, [pc, #336]	; (800582c <GrowShrinkCube_Handle+0x258>)
 80056dc:	78da      	ldrb	r2, [r3, #3]
 80056de:	463b      	mov	r3, r7
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fbd0 	bl	8006e88 <TransmitData>
				for (int j = 0; j < 8; j++)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3301      	adds	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b07      	cmp	r3, #7
 80056f2:	dde8      	ble.n	80056c6 <GrowShrinkCube_Handle+0xf2>
				}
				time_start = HAL_GetTick();
 80056f4:	f7fc fa0c 	bl	8001b10 <HAL_GetTick>
 80056f8:	4603      	mov	r3, r0
 80056fa:	4a4e      	ldr	r2, [pc, #312]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 80056fc:	6013      	str	r3, [r2, #0]
				size_cube = FOUR_X_FOUR_CUBE;
 80056fe:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <GrowShrinkCube_Handle+0x25c>)
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005704:	e084      	b.n	8005810 <GrowShrinkCube_Handle+0x23c>
		case FOUR_X_FOUR_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 8005706:	f7fc fa03 	bl	8001b10 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	4b49      	ldr	r3, [pc, #292]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	22c8      	movs	r2, #200	; 0xc8
 8005714:	4293      	cmp	r3, r2
 8005716:	d37d      	bcc.n	8005814 <GrowShrinkCube_Handle+0x240>
			{
				for (int j = 0; j < 8; j++)
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e013      	b.n	8005746 <GrowShrinkCube_Handle+0x172>
				{
					temp[j] = column_growshrink[2][j];
 800571e:	4a42      	ldr	r2, [pc, #264]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	3310      	adds	r3, #16
 8005726:	7819      	ldrb	r1, [r3, #0]
 8005728:	463a      	mov	r2, r7
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	460a      	mov	r2, r1
 8005730:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[2]);
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <GrowShrinkCube_Handle+0x258>)
 8005734:	789a      	ldrb	r2, [r3, #2]
 8005736:	463b      	mov	r3, r7
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fba4 	bl	8006e88 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b07      	cmp	r3, #7
 800574a:	dde8      	ble.n	800571e <GrowShrinkCube_Handle+0x14a>
				}
				time_start = HAL_GetTick();
 800574c:	f7fc f9e0 	bl	8001b10 <HAL_GetTick>
 8005750:	4603      	mov	r3, r0
 8005752:	4a38      	ldr	r2, [pc, #224]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 8005754:	6013      	str	r3, [r2, #0]
				size_cube = SIX_X_SIX_CUBE;
 8005756:	4b36      	ldr	r3, [pc, #216]	; (8005830 <GrowShrinkCube_Handle+0x25c>)
 8005758:	2202      	movs	r2, #2
 800575a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800575c:	e05a      	b.n	8005814 <GrowShrinkCube_Handle+0x240>
		case SIX_X_SIX_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 800575e:	f7fc f9d7 	bl	8001b10 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	22c8      	movs	r2, #200	; 0xc8
 800576c:	4293      	cmp	r3, r2
 800576e:	d353      	bcc.n	8005818 <GrowShrinkCube_Handle+0x244>
			{
				for (int j = 0; j < 8; j++)
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e013      	b.n	800579e <GrowShrinkCube_Handle+0x1ca>
				{
					temp[j] = column_growshrink[1][j];
 8005776:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	3308      	adds	r3, #8
 800577e:	7819      	ldrb	r1, [r3, #0]
 8005780:	463a      	mov	r2, r7
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	460a      	mov	r2, r1
 8005788:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[1]);
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <GrowShrinkCube_Handle+0x258>)
 800578c:	785a      	ldrb	r2, [r3, #1]
 800578e:	463b      	mov	r3, r7
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fb78 	bl	8006e88 <TransmitData>
				for (int j = 0; j < 8; j++)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	dde8      	ble.n	8005776 <GrowShrinkCube_Handle+0x1a2>
				}
				time_start = HAL_GetTick();
 80057a4:	f7fc f9b4 	bl	8001b10 <HAL_GetTick>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4a22      	ldr	r2, [pc, #136]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 80057ac:	6013      	str	r3, [r2, #0]
				size_cube = EIGHT_X_EIGHT_CUBE;
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <GrowShrinkCube_Handle+0x25c>)
 80057b0:	2203      	movs	r2, #3
 80057b2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80057b4:	e030      	b.n	8005818 <GrowShrinkCube_Handle+0x244>
		case EIGHT_X_EIGHT_CUBE:
			if (HAL_GetTick() - time_start >= time_todo2)
 80057b6:	f7fc f9ab 	bl	8001b10 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	22c8      	movs	r2, #200	; 0xc8
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d329      	bcc.n	800581c <GrowShrinkCube_Handle+0x248>
			{
				for (int j = 0; j < 8; j++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	e012      	b.n	80057f4 <GrowShrinkCube_Handle+0x220>
				{
					temp[j] = column_growshrink[0][j];
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <GrowShrinkCube_Handle+0x254>)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	463a      	mov	r2, r7
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	460a      	mov	r2, r1
 80057de:	701a      	strb	r2, [r3, #0]
					TransmitData(temp, layer_growshrink[0]);
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <GrowShrinkCube_Handle+0x258>)
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	463b      	mov	r3, r7
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fb4d 	bl	8006e88 <TransmitData>
				for (int j = 0; j < 8; j++)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	dde9      	ble.n	80057ce <GrowShrinkCube_Handle+0x1fa>
				}
				time_start = HAL_GetTick();
 80057fa:	f7fc f989 	bl	8001b10 <HAL_GetTick>
 80057fe:	4603      	mov	r3, r0
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <GrowShrinkCube_Handle+0x260>)
 8005802:	6013      	str	r3, [r2, #0]
				size_cube = TWO_X_TWO_CUBE;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <GrowShrinkCube_Handle+0x25c>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
			}
			break;
 800580a:	e007      	b.n	800581c <GrowShrinkCube_Handle+0x248>
		default:
			break;
 800580c:	bf00      	nop
 800580e:	e006      	b.n	800581e <GrowShrinkCube_Handle+0x24a>
			break;
 8005810:	bf00      	nop
 8005812:	e004      	b.n	800581e <GrowShrinkCube_Handle+0x24a>
			break;
 8005814:	bf00      	nop
 8005816:	e002      	b.n	800581e <GrowShrinkCube_Handle+0x24a>
			break;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <GrowShrinkCube_Handle+0x24a>
			break;
 800581c:	bf00      	nop
	}
}
 800581e:	bf00      	nop
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200002ac 	.word	0x200002ac
 800582c:	200002cc 	.word	0x200002cc
 8005830:	200002a5 	.word	0x200002a5
 8005834:	200002a8 	.word	0x200002a8

08005838 <GrowShrinkCube_Set_State>:

void GrowShrinkCube_Set_State()
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
	currentEffect = GROW_SHRINK_CUBE;
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <GrowShrinkCube_Set_State+0x5c>)
 8005840:	2203      	movs	r2, #3
 8005842:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	e018      	b.n	800587c <GrowShrinkCube_Set_State+0x44>
	{
		layer_growshrink[i] = 0;
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <GrowShrinkCube_Set_State+0x60>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	e00a      	b.n	8005870 <GrowShrinkCube_Set_State+0x38>
		{
			column_growshrink[i][j] = 0;
 800585a:	4a10      	ldr	r2, [pc, #64]	; (800589c <GrowShrinkCube_Set_State+0x64>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	441a      	add	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4413      	add	r3, r2
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b07      	cmp	r3, #7
 8005874:	ddf1      	ble.n	800585a <GrowShrinkCube_Set_State+0x22>
	for (int i = 0; i < 4; i++)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3301      	adds	r3, #1
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b03      	cmp	r3, #3
 8005880:	dde3      	ble.n	800584a <GrowShrinkCube_Set_State+0x12>
		}
	}
	size_cube = EIGHT_X_EIGHT_CUBE;
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <GrowShrinkCube_Set_State+0x68>)
 8005884:	2203      	movs	r2, #3
 8005886:	701a      	strb	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000010 	.word	0x20000010
 8005898:	200002cc 	.word	0x200002cc
 800589c:	200002ac 	.word	0x200002ac
 80058a0:	200002a5 	.word	0x200002a5

080058a4 <LED_app_change>:
		default:
			break;
	}
}

static void LED_app_change(uint8_t *cnt){
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	if(gappcnt < MAX_EFFECT_APP && gapp[gappcnt+1].loop != 0){
 80058ac:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <LED_app_change+0xbc>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b0a      	cmp	r3, #10
 80058b2:	d813      	bhi.n	80058dc <LED_app_change+0x38>
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <LED_app_change+0xbc>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	492a      	ldr	r1, [pc, #168]	; (8005964 <LED_app_change+0xc0>)
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3304      	adds	r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d006      	beq.n	80058dc <LED_app_change+0x38>
		gappcnt++;
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <LED_app_change+0xbc>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <LED_app_change+0xbc>)
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e002      	b.n	80058e2 <LED_app_change+0x3e>
	}
	else{
		gappcnt = 0;
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <LED_app_change+0xbc>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
	}
	timer_unregister_callback(gcurrent_id);
 80058e2:	4b21      	ldr	r3, [pc, #132]	; (8005968 <LED_app_change+0xc4>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fc70 	bl	80071cc <timer_unregister_callback>

	if(gapp[gappcnt].init !=0) gapp[gappcnt].init();
 80058ec:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <LED_app_change+0xbc>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	4619      	mov	r1, r3
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <LED_app_change+0xc0>)
 80058f4:	460b      	mov	r3, r1
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	440b      	add	r3, r1
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <LED_app_change+0x76>
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <LED_app_change+0xbc>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	4a16      	ldr	r2, [pc, #88]	; (8005964 <LED_app_change+0xc0>)
 800590c:	460b      	mov	r3, r1
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	440b      	add	r3, r1
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4798      	blx	r3
	gcurrent_id = timer_register_callback(gapp[gappcnt].loop, gapp[gappcnt].period, 0, TIMER_MODE_REPEAT);
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <LED_app_change+0xbc>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	4a10      	ldr	r2, [pc, #64]	; (8005964 <LED_app_change+0xc0>)
 8005922:	460b      	mov	r3, r1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	440b      	add	r3, r1
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	3304      	adds	r3, #4
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <LED_app_change+0xbc>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	4619      	mov	r1, r3
 8005936:	4a0b      	ldr	r2, [pc, #44]	; (8005964 <LED_app_change+0xc0>)
 8005938:	460b      	mov	r3, r1
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	440b      	add	r3, r1
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	3308      	adds	r3, #8
 8005944:	8819      	ldrh	r1, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	2200      	movs	r2, #0
 800594a:	f001 fbf1 	bl	8007130 <timer_register_callback>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <LED_app_change+0xc4>)
 8005954:	701a      	strb	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200002d1 	.word	0x200002d1
 8005964:	200002d4 	.word	0x200002d4
 8005968:	200002d0 	.word	0x200002d0

0800596c <Effect_app>:

void Effect_app(){
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
	gapp[0].init = AroundEdgeCube_Set_State;
 8005970:	4b49      	ldr	r3, [pc, #292]	; (8005a98 <Effect_app+0x12c>)
 8005972:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <Effect_app+0x130>)
 8005974:	601a      	str	r2, [r3, #0]
	gapp[0].loop = AroundEdgeCube_Handle;
 8005976:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <Effect_app+0x12c>)
 8005978:	4a49      	ldr	r2, [pc, #292]	; (8005aa0 <Effect_app+0x134>)
 800597a:	605a      	str	r2, [r3, #4]
	gapp[0].period = 100;
 800597c:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <Effect_app+0x12c>)
 800597e:	2264      	movs	r2, #100	; 0x64
 8005980:	811a      	strh	r2, [r3, #8]

	gapp[1].init = CountDownCube_Set_Sate;
 8005982:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <Effect_app+0x12c>)
 8005984:	4a47      	ldr	r2, [pc, #284]	; (8005aa4 <Effect_app+0x138>)
 8005986:	60da      	str	r2, [r3, #12]
	gapp[1].loop = CountDownCube_Handle;
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <Effect_app+0x12c>)
 800598a:	4a47      	ldr	r2, [pc, #284]	; (8005aa8 <Effect_app+0x13c>)
 800598c:	611a      	str	r2, [r3, #16]
	gapp[1].period = 1;
 800598e:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <Effect_app+0x12c>)
 8005990:	2201      	movs	r2, #1
 8005992:	829a      	strh	r2, [r3, #20]

	gapp[2].init = DiagonalCube_Set_State;
 8005994:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <Effect_app+0x12c>)
 8005996:	4a45      	ldr	r2, [pc, #276]	; (8005aac <Effect_app+0x140>)
 8005998:	619a      	str	r2, [r3, #24]
	gapp[2].loop = DiagonalCube_Handle;
 800599a:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <Effect_app+0x12c>)
 800599c:	4a44      	ldr	r2, [pc, #272]	; (8005ab0 <Effect_app+0x144>)
 800599e:	61da      	str	r2, [r3, #28]
	gapp[2].period = 100;
 80059a0:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <Effect_app+0x12c>)
 80059a2:	2264      	movs	r2, #100	; 0x64
 80059a4:	841a      	strh	r2, [r3, #32]

	gapp[3].init = GrowShrinkCube_Set_State;
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <Effect_app+0x12c>)
 80059a8:	4a42      	ldr	r2, [pc, #264]	; (8005ab4 <Effect_app+0x148>)
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
	gapp[3].loop = GrowShrinkCube_Handle;
 80059ac:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <Effect_app+0x12c>)
 80059ae:	4a42      	ldr	r2, [pc, #264]	; (8005ab8 <Effect_app+0x14c>)
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
	gapp[3].period = 100;
 80059b2:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <Effect_app+0x12c>)
 80059b4:	2264      	movs	r2, #100	; 0x64
 80059b6:	859a      	strh	r2, [r3, #44]	; 0x2c

	gapp[4].init = PlaneCube_Set_State;
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <Effect_app+0x12c>)
 80059ba:	4a40      	ldr	r2, [pc, #256]	; (8005abc <Effect_app+0x150>)
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
	gapp[4].loop = PlaneCube_Handle;
 80059be:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <Effect_app+0x12c>)
 80059c0:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <Effect_app+0x154>)
 80059c2:	635a      	str	r2, [r3, #52]	; 0x34
	gapp[4].period = 200;
 80059c4:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <Effect_app+0x12c>)
 80059c6:	22c8      	movs	r2, #200	; 0xc8
 80059c8:	871a      	strh	r2, [r3, #56]	; 0x38

	gapp[5].init = RandomRainCube_Set_State;
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <Effect_app+0x12c>)
 80059cc:	4a3d      	ldr	r2, [pc, #244]	; (8005ac4 <Effect_app+0x158>)
 80059ce:	63da      	str	r2, [r3, #60]	; 0x3c
	gapp[5].loop = RandomRainCube_Handle;
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <Effect_app+0x12c>)
 80059d2:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <Effect_app+0x15c>)
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
	gapp[5].period = 110;
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <Effect_app+0x12c>)
 80059d8:	226e      	movs	r2, #110	; 0x6e
 80059da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	gapp[6].init = SidewavesEffect_Set_State;
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <Effect_app+0x12c>)
 80059e0:	4a3a      	ldr	r2, [pc, #232]	; (8005acc <Effect_app+0x160>)
 80059e2:	649a      	str	r2, [r3, #72]	; 0x48
	gapp[6].loop = SidewavesEffect_Handle;
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <Effect_app+0x12c>)
 80059e6:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <Effect_app+0x164>)
 80059e8:	64da      	str	r2, [r3, #76]	; 0x4c
	gapp[6].period = 10;
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <Effect_app+0x12c>)
 80059ec:	220a      	movs	r2, #10
 80059ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50


	gapp[7].init = SpiralCube_Set_State;
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <Effect_app+0x12c>)
 80059f4:	4a37      	ldr	r2, [pc, #220]	; (8005ad4 <Effect_app+0x168>)
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
	gapp[7].loop = SpiralCube_Handle;
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <Effect_app+0x12c>)
 80059fa:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <Effect_app+0x16c>)
 80059fc:	659a      	str	r2, [r3, #88]	; 0x58
	gapp[7].period = 1;
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <Effect_app+0x12c>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	gapp[8].init = WaveCube_Set_State;
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <Effect_app+0x12c>)
 8005a08:	4a34      	ldr	r2, [pc, #208]	; (8005adc <Effect_app+0x170>)
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
	gapp[8].loop = WaveCube_Handle;
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <Effect_app+0x12c>)
 8005a0e:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <Effect_app+0x174>)
 8005a10:	665a      	str	r2, [r3, #100]	; 0x64
	gapp[8].period = 50;
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <Effect_app+0x12c>)
 8005a14:	2232      	movs	r2, #50	; 0x32
 8005a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
//
	if(gapp[gappcnt].init != NULL) gapp[gappcnt].init();
 8005a1a:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <Effect_app+0x178>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <Effect_app+0x12c>)
 8005a22:	460b      	mov	r3, r1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	440b      	add	r3, r1
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <Effect_app+0xdc>
 8005a32:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <Effect_app+0x178>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <Effect_app+0x12c>)
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	440b      	add	r3, r1
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4798      	blx	r3
	gcurrent_id = timer_register_callback(gapp[gappcnt].loop, gapp[gappcnt].period, 0, TIMER_MODE_REPEAT);
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <Effect_app+0x178>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <Effect_app+0x12c>)
 8005a50:	460b      	mov	r3, r1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	440b      	add	r3, r1
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <Effect_app+0x178>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <Effect_app+0x12c>)
 8005a66:	460b      	mov	r3, r1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	440b      	add	r3, r1
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	3308      	adds	r3, #8
 8005a72:	8819      	ldrh	r1, [r3, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	f001 fb5a 	bl	8007130 <timer_register_callback>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <Effect_app+0x17c>)
 8005a82:	701a      	strb	r2, [r3, #0]
	timer_register_callback(LED_app_change, 10000, 0, TIMER_MODE_REPEAT);
 8005a84:	2300      	movs	r3, #0
 8005a86:	2200      	movs	r2, #0
 8005a88:	f242 7110 	movw	r1, #10000	; 0x2710
 8005a8c:	4817      	ldr	r0, [pc, #92]	; (8005aec <Effect_app+0x180>)
 8005a8e:	f001 fb4f 	bl	8007130 <timer_register_callback>
}
 8005a92:	bf00      	nop
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	200002d4 	.word	0x200002d4
 8005a9c:	080047b1 	.word	0x080047b1
 8005aa0:	080046dd 	.word	0x080046dd
 8005aa4:	08004d65 	.word	0x08004d65
 8005aa8:	08004805 	.word	0x08004805
 8005aac:	0800546d 	.word	0x0800546d
 8005ab0:	0800525d 	.word	0x0800525d
 8005ab4:	08005839 	.word	0x08005839
 8005ab8:	080055d5 	.word	0x080055d5
 8005abc:	08005e09 	.word	0x08005e09
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005f21 	.word	0x08005f21
 8005ac8:	08005e6d 	.word	0x08005e6d
 8005acc:	080061ed 	.word	0x080061ed
 8005ad0:	08005f49 	.word	0x08005f49
 8005ad4:	08006e41 	.word	0x08006e41
 8005ad8:	0800622d 	.word	0x0800622d
 8005adc:	080070dd 	.word	0x080070dd
 8005ae0:	08006ef9 	.word	0x08006ef9
 8005ae4:	200002d1 	.word	0x200002d1
 8005ae8:	200002d0 	.word	0x200002d0
 8005aec:	080058a5 	.word	0x080058a5

08005af0 <PlaneCube_Handle>:
static uint32_t timer = 0;
uint8_t layer_plane;
static uint8_t column_plane[8] = {};
static int i = 0;

void PlaneCube_Handle(){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
	switch(way_state){
 8005af6:	4b9a      	ldr	r3, [pc, #616]	; (8005d60 <PlaneCube_Handle+0x270>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	f000 80fd 	beq.w	8005cfa <PlaneCube_Handle+0x20a>
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	f300 8169 	bgt.w	8005dd8 <PlaneCube_Handle+0x2e8>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <PlaneCube_Handle+0x20>
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d06a      	beq.n	8005be4 <PlaneCube_Handle+0xf4>
			timer = HAL_GetTick();
		}
	}
		break;
	default:
		break;
 8005b0e:	e163      	b.n	8005dd8 <PlaneCube_Handle+0x2e8>
		layer_plane = 0xff;
 8005b10:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005b12:	22ff      	movs	r2, #255	; 0xff
 8005b14:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8005b16:	f7fb fffb 	bl	8001b10 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2264      	movs	r2, #100	; 0x64
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f0c0 8159 	bcc.w	8005ddc <PlaneCube_Handle+0x2ec>
			if (way)
 8005b2a:	4b90      	ldr	r3, [pc, #576]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d026      	beq.n	8005b80 <PlaneCube_Handle+0x90>
				column_plane[i] = 0xff;
 8005b32:	4b8f      	ldr	r3, [pc, #572]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a8f      	ldr	r2, [pc, #572]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b38:	21ff      	movs	r1, #255	; 0xff
 8005b3a:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	4619      	mov	r1, r3
 8005b42:	488c      	ldr	r0, [pc, #560]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b44:	f001 f9a0 	bl	8006e88 <TransmitData>
				if (column_plane[7] == 0xff) way = 0;
 8005b48:	4b8a      	ldr	r3, [pc, #552]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b4a:	79db      	ldrb	r3, [r3, #7]
 8005b4c:	2bff      	cmp	r3, #255	; 0xff
 8005b4e:	d103      	bne.n	8005b58 <PlaneCube_Handle+0x68>
 8005b50:	4b86      	ldr	r3, [pc, #536]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e004      	b.n	8005b62 <PlaneCube_Handle+0x72>
				else i++;
 8005b58:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	4a84      	ldr	r2, [pc, #528]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005b60:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e007      	b.n	8005b78 <PlaneCube_Handle+0x88>
					column_plane[j] = 0;
 8005b68:	4a82      	ldr	r2, [pc, #520]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b07      	cmp	r3, #7
 8005b7c:	ddf4      	ble.n	8005b68 <PlaneCube_Handle+0x78>
 8005b7e:	e02b      	b.n	8005bd8 <PlaneCube_Handle+0xe8>
				column_plane[i] = 0xff;
 8005b80:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a7b      	ldr	r2, [pc, #492]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b86:	21ff      	movs	r1, #255	; 0xff
 8005b88:	54d1      	strb	r1, [r2, r3]
				TransmitData(column_plane, layer_plane);
 8005b8a:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4878      	ldr	r0, [pc, #480]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b92:	f001 f979 	bl	8006e88 <TransmitData>
				if (column_plane[0] == 0xff)
 8005b96:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d109      	bne.n	8005bb2 <PlaneCube_Handle+0xc2>
						way = 1;
 8005b9e:	4b73      	ldr	r3, [pc, #460]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
						i = 0;
 8005ba4:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
						way_state = OY;
 8005baa:	4b6d      	ldr	r3, [pc, #436]	; (8005d60 <PlaneCube_Handle+0x270>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	e004      	b.n	8005bbc <PlaneCube_Handle+0xcc>
				else i--;
 8005bb2:	4b6f      	ldr	r3, [pc, #444]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a6d      	ldr	r2, [pc, #436]	; (8005d70 <PlaneCube_Handle+0x280>)
 8005bba:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < 8; j++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e007      	b.n	8005bd2 <PlaneCube_Handle+0xe2>
					column_plane[j] = 0;
 8005bc2:	4a6c      	ldr	r2, [pc, #432]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	ddf4      	ble.n	8005bc2 <PlaneCube_Handle+0xd2>
			timer = HAL_GetTick();
 8005bd8:	f7fb ff9a 	bl	8001b10 <HAL_GetTick>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4a62      	ldr	r2, [pc, #392]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005be0:	6013      	str	r3, [r2, #0]
		break;
 8005be2:	e0fb      	b.n	8005ddc <PlaneCube_Handle+0x2ec>
		layer_plane = 0xff;
 8005be4:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	701a      	strb	r2, [r3, #0]
		if (column_plane[0] == 0)
 8005bea:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d118      	bne.n	8005c24 <PlaneCube_Handle+0x134>
			for (int j = 0; j < 8; j++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e007      	b.n	8005c08 <PlaneCube_Handle+0x118>
				column_plane[j] = 1;
 8005bf8:	4a5e      	ldr	r2, [pc, #376]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3301      	adds	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b07      	cmp	r3, #7
 8005c0c:	ddf4      	ble.n	8005bf8 <PlaneCube_Handle+0x108>
			TransmitData(column_plane, layer_plane);
 8005c0e:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	4857      	ldr	r0, [pc, #348]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c16:	f001 f937 	bl	8006e88 <TransmitData>
			timer = HAL_GetTick();
 8005c1a:	f7fb ff79 	bl	8001b10 <HAL_GetTick>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4a51      	ldr	r2, [pc, #324]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005c22:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - timer >= time_todo1)
 8005c24:	f7fb ff74 	bl	8001b10 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b4f      	ldr	r3, [pc, #316]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2264      	movs	r2, #100	; 0x64
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f0c0 80d4 	bcc.w	8005de0 <PlaneCube_Handle+0x2f0>
			if (way)
 8005c38:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d021      	beq.n	8005c84 <PlaneCube_Handle+0x194>
				for (int j = 0; j < 8; j++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e00d      	b.n	8005c62 <PlaneCube_Handle+0x172>
					column_plane[j] <<= 1;
 8005c46:	4a4b      	ldr	r2, [pc, #300]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	b2d9      	uxtb	r1, r3
 8005c52:	4a48      	ldr	r2, [pc, #288]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	460a      	mov	r2, r1
 8005c5a:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	ddee      	ble.n	8005c46 <PlaneCube_Handle+0x156>
				TransmitData(column_plane, layer_plane);
 8005c68:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4841      	ldr	r0, [pc, #260]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c70:	f001 f90a 	bl	8006e88 <TransmitData>
				if (column_plane[0] == 0x80) way = 0;
 8005c74:	4b3f      	ldr	r3, [pc, #252]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d138      	bne.n	8005cee <PlaneCube_Handle+0x1fe>
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e034      	b.n	8005cee <PlaneCube_Handle+0x1fe>
				for (int j = 0; j < 8; j++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e00d      	b.n	8005ca6 <PlaneCube_Handle+0x1b6>
					column_plane[j] >>= 1;
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	b2d9      	uxtb	r1, r3
 8005c96:	4a37      	ldr	r2, [pc, #220]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	ddee      	ble.n	8005c8a <PlaneCube_Handle+0x19a>
				TransmitData(column_plane, layer_plane);
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4830      	ldr	r0, [pc, #192]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005cb4:	f001 f8e8 	bl	8006e88 <TransmitData>
				if (column_plane[0] == 0x00)
 8005cb8:	4b2e      	ldr	r3, [pc, #184]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d116      	bne.n	8005cee <PlaneCube_Handle+0x1fe>
					for (int j = 0; j < 8; j++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60bb      	str	r3, [r7, #8]
 8005cc4:	e007      	b.n	8005cd6 <PlaneCube_Handle+0x1e6>
						column_plane[j] = 0xff;
 8005cc6:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4413      	add	r3, r2
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b07      	cmp	r3, #7
 8005cda:	ddf4      	ble.n	8005cc6 <PlaneCube_Handle+0x1d6>
					layer_plane = 0;
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
					way = 1;
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
					way_state = OZ;
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <PlaneCube_Handle+0x270>)
 8005cea:	2202      	movs	r2, #2
 8005cec:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005cee:	f7fb ff0f 	bl	8001b10 <HAL_GetTick>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005cf6:	6013      	str	r3, [r2, #0]
		break;
 8005cf8:	e072      	b.n	8005de0 <PlaneCube_Handle+0x2f0>
		if(layer_plane == 0)
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <PlaneCube_Handle+0x22e>
			layer_plane = 1;
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
			TransmitData(column_plane, layer_plane);
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4819      	ldr	r0, [pc, #100]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005d10:	f001 f8ba 	bl	8006e88 <TransmitData>
			timer = HAL_GetTick();
 8005d14:	f7fb fefc 	bl	8001b10 <HAL_GetTick>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005d1c:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick() - timer >= time_todo1)
 8005d1e:	f7fb fef7 	bl	8001b10 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <PlaneCube_Handle+0x278>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2264      	movs	r2, #100	; 0x64
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d359      	bcc.n	8005de4 <PlaneCube_Handle+0x2f4>
			if(way)
 8005d30:	4b0e      	ldr	r3, [pc, #56]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01f      	beq.n	8005d78 <PlaneCube_Handle+0x288>
				layer_plane <<= 1;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d42:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	480a      	ldr	r0, [pc, #40]	; (8005d74 <PlaneCube_Handle+0x284>)
 8005d4c:	f001 f89c 	bl	8006e88 <TransmitData>
				if(layer_plane == 0x80) way = 0;
 8005d50:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <PlaneCube_Handle+0x274>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d139      	bne.n	8005dcc <PlaneCube_Handle+0x2dc>
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <PlaneCube_Handle+0x27c>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e035      	b.n	8005dcc <PlaneCube_Handle+0x2dc>
 8005d60:	20000358 	.word	0x20000358
 8005d64:	20000360 	.word	0x20000360
 8005d68:	2000035c 	.word	0x2000035c
 8005d6c:	20000359 	.word	0x20000359
 8005d70:	2000036c 	.word	0x2000036c
 8005d74:	20000364 	.word	0x20000364
				layer_plane >>= 1;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <PlaneCube_Handle+0x300>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <PlaneCube_Handle+0x300>)
 8005d82:	701a      	strb	r2, [r3, #0]
				TransmitData(column_plane, layer_plane);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <PlaneCube_Handle+0x300>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	481a      	ldr	r0, [pc, #104]	; (8005df4 <PlaneCube_Handle+0x304>)
 8005d8c:	f001 f87c 	bl	8006e88 <TransmitData>
				if(layer_plane == 0x01)
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <PlaneCube_Handle+0x300>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d119      	bne.n	8005dcc <PlaneCube_Handle+0x2dc>
					for (int j = 0; j < 8; j++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	e007      	b.n	8005dae <PlaneCube_Handle+0x2be>
						column_plane[j] = 0;
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <PlaneCube_Handle+0x304>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3301      	adds	r3, #1
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b07      	cmp	r3, #7
 8005db2:	ddf4      	ble.n	8005d9e <PlaneCube_Handle+0x2ae>
					i = 0;
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <PlaneCube_Handle+0x308>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
					way = 1;
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <PlaneCube_Handle+0x30c>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]
					way_state = OX;
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <PlaneCube_Handle+0x310>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
					layer_plane = 0;
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <PlaneCube_Handle+0x300>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
			timer = HAL_GetTick();
 8005dcc:	f7fb fea0 	bl	8001b10 <HAL_GetTick>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	; (8005e04 <PlaneCube_Handle+0x314>)
 8005dd4:	6013      	str	r3, [r2, #0]
		break;
 8005dd6:	e005      	b.n	8005de4 <PlaneCube_Handle+0x2f4>
		break;
 8005dd8:	bf00      	nop
 8005dda:	e004      	b.n	8005de6 <PlaneCube_Handle+0x2f6>
		break;
 8005ddc:	bf00      	nop
 8005dde:	e002      	b.n	8005de6 <PlaneCube_Handle+0x2f6>
		break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <PlaneCube_Handle+0x2f6>
		break;
 8005de4:	bf00      	nop
	}
}
 8005de6:	bf00      	nop
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000360 	.word	0x20000360
 8005df4:	20000364 	.word	0x20000364
 8005df8:	2000036c 	.word	0x2000036c
 8005dfc:	20000359 	.word	0x20000359
 8005e00:	20000358 	.word	0x20000358
 8005e04:	2000035c 	.word	0x2000035c

08005e08 <PlaneCube_Set_State>:

void PlaneCube_Set_State(){
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	currentEffect = SWEEP_ALL_LEDS;
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <PlaneCube_Set_State+0x4c>)
 8005e10:	2202      	movs	r2, #2
 8005e12:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e007      	b.n	8005e2a <PlaneCube_Set_State+0x22>
	{
		column_plane[j] = 0;
 8005e1a:	4a0f      	ldr	r2, [pc, #60]	; (8005e58 <PlaneCube_Set_State+0x50>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 8; j++)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	ddf4      	ble.n	8005e1a <PlaneCube_Set_State+0x12>
	}
	i = 0;
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <PlaneCube_Set_State+0x54>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
	way = 1;
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <PlaneCube_Set_State+0x58>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
	layer_plane = 0;
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <PlaneCube_Set_State+0x5c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
	way_state = OX;
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <PlaneCube_Set_State+0x60>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000010 	.word	0x20000010
 8005e58:	20000364 	.word	0x20000364
 8005e5c:	2000036c 	.word	0x2000036c
 8005e60:	20000359 	.word	0x20000359
 8005e64:	20000360 	.word	0x20000360
 8005e68:	20000358 	.word	0x20000358

08005e6c <RandomRainCube_Handle>:
#include "random_rain_cube.h"
static uint8_t x,y,z;
uint32_t time_rain = 0;

void RandomRainCube_Handle()
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - 10 >= 50)
 8005e72:	f7fb fe4d 	bl	8001b10 <HAL_GetTick>
 8005e76:	4603      	mov	r3, r0
 8005e78:	3b0a      	subs	r3, #10
 8005e7a:	2b31      	cmp	r3, #49	; 0x31
 8005e7c:	d912      	bls.n	8005ea4 <RandomRainCube_Handle+0x38>
	{
			if (z == 0) z = 7;
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <RandomRainCube_Handle+0x22>
 8005e86:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005e88:	2207      	movs	r2, #7
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	e005      	b.n	8005e9a <RandomRainCube_Handle+0x2e>
			else z--;
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005e98:	701a      	strb	r2, [r3, #0]
			time_rain = HAL_GetTick();
 8005e9a:	f7fb fe39 	bl	8001b10 <HAL_GetTick>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <RandomRainCube_Handle+0xa8>)
 8005ea2:	6013      	str	r3, [r2, #0]
	}

	for (uint8_t n = 0; n < 10; n++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	71fb      	strb	r3, [r7, #7]
 8005ea8:	e029      	b.n	8005efe <RandomRainCube_Handle+0x92>
	{
		if (z == 7)
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b07      	cmp	r3, #7
 8005eb0:	d119      	bne.n	8005ee6 <RandomRainCube_Handle+0x7a>
		{
			x = rand() % 8;
 8005eb2:	f001 fa73 	bl	800739c <rand>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	425a      	negs	r2, r3
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	f002 0207 	and.w	r2, r2, #7
 8005ec2:	bf58      	it	pl
 8005ec4:	4253      	negpl	r3, r2
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <RandomRainCube_Handle+0xac>)
 8005eca:	701a      	strb	r2, [r3, #0]
			y = rand() % 8;
 8005ecc:	f001 fa66 	bl	800739c <rand>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	425a      	negs	r2, r3
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	f002 0207 	and.w	r2, r2, #7
 8005edc:	bf58      	it	pl
 8005ede:	4253      	negpl	r3, r2
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <RandomRainCube_Handle+0xb0>)
 8005ee4:	701a      	strb	r2, [r3, #0]
		}

		DisplayLed(x, y, z);
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <RandomRainCube_Handle+0xac>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <RandomRainCube_Handle+0xb0>)
 8005eec:	7811      	ldrb	r1, [r2, #0]
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <RandomRainCube_Handle+0xa4>)
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fae2 	bl	80054bc <DisplayLed>
	for (uint8_t n = 0; n < 10; n++)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	3301      	adds	r3, #1
 8005efc:	71fb      	strb	r3, [r7, #7]
 8005efe:	79fb      	ldrb	r3, [r7, #7]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d9d2      	bls.n	8005eaa <RandomRainCube_Handle+0x3e>
	}

}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000372 	.word	0x20000372
 8005f14:	20000374 	.word	0x20000374
 8005f18:	20000370 	.word	0x20000370
 8005f1c:	20000371 	.word	0x20000371

08005f20 <RandomRainCube_Set_State>:

void RandomRainCube_Set_State()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 8005f24:	f7fb fdf4 	bl	8001b10 <HAL_GetTick>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fa08 	bl	8007340 <srand>
	z = 7;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <RandomRainCube_Set_State+0x20>)
 8005f32:	2207      	movs	r2, #7
 8005f34:	701a      	strb	r2, [r3, #0]
	currentEffect = RANDOM_RAIN_CUBE;
 8005f36:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <RandomRainCube_Set_State+0x24>)
 8005f38:	2207      	movs	r2, #7
 8005f3a:	701a      	strb	r2, [r3, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000372 	.word	0x20000372
 8005f44:	20000010 	.word	0x20000010

08005f48 <SidewavesEffect_Handle>:
float xo; // Tọa độ điểm gốc O
float yo;
float r;

void SidewavesEffect_Handle()
{
 8005f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8005f50:	4b9b      	ldr	r3, [pc, #620]	; (80061c0 <SidewavesEffect_Handle+0x278>)
 8005f52:	4a9c      	ldr	r2, [pc, #624]	; (80061c4 <SidewavesEffect_Handle+0x27c>)
 8005f54:	601a      	str	r2, [r3, #0]
	T = 1000; // Chu kỳ
 8005f56:	4b9c      	ldr	r3, [pc, #624]	; (80061c8 <SidewavesEffect_Handle+0x280>)
 8005f58:	4a9c      	ldr	r2, [pc, #624]	; (80061cc <SidewavesEffect_Handle+0x284>)
 8005f5a:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8005f5c:	4b9c      	ldr	r3, [pc, #624]	; (80061d0 <SidewavesEffect_Handle+0x288>)
 8005f5e:	4a9d      	ldr	r2, [pc, #628]	; (80061d4 <SidewavesEffect_Handle+0x28c>)
 8005f60:	601a      	str	r2, [r3, #0]
	uint32_t t = HAL_GetTick(); // Lấy thời gian
 8005f62:	f7fb fdd5 	bl	8001b10 <HAL_GetTick>
 8005f66:	60b8      	str	r0, [r7, #8]
	xo = ro*cos(2*PI*t/To) + 3.5; // Cho điểm O quay
 8005f68:	4b98      	ldr	r3, [pc, #608]	; (80061cc <SidewavesEffect_Handle+0x284>)
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa fa54 	bl	8000418 <__aeabi_f2d>
 8005f70:	4604      	mov	r4, r0
 8005f72:	460d      	mov	r5, r1
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f7fa fa2d 	bl	80003d4 <__aeabi_ui2d>
 8005f7a:	a38f      	add	r3, pc, #572	; (adr r3, 80061b8 <SidewavesEffect_Handle+0x270>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa faa2 	bl	80004c8 <__aeabi_dmul>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4690      	mov	r8, r2
 8005f8a:	4699      	mov	r9, r3
 8005f8c:	4b92      	ldr	r3, [pc, #584]	; (80061d8 <SidewavesEffect_Handle+0x290>)
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fa fa42 	bl	8000418 <__aeabi_f2d>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	f7fa fbbe 	bl	800071c <__aeabi_ddiv>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f002 fa36 	bl	8008418 <cos>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa fa88 	bl	80004c8 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	4b85      	ldr	r3, [pc, #532]	; (80061dc <SidewavesEffect_Handle+0x294>)
 8005fc6:	f7fa f8c9 	bl	800015c <__adddf3>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fa fd71 	bl	8000ab8 <__aeabi_d2f>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4a81      	ldr	r2, [pc, #516]	; (80061e0 <SidewavesEffect_Handle+0x298>)
 8005fda:	6013      	str	r3, [r2, #0]
	yo = ro*sin(2*PI*t/To) + 3.5;
 8005fdc:	4b7b      	ldr	r3, [pc, #492]	; (80061cc <SidewavesEffect_Handle+0x284>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fa fa1a 	bl	8000418 <__aeabi_f2d>
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f7fa f9f3 	bl	80003d4 <__aeabi_ui2d>
 8005fee:	a372      	add	r3, pc, #456	; (adr r3, 80061b8 <SidewavesEffect_Handle+0x270>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fa68 	bl	80004c8 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4690      	mov	r8, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	4b75      	ldr	r3, [pc, #468]	; (80061d8 <SidewavesEffect_Handle+0x290>)
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa fa08 	bl	8000418 <__aeabi_f2d>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4640      	mov	r0, r8
 800600e:	4649      	mov	r1, r9
 8006010:	f7fa fb84 	bl	800071c <__aeabi_ddiv>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4610      	mov	r0, r2
 800601a:	4619      	mov	r1, r3
 800601c:	f002 fa42 	bl	80084a4 <sin>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fa4e 	bl	80004c8 <__aeabi_dmul>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4610      	mov	r0, r2
 8006032:	4619      	mov	r1, r3
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	4b68      	ldr	r3, [pc, #416]	; (80061dc <SidewavesEffect_Handle+0x294>)
 800603a:	f7fa f88f 	bl	800015c <__adddf3>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	f7fa fd37 	bl	8000ab8 <__aeabi_d2f>
 800604a:	4603      	mov	r3, r0
 800604c:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <SidewavesEffect_Handle+0x29c>)
 800604e:	6013      	str	r3, [r2, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e0a3      	b.n	800619e <SidewavesEffect_Handle+0x256>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8006056:	2300      	movs	r3, #0
 8006058:	73bb      	strb	r3, [r7, #14]
 800605a:	e099      	b.n	8006190 <SidewavesEffect_Handle+0x248>
	    {
//	        r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt(pow(x - xo, 2) + pow(y - yo, 2))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 800605c:	4b5c      	ldr	r3, [pc, #368]	; (80061d0 <SidewavesEffect_Handle+0x288>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa f9d9 	bl	8000418 <__aeabi_f2d>
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7fa f9b2 	bl	80003d4 <__aeabi_ui2d>
 8006070:	a351      	add	r3, pc, #324	; (adr r3, 80061b8 <SidewavesEffect_Handle+0x270>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa fa27 	bl	80004c8 <__aeabi_dmul>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4690      	mov	r8, r2
 8006080:	4699      	mov	r9, r3
 8006082:	4b51      	ldr	r3, [pc, #324]	; (80061c8 <SidewavesEffect_Handle+0x280>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7fa f9c6 	bl	8000418 <__aeabi_f2d>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa fb42 	bl	800071c <__aeabi_ddiv>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4692      	mov	sl, r2
 800609e:	469b      	mov	fp, r3
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa fe12 	bl	8000ccc <__aeabi_i2f>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b4d      	ldr	r3, [pc, #308]	; (80061e0 <SidewavesEffect_Handle+0x298>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fa fd55 	bl	8000b60 <__aeabi_fsub>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fa f9ad 	bl	8000418 <__aeabi_f2d>
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c6:	f002 fa33 	bl	8008530 <pow>
 80060ca:	4680      	mov	r8, r0
 80060cc:	4689      	mov	r9, r1
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fa fdfb 	bl	8000ccc <__aeabi_i2f>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <SidewavesEffect_Handle+0x29c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fa fd3e 	bl	8000b60 <__aeabi_fsub>
 80060e4:	4603      	mov	r3, r0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fa f996 	bl	8000418 <__aeabi_f2d>
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060f4:	f002 fa1c 	bl	8008530 <pow>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa f82c 	bl	800015c <__adddf3>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4610      	mov	r0, r2
 800610a:	4619      	mov	r1, r3
 800610c:	f002 fa78 	bl	8008600 <sqrt>
 8006110:	a329      	add	r3, pc, #164	; (adr r3, 80061b8 <SidewavesEffect_Handle+0x270>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa f9d7 	bl	80004c8 <__aeabi_dmul>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4690      	mov	r8, r2
 8006120:	4699      	mov	r9, r3
 8006122:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <SidewavesEffect_Handle+0x278>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa f976 	bl	8000418 <__aeabi_f2d>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4640      	mov	r0, r8
 8006132:	4649      	mov	r1, r9
 8006134:	f7fa faf2 	bl	800071c <__aeabi_ddiv>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4650      	mov	r0, sl
 800613e:	4659      	mov	r1, fp
 8006140:	f7fa f80a 	bl	8000158 <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	f002 f964 	bl	8008418 <cos>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4620      	mov	r0, r4
 8006156:	4629      	mov	r1, r5
 8006158:	f7fa f9b6 	bl	80004c8 <__aeabi_dmul>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <SidewavesEffect_Handle+0x2a0>)
 800616a:	f7f9 fff7 	bl	800015c <__adddf3>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4610      	mov	r0, r2
 8006174:	4619      	mov	r1, r3
 8006176:	f7fa fc7f 	bl	8000a78 <__aeabi_d2uiz>
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 800617e:	79fa      	ldrb	r2, [r7, #7]
 8006180:	7bf9      	ldrb	r1, [r7, #15]
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f999 	bl	80054bc <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	3301      	adds	r3, #1
 800618e:	73bb      	strb	r3, [r7, #14]
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b07      	cmp	r3, #7
 8006194:	f67f af62 	bls.w	800605c <SidewavesEffect_Handle+0x114>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	3301      	adds	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b07      	cmp	r3, #7
 80061a2:	f67f af58 	bls.w	8006056 <SidewavesEffect_Handle+0x10e>
	    }
	}
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061b2:	bf00      	nop
 80061b4:	f3af 8000 	nop.w
 80061b8:	51eb851f 	.word	0x51eb851f
 80061bc:	40191eb8 	.word	0x40191eb8
 80061c0:	20000378 	.word	0x20000378
 80061c4:	40e00000 	.word	0x40e00000
 80061c8:	2000037c 	.word	0x2000037c
 80061cc:	447a0000 	.word	0x447a0000
 80061d0:	20000380 	.word	0x20000380
 80061d4:	40600000 	.word	0x40600000
 80061d8:	45fa0000 	.word	0x45fa0000
 80061dc:	400c0000 	.word	0x400c0000
 80061e0:	20000384 	.word	0x20000384
 80061e4:	20000388 	.word	0x20000388
 80061e8:	40100000 	.word	0x40100000

080061ec <SidewavesEffect_Set_State>:

void SidewavesEffect_Set_State()
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <SidewavesEffect_Set_State+0x28>)
 80061f2:	4a09      	ldr	r2, [pc, #36]	; (8006218 <SidewavesEffect_Set_State+0x2c>)
 80061f4:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <SidewavesEffect_Set_State+0x30>)
 80061f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80061fc:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <SidewavesEffect_Set_State+0x34>)
 8006200:	4a08      	ldr	r2, [pc, #32]	; (8006224 <SidewavesEffect_Set_State+0x38>)
 8006202:	601a      	str	r2, [r3, #0]
	currentEffect = SIDE_WAVES_EFFECT;
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <SidewavesEffect_Set_State+0x3c>)
 8006206:	220a      	movs	r2, #10
 8006208:	701a      	strb	r2, [r3, #0]
	clearCube();
 800620a:	f7fe fadd 	bl	80047c8 <clearCube>
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000378 	.word	0x20000378
 8006218:	40e00000 	.word	0x40e00000
 800621c:	2000037c 	.word	0x2000037c
 8006220:	20000380 	.word	0x20000380
 8006224:	40600000 	.word	0x40600000
 8006228:	20000010 	.word	0x20000010

0800622c <SpiralCube_Handle>:
const uint8_t z = 8;
const uint32_t timePerColumn = 60;
uint32_t timeStart = 0;

void SpiralCube_Handle()
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
	switch (directRotate) {
 8006230:	4b22      	ldr	r3, [pc, #136]	; (80062bc <SpiralCube_Handle+0x90>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01f      	beq.n	8006278 <SpiralCube_Handle+0x4c>
 8006238:	2b01      	cmp	r3, #1
 800623a:	d13b      	bne.n	80062b4 <SpiralCube_Handle+0x88>
		case COUNTER_CLOCKWISE:
			switch (rollSize)
 800623c:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <SpiralCube_Handle+0x94>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d817      	bhi.n	8006274 <SpiralCube_Handle+0x48>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <SpiralCube_Handle+0x20>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	0800625d 	.word	0x0800625d
 8006250:	08006263 	.word	0x08006263
 8006254:	08006269 	.word	0x08006269
 8006258:	0800626f 	.word	0x0800626f
			{
				case ROLL_BIGGEST:
					RollBiggestCounterClockWise_Handle();
 800625c:	f000 f832 	bl	80062c4 <RollBiggestCounterClockWise_Handle>
					break;
 8006260:	e009      	b.n	8006276 <SpiralCube_Handle+0x4a>
				case ROLL_BIGGER:
					RollBiggerCounterClockWise_Handle();
 8006262:	f000 f8ef 	bl	8006444 <RollBiggerCounterClockWise_Handle>
					break;
 8006266:	e006      	b.n	8006276 <SpiralCube_Handle+0x4a>
				case ROLL_MEDIUM:
					RollMediumCounterClockWise_Handle();
 8006268:	f000 f9ac 	bl	80065c4 <RollMediumCounterClockWise_Handle>
					break;
 800626c:	e003      	b.n	8006276 <SpiralCube_Handle+0x4a>
				case ROLL_SMALL:
					RollSmallCounterClockWise_Handle();
 800626e:	f000 fa69 	bl	8006744 <RollSmallCounterClockWise_Handle>
					break;
 8006272:	e000      	b.n	8006276 <SpiralCube_Handle+0x4a>
				default:
					break;
 8006274:	bf00      	nop
			}
			break;
 8006276:	e01e      	b.n	80062b6 <SpiralCube_Handle+0x8a>
		case CLOCKWISE:
			switch (rollSize)
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <SpiralCube_Handle+0x94>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d817      	bhi.n	80062b0 <SpiralCube_Handle+0x84>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <SpiralCube_Handle+0x5c>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006299 	.word	0x08006299
 800628c:	0800629f 	.word	0x0800629f
 8006290:	080062a5 	.word	0x080062a5
 8006294:	080062ab 	.word	0x080062ab
			{
				case ROLL_BIGGEST:
					RollBiggestClockWise_Handle();
 8006298:	f000 faf2 	bl	8006880 <RollBiggestClockWise_Handle>
					break;
 800629c:	e009      	b.n	80062b2 <SpiralCube_Handle+0x86>
				case ROLL_BIGGER:
					RollBiggerClockWise_Handle();
 800629e:	f000 fbaf 	bl	8006a00 <RollBiggerClockWise_Handle>
					break;
 80062a2:	e006      	b.n	80062b2 <SpiralCube_Handle+0x86>
				case ROLL_MEDIUM:
					RollMediumClockWise_Handle();
 80062a4:	f000 fc6c 	bl	8006b80 <RollMediumClockWise_Handle>
					break;
 80062a8:	e003      	b.n	80062b2 <SpiralCube_Handle+0x86>
				case ROLL_SMALL:
					RollSmallClockWise_Handle();
 80062aa:	f000 fd29 	bl	8006d00 <RollSmallClockWise_Handle>
					break;
 80062ae:	e000      	b.n	80062b2 <SpiralCube_Handle+0x86>
				default:
					break;
 80062b0:	bf00      	nop
			}
			break;
 80062b2:	e000      	b.n	80062b6 <SpiralCube_Handle+0x8a>
		default:
			break;
 80062b4:	bf00      	nop
	}
}
 80062b6:	bf00      	nop
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	2000038e 	.word	0x2000038e
 80062c0:	2000038c 	.word	0x2000038c

080062c4 <RollBiggestCounterClockWise_Handle>:

void RollBiggestCounterClockWise_Handle()
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	switch (axisDirection)
 80062c8:	4b59      	ldr	r3, [pc, #356]	; (8006430 <RollBiggestCounterClockWise_Handle+0x16c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	f200 80a3 	bhi.w	8006418 <RollBiggestCounterClockWise_Handle+0x154>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <RollBiggestCounterClockWise_Handle+0x14>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	08006335 	.word	0x08006335
 80062e0:	0800637f 	.word	0x0800637f
 80062e4:	080063c9 	.word	0x080063c9
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80062e8:	f7fb fc12 	bl	8001b10 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b51      	ldr	r3, [pc, #324]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	223c      	movs	r2, #60	; 0x3c
 80062f6:	4293      	cmp	r3, r2
 80062f8:	f0c0 8090 	bcc.w	800641c <RollBiggestCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80062fc:	4b4e      	ldr	r3, [pc, #312]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	4a4e      	ldr	r2, [pc, #312]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 8006302:	7811      	ldrb	r1, [r2, #0]
 8006304:	2208      	movs	r2, #8
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff f8d8 	bl	80054bc <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 800630c:	4b4b      	ldr	r3, [pc, #300]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b07      	cmp	r3, #7
 8006312:	d103      	bne.n	800631c <RollBiggestCounterClockWise_Handle+0x58>
 8006314:	4b46      	ldr	r3, [pc, #280]	; (8006430 <RollBiggestCounterClockWise_Handle+0x16c>)
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e005      	b.n	8006328 <RollBiggestCounterClockWise_Handle+0x64>
				else y++;
 800631c:	4b47      	ldr	r3, [pc, #284]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	4b45      	ldr	r3, [pc, #276]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 8006326:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006328:	f7fb fbf2 	bl	8001b10 <HAL_GetTick>
 800632c:	4603      	mov	r3, r0
 800632e:	4a41      	ldr	r2, [pc, #260]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 8006330:	6013      	str	r3, [r2, #0]
			}
			break;
 8006332:	e073      	b.n	800641c <RollBiggestCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006334:	f7fb fbec 	bl	8001b10 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	223c      	movs	r2, #60	; 0x3c
 8006342:	4293      	cmp	r3, r2
 8006344:	d36c      	bcc.n	8006420 <RollBiggestCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 800634c:	7811      	ldrb	r1, [r2, #0]
 800634e:	2208      	movs	r2, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff f8b3 	bl	80054bc <DisplayLed>
				if (x == 7) axisDirection = Y_AXIS_2;
 8006356:	4b38      	ldr	r3, [pc, #224]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b07      	cmp	r3, #7
 800635c:	d103      	bne.n	8006366 <RollBiggestCounterClockWise_Handle+0xa2>
 800635e:	4b34      	ldr	r3, [pc, #208]	; (8006430 <RollBiggestCounterClockWise_Handle+0x16c>)
 8006360:	2202      	movs	r2, #2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e005      	b.n	8006372 <RollBiggestCounterClockWise_Handle+0xae>
				else x++;
 8006366:	4b34      	ldr	r3, [pc, #208]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4b32      	ldr	r3, [pc, #200]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006370:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006372:	f7fb fbcd 	bl	8001b10 <HAL_GetTick>
 8006376:	4603      	mov	r3, r0
 8006378:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 800637a:	6013      	str	r3, [r2, #0]
			}
			break;
 800637c:	e050      	b.n	8006420 <RollBiggestCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800637e:	f7fb fbc7 	bl	8001b10 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	4b2b      	ldr	r3, [pc, #172]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	223c      	movs	r2, #60	; 0x3c
 800638c:	4293      	cmp	r3, r2
 800638e:	d349      	bcc.n	8006424 <RollBiggestCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006390:	4b29      	ldr	r3, [pc, #164]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 8006396:	7811      	ldrb	r1, [r2, #0]
 8006398:	2208      	movs	r2, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f88e 	bl	80054bc <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 80063a0:	4b26      	ldr	r3, [pc, #152]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <RollBiggestCounterClockWise_Handle+0xec>
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <RollBiggestCounterClockWise_Handle+0x16c>)
 80063aa:	2203      	movs	r2, #3
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e005      	b.n	80063bc <RollBiggestCounterClockWise_Handle+0xf8>
				else y--;
 80063b0:	4b22      	ldr	r3, [pc, #136]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b20      	ldr	r3, [pc, #128]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 80063ba:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80063bc:	f7fb fba8 	bl	8001b10 <HAL_GetTick>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 80063c4:	6013      	str	r3, [r2, #0]
			}
			break;
 80063c6:	e02d      	b.n	8006424 <RollBiggestCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80063c8:	f7fb fba2 	bl	8001b10 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	4b19      	ldr	r3, [pc, #100]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	223c      	movs	r2, #60	; 0x3c
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d326      	bcc.n	8006428 <RollBiggestCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <RollBiggestCounterClockWise_Handle+0x178>)
 80063e0:	7811      	ldrb	r1, [r2, #0]
 80063e2:	2208      	movs	r2, #8
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff f869 	bl	80054bc <DisplayLed>
				if (x == 1)
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d106      	bne.n	8006400 <RollBiggestCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 80063f2:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <RollBiggestCounterClockWise_Handle+0x16c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGER;
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <RollBiggestCounterClockWise_Handle+0x17c>)
 80063fa:	2201      	movs	r2, #1
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e005      	b.n	800640c <RollBiggestCounterClockWise_Handle+0x148>
				}
				else x--;
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	3b01      	subs	r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <RollBiggestCounterClockWise_Handle+0x174>)
 800640a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800640c:	f7fb fb80 	bl	8001b10 <HAL_GetTick>
 8006410:	4603      	mov	r3, r0
 8006412:	4a08      	ldr	r2, [pc, #32]	; (8006434 <RollBiggestCounterClockWise_Handle+0x170>)
 8006414:	6013      	str	r3, [r2, #0]
			}
			break;
 8006416:	e007      	b.n	8006428 <RollBiggestCounterClockWise_Handle+0x164>
		default:
			break;
 8006418:	bf00      	nop
 800641a:	e006      	b.n	800642a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 800641c:	bf00      	nop
 800641e:	e004      	b.n	800642a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <RollBiggestCounterClockWise_Handle+0x166>
			break;
 8006428:	bf00      	nop
	}
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000038d 	.word	0x2000038d
 8006434:	20000394 	.word	0x20000394
 8006438:	2000038f 	.word	0x2000038f
 800643c:	20000390 	.word	0x20000390
 8006440:	2000038c 	.word	0x2000038c

08006444 <RollBiggerCounterClockWise_Handle>:

void RollBiggerCounterClockWise_Handle()
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
	switch (axisDirection)
 8006448:	4b59      	ldr	r3, [pc, #356]	; (80065b0 <RollBiggerCounterClockWise_Handle+0x16c>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b03      	cmp	r3, #3
 800644e:	f200 80a3 	bhi.w	8006598 <RollBiggerCounterClockWise_Handle+0x154>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <RollBiggerCounterClockWise_Handle+0x14>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006469 	.word	0x08006469
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064ff 	.word	0x080064ff
 8006464:	08006549 	.word	0x08006549
	{
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006468:	f7fb fb52 	bl	8001b10 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	223c      	movs	r2, #60	; 0x3c
 8006476:	4293      	cmp	r3, r2
 8006478:	f0c0 8090 	bcc.w	800659c <RollBiggerCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 800647c:	4b4e      	ldr	r3, [pc, #312]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 8006482:	7811      	ldrb	r1, [r2, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff f818 	bl	80054bc <DisplayLed>
				if (y  == 6) axisDirection = X_AXIS_1;
 800648c:	4b4b      	ldr	r3, [pc, #300]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b06      	cmp	r3, #6
 8006492:	d103      	bne.n	800649c <RollBiggerCounterClockWise_Handle+0x58>
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <RollBiggerCounterClockWise_Handle+0x16c>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e005      	b.n	80064a8 <RollBiggerCounterClockWise_Handle+0x64>
				else y++;
 800649c:	4b47      	ldr	r3, [pc, #284]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b45      	ldr	r3, [pc, #276]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 80064a6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80064a8:	f7fb fb32 	bl	8001b10 <HAL_GetTick>
 80064ac:	4603      	mov	r3, r0
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 80064b0:	6013      	str	r3, [r2, #0]
			}
			break;
 80064b2:	e073      	b.n	800659c <RollBiggerCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80064b4:	f7fb fb2c 	bl	8001b10 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	4b3e      	ldr	r3, [pc, #248]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	223c      	movs	r2, #60	; 0x3c
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d36c      	bcc.n	80065a0 <RollBiggerCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 80064c6:	4b3c      	ldr	r3, [pc, #240]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	4a3c      	ldr	r2, [pc, #240]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 80064cc:	7811      	ldrb	r1, [r2, #0]
 80064ce:	2208      	movs	r2, #8
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fff3 	bl	80054bc <DisplayLed>
				if (x  == 6) axisDirection = Y_AXIS_2;
 80064d6:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b06      	cmp	r3, #6
 80064dc:	d103      	bne.n	80064e6 <RollBiggerCounterClockWise_Handle+0xa2>
 80064de:	4b34      	ldr	r3, [pc, #208]	; (80065b0 <RollBiggerCounterClockWise_Handle+0x16c>)
 80064e0:	2202      	movs	r2, #2
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e005      	b.n	80064f2 <RollBiggerCounterClockWise_Handle+0xae>
				else x++;
 80064e6:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 80064f0:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80064f2:	f7fb fb0d 	bl	8001b10 <HAL_GetTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	4a2e      	ldr	r2, [pc, #184]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 80064fa:	6013      	str	r3, [r2, #0]
			}
			break;
 80064fc:	e050      	b.n	80065a0 <RollBiggerCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80064fe:	f7fb fb07 	bl	8001b10 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	223c      	movs	r2, #60	; 0x3c
 800650c:	4293      	cmp	r3, r2
 800650e:	d349      	bcc.n	80065a4 <RollBiggerCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	4a29      	ldr	r2, [pc, #164]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 8006516:	7811      	ldrb	r1, [r2, #0]
 8006518:	2208      	movs	r2, #8
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe ffce 	bl	80054bc <DisplayLed>
				if (y  == 1) axisDirection = X_AXIS_2;
 8006520:	4b26      	ldr	r3, [pc, #152]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d103      	bne.n	8006530 <RollBiggerCounterClockWise_Handle+0xec>
 8006528:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <RollBiggerCounterClockWise_Handle+0x16c>)
 800652a:	2203      	movs	r2, #3
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e005      	b.n	800653c <RollBiggerCounterClockWise_Handle+0xf8>
				else y--;
 8006530:	4b22      	ldr	r3, [pc, #136]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	4b20      	ldr	r3, [pc, #128]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 800653a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800653c:	f7fb fae8 	bl	8001b10 <HAL_GetTick>
 8006540:	4603      	mov	r3, r0
 8006542:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 8006544:	6013      	str	r3, [r2, #0]
			}
			break;
 8006546:	e02d      	b.n	80065a4 <RollBiggerCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006548:	f7fb fae2 	bl	8001b10 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	223c      	movs	r2, #60	; 0x3c
 8006556:	4293      	cmp	r3, r2
 8006558:	d326      	bcc.n	80065a8 <RollBiggerCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	; (80065bc <RollBiggerCounterClockWise_Handle+0x178>)
 8006560:	7811      	ldrb	r1, [r2, #0]
 8006562:	2208      	movs	r2, #8
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe ffa9 	bl	80054bc <DisplayLed>
				if (x  == 2)
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d106      	bne.n	8006580 <RollBiggerCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <RollBiggerCounterClockWise_Handle+0x16c>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <RollBiggerCounterClockWise_Handle+0x17c>)
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e005      	b.n	800658c <RollBiggerCounterClockWise_Handle+0x148>
				}
				else x--;
 8006580:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <RollBiggerCounterClockWise_Handle+0x174>)
 800658a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800658c:	f7fb fac0 	bl	8001b10 <HAL_GetTick>
 8006590:	4603      	mov	r3, r0
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <RollBiggerCounterClockWise_Handle+0x170>)
 8006594:	6013      	str	r3, [r2, #0]
			}
			break;
 8006596:	e007      	b.n	80065a8 <RollBiggerCounterClockWise_Handle+0x164>
		default:
			break;
 8006598:	bf00      	nop
 800659a:	e006      	b.n	80065aa <RollBiggerCounterClockWise_Handle+0x166>
			break;
 800659c:	bf00      	nop
 800659e:	e004      	b.n	80065aa <RollBiggerCounterClockWise_Handle+0x166>
			break;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <RollBiggerCounterClockWise_Handle+0x166>
			break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <RollBiggerCounterClockWise_Handle+0x166>
			break;
 80065a8:	bf00      	nop
	}
}
 80065aa:	bf00      	nop
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000038d 	.word	0x2000038d
 80065b4:	20000394 	.word	0x20000394
 80065b8:	2000038f 	.word	0x2000038f
 80065bc:	20000390 	.word	0x20000390
 80065c0:	2000038c 	.word	0x2000038c

080065c4 <RollMediumCounterClockWise_Handle>:

void RollMediumCounterClockWise_Handle()
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 80065c8:	4b59      	ldr	r3, [pc, #356]	; (8006730 <RollMediumCounterClockWise_Handle+0x16c>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	f200 80a3 	bhi.w	8006718 <RollMediumCounterClockWise_Handle+0x154>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <RollMediumCounterClockWise_Handle+0x14>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	08006635 	.word	0x08006635
 80065e0:	0800667f 	.word	0x0800667f
 80065e4:	080066c9 	.word	0x080066c9
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80065e8:	f7fb fa92 	bl	8001b10 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b51      	ldr	r3, [pc, #324]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	223c      	movs	r2, #60	; 0x3c
 80065f6:	4293      	cmp	r3, r2
 80065f8:	f0c0 8090 	bcc.w	800671c <RollMediumCounterClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80065fc:	4b4e      	ldr	r3, [pc, #312]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	4a4e      	ldr	r2, [pc, #312]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 8006602:	7811      	ldrb	r1, [r2, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe ff58 	bl	80054bc <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 800660c:	4b4b      	ldr	r3, [pc, #300]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b05      	cmp	r3, #5
 8006612:	d103      	bne.n	800661c <RollMediumCounterClockWise_Handle+0x58>
 8006614:	4b46      	ldr	r3, [pc, #280]	; (8006730 <RollMediumCounterClockWise_Handle+0x16c>)
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e005      	b.n	8006628 <RollMediumCounterClockWise_Handle+0x64>
				else y++;
 800661c:	4b47      	ldr	r3, [pc, #284]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	4b45      	ldr	r3, [pc, #276]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 8006626:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006628:	f7fb fa72 	bl	8001b10 <HAL_GetTick>
 800662c:	4603      	mov	r3, r0
 800662e:	4a41      	ldr	r2, [pc, #260]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 8006630:	6013      	str	r3, [r2, #0]
			}
			break;
 8006632:	e073      	b.n	800671c <RollMediumCounterClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 8006634:	f7fb fa6c 	bl	8001b10 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	223c      	movs	r2, #60	; 0x3c
 8006642:	4293      	cmp	r3, r2
 8006644:	d36c      	bcc.n	8006720 <RollMediumCounterClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006646:	4b3c      	ldr	r3, [pc, #240]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	4a3c      	ldr	r2, [pc, #240]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 800664c:	7811      	ldrb	r1, [r2, #0]
 800664e:	2208      	movs	r2, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe ff33 	bl	80054bc <DisplayLed>
				if (x  == 5) axisDirection = Y_AXIS_2;
 8006656:	4b38      	ldr	r3, [pc, #224]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b05      	cmp	r3, #5
 800665c:	d103      	bne.n	8006666 <RollMediumCounterClockWise_Handle+0xa2>
 800665e:	4b34      	ldr	r3, [pc, #208]	; (8006730 <RollMediumCounterClockWise_Handle+0x16c>)
 8006660:	2202      	movs	r2, #2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	e005      	b.n	8006672 <RollMediumCounterClockWise_Handle+0xae>
				else x++;
 8006666:	4b34      	ldr	r3, [pc, #208]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006670:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006672:	f7fb fa4d 	bl	8001b10 <HAL_GetTick>
 8006676:	4603      	mov	r3, r0
 8006678:	4a2e      	ldr	r2, [pc, #184]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 800667a:	6013      	str	r3, [r2, #0]
			}
			break;
 800667c:	e050      	b.n	8006720 <RollMediumCounterClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800667e:	f7fb fa47 	bl	8001b10 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	223c      	movs	r2, #60	; 0x3c
 800668c:	4293      	cmp	r3, r2
 800668e:	d349      	bcc.n	8006724 <RollMediumCounterClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006690:	4b29      	ldr	r3, [pc, #164]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4a29      	ldr	r2, [pc, #164]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 8006696:	7811      	ldrb	r1, [r2, #0]
 8006698:	2208      	movs	r2, #8
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe ff0e 	bl	80054bc <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 80066a0:	4b26      	ldr	r3, [pc, #152]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d103      	bne.n	80066b0 <RollMediumCounterClockWise_Handle+0xec>
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <RollMediumCounterClockWise_Handle+0x16c>)
 80066aa:	2203      	movs	r2, #3
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e005      	b.n	80066bc <RollMediumCounterClockWise_Handle+0xf8>
				else y--;
 80066b0:	4b22      	ldr	r3, [pc, #136]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	4b20      	ldr	r3, [pc, #128]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 80066ba:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80066bc:	f7fb fa28 	bl	8001b10 <HAL_GetTick>
 80066c0:	4603      	mov	r3, r0
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 80066c4:	6013      	str	r3, [r2, #0]
			}
			break;
 80066c6:	e02d      	b.n	8006724 <RollMediumCounterClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80066c8:	f7fb fa22 	bl	8001b10 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b19      	ldr	r3, [pc, #100]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	223c      	movs	r2, #60	; 0x3c
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d326      	bcc.n	8006728 <RollMediumCounterClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 80066da:	4b17      	ldr	r3, [pc, #92]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4a17      	ldr	r2, [pc, #92]	; (800673c <RollMediumCounterClockWise_Handle+0x178>)
 80066e0:	7811      	ldrb	r1, [r2, #0]
 80066e2:	2208      	movs	r2, #8
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe fee9 	bl	80054bc <DisplayLed>
				if (x  == 3)
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d106      	bne.n	8006700 <RollMediumCounterClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <RollMediumCounterClockWise_Handle+0x16c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_SMALL;
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <RollMediumCounterClockWise_Handle+0x17c>)
 80066fa:	2203      	movs	r2, #3
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e005      	b.n	800670c <RollMediumCounterClockWise_Handle+0x148>
				}
				else x--;
 8006700:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	3b01      	subs	r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <RollMediumCounterClockWise_Handle+0x174>)
 800670a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800670c:	f7fb fa00 	bl	8001b10 <HAL_GetTick>
 8006710:	4603      	mov	r3, r0
 8006712:	4a08      	ldr	r2, [pc, #32]	; (8006734 <RollMediumCounterClockWise_Handle+0x170>)
 8006714:	6013      	str	r3, [r2, #0]
			}
			break;
 8006716:	e007      	b.n	8006728 <RollMediumCounterClockWise_Handle+0x164>

		default:
			break;
 8006718:	bf00      	nop
 800671a:	e006      	b.n	800672a <RollMediumCounterClockWise_Handle+0x166>
			break;
 800671c:	bf00      	nop
 800671e:	e004      	b.n	800672a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8006720:	bf00      	nop
 8006722:	e002      	b.n	800672a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8006724:	bf00      	nop
 8006726:	e000      	b.n	800672a <RollMediumCounterClockWise_Handle+0x166>
			break;
 8006728:	bf00      	nop
	}
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	2000038d 	.word	0x2000038d
 8006734:	20000394 	.word	0x20000394
 8006738:	2000038f 	.word	0x2000038f
 800673c:	20000390 	.word	0x20000390
 8006740:	2000038c 	.word	0x2000038c

08006744 <RollSmallCounterClockWise_Handle>:

void RollSmallCounterClockWise_Handle()
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006748:	4b47      	ldr	r3, [pc, #284]	; (8006868 <RollSmallCounterClockWise_Handle+0x124>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d050      	beq.n	80067f2 <RollSmallCounterClockWise_Handle+0xae>
 8006750:	2b02      	cmp	r3, #2
 8006752:	dc7f      	bgt.n	8006854 <RollSmallCounterClockWise_Handle+0x110>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <RollSmallCounterClockWise_Handle+0x1a>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d025      	beq.n	80067a8 <RollSmallCounterClockWise_Handle+0x64>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 800675c:	e07a      	b.n	8006854 <RollSmallCounterClockWise_Handle+0x110>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 800675e:	f7fb f9d7 	bl	8001b10 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	4b41      	ldr	r3, [pc, #260]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	223c      	movs	r2, #60	; 0x3c
 800676c:	4293      	cmp	r3, r2
 800676e:	d373      	bcc.n	8006858 <RollSmallCounterClockWise_Handle+0x114>
				DisplayLed(x, y, z);
 8006770:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4a3f      	ldr	r2, [pc, #252]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006776:	7811      	ldrb	r1, [r2, #0]
 8006778:	2208      	movs	r2, #8
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fe9e 	bl	80054bc <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8006780:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d103      	bne.n	8006790 <RollSmallCounterClockWise_Handle+0x4c>
 8006788:	4b37      	ldr	r3, [pc, #220]	; (8006868 <RollSmallCounterClockWise_Handle+0x124>)
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	e005      	b.n	800679c <RollSmallCounterClockWise_Handle+0x58>
				else y++ ;
 8006790:	4b38      	ldr	r3, [pc, #224]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	4b36      	ldr	r3, [pc, #216]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 800679a:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800679c:	f7fb f9b8 	bl	8001b10 <HAL_GetTick>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4a32      	ldr	r2, [pc, #200]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 80067a4:	6013      	str	r3, [r2, #0]
			break;
 80067a6:	e057      	b.n	8006858 <RollSmallCounterClockWise_Handle+0x114>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80067a8:	f7fb f9b2 	bl	8001b10 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b2f      	ldr	r3, [pc, #188]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	223c      	movs	r2, #60	; 0x3c
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d350      	bcc.n	800685c <RollSmallCounterClockWise_Handle+0x118>
				DisplayLed(x, y, z);
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4a2d      	ldr	r2, [pc, #180]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 80067c0:	7811      	ldrb	r1, [r2, #0]
 80067c2:	2208      	movs	r2, #8
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fe79 	bl	80054bc <DisplayLed>
				if (x  == 4) axisDirection = Y_AXIS_2;
 80067ca:	4b29      	ldr	r3, [pc, #164]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d103      	bne.n	80067da <RollSmallCounterClockWise_Handle+0x96>
 80067d2:	4b25      	ldr	r3, [pc, #148]	; (8006868 <RollSmallCounterClockWise_Handle+0x124>)
 80067d4:	2202      	movs	r2, #2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e005      	b.n	80067e6 <RollSmallCounterClockWise_Handle+0xa2>
				else x++;
 80067da:	4b25      	ldr	r3, [pc, #148]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	4b23      	ldr	r3, [pc, #140]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 80067e4:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80067e6:	f7fb f993 	bl	8001b10 <HAL_GetTick>
 80067ea:	4603      	mov	r3, r0
 80067ec:	4a1f      	ldr	r2, [pc, #124]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 80067ee:	6013      	str	r3, [r2, #0]
			break;
 80067f0:	e034      	b.n	800685c <RollSmallCounterClockWise_Handle+0x118>
			if (HAL_GetTick() - timeStart  >= timePerColumn)
 80067f2:	f7fb f98d 	bl	8001b10 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b1c      	ldr	r3, [pc, #112]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	223c      	movs	r2, #60	; 0x3c
 8006800:	4293      	cmp	r3, r2
 8006802:	d32d      	bcc.n	8006860 <RollSmallCounterClockWise_Handle+0x11c>
				DisplayLed(x, y, z);
 8006804:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 800680a:	7811      	ldrb	r1, [r2, #0]
 800680c:	2208      	movs	r2, #8
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fe54 	bl	80054bc <DisplayLed>
				if (y == 3)
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d10f      	bne.n	800683c <RollSmallCounterClockWise_Handle+0xf8>
					directRotate = CLOCKWISE;
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <RollSmallCounterClockWise_Handle+0x134>)
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <RollSmallCounterClockWise_Handle+0x124>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <RollSmallCounterClockWise_Handle+0x138>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
					y = 0;
 800682e:	4b11      	ldr	r3, [pc, #68]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
					x = 7;
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <RollSmallCounterClockWise_Handle+0x12c>)
 8006836:	2207      	movs	r2, #7
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e005      	b.n	8006848 <RollSmallCounterClockWise_Handle+0x104>
				else y--;
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <RollSmallCounterClockWise_Handle+0x130>)
 8006846:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006848:	f7fb f962 	bl	8001b10 <HAL_GetTick>
 800684c:	4603      	mov	r3, r0
 800684e:	4a07      	ldr	r2, [pc, #28]	; (800686c <RollSmallCounterClockWise_Handle+0x128>)
 8006850:	6013      	str	r3, [r2, #0]
			break;
 8006852:	e005      	b.n	8006860 <RollSmallCounterClockWise_Handle+0x11c>
			break;
 8006854:	bf00      	nop
 8006856:	e004      	b.n	8006862 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8006858:	bf00      	nop
 800685a:	e002      	b.n	8006862 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 800685c:	bf00      	nop
 800685e:	e000      	b.n	8006862 <RollSmallCounterClockWise_Handle+0x11e>
			break;
 8006860:	bf00      	nop
	}
}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	2000038d 	.word	0x2000038d
 800686c:	20000394 	.word	0x20000394
 8006870:	2000038f 	.word	0x2000038f
 8006874:	20000390 	.word	0x20000390
 8006878:	2000038e 	.word	0x2000038e
 800687c:	2000038c 	.word	0x2000038c

08006880 <RollBiggestClockWise_Handle>:

void RollBiggestClockWise_Handle()
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006884:	4b59      	ldr	r3, [pc, #356]	; (80069ec <RollBiggestClockWise_Handle+0x16c>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b03      	cmp	r3, #3
 800688a:	f200 80a3 	bhi.w	80069d4 <RollBiggestClockWise_Handle+0x154>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <RollBiggestClockWise_Handle+0x14>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068f1 	.word	0x080068f1
 800689c:	0800693b 	.word	0x0800693b
 80068a0:	08006985 	.word	0x08006985
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80068a4:	f7fb f934 	bl	8001b10 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	4b51      	ldr	r3, [pc, #324]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	223c      	movs	r2, #60	; 0x3c
 80068b2:	4293      	cmp	r3, r2
 80068b4:	f0c0 8090 	bcc.w	80069d8 <RollBiggestClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 80068b8:	4b4e      	ldr	r3, [pc, #312]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4a4e      	ldr	r2, [pc, #312]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 80068be:	7811      	ldrb	r1, [r2, #0]
 80068c0:	2208      	movs	r2, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fdfa 	bl	80054bc <DisplayLed>
				if (y == 7) axisDirection = X_AXIS_1;
 80068c8:	4b4b      	ldr	r3, [pc, #300]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b07      	cmp	r3, #7
 80068ce:	d103      	bne.n	80068d8 <RollBiggestClockWise_Handle+0x58>
 80068d0:	4b46      	ldr	r3, [pc, #280]	; (80069ec <RollBiggestClockWise_Handle+0x16c>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e005      	b.n	80068e4 <RollBiggestClockWise_Handle+0x64>
				else y++;
 80068d8:	4b47      	ldr	r3, [pc, #284]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b45      	ldr	r3, [pc, #276]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 80068e2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80068e4:	f7fb f914 	bl	8001b10 <HAL_GetTick>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4a41      	ldr	r2, [pc, #260]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 80068ec:	6013      	str	r3, [r2, #0]
			}
			break;
 80068ee:	e073      	b.n	80069d8 <RollBiggestClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 80068f0:	f7fb f90e 	bl	8001b10 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b3e      	ldr	r3, [pc, #248]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	223c      	movs	r2, #60	; 0x3c
 80068fe:	4293      	cmp	r3, r2
 8006900:	d36c      	bcc.n	80069dc <RollBiggestClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006902:	4b3c      	ldr	r3, [pc, #240]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	4a3c      	ldr	r2, [pc, #240]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 8006908:	7811      	ldrb	r1, [r2, #0]
 800690a:	2208      	movs	r2, #8
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fdd5 	bl	80054bc <DisplayLed>
				if (x == 0) axisDirection = Y_AXIS_2;
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <RollBiggestClockWise_Handle+0xa2>
 800691a:	4b34      	ldr	r3, [pc, #208]	; (80069ec <RollBiggestClockWise_Handle+0x16c>)
 800691c:	2202      	movs	r2, #2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e005      	b.n	800692e <RollBiggestClockWise_Handle+0xae>
				else x--;
 8006922:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b32      	ldr	r3, [pc, #200]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 800692c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 800692e:	f7fb f8ef 	bl	8001b10 <HAL_GetTick>
 8006932:	4603      	mov	r3, r0
 8006934:	4a2e      	ldr	r2, [pc, #184]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 8006936:	6013      	str	r3, [r2, #0]
			}
			break;
 8006938:	e050      	b.n	80069dc <RollBiggestClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 800693a:	f7fb f8e9 	bl	8001b10 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	4b2b      	ldr	r3, [pc, #172]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	223c      	movs	r2, #60	; 0x3c
 8006948:	4293      	cmp	r3, r2
 800694a:	d349      	bcc.n	80069e0 <RollBiggestClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 800694c:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 8006952:	7811      	ldrb	r1, [r2, #0]
 8006954:	2208      	movs	r2, #8
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fdb0 	bl	80054bc <DisplayLed>
				if (y == 0) axisDirection = X_AXIS_2;
 800695c:	4b26      	ldr	r3, [pc, #152]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <RollBiggestClockWise_Handle+0xec>
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <RollBiggestClockWise_Handle+0x16c>)
 8006966:	2203      	movs	r2, #3
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e005      	b.n	8006978 <RollBiggestClockWise_Handle+0xf8>
				else y--;
 800696c:	4b22      	ldr	r3, [pc, #136]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	3b01      	subs	r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 8006976:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006978:	f7fb f8ca 	bl	8001b10 <HAL_GetTick>
 800697c:	4603      	mov	r3, r0
 800697e:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 8006980:	6013      	str	r3, [r2, #0]
			}
			break;
 8006982:	e02d      	b.n	80069e0 <RollBiggestClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006984:	f7fb f8c4 	bl	8001b10 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	223c      	movs	r2, #60	; 0x3c
 8006992:	4293      	cmp	r3, r2
 8006994:	d326      	bcc.n	80069e4 <RollBiggestClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <RollBiggestClockWise_Handle+0x178>)
 800699c:	7811      	ldrb	r1, [r2, #0]
 800699e:	2208      	movs	r2, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fd8b 	bl	80054bc <DisplayLed>
				if (x == 6)
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	d106      	bne.n	80069bc <RollBiggestClockWise_Handle+0x13c>
				{
					rollSize = ROLL_BIGGER;
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <RollBiggestClockWise_Handle+0x17c>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <RollBiggestClockWise_Handle+0x16c>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e005      	b.n	80069c8 <RollBiggestClockWise_Handle+0x148>
				}
				else x++;
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <RollBiggestClockWise_Handle+0x174>)
 80069c6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 80069c8:	f7fb f8a2 	bl	8001b10 <HAL_GetTick>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <RollBiggestClockWise_Handle+0x170>)
 80069d0:	6013      	str	r3, [r2, #0]
			}
			break;
 80069d2:	e007      	b.n	80069e4 <RollBiggestClockWise_Handle+0x164>
		default:
			break;
 80069d4:	bf00      	nop
 80069d6:	e006      	b.n	80069e6 <RollBiggestClockWise_Handle+0x166>
			break;
 80069d8:	bf00      	nop
 80069da:	e004      	b.n	80069e6 <RollBiggestClockWise_Handle+0x166>
			break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <RollBiggestClockWise_Handle+0x166>
			break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <RollBiggestClockWise_Handle+0x166>
			break;
 80069e4:	bf00      	nop
	}
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2000038d 	.word	0x2000038d
 80069f0:	20000394 	.word	0x20000394
 80069f4:	2000038f 	.word	0x2000038f
 80069f8:	20000390 	.word	0x20000390
 80069fc:	2000038c 	.word	0x2000038c

08006a00 <RollBiggerClockWise_Handle>:

void RollBiggerClockWise_Handle()
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006a04:	4b59      	ldr	r3, [pc, #356]	; (8006b6c <RollBiggerClockWise_Handle+0x16c>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	f200 80a3 	bhi.w	8006b54 <RollBiggerClockWise_Handle+0x154>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <RollBiggerClockWise_Handle+0x14>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	08006abb 	.word	0x08006abb
 8006a20:	08006b05 	.word	0x08006b05
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006a24:	f7fb f874 	bl	8001b10 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	4b51      	ldr	r3, [pc, #324]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	223c      	movs	r2, #60	; 0x3c
 8006a32:	4293      	cmp	r3, r2
 8006a34:	f0c0 8090 	bcc.w	8006b58 <RollBiggerClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8006a38:	4b4e      	ldr	r3, [pc, #312]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	4a4e      	ldr	r2, [pc, #312]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006a3e:	7811      	ldrb	r1, [r2, #0]
 8006a40:	2208      	movs	r2, #8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fd3a 	bl	80054bc <DisplayLed>
				if (y == 6) axisDirection = X_AXIS_1;
 8006a48:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d103      	bne.n	8006a58 <RollBiggerClockWise_Handle+0x58>
 8006a50:	4b46      	ldr	r3, [pc, #280]	; (8006b6c <RollBiggerClockWise_Handle+0x16c>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e005      	b.n	8006a64 <RollBiggerClockWise_Handle+0x64>
				else y++;
 8006a58:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	4b45      	ldr	r3, [pc, #276]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006a62:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006a64:	f7fb f854 	bl	8001b10 <HAL_GetTick>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	4a41      	ldr	r2, [pc, #260]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006a6c:	6013      	str	r3, [r2, #0]
			}
			break;
 8006a6e:	e073      	b.n	8006b58 <RollBiggerClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006a70:	f7fb f84e 	bl	8001b10 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	223c      	movs	r2, #60	; 0x3c
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d36c      	bcc.n	8006b5c <RollBiggerClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006a82:	4b3c      	ldr	r3, [pc, #240]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006a88:	7811      	ldrb	r1, [r2, #0]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fd15 	bl	80054bc <DisplayLed>
				if (x == 1) axisDirection = Y_AXIS_2;
 8006a92:	4b38      	ldr	r3, [pc, #224]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d103      	bne.n	8006aa2 <RollBiggerClockWise_Handle+0xa2>
 8006a9a:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <RollBiggerClockWise_Handle+0x16c>)
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	e005      	b.n	8006aae <RollBiggerClockWise_Handle+0xae>
				else x--;
 8006aa2:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b32      	ldr	r3, [pc, #200]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006aac:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006aae:	f7fb f82f 	bl	8001b10 <HAL_GetTick>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006ab6:	6013      	str	r3, [r2, #0]
			}
			break;
 8006ab8:	e050      	b.n	8006b5c <RollBiggerClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006aba:	f7fb f829 	bl	8001b10 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	223c      	movs	r2, #60	; 0x3c
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d349      	bcc.n	8006b60 <RollBiggerClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006acc:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006ad2:	7811      	ldrb	r1, [r2, #0]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fcf0 	bl	80054bc <DisplayLed>
				if (y == 1) axisDirection = X_AXIS_2;
 8006adc:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d103      	bne.n	8006aec <RollBiggerClockWise_Handle+0xec>
 8006ae4:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <RollBiggerClockWise_Handle+0x16c>)
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e005      	b.n	8006af8 <RollBiggerClockWise_Handle+0xf8>
				else y--;
 8006aec:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	4b20      	ldr	r3, [pc, #128]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006af6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006af8:	f7fb f80a 	bl	8001b10 <HAL_GetTick>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006b00:	6013      	str	r3, [r2, #0]
			}
			break;
 8006b02:	e02d      	b.n	8006b60 <RollBiggerClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006b04:	f7fb f804 	bl	8001b10 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	223c      	movs	r2, #60	; 0x3c
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d326      	bcc.n	8006b64 <RollBiggerClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8006b16:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <RollBiggerClockWise_Handle+0x178>)
 8006b1c:	7811      	ldrb	r1, [r2, #0]
 8006b1e:	2208      	movs	r2, #8
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fccb 	bl	80054bc <DisplayLed>
				if (x == 5)
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	d106      	bne.n	8006b3c <RollBiggerClockWise_Handle+0x13c>
				{
					axisDirection = Y_AXIS_1;
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <RollBiggerClockWise_Handle+0x16c>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_MEDIUM;
 8006b34:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <RollBiggerClockWise_Handle+0x17c>)
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e005      	b.n	8006b48 <RollBiggerClockWise_Handle+0x148>
				}
				else x++;
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <RollBiggerClockWise_Handle+0x174>)
 8006b46:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006b48:	f7fa ffe2 	bl	8001b10 <HAL_GetTick>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4a08      	ldr	r2, [pc, #32]	; (8006b70 <RollBiggerClockWise_Handle+0x170>)
 8006b50:	6013      	str	r3, [r2, #0]
			}
			break;
 8006b52:	e007      	b.n	8006b64 <RollBiggerClockWise_Handle+0x164>
		default:
			break;
 8006b54:	bf00      	nop
 8006b56:	e006      	b.n	8006b66 <RollBiggerClockWise_Handle+0x166>
			break;
 8006b58:	bf00      	nop
 8006b5a:	e004      	b.n	8006b66 <RollBiggerClockWise_Handle+0x166>
			break;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <RollBiggerClockWise_Handle+0x166>
			break;
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <RollBiggerClockWise_Handle+0x166>
			break;
 8006b64:	bf00      	nop
	}
}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000038d 	.word	0x2000038d
 8006b70:	20000394 	.word	0x20000394
 8006b74:	2000038f 	.word	0x2000038f
 8006b78:	20000390 	.word	0x20000390
 8006b7c:	2000038c 	.word	0x2000038c

08006b80 <RollMediumClockWise_Handle>:

void RollMediumClockWise_Handle()
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <RollMediumClockWise_Handle+0x16c>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	f200 80a3 	bhi.w	8006cd4 <RollMediumClockWise_Handle+0x154>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <RollMediumClockWise_Handle+0x14>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bf1 	.word	0x08006bf1
 8006b9c:	08006c3b 	.word	0x08006c3b
 8006ba0:	08006c85 	.word	0x08006c85
		case Y_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006ba4:	f7fa ffb4 	bl	8001b10 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	223c      	movs	r2, #60	; 0x3c
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	f0c0 8090 	bcc.w	8006cd8 <RollMediumClockWise_Handle+0x158>
			{
				DisplayLed(x, y, z);
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	4a4e      	ldr	r2, [pc, #312]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006bbe:	7811      	ldrb	r1, [r2, #0]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fc7a 	bl	80054bc <DisplayLed>
				if (y == 5) axisDirection = X_AXIS_1;
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d103      	bne.n	8006bd8 <RollMediumClockWise_Handle+0x58>
 8006bd0:	4b46      	ldr	r3, [pc, #280]	; (8006cec <RollMediumClockWise_Handle+0x16c>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e005      	b.n	8006be4 <RollMediumClockWise_Handle+0x64>
				else y++;
 8006bd8:	4b47      	ldr	r3, [pc, #284]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	4b45      	ldr	r3, [pc, #276]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006be2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006be4:	f7fa ff94 	bl	8001b10 <HAL_GetTick>
 8006be8:	4603      	mov	r3, r0
 8006bea:	4a41      	ldr	r2, [pc, #260]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006bec:	6013      	str	r3, [r2, #0]
			}
			break;
 8006bee:	e073      	b.n	8006cd8 <RollMediumClockWise_Handle+0x158>

		case X_AXIS_1:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006bf0:	f7fa ff8e 	bl	8001b10 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	223c      	movs	r2, #60	; 0x3c
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d36c      	bcc.n	8006cdc <RollMediumClockWise_Handle+0x15c>
			{
				DisplayLed(x, y, z);
 8006c02:	4b3c      	ldr	r3, [pc, #240]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	4a3c      	ldr	r2, [pc, #240]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c08:	7811      	ldrb	r1, [r2, #0]
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fc55 	bl	80054bc <DisplayLed>
				if (x == 2) axisDirection = Y_AXIS_2;
 8006c12:	4b38      	ldr	r3, [pc, #224]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d103      	bne.n	8006c22 <RollMediumClockWise_Handle+0xa2>
 8006c1a:	4b34      	ldr	r3, [pc, #208]	; (8006cec <RollMediumClockWise_Handle+0x16c>)
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e005      	b.n	8006c2e <RollMediumClockWise_Handle+0xae>
				else x--;
 8006c22:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c2c:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006c2e:	f7fa ff6f 	bl	8001b10 <HAL_GetTick>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a2e      	ldr	r2, [pc, #184]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006c36:	6013      	str	r3, [r2, #0]
			}
			break;
 8006c38:	e050      	b.n	8006cdc <RollMediumClockWise_Handle+0x15c>

		case Y_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006c3a:	f7fa ff69 	bl	8001b10 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	223c      	movs	r2, #60	; 0x3c
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d349      	bcc.n	8006ce0 <RollMediumClockWise_Handle+0x160>
			{
				DisplayLed(x, y, z);
 8006c4c:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	4a29      	ldr	r2, [pc, #164]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c52:	7811      	ldrb	r1, [r2, #0]
 8006c54:	2208      	movs	r2, #8
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fc30 	bl	80054bc <DisplayLed>
				if (y == 2) axisDirection = X_AXIS_2;
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d103      	bne.n	8006c6c <RollMediumClockWise_Handle+0xec>
 8006c64:	4b21      	ldr	r3, [pc, #132]	; (8006cec <RollMediumClockWise_Handle+0x16c>)
 8006c66:	2203      	movs	r2, #3
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e005      	b.n	8006c78 <RollMediumClockWise_Handle+0xf8>
				else y--;
 8006c6c:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c76:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006c78:	f7fa ff4a 	bl	8001b10 <HAL_GetTick>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006c80:	6013      	str	r3, [r2, #0]
			}
			break;
 8006c82:	e02d      	b.n	8006ce0 <RollMediumClockWise_Handle+0x160>

		case X_AXIS_2:
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006c84:	f7fa ff44 	bl	8001b10 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	223c      	movs	r2, #60	; 0x3c
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d326      	bcc.n	8006ce4 <RollMediumClockWise_Handle+0x164>
			{
				DisplayLed(x, y, z);
 8006c96:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <RollMediumClockWise_Handle+0x178>)
 8006c9c:	7811      	ldrb	r1, [r2, #0]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fc0b 	bl	80054bc <DisplayLed>
				if (x == 4)
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d106      	bne.n	8006cbc <RollMediumClockWise_Handle+0x13c>
				{
					rollSize = ROLL_SMALL;
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <RollMediumClockWise_Handle+0x17c>)
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	701a      	strb	r2, [r3, #0]
					axisDirection = Y_AXIS_1;
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <RollMediumClockWise_Handle+0x16c>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	e005      	b.n	8006cc8 <RollMediumClockWise_Handle+0x148>
				}
				else x++;
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <RollMediumClockWise_Handle+0x174>)
 8006cc6:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006cc8:	f7fa ff22 	bl	8001b10 <HAL_GetTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <RollMediumClockWise_Handle+0x170>)
 8006cd0:	6013      	str	r3, [r2, #0]
			}
			break;
 8006cd2:	e007      	b.n	8006ce4 <RollMediumClockWise_Handle+0x164>
		default:
			break;
 8006cd4:	bf00      	nop
 8006cd6:	e006      	b.n	8006ce6 <RollMediumClockWise_Handle+0x166>
			break;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <RollMediumClockWise_Handle+0x166>
			break;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <RollMediumClockWise_Handle+0x166>
			break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <RollMediumClockWise_Handle+0x166>
			break;
 8006ce4:	bf00      	nop
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000038d 	.word	0x2000038d
 8006cf0:	20000394 	.word	0x20000394
 8006cf4:	2000038f 	.word	0x2000038f
 8006cf8:	20000390 	.word	0x20000390
 8006cfc:	2000038c 	.word	0x2000038c

08006d00 <RollSmallClockWise_Handle>:

void RollSmallClockWise_Handle()
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
	switch (axisDirection) {
 8006d04:	4b48      	ldr	r3, [pc, #288]	; (8006e28 <RollSmallClockWise_Handle+0x128>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d051      	beq.n	8006db0 <RollSmallClockWise_Handle+0xb0>
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f300 8082 	bgt.w	8006e16 <RollSmallClockWise_Handle+0x116>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <RollSmallClockWise_Handle+0x1c>
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d025      	beq.n	8006d66 <RollSmallClockWise_Handle+0x66>
				timeStart = HAL_GetTick();
			}
			break;

		default:
			break;
 8006d1a:	e07c      	b.n	8006e16 <RollSmallClockWise_Handle+0x116>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006d1c:	f7fa fef8 	bl	8001b10 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	223c      	movs	r2, #60	; 0x3c
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d375      	bcc.n	8006e1a <RollSmallClockWise_Handle+0x11a>
				DisplayLed(x, y, z);
 8006d2e:	4b40      	ldr	r3, [pc, #256]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4a40      	ldr	r2, [pc, #256]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006d34:	7811      	ldrb	r1, [r2, #0]
 8006d36:	2208      	movs	r2, #8
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fbbf 	bl	80054bc <DisplayLed>
				if (y == 4) axisDirection = X_AXIS_1;
 8006d3e:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d103      	bne.n	8006d4e <RollSmallClockWise_Handle+0x4e>
 8006d46:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <RollSmallClockWise_Handle+0x128>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e005      	b.n	8006d5a <RollSmallClockWise_Handle+0x5a>
				else y++;
 8006d4e:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006d58:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006d5a:	f7fa fed9 	bl	8001b10 <HAL_GetTick>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4a32      	ldr	r2, [pc, #200]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006d62:	6013      	str	r3, [r2, #0]
			break;
 8006d64:	e059      	b.n	8006e1a <RollSmallClockWise_Handle+0x11a>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006d66:	f7fa fed3 	bl	8001b10 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	4b2f      	ldr	r3, [pc, #188]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	223c      	movs	r2, #60	; 0x3c
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d352      	bcc.n	8006e1e <RollSmallClockWise_Handle+0x11e>
				DisplayLed(x, y, z);
 8006d78:	4b2d      	ldr	r3, [pc, #180]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4a2d      	ldr	r2, [pc, #180]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006d7e:	7811      	ldrb	r1, [r2, #0]
 8006d80:	2208      	movs	r2, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fb9a 	bl	80054bc <DisplayLed>
				if (x == 3) axisDirection = Y_AXIS_2;
 8006d88:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d103      	bne.n	8006d98 <RollSmallClockWise_Handle+0x98>
 8006d90:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <RollSmallClockWise_Handle+0x128>)
 8006d92:	2202      	movs	r2, #2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e005      	b.n	8006da4 <RollSmallClockWise_Handle+0xa4>
				else x--;
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006da2:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006da4:	f7fa feb4 	bl	8001b10 <HAL_GetTick>
 8006da8:	4603      	mov	r3, r0
 8006daa:	4a20      	ldr	r2, [pc, #128]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006dac:	6013      	str	r3, [r2, #0]
			break;
 8006dae:	e036      	b.n	8006e1e <RollSmallClockWise_Handle+0x11e>
			if (HAL_GetTick() - timeStart >= timePerColumn)
 8006db0:	f7fa feae 	bl	8001b10 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	223c      	movs	r2, #60	; 0x3c
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d32f      	bcc.n	8006e22 <RollSmallClockWise_Handle+0x122>
				DisplayLed(x, y, z);
 8006dc2:	4b1b      	ldr	r3, [pc, #108]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006dc8:	7811      	ldrb	r1, [r2, #0]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fb75 	bl	80054bc <DisplayLed>
				if (y == 3)
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d111      	bne.n	8006dfe <RollSmallClockWise_Handle+0xfe>
					clearCube();
 8006dda:	f7fd fcf5 	bl	80047c8 <clearCube>
					axisDirection = Y_AXIS_1;
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <RollSmallClockWise_Handle+0x128>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
					rollSize = ROLL_BIGGEST;
 8006de4:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <RollSmallClockWise_Handle+0x138>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
					x = 0;
 8006dea:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <RollSmallClockWise_Handle+0x130>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]
					y = 0;
 8006df0:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
					directRotate = COUNTER_CLOCKWISE;
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <RollSmallClockWise_Handle+0x13c>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e005      	b.n	8006e0a <RollSmallClockWise_Handle+0x10a>
				else y--;
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <RollSmallClockWise_Handle+0x134>)
 8006e08:	701a      	strb	r2, [r3, #0]
				timeStart = HAL_GetTick();
 8006e0a:	f7fa fe81 	bl	8001b10 <HAL_GetTick>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a06      	ldr	r2, [pc, #24]	; (8006e2c <RollSmallClockWise_Handle+0x12c>)
 8006e12:	6013      	str	r3, [r2, #0]
			break;
 8006e14:	e005      	b.n	8006e22 <RollSmallClockWise_Handle+0x122>
			break;
 8006e16:	bf00      	nop
 8006e18:	e004      	b.n	8006e24 <RollSmallClockWise_Handle+0x124>
			break;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <RollSmallClockWise_Handle+0x124>
			break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <RollSmallClockWise_Handle+0x124>
			break;
 8006e22:	bf00      	nop
	}
}
 8006e24:	bf00      	nop
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2000038d 	.word	0x2000038d
 8006e2c:	20000394 	.word	0x20000394
 8006e30:	2000038f 	.word	0x2000038f
 8006e34:	20000390 	.word	0x20000390
 8006e38:	2000038c 	.word	0x2000038c
 8006e3c:	2000038e 	.word	0x2000038e

08006e40 <SpiralCube_Set_State>:

void SpiralCube_Set_State()
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	clearCube();
 8006e44:	f7fd fcc0 	bl	80047c8 <clearCube>
	x = 7;
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <SpiralCube_Set_State+0x30>)
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	701a      	strb	r2, [r3, #0]
	y = 0;
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <SpiralCube_Set_State+0x34>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
	rollSize = ROLL_BIGGEST;
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <SpiralCube_Set_State+0x38>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
	directRotate = CLOCKWISE;
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <SpiralCube_Set_State+0x3c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
	axisDirection = Y_AXIS_1;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <SpiralCube_Set_State+0x40>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
	currentEffect = SPIRAL_CUBE;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <SpiralCube_Set_State+0x44>)
 8006e68:	2208      	movs	r2, #8
 8006e6a:	701a      	strb	r2, [r3, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	2000038f 	.word	0x2000038f
 8006e74:	20000390 	.word	0x20000390
 8006e78:	2000038c 	.word	0x2000038c
 8006e7c:	2000038e 	.word	0x2000038e
 8006e80:	2000038d 	.word	0x2000038d
 8006e84:	20000010 	.word	0x20000010

08006e88 <TransmitData>:
#include "transmit_data.h"

extern SPI_HandleTypeDef hspi1;

void TransmitData(uint8_t column_data[], uint8_t layer_data) //ok
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]

	uint8_t dataOut[9];
	dataOut[0] = layer_data;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	723b      	strb	r3, [r7, #8]
	for (int i = 1; i < 9; i++)
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e00d      	b.n	8006eba <TransmitData+0x32>
	{
		dataOut[i] = column_data[i-1];
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	7819      	ldrb	r1, [r3, #0]
 8006ea8:	f107 0208 	add.w	r2, r7, #8
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	4413      	add	r3, r2
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 9; i++)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	ddee      	ble.n	8006e9e <TransmitData+0x16>
	}
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_RESET);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2140      	movs	r1, #64	; 0x40
 8006ec4:	4809      	ldr	r0, [pc, #36]	; (8006eec <TransmitData+0x64>)
 8006ec6:	f7fb fb81 	bl	80025cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,dataOut, 9, 100);
 8006eca:	f107 0108 	add.w	r1, r7, #8
 8006ece:	2364      	movs	r3, #100	; 0x64
 8006ed0:	2209      	movs	r2, #9
 8006ed2:	4807      	ldr	r0, [pc, #28]	; (8006ef0 <TransmitData+0x68>)
 8006ed4:	f7fc fa2a 	bl	800332c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LATCH_PIN_GPIO_Port, LATCH_PIN_Pin, GPIO_PIN_SET);
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2140      	movs	r1, #64	; 0x40
 8006edc:	4803      	ldr	r0, [pc, #12]	; (8006eec <TransmitData+0x64>)
 8006ede:	f7fb fb75 	bl	80025cc <HAL_GPIO_WritePin>
}
 8006ee2:	bf00      	nop
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40010800 	.word	0x40010800
 8006ef0:	20000130 	.word	0x20000130
 8006ef4:	00000000 	.word	0x00000000

08006ef8 <WaveCube_Handle>:
extern float xo; // Tọa độ điểm gốc O
extern float yo;


void WaveCube_Handle()
{
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
	L = 7; // Bước sóng
 8006f00:	4b6d      	ldr	r3, [pc, #436]	; (80070b8 <WaveCube_Handle+0x1c0>)
 8006f02:	4a6e      	ldr	r2, [pc, #440]	; (80070bc <WaveCube_Handle+0x1c4>)
 8006f04:	601a      	str	r2, [r3, #0]
	T = 2000; // Chu kỳ
 8006f06:	4b6e      	ldr	r3, [pc, #440]	; (80070c0 <WaveCube_Handle+0x1c8>)
 8006f08:	4a6e      	ldr	r2, [pc, #440]	; (80070c4 <WaveCube_Handle+0x1cc>)
 8006f0a:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 8006f0c:	4b6e      	ldr	r3, [pc, #440]	; (80070c8 <WaveCube_Handle+0x1d0>)
 8006f0e:	4a6f      	ldr	r2, [pc, #444]	; (80070cc <WaveCube_Handle+0x1d4>)
 8006f10:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 8006f12:	4b6f      	ldr	r3, [pc, #444]	; (80070d0 <WaveCube_Handle+0x1d8>)
 8006f14:	4a6d      	ldr	r2, [pc, #436]	; (80070cc <WaveCube_Handle+0x1d4>)
 8006f16:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8006f18:	4b6e      	ldr	r3, [pc, #440]	; (80070d4 <WaveCube_Handle+0x1dc>)
 8006f1a:	4a6c      	ldr	r2, [pc, #432]	; (80070cc <WaveCube_Handle+0x1d4>)
 8006f1c:	601a      	str	r2, [r3, #0]
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e0b9      	b.n	8007098 <WaveCube_Handle+0x1a0>
	{
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8006f24:	2300      	movs	r3, #0
 8006f26:	73bb      	strb	r3, [r7, #14]
 8006f28:	e0af      	b.n	800708a <WaveCube_Handle+0x192>
	    {
	        uint32_t t = HAL_GetTick(); // Lấy thời gian
 8006f2a:	f7fa fdf1 	bl	8001b10 <HAL_GetTick>
 8006f2e:	60b8      	str	r0, [r7, #8]
//	        float r = sqrt(pow(x - xo, 2) + pow(y - yo, 2)); // Lấy bán kính, Sqrt là căn bậc 2, Pow(x, y) là x mũ y
	        uint8_t z = (uint8_t)(A*cos(2*PI*t/T - 2*PI*sqrt((x - xo)*(x - xo) + (y - yo)*(y - yo))/L) + 4); // Lấy cao độ z, 3.5 là vị trí cân bằng
 8006f30:	4b65      	ldr	r3, [pc, #404]	; (80070c8 <WaveCube_Handle+0x1d0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7f9 fa6f 	bl	8000418 <__aeabi_f2d>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f7f9 fa48 	bl	80003d4 <__aeabi_ui2d>
 8006f44:	a35a      	add	r3, pc, #360	; (adr r3, 80070b0 <WaveCube_Handle+0x1b8>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 fabd 	bl	80004c8 <__aeabi_dmul>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4690      	mov	r8, r2
 8006f54:	4699      	mov	r9, r3
 8006f56:	4b5a      	ldr	r3, [pc, #360]	; (80070c0 <WaveCube_Handle+0x1c8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7f9 fa5c 	bl	8000418 <__aeabi_f2d>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4640      	mov	r0, r8
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 fbd8 	bl	800071c <__aeabi_ddiv>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4690      	mov	r8, r2
 8006f72:	4699      	mov	r9, r3
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7f9 fea8 	bl	8000ccc <__aeabi_i2f>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b54      	ldr	r3, [pc, #336]	; (80070d0 <WaveCube_Handle+0x1d8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7f9 fdeb 	bl	8000b60 <__aeabi_fsub>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461e      	mov	r6, r3
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fe9b 	bl	8000ccc <__aeabi_i2f>
 8006f96:	4602      	mov	r2, r0
 8006f98:	4b4d      	ldr	r3, [pc, #308]	; (80070d0 <WaveCube_Handle+0x1d8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	f7f9 fdde 	bl	8000b60 <__aeabi_fsub>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7f9 fee3 	bl	8000d74 <__aeabi_fmul>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	461e      	mov	r6, r3
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7f9 fe89 	bl	8000ccc <__aeabi_i2f>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b45      	ldr	r3, [pc, #276]	; (80070d4 <WaveCube_Handle+0x1dc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7f9 fdcc 	bl	8000b60 <__aeabi_fsub>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	469a      	mov	sl, r3
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7f9 fe7c 	bl	8000ccc <__aeabi_i2f>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	; (80070d4 <WaveCube_Handle+0x1dc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7f9 fdbf 	bl	8000b60 <__aeabi_fsub>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f7f9 fec4 	bl	8000d74 <__aeabi_fmul>
 8006fec:	4603      	mov	r3, r0
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7f9 fdb7 	bl	8000b64 <__addsf3>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fa0d 	bl	8000418 <__aeabi_f2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	f001 fafb 	bl	8008600 <sqrt>
 800700a:	a329      	add	r3, pc, #164	; (adr r3, 80070b0 <WaveCube_Handle+0x1b8>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f7f9 fa5a 	bl	80004c8 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4692      	mov	sl, r2
 800701a:	469b      	mov	fp, r3
 800701c:	4b26      	ldr	r3, [pc, #152]	; (80070b8 <WaveCube_Handle+0x1c0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f7f9 f9f9 	bl	8000418 <__aeabi_f2d>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4650      	mov	r0, sl
 800702c:	4659      	mov	r1, fp
 800702e:	f7f9 fb75 	bl	800071c <__aeabi_ddiv>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 f88d 	bl	8000158 <__aeabi_dsub>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	f001 f9e7 	bl	8008418 <cos>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fa39 	bl	80004c8 <__aeabi_dmul>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <WaveCube_Handle+0x1e0>)
 8007064:	f7f9 f87a 	bl	800015c <__adddf3>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	f7f9 fd02 	bl	8000a78 <__aeabi_d2uiz>
 8007074:	4603      	mov	r3, r0
 8007076:	71fb      	strb	r3, [r7, #7]
	        DisplayLed(x, y, z);
 8007078:	79fa      	ldrb	r2, [r7, #7]
 800707a:	7bf9      	ldrb	r1, [r7, #15]
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fa1c 	bl	80054bc <DisplayLed>
	    for (uint8_t x = 0; x < 8; x++) // Quét X
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	3301      	adds	r3, #1
 8007088:	73bb      	strb	r3, [r7, #14]
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b07      	cmp	r3, #7
 800708e:	f67f af4c 	bls.w	8006f2a <WaveCube_Handle+0x32>
	for (uint8_t y = 0; y < 8; y++) // Quét Y
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	3301      	adds	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b07      	cmp	r3, #7
 800709c:	f67f af42 	bls.w	8006f24 <WaveCube_Handle+0x2c>
	    }
	}
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	f3af 8000 	nop.w
 80070b0:	51eb851f 	.word	0x51eb851f
 80070b4:	40191eb8 	.word	0x40191eb8
 80070b8:	20000378 	.word	0x20000378
 80070bc:	40e00000 	.word	0x40e00000
 80070c0:	2000037c 	.word	0x2000037c
 80070c4:	44fa0000 	.word	0x44fa0000
 80070c8:	20000380 	.word	0x20000380
 80070cc:	40600000 	.word	0x40600000
 80070d0:	20000384 	.word	0x20000384
 80070d4:	20000388 	.word	0x20000388
 80070d8:	40100000 	.word	0x40100000

080070dc <WaveCube_Set_State>:

void WaveCube_Set_State()
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
	clearCube();
 80070e0:	f7fd fb72 	bl	80047c8 <clearCube>
	currentEffect = WAVE_EFFECT;
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <WaveCube_Set_State+0x34>)
 80070e6:	2209      	movs	r2, #9
 80070e8:	701a      	strb	r2, [r3, #0]
	L = 7; // Bước sóng
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <WaveCube_Set_State+0x38>)
 80070ec:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <WaveCube_Set_State+0x3c>)
 80070ee:	601a      	str	r2, [r3, #0]
	T = 1; // Chu kỳ
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <WaveCube_Set_State+0x40>)
 80070f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80070f6:	601a      	str	r2, [r3, #0]
	A = 3.5; // Biên độ
 80070f8:	4b09      	ldr	r3, [pc, #36]	; (8007120 <WaveCube_Set_State+0x44>)
 80070fa:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <WaveCube_Set_State+0x48>)
 80070fc:	601a      	str	r2, [r3, #0]
	xo = 3.5; // Tọa độ điểm gốc O
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <WaveCube_Set_State+0x4c>)
 8007100:	4a08      	ldr	r2, [pc, #32]	; (8007124 <WaveCube_Set_State+0x48>)
 8007102:	601a      	str	r2, [r3, #0]
	yo = 3.5;
 8007104:	4b09      	ldr	r3, [pc, #36]	; (800712c <WaveCube_Set_State+0x50>)
 8007106:	4a07      	ldr	r2, [pc, #28]	; (8007124 <WaveCube_Set_State+0x48>)
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000010 	.word	0x20000010
 8007114:	20000378 	.word	0x20000378
 8007118:	40e00000 	.word	0x40e00000
 800711c:	2000037c 	.word	0x2000037c
 8007120:	20000380 	.word	0x20000380
 8007124:	40600000 	.word	0x40600000
 8007128:	20000384 	.word	0x20000384
 800712c:	20000388 	.word	0x20000388

08007130 <timer_register_callback>:
#define MAX_CALLBACK_FUNC	15

static callback_t callbacks[MAX_CALLBACK_FUNC];
static uint64_t ms = 0;
timer_ID_t timer_register_callback(timer_callback_func_t timer_callback_func, uint16_t period_ms, uint8_t* context, timer_mode_t mode)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	461a      	mov	r2, r3
 800713c:	460b      	mov	r3, r1
 800713e:	817b      	strh	r3, [r7, #10]
 8007140:	4613      	mov	r3, r2
 8007142:	727b      	strb	r3, [r7, #9]
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]
 8007148:	e034      	b.n	80071b4 <timer_register_callback+0x84>
	{
		if(callbacks[i].timer_callback_func == 0)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <timer_register_callback+0x98>)
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	4413      	add	r3, r2
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d12a      	bne.n	80071ae <timer_register_callback+0x7e>
		{
			callbacks[i].timer_callback_func = timer_callback_func;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <timer_register_callback+0x98>)
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	4413      	add	r3, r2
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]
			callbacks[i].period_ms = period_ms;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <timer_register_callback+0x98>)
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	897a      	ldrh	r2, [r7, #10]
 8007170:	801a      	strh	r2, [r3, #0]
			callbacks[i].context = context;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	4a14      	ldr	r2, [pc, #80]	; (80071c8 <timer_register_callback+0x98>)
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	4413      	add	r3, r2
 800717a:	3308      	adds	r3, #8
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
			callbacks[i].cnt = 0;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <timer_register_callback+0x98>)
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	4413      	add	r3, r2
 8007188:	3306      	adds	r3, #6
 800718a:	2200      	movs	r2, #0
 800718c:	801a      	strh	r2, [r3, #0]
			callbacks[i].id = i;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	4a0d      	ldr	r2, [pc, #52]	; (80071c8 <timer_register_callback+0x98>)
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	4413      	add	r3, r2
 8007196:	330c      	adds	r3, #12
 8007198:	7dfa      	ldrb	r2, [r7, #23]
 800719a:	701a      	strb	r2, [r3, #0]
			callbacks[i].mode = mode;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <timer_register_callback+0x98>)
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4413      	add	r3, r2
 80071a4:	330d      	adds	r3, #13
 80071a6:	7a7a      	ldrb	r2, [r7, #9]
 80071a8:	701a      	strb	r2, [r3, #0]
			return i;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	e006      	b.n	80071bc <timer_register_callback+0x8c>
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	3301      	adds	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	2b0e      	cmp	r3, #14
 80071b8:	d9c7      	bls.n	800714a <timer_register_callback+0x1a>
		}
	}
	return -1;
 80071ba:	23ff      	movs	r3, #255	; 0xff
}
 80071bc:	4618      	mov	r0, r3
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000398 	.word	0x20000398

080071cc <timer_unregister_callback>:

void timer_unregister_callback(uint8_t id){
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
	callbacks[id].timer_callback_func = 0;
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	4a04      	ldr	r2, [pc, #16]	; (80071ec <timer_unregister_callback+0x20>)
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	20000398 	.word	0x20000398

080071f0 <timer_callback>:
uint64_t milis(){
	return ms;
}

static void timer_callback()
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
	ms++;
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <timer_callback+0xc0>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	1c50      	adds	r0, r2, #1
 80071fe:	f143 0100 	adc.w	r1, r3, #0
 8007202:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <timer_callback+0xc0>)
 8007204:	e9c3 0100 	strd	r0, r1, [r3]
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++)
 8007208:	2300      	movs	r3, #0
 800720a:	71fb      	strb	r3, [r7, #7]
 800720c:	e047      	b.n	800729e <timer_callback+0xae>
	{
		if(callbacks[i].timer_callback_func != 0)
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <timer_callback+0xc4>)
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	4413      	add	r3, r2
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d03d      	beq.n	8007298 <timer_callback+0xa8>
		{
			callbacks[i].cnt++;
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	4925      	ldr	r1, [pc, #148]	; (80072b4 <timer_callback+0xc4>)
 8007220:	011a      	lsls	r2, r3, #4
 8007222:	440a      	add	r2, r1
 8007224:	3206      	adds	r2, #6
 8007226:	8812      	ldrh	r2, [r2, #0]
 8007228:	3201      	adds	r2, #1
 800722a:	b291      	uxth	r1, r2
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <timer_callback+0xc4>)
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	3306      	adds	r3, #6
 8007234:	460a      	mov	r2, r1
 8007236:	801a      	strh	r2, [r3, #0]
			if(callbacks[i].cnt == callbacks[i].period_ms)//check time out
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <timer_callback+0xc4>)
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	4413      	add	r3, r2
 8007240:	3306      	adds	r3, #6
 8007242:	881a      	ldrh	r2, [r3, #0]
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	491b      	ldr	r1, [pc, #108]	; (80072b4 <timer_callback+0xc4>)
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	440b      	add	r3, r1
 800724c:	3304      	adds	r3, #4
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d121      	bne.n	8007298 <timer_callback+0xa8>
			{
				callbacks[i].timer_callback_func(callbacks[i].context);// run function which is registered in timer_register_callback
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <timer_callback+0xc4>)
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4413      	add	r3, r2
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	79fa      	ldrb	r2, [r7, #7]
 8007260:	4914      	ldr	r1, [pc, #80]	; (80072b4 <timer_callback+0xc4>)
 8007262:	0112      	lsls	r2, r2, #4
 8007264:	440a      	add	r2, r1
 8007266:	3208      	adds	r2, #8
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
				callbacks[i].cnt = 0;
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	4a10      	ldr	r2, [pc, #64]	; (80072b4 <timer_callback+0xc4>)
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	4413      	add	r3, r2
 8007276:	3306      	adds	r3, #6
 8007278:	2200      	movs	r2, #0
 800727a:	801a      	strh	r2, [r3, #0]
				if(callbacks[i].mode == TIMER_MODE_ONE_SHOT) callbacks[i].timer_callback_func = 0;
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <timer_callback+0xc4>)
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	4413      	add	r3, r2
 8007284:	330d      	adds	r3, #13
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d105      	bne.n	8007298 <timer_callback+0xa8>
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <timer_callback+0xc4>)
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	4413      	add	r3, r2
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++)
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	3301      	adds	r3, #1
 800729c:	71fb      	strb	r3, [r7, #7]
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b0e      	cmp	r3, #14
 80072a2:	d9b4      	bls.n	800720e <timer_callback+0x1e>
			}
		}
	}
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000488 	.word	0x20000488
 80072b4:	20000398 	.word	0x20000398

080072b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	timer_callback();
 80072cc:	f7ff ff90 	bl	80071f0 <timer_callback>
    }
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	2000018c 	.word	0x2000018c

080072dc <__errno>:
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <__errno+0x8>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000014 	.word	0x20000014

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	2600      	movs	r6, #0
 80072ec:	4d0c      	ldr	r5, [pc, #48]	; (8007320 <__libc_init_array+0x38>)
 80072ee:	4c0d      	ldr	r4, [pc, #52]	; (8007324 <__libc_init_array+0x3c>)
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	f002 ff50 	bl	800a19c <_init>
 80072fc:	2600      	movs	r6, #0
 80072fe:	4d0a      	ldr	r5, [pc, #40]	; (8007328 <__libc_init_array+0x40>)
 8007300:	4c0a      	ldr	r4, [pc, #40]	; (800732c <__libc_init_array+0x44>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	f855 3b04 	ldr.w	r3, [r5], #4
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	0800a530 	.word	0x0800a530
 8007324:	0800a530 	.word	0x0800a530
 8007328:	0800a530 	.word	0x0800a530
 800732c:	0800a534 	.word	0x0800a534

08007330 <memset>:
 8007330:	4603      	mov	r3, r0
 8007332:	4402      	add	r2, r0
 8007334:	4293      	cmp	r3, r2
 8007336:	d100      	bne.n	800733a <memset+0xa>
 8007338:	4770      	bx	lr
 800733a:	f803 1b01 	strb.w	r1, [r3], #1
 800733e:	e7f9      	b.n	8007334 <memset+0x4>

08007340 <srand>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <srand+0x44>)
 8007344:	4604      	mov	r4, r0
 8007346:	681d      	ldr	r5, [r3, #0]
 8007348:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800734a:	b9b3      	cbnz	r3, 800737a <srand+0x3a>
 800734c:	2018      	movs	r0, #24
 800734e:	f000 f893 	bl	8007478 <malloc>
 8007352:	4602      	mov	r2, r0
 8007354:	63a8      	str	r0, [r5, #56]	; 0x38
 8007356:	b920      	cbnz	r0, 8007362 <srand+0x22>
 8007358:	2142      	movs	r1, #66	; 0x42
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <srand+0x48>)
 800735c:	480b      	ldr	r0, [pc, #44]	; (800738c <srand+0x4c>)
 800735e:	f000 f85b 	bl	8007418 <__assert_func>
 8007362:	490b      	ldr	r1, [pc, #44]	; (8007390 <srand+0x50>)
 8007364:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <srand+0x54>)
 8007366:	e9c0 1300 	strd	r1, r3, [r0]
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <srand+0x58>)
 800736c:	2100      	movs	r1, #0
 800736e:	6083      	str	r3, [r0, #8]
 8007370:	230b      	movs	r3, #11
 8007372:	8183      	strh	r3, [r0, #12]
 8007374:	2001      	movs	r0, #1
 8007376:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800737a:	2200      	movs	r2, #0
 800737c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800737e:	611c      	str	r4, [r3, #16]
 8007380:	615a      	str	r2, [r3, #20]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20000014 	.word	0x20000014
 8007388:	0800a1e4 	.word	0x0800a1e4
 800738c:	0800a1fb 	.word	0x0800a1fb
 8007390:	abcd330e 	.word	0xabcd330e
 8007394:	e66d1234 	.word	0xe66d1234
 8007398:	0005deec 	.word	0x0005deec

0800739c <rand>:
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <rand+0x5c>)
 800739e:	b510      	push	{r4, lr}
 80073a0:	681c      	ldr	r4, [r3, #0]
 80073a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073a4:	b9b3      	cbnz	r3, 80073d4 <rand+0x38>
 80073a6:	2018      	movs	r0, #24
 80073a8:	f000 f866 	bl	8007478 <malloc>
 80073ac:	4602      	mov	r2, r0
 80073ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80073b0:	b920      	cbnz	r0, 80073bc <rand+0x20>
 80073b2:	214e      	movs	r1, #78	; 0x4e
 80073b4:	4b11      	ldr	r3, [pc, #68]	; (80073fc <rand+0x60>)
 80073b6:	4812      	ldr	r0, [pc, #72]	; (8007400 <rand+0x64>)
 80073b8:	f000 f82e 	bl	8007418 <__assert_func>
 80073bc:	4911      	ldr	r1, [pc, #68]	; (8007404 <rand+0x68>)
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <rand+0x6c>)
 80073c0:	e9c0 1300 	strd	r1, r3, [r0]
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <rand+0x70>)
 80073c6:	2100      	movs	r1, #0
 80073c8:	6083      	str	r3, [r0, #8]
 80073ca:	230b      	movs	r3, #11
 80073cc:	8183      	strh	r3, [r0, #12]
 80073ce:	2001      	movs	r0, #1
 80073d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80073d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80073d6:	4a0e      	ldr	r2, [pc, #56]	; (8007410 <rand+0x74>)
 80073d8:	6920      	ldr	r0, [r4, #16]
 80073da:	6963      	ldr	r3, [r4, #20]
 80073dc:	4342      	muls	r2, r0
 80073de:	490d      	ldr	r1, [pc, #52]	; (8007414 <rand+0x78>)
 80073e0:	fb01 2203 	mla	r2, r1, r3, r2
 80073e4:	fba0 0101 	umull	r0, r1, r0, r1
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	eb42 0001 	adc.w	r0, r2, r1
 80073ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80073f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80073f6:	bd10      	pop	{r4, pc}
 80073f8:	20000014 	.word	0x20000014
 80073fc:	0800a1e4 	.word	0x0800a1e4
 8007400:	0800a1fb 	.word	0x0800a1fb
 8007404:	abcd330e 	.word	0xabcd330e
 8007408:	e66d1234 	.word	0xe66d1234
 800740c:	0005deec 	.word	0x0005deec
 8007410:	5851f42d 	.word	0x5851f42d
 8007414:	4c957f2d 	.word	0x4c957f2d

08007418 <__assert_func>:
 8007418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800741a:	4614      	mov	r4, r2
 800741c:	461a      	mov	r2, r3
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <__assert_func+0x2c>)
 8007420:	4605      	mov	r5, r0
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68d8      	ldr	r0, [r3, #12]
 8007426:	b14c      	cbz	r4, 800743c <__assert_func+0x24>
 8007428:	4b07      	ldr	r3, [pc, #28]	; (8007448 <__assert_func+0x30>)
 800742a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800742e:	9100      	str	r1, [sp, #0]
 8007430:	462b      	mov	r3, r5
 8007432:	4906      	ldr	r1, [pc, #24]	; (800744c <__assert_func+0x34>)
 8007434:	f000 f80e 	bl	8007454 <fiprintf>
 8007438:	f000 fcc0 	bl	8007dbc <abort>
 800743c:	4b04      	ldr	r3, [pc, #16]	; (8007450 <__assert_func+0x38>)
 800743e:	461c      	mov	r4, r3
 8007440:	e7f3      	b.n	800742a <__assert_func+0x12>
 8007442:	bf00      	nop
 8007444:	20000014 	.word	0x20000014
 8007448:	0800a256 	.word	0x0800a256
 800744c:	0800a263 	.word	0x0800a263
 8007450:	0800a291 	.word	0x0800a291

08007454 <fiprintf>:
 8007454:	b40e      	push	{r1, r2, r3}
 8007456:	b503      	push	{r0, r1, lr}
 8007458:	4601      	mov	r1, r0
 800745a:	ab03      	add	r3, sp, #12
 800745c:	4805      	ldr	r0, [pc, #20]	; (8007474 <fiprintf+0x20>)
 800745e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	f000 f913 	bl	8007690 <_vfiprintf_r>
 800746a:	b002      	add	sp, #8
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	20000014 	.word	0x20000014

08007478 <malloc>:
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <malloc+0xc>)
 800747a:	4601      	mov	r1, r0
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f000 b86b 	b.w	8007558 <_malloc_r>
 8007482:	bf00      	nop
 8007484:	20000014 	.word	0x20000014

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d040      	beq.n	8007512 <_free_r+0x8a>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 fec0 	bl	8008220 <__malloc_lock>
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <_free_r+0x8c>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 bebc 	b.w	800822c <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4401      	add	r1, r0
 80074ee:	6011      	str	r1, [r2, #0]
 80074f0:	6053      	str	r3, [r2, #4]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf01      	itttt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	1809      	addeq	r1, r1, r0
 800750a:	6021      	streq	r1, [r4, #0]
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	6054      	str	r4, [r2, #4]
 8007510:	e7cb      	b.n	80074aa <_free_r+0x22>
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20000490 	.word	0x20000490

08007518 <sbrk_aligned>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	4e0e      	ldr	r6, [pc, #56]	; (8007554 <sbrk_aligned+0x3c>)
 800751c:	460c      	mov	r4, r1
 800751e:	6831      	ldr	r1, [r6, #0]
 8007520:	4605      	mov	r5, r0
 8007522:	b911      	cbnz	r1, 800752a <sbrk_aligned+0x12>
 8007524:	f000 fb7a 	bl	8007c1c <_sbrk_r>
 8007528:	6030      	str	r0, [r6, #0]
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f000 fb75 	bl	8007c1c <_sbrk_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d00a      	beq.n	800754c <sbrk_aligned+0x34>
 8007536:	1cc4      	adds	r4, r0, #3
 8007538:	f024 0403 	bic.w	r4, r4, #3
 800753c:	42a0      	cmp	r0, r4
 800753e:	d007      	beq.n	8007550 <sbrk_aligned+0x38>
 8007540:	1a21      	subs	r1, r4, r0
 8007542:	4628      	mov	r0, r5
 8007544:	f000 fb6a 	bl	8007c1c <_sbrk_r>
 8007548:	3001      	adds	r0, #1
 800754a:	d101      	bne.n	8007550 <sbrk_aligned+0x38>
 800754c:	f04f 34ff 	mov.w	r4, #4294967295
 8007550:	4620      	mov	r0, r4
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	20000494 	.word	0x20000494

08007558 <_malloc_r>:
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	1ccd      	adds	r5, r1, #3
 800755e:	f025 0503 	bic.w	r5, r5, #3
 8007562:	3508      	adds	r5, #8
 8007564:	2d0c      	cmp	r5, #12
 8007566:	bf38      	it	cc
 8007568:	250c      	movcc	r5, #12
 800756a:	2d00      	cmp	r5, #0
 800756c:	4607      	mov	r7, r0
 800756e:	db01      	blt.n	8007574 <_malloc_r+0x1c>
 8007570:	42a9      	cmp	r1, r5
 8007572:	d905      	bls.n	8007580 <_malloc_r+0x28>
 8007574:	230c      	movs	r3, #12
 8007576:	2600      	movs	r6, #0
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4630      	mov	r0, r6
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	4e2e      	ldr	r6, [pc, #184]	; (800763c <_malloc_r+0xe4>)
 8007582:	f000 fe4d 	bl	8008220 <__malloc_lock>
 8007586:	6833      	ldr	r3, [r6, #0]
 8007588:	461c      	mov	r4, r3
 800758a:	bb34      	cbnz	r4, 80075da <_malloc_r+0x82>
 800758c:	4629      	mov	r1, r5
 800758e:	4638      	mov	r0, r7
 8007590:	f7ff ffc2 	bl	8007518 <sbrk_aligned>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	4604      	mov	r4, r0
 8007598:	d14d      	bne.n	8007636 <_malloc_r+0xde>
 800759a:	6834      	ldr	r4, [r6, #0]
 800759c:	4626      	mov	r6, r4
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d140      	bne.n	8007624 <_malloc_r+0xcc>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	4631      	mov	r1, r6
 80075a6:	4638      	mov	r0, r7
 80075a8:	eb04 0803 	add.w	r8, r4, r3
 80075ac:	f000 fb36 	bl	8007c1c <_sbrk_r>
 80075b0:	4580      	cmp	r8, r0
 80075b2:	d13a      	bne.n	800762a <_malloc_r+0xd2>
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	3503      	adds	r5, #3
 80075b8:	1a6d      	subs	r5, r5, r1
 80075ba:	f025 0503 	bic.w	r5, r5, #3
 80075be:	3508      	adds	r5, #8
 80075c0:	2d0c      	cmp	r5, #12
 80075c2:	bf38      	it	cc
 80075c4:	250c      	movcc	r5, #12
 80075c6:	4638      	mov	r0, r7
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7ff ffa5 	bl	8007518 <sbrk_aligned>
 80075ce:	3001      	adds	r0, #1
 80075d0:	d02b      	beq.n	800762a <_malloc_r+0xd2>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	442b      	add	r3, r5
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	e00e      	b.n	80075f8 <_malloc_r+0xa0>
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	1b52      	subs	r2, r2, r5
 80075de:	d41e      	bmi.n	800761e <_malloc_r+0xc6>
 80075e0:	2a0b      	cmp	r2, #11
 80075e2:	d916      	bls.n	8007612 <_malloc_r+0xba>
 80075e4:	1961      	adds	r1, r4, r5
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6025      	str	r5, [r4, #0]
 80075ea:	bf18      	it	ne
 80075ec:	6059      	strne	r1, [r3, #4]
 80075ee:	6863      	ldr	r3, [r4, #4]
 80075f0:	bf08      	it	eq
 80075f2:	6031      	streq	r1, [r6, #0]
 80075f4:	5162      	str	r2, [r4, r5]
 80075f6:	604b      	str	r3, [r1, #4]
 80075f8:	4638      	mov	r0, r7
 80075fa:	f104 060b 	add.w	r6, r4, #11
 80075fe:	f000 fe15 	bl	800822c <__malloc_unlock>
 8007602:	f026 0607 	bic.w	r6, r6, #7
 8007606:	1d23      	adds	r3, r4, #4
 8007608:	1af2      	subs	r2, r6, r3
 800760a:	d0b6      	beq.n	800757a <_malloc_r+0x22>
 800760c:	1b9b      	subs	r3, r3, r6
 800760e:	50a3      	str	r3, [r4, r2]
 8007610:	e7b3      	b.n	800757a <_malloc_r+0x22>
 8007612:	6862      	ldr	r2, [r4, #4]
 8007614:	42a3      	cmp	r3, r4
 8007616:	bf0c      	ite	eq
 8007618:	6032      	streq	r2, [r6, #0]
 800761a:	605a      	strne	r2, [r3, #4]
 800761c:	e7ec      	b.n	80075f8 <_malloc_r+0xa0>
 800761e:	4623      	mov	r3, r4
 8007620:	6864      	ldr	r4, [r4, #4]
 8007622:	e7b2      	b.n	800758a <_malloc_r+0x32>
 8007624:	4634      	mov	r4, r6
 8007626:	6876      	ldr	r6, [r6, #4]
 8007628:	e7b9      	b.n	800759e <_malloc_r+0x46>
 800762a:	230c      	movs	r3, #12
 800762c:	4638      	mov	r0, r7
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	f000 fdfc 	bl	800822c <__malloc_unlock>
 8007634:	e7a1      	b.n	800757a <_malloc_r+0x22>
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	e7de      	b.n	80075f8 <_malloc_r+0xa0>
 800763a:	bf00      	nop
 800763c:	20000490 	.word	0x20000490

08007640 <__sfputc_r>:
 8007640:	6893      	ldr	r3, [r2, #8]
 8007642:	b410      	push	{r4}
 8007644:	3b01      	subs	r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	6093      	str	r3, [r2, #8]
 800764a:	da07      	bge.n	800765c <__sfputc_r+0x1c>
 800764c:	6994      	ldr	r4, [r2, #24]
 800764e:	42a3      	cmp	r3, r4
 8007650:	db01      	blt.n	8007656 <__sfputc_r+0x16>
 8007652:	290a      	cmp	r1, #10
 8007654:	d102      	bne.n	800765c <__sfputc_r+0x1c>
 8007656:	bc10      	pop	{r4}
 8007658:	f000 baf0 	b.w	8007c3c <__swbuf_r>
 800765c:	6813      	ldr	r3, [r2, #0]
 800765e:	1c58      	adds	r0, r3, #1
 8007660:	6010      	str	r0, [r2, #0]
 8007662:	7019      	strb	r1, [r3, #0]
 8007664:	4608      	mov	r0, r1
 8007666:	bc10      	pop	{r4}
 8007668:	4770      	bx	lr

0800766a <__sfputs_r>:
 800766a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	4614      	mov	r4, r2
 8007672:	18d5      	adds	r5, r2, r3
 8007674:	42ac      	cmp	r4, r5
 8007676:	d101      	bne.n	800767c <__sfputs_r+0x12>
 8007678:	2000      	movs	r0, #0
 800767a:	e007      	b.n	800768c <__sfputs_r+0x22>
 800767c:	463a      	mov	r2, r7
 800767e:	4630      	mov	r0, r6
 8007680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007684:	f7ff ffdc 	bl	8007640 <__sfputc_r>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d1f3      	bne.n	8007674 <__sfputs_r+0xa>
 800768c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007690 <_vfiprintf_r>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	460d      	mov	r5, r1
 8007696:	4614      	mov	r4, r2
 8007698:	4698      	mov	r8, r3
 800769a:	4606      	mov	r6, r0
 800769c:	b09d      	sub	sp, #116	; 0x74
 800769e:	b118      	cbz	r0, 80076a8 <_vfiprintf_r+0x18>
 80076a0:	6983      	ldr	r3, [r0, #24]
 80076a2:	b90b      	cbnz	r3, 80076a8 <_vfiprintf_r+0x18>
 80076a4:	f000 fca8 	bl	8007ff8 <__sinit>
 80076a8:	4b89      	ldr	r3, [pc, #548]	; (80078d0 <_vfiprintf_r+0x240>)
 80076aa:	429d      	cmp	r5, r3
 80076ac:	d11b      	bne.n	80076e6 <_vfiprintf_r+0x56>
 80076ae:	6875      	ldr	r5, [r6, #4]
 80076b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	d405      	bmi.n	80076c2 <_vfiprintf_r+0x32>
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	059a      	lsls	r2, r3, #22
 80076ba:	d402      	bmi.n	80076c2 <_vfiprintf_r+0x32>
 80076bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076be:	f000 fd39 	bl	8008134 <__retarget_lock_acquire_recursive>
 80076c2:	89ab      	ldrh	r3, [r5, #12]
 80076c4:	071b      	lsls	r3, r3, #28
 80076c6:	d501      	bpl.n	80076cc <_vfiprintf_r+0x3c>
 80076c8:	692b      	ldr	r3, [r5, #16]
 80076ca:	b9eb      	cbnz	r3, 8007708 <_vfiprintf_r+0x78>
 80076cc:	4629      	mov	r1, r5
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 fb06 	bl	8007ce0 <__swsetup_r>
 80076d4:	b1c0      	cbz	r0, 8007708 <_vfiprintf_r+0x78>
 80076d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d8:	07dc      	lsls	r4, r3, #31
 80076da:	d50e      	bpl.n	80076fa <_vfiprintf_r+0x6a>
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	b01d      	add	sp, #116	; 0x74
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	4b7b      	ldr	r3, [pc, #492]	; (80078d4 <_vfiprintf_r+0x244>)
 80076e8:	429d      	cmp	r5, r3
 80076ea:	d101      	bne.n	80076f0 <_vfiprintf_r+0x60>
 80076ec:	68b5      	ldr	r5, [r6, #8]
 80076ee:	e7df      	b.n	80076b0 <_vfiprintf_r+0x20>
 80076f0:	4b79      	ldr	r3, [pc, #484]	; (80078d8 <_vfiprintf_r+0x248>)
 80076f2:	429d      	cmp	r5, r3
 80076f4:	bf08      	it	eq
 80076f6:	68f5      	ldreq	r5, [r6, #12]
 80076f8:	e7da      	b.n	80076b0 <_vfiprintf_r+0x20>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	0598      	lsls	r0, r3, #22
 80076fe:	d4ed      	bmi.n	80076dc <_vfiprintf_r+0x4c>
 8007700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007702:	f000 fd18 	bl	8008136 <__retarget_lock_release_recursive>
 8007706:	e7e9      	b.n	80076dc <_vfiprintf_r+0x4c>
 8007708:	2300      	movs	r3, #0
 800770a:	9309      	str	r3, [sp, #36]	; 0x24
 800770c:	2320      	movs	r3, #32
 800770e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007712:	2330      	movs	r3, #48	; 0x30
 8007714:	f04f 0901 	mov.w	r9, #1
 8007718:	f8cd 800c 	str.w	r8, [sp, #12]
 800771c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80078dc <_vfiprintf_r+0x24c>
 8007720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007724:	4623      	mov	r3, r4
 8007726:	469a      	mov	sl, r3
 8007728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772c:	b10a      	cbz	r2, 8007732 <_vfiprintf_r+0xa2>
 800772e:	2a25      	cmp	r2, #37	; 0x25
 8007730:	d1f9      	bne.n	8007726 <_vfiprintf_r+0x96>
 8007732:	ebba 0b04 	subs.w	fp, sl, r4
 8007736:	d00b      	beq.n	8007750 <_vfiprintf_r+0xc0>
 8007738:	465b      	mov	r3, fp
 800773a:	4622      	mov	r2, r4
 800773c:	4629      	mov	r1, r5
 800773e:	4630      	mov	r0, r6
 8007740:	f7ff ff93 	bl	800766a <__sfputs_r>
 8007744:	3001      	adds	r0, #1
 8007746:	f000 80aa 	beq.w	800789e <_vfiprintf_r+0x20e>
 800774a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774c:	445a      	add	r2, fp
 800774e:	9209      	str	r2, [sp, #36]	; 0x24
 8007750:	f89a 3000 	ldrb.w	r3, [sl]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80a2 	beq.w	800789e <_vfiprintf_r+0x20e>
 800775a:	2300      	movs	r3, #0
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007764:	f10a 0a01 	add.w	sl, sl, #1
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	9307      	str	r3, [sp, #28]
 800776c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007770:	931a      	str	r3, [sp, #104]	; 0x68
 8007772:	4654      	mov	r4, sl
 8007774:	2205      	movs	r2, #5
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	4858      	ldr	r0, [pc, #352]	; (80078dc <_vfiprintf_r+0x24c>)
 800777c:	f000 fd42 	bl	8008204 <memchr>
 8007780:	9a04      	ldr	r2, [sp, #16]
 8007782:	b9d8      	cbnz	r0, 80077bc <_vfiprintf_r+0x12c>
 8007784:	06d1      	lsls	r1, r2, #27
 8007786:	bf44      	itt	mi
 8007788:	2320      	movmi	r3, #32
 800778a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778e:	0713      	lsls	r3, r2, #28
 8007790:	bf44      	itt	mi
 8007792:	232b      	movmi	r3, #43	; 0x2b
 8007794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007798:	f89a 3000 	ldrb.w	r3, [sl]
 800779c:	2b2a      	cmp	r3, #42	; 0x2a
 800779e:	d015      	beq.n	80077cc <_vfiprintf_r+0x13c>
 80077a0:	4654      	mov	r4, sl
 80077a2:	2000      	movs	r0, #0
 80077a4:	f04f 0c0a 	mov.w	ip, #10
 80077a8:	9a07      	ldr	r2, [sp, #28]
 80077aa:	4621      	mov	r1, r4
 80077ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b0:	3b30      	subs	r3, #48	; 0x30
 80077b2:	2b09      	cmp	r3, #9
 80077b4:	d94e      	bls.n	8007854 <_vfiprintf_r+0x1c4>
 80077b6:	b1b0      	cbz	r0, 80077e6 <_vfiprintf_r+0x156>
 80077b8:	9207      	str	r2, [sp, #28]
 80077ba:	e014      	b.n	80077e6 <_vfiprintf_r+0x156>
 80077bc:	eba0 0308 	sub.w	r3, r0, r8
 80077c0:	fa09 f303 	lsl.w	r3, r9, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	46a2      	mov	sl, r4
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	e7d2      	b.n	8007772 <_vfiprintf_r+0xe2>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	1d19      	adds	r1, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	9103      	str	r1, [sp, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfbb      	ittet	lt
 80077d8:	425b      	neglt	r3, r3
 80077da:	f042 0202 	orrlt.w	r2, r2, #2
 80077de:	9307      	strge	r3, [sp, #28]
 80077e0:	9307      	strlt	r3, [sp, #28]
 80077e2:	bfb8      	it	lt
 80077e4:	9204      	strlt	r2, [sp, #16]
 80077e6:	7823      	ldrb	r3, [r4, #0]
 80077e8:	2b2e      	cmp	r3, #46	; 0x2e
 80077ea:	d10c      	bne.n	8007806 <_vfiprintf_r+0x176>
 80077ec:	7863      	ldrb	r3, [r4, #1]
 80077ee:	2b2a      	cmp	r3, #42	; 0x2a
 80077f0:	d135      	bne.n	800785e <_vfiprintf_r+0x1ce>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	3402      	adds	r4, #2
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	9203      	str	r2, [sp, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bfb8      	it	lt
 8007800:	f04f 33ff 	movlt.w	r3, #4294967295
 8007804:	9305      	str	r3, [sp, #20]
 8007806:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80078e0 <_vfiprintf_r+0x250>
 800780a:	2203      	movs	r2, #3
 800780c:	4650      	mov	r0, sl
 800780e:	7821      	ldrb	r1, [r4, #0]
 8007810:	f000 fcf8 	bl	8008204 <memchr>
 8007814:	b140      	cbz	r0, 8007828 <_vfiprintf_r+0x198>
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	eba0 000a 	sub.w	r0, r0, sl
 800781c:	fa03 f000 	lsl.w	r0, r3, r0
 8007820:	9b04      	ldr	r3, [sp, #16]
 8007822:	3401      	adds	r4, #1
 8007824:	4303      	orrs	r3, r0
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	2206      	movs	r2, #6
 800782e:	482d      	ldr	r0, [pc, #180]	; (80078e4 <_vfiprintf_r+0x254>)
 8007830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007834:	f000 fce6 	bl	8008204 <memchr>
 8007838:	2800      	cmp	r0, #0
 800783a:	d03f      	beq.n	80078bc <_vfiprintf_r+0x22c>
 800783c:	4b2a      	ldr	r3, [pc, #168]	; (80078e8 <_vfiprintf_r+0x258>)
 800783e:	bb1b      	cbnz	r3, 8007888 <_vfiprintf_r+0x1f8>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	3307      	adds	r3, #7
 8007844:	f023 0307 	bic.w	r3, r3, #7
 8007848:	3308      	adds	r3, #8
 800784a:	9303      	str	r3, [sp, #12]
 800784c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784e:	443b      	add	r3, r7
 8007850:	9309      	str	r3, [sp, #36]	; 0x24
 8007852:	e767      	b.n	8007724 <_vfiprintf_r+0x94>
 8007854:	460c      	mov	r4, r1
 8007856:	2001      	movs	r0, #1
 8007858:	fb0c 3202 	mla	r2, ip, r2, r3
 800785c:	e7a5      	b.n	80077aa <_vfiprintf_r+0x11a>
 800785e:	2300      	movs	r3, #0
 8007860:	f04f 0c0a 	mov.w	ip, #10
 8007864:	4619      	mov	r1, r3
 8007866:	3401      	adds	r4, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	4620      	mov	r0, r4
 800786c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007870:	3a30      	subs	r2, #48	; 0x30
 8007872:	2a09      	cmp	r2, #9
 8007874:	d903      	bls.n	800787e <_vfiprintf_r+0x1ee>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0c5      	beq.n	8007806 <_vfiprintf_r+0x176>
 800787a:	9105      	str	r1, [sp, #20]
 800787c:	e7c3      	b.n	8007806 <_vfiprintf_r+0x176>
 800787e:	4604      	mov	r4, r0
 8007880:	2301      	movs	r3, #1
 8007882:	fb0c 2101 	mla	r1, ip, r1, r2
 8007886:	e7f0      	b.n	800786a <_vfiprintf_r+0x1da>
 8007888:	ab03      	add	r3, sp, #12
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	462a      	mov	r2, r5
 800788e:	4630      	mov	r0, r6
 8007890:	4b16      	ldr	r3, [pc, #88]	; (80078ec <_vfiprintf_r+0x25c>)
 8007892:	a904      	add	r1, sp, #16
 8007894:	f3af 8000 	nop.w
 8007898:	4607      	mov	r7, r0
 800789a:	1c78      	adds	r0, r7, #1
 800789c:	d1d6      	bne.n	800784c <_vfiprintf_r+0x1bc>
 800789e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a0:	07d9      	lsls	r1, r3, #31
 80078a2:	d405      	bmi.n	80078b0 <_vfiprintf_r+0x220>
 80078a4:	89ab      	ldrh	r3, [r5, #12]
 80078a6:	059a      	lsls	r2, r3, #22
 80078a8:	d402      	bmi.n	80078b0 <_vfiprintf_r+0x220>
 80078aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ac:	f000 fc43 	bl	8008136 <__retarget_lock_release_recursive>
 80078b0:	89ab      	ldrh	r3, [r5, #12]
 80078b2:	065b      	lsls	r3, r3, #25
 80078b4:	f53f af12 	bmi.w	80076dc <_vfiprintf_r+0x4c>
 80078b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ba:	e711      	b.n	80076e0 <_vfiprintf_r+0x50>
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4630      	mov	r0, r6
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <_vfiprintf_r+0x25c>)
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	f000 f882 	bl	80079d0 <_printf_i>
 80078cc:	e7e4      	b.n	8007898 <_vfiprintf_r+0x208>
 80078ce:	bf00      	nop
 80078d0:	0800a2e8 	.word	0x0800a2e8
 80078d4:	0800a308 	.word	0x0800a308
 80078d8:	0800a2c8 	.word	0x0800a2c8
 80078dc:	0800a292 	.word	0x0800a292
 80078e0:	0800a298 	.word	0x0800a298
 80078e4:	0800a29c 	.word	0x0800a29c
 80078e8:	00000000 	.word	0x00000000
 80078ec:	0800766b 	.word	0x0800766b

080078f0 <_printf_common>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	4616      	mov	r6, r2
 80078f6:	4699      	mov	r9, r3
 80078f8:	688a      	ldr	r2, [r1, #8]
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	4607      	mov	r7, r0
 80078fe:	4293      	cmp	r3, r2
 8007900:	bfb8      	it	lt
 8007902:	4613      	movlt	r3, r2
 8007904:	6033      	str	r3, [r6, #0]
 8007906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800790a:	460c      	mov	r4, r1
 800790c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007910:	b10a      	cbz	r2, 8007916 <_printf_common+0x26>
 8007912:	3301      	adds	r3, #1
 8007914:	6033      	str	r3, [r6, #0]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	0699      	lsls	r1, r3, #26
 800791a:	bf42      	ittt	mi
 800791c:	6833      	ldrmi	r3, [r6, #0]
 800791e:	3302      	addmi	r3, #2
 8007920:	6033      	strmi	r3, [r6, #0]
 8007922:	6825      	ldr	r5, [r4, #0]
 8007924:	f015 0506 	ands.w	r5, r5, #6
 8007928:	d106      	bne.n	8007938 <_printf_common+0x48>
 800792a:	f104 0a19 	add.w	sl, r4, #25
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	6832      	ldr	r2, [r6, #0]
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc28      	bgt.n	800798a <_printf_common+0x9a>
 8007938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800793c:	1e13      	subs	r3, r2, #0
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	bf18      	it	ne
 8007942:	2301      	movne	r3, #1
 8007944:	0692      	lsls	r2, r2, #26
 8007946:	d42d      	bmi.n	80079a4 <_printf_common+0xb4>
 8007948:	4649      	mov	r1, r9
 800794a:	4638      	mov	r0, r7
 800794c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d020      	beq.n	8007998 <_printf_common+0xa8>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	68e5      	ldr	r5, [r4, #12]
 800795a:	f003 0306 	and.w	r3, r3, #6
 800795e:	2b04      	cmp	r3, #4
 8007960:	bf18      	it	ne
 8007962:	2500      	movne	r5, #0
 8007964:	6832      	ldr	r2, [r6, #0]
 8007966:	f04f 0600 	mov.w	r6, #0
 800796a:	68a3      	ldr	r3, [r4, #8]
 800796c:	bf08      	it	eq
 800796e:	1aad      	subeq	r5, r5, r2
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	bf08      	it	eq
 8007974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007978:	4293      	cmp	r3, r2
 800797a:	bfc4      	itt	gt
 800797c:	1a9b      	subgt	r3, r3, r2
 800797e:	18ed      	addgt	r5, r5, r3
 8007980:	341a      	adds	r4, #26
 8007982:	42b5      	cmp	r5, r6
 8007984:	d11a      	bne.n	80079bc <_printf_common+0xcc>
 8007986:	2000      	movs	r0, #0
 8007988:	e008      	b.n	800799c <_printf_common+0xac>
 800798a:	2301      	movs	r3, #1
 800798c:	4652      	mov	r2, sl
 800798e:	4649      	mov	r1, r9
 8007990:	4638      	mov	r0, r7
 8007992:	47c0      	blx	r8
 8007994:	3001      	adds	r0, #1
 8007996:	d103      	bne.n	80079a0 <_printf_common+0xb0>
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a0:	3501      	adds	r5, #1
 80079a2:	e7c4      	b.n	800792e <_printf_common+0x3e>
 80079a4:	2030      	movs	r0, #48	; 0x30
 80079a6:	18e1      	adds	r1, r4, r3
 80079a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079b2:	4422      	add	r2, r4
 80079b4:	3302      	adds	r3, #2
 80079b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ba:	e7c5      	b.n	8007948 <_printf_common+0x58>
 80079bc:	2301      	movs	r3, #1
 80079be:	4622      	mov	r2, r4
 80079c0:	4649      	mov	r1, r9
 80079c2:	4638      	mov	r0, r7
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d0e6      	beq.n	8007998 <_printf_common+0xa8>
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7d9      	b.n	8007982 <_printf_common+0x92>
	...

080079d0 <_printf_i>:
 80079d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	7e0f      	ldrb	r7, [r1, #24]
 80079d6:	4691      	mov	r9, r2
 80079d8:	2f78      	cmp	r7, #120	; 0x78
 80079da:	4680      	mov	r8, r0
 80079dc:	460c      	mov	r4, r1
 80079de:	469a      	mov	sl, r3
 80079e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079e6:	d807      	bhi.n	80079f8 <_printf_i+0x28>
 80079e8:	2f62      	cmp	r7, #98	; 0x62
 80079ea:	d80a      	bhi.n	8007a02 <_printf_i+0x32>
 80079ec:	2f00      	cmp	r7, #0
 80079ee:	f000 80d9 	beq.w	8007ba4 <_printf_i+0x1d4>
 80079f2:	2f58      	cmp	r7, #88	; 0x58
 80079f4:	f000 80a4 	beq.w	8007b40 <_printf_i+0x170>
 80079f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a00:	e03a      	b.n	8007a78 <_printf_i+0xa8>
 8007a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a06:	2b15      	cmp	r3, #21
 8007a08:	d8f6      	bhi.n	80079f8 <_printf_i+0x28>
 8007a0a:	a101      	add	r1, pc, #4	; (adr r1, 8007a10 <_printf_i+0x40>)
 8007a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a7d 	.word	0x08007a7d
 8007a18:	080079f9 	.word	0x080079f9
 8007a1c:	080079f9 	.word	0x080079f9
 8007a20:	080079f9 	.word	0x080079f9
 8007a24:	080079f9 	.word	0x080079f9
 8007a28:	08007a7d 	.word	0x08007a7d
 8007a2c:	080079f9 	.word	0x080079f9
 8007a30:	080079f9 	.word	0x080079f9
 8007a34:	080079f9 	.word	0x080079f9
 8007a38:	080079f9 	.word	0x080079f9
 8007a3c:	08007b8b 	.word	0x08007b8b
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007b6d 	.word	0x08007b6d
 8007a48:	080079f9 	.word	0x080079f9
 8007a4c:	080079f9 	.word	0x080079f9
 8007a50:	08007bad 	.word	0x08007bad
 8007a54:	080079f9 	.word	0x080079f9
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	080079f9 	.word	0x080079f9
 8007a60:	080079f9 	.word	0x080079f9
 8007a64:	08007b75 	.word	0x08007b75
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	602a      	str	r2, [r5, #0]
 8007a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0a4      	b.n	8007bc6 <_printf_i+0x1f6>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	6829      	ldr	r1, [r5, #0]
 8007a80:	0606      	lsls	r6, r0, #24
 8007a82:	f101 0304 	add.w	r3, r1, #4
 8007a86:	d50a      	bpl.n	8007a9e <_printf_i+0xce>
 8007a88:	680e      	ldr	r6, [r1, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	da03      	bge.n	8007a98 <_printf_i+0xc8>
 8007a90:	232d      	movs	r3, #45	; 0x2d
 8007a92:	4276      	negs	r6, r6
 8007a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a98:	230a      	movs	r3, #10
 8007a9a:	485e      	ldr	r0, [pc, #376]	; (8007c14 <_printf_i+0x244>)
 8007a9c:	e019      	b.n	8007ad2 <_printf_i+0x102>
 8007a9e:	680e      	ldr	r6, [r1, #0]
 8007aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	bf18      	it	ne
 8007aa8:	b236      	sxthne	r6, r6
 8007aaa:	e7ef      	b.n	8007a8c <_printf_i+0xbc>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	6029      	str	r1, [r5, #0]
 8007ab4:	0601      	lsls	r1, r0, #24
 8007ab6:	d501      	bpl.n	8007abc <_printf_i+0xec>
 8007ab8:	681e      	ldr	r6, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <_printf_i+0xf2>
 8007abc:	0646      	lsls	r6, r0, #25
 8007abe:	d5fb      	bpl.n	8007ab8 <_printf_i+0xe8>
 8007ac0:	881e      	ldrh	r6, [r3, #0]
 8007ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2308      	moveq	r3, #8
 8007ac8:	230a      	movne	r3, #10
 8007aca:	4852      	ldr	r0, [pc, #328]	; (8007c14 <_printf_i+0x244>)
 8007acc:	2100      	movs	r1, #0
 8007ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ad2:	6865      	ldr	r5, [r4, #4]
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	bfa8      	it	ge
 8007ad8:	6821      	ldrge	r1, [r4, #0]
 8007ada:	60a5      	str	r5, [r4, #8]
 8007adc:	bfa4      	itt	ge
 8007ade:	f021 0104 	bicge.w	r1, r1, #4
 8007ae2:	6021      	strge	r1, [r4, #0]
 8007ae4:	b90e      	cbnz	r6, 8007aea <_printf_i+0x11a>
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	d04d      	beq.n	8007b86 <_printf_i+0x1b6>
 8007aea:	4615      	mov	r5, r2
 8007aec:	fbb6 f1f3 	udiv	r1, r6, r3
 8007af0:	fb03 6711 	mls	r7, r3, r1, r6
 8007af4:	5dc7      	ldrb	r7, [r0, r7]
 8007af6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007afa:	4637      	mov	r7, r6
 8007afc:	42bb      	cmp	r3, r7
 8007afe:	460e      	mov	r6, r1
 8007b00:	d9f4      	bls.n	8007aec <_printf_i+0x11c>
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	d10b      	bne.n	8007b1e <_printf_i+0x14e>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	07de      	lsls	r6, r3, #31
 8007b0a:	d508      	bpl.n	8007b1e <_printf_i+0x14e>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	6861      	ldr	r1, [r4, #4]
 8007b10:	4299      	cmp	r1, r3
 8007b12:	bfde      	ittt	le
 8007b14:	2330      	movle	r3, #48	; 0x30
 8007b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b1e:	1b52      	subs	r2, r2, r5
 8007b20:	6122      	str	r2, [r4, #16]
 8007b22:	464b      	mov	r3, r9
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f8cd a000 	str.w	sl, [sp]
 8007b2c:	aa03      	add	r2, sp, #12
 8007b2e:	f7ff fedf 	bl	80078f0 <_printf_common>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d14c      	bne.n	8007bd0 <_printf_i+0x200>
 8007b36:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3a:	b004      	add	sp, #16
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	4834      	ldr	r0, [pc, #208]	; (8007c14 <_printf_i+0x244>)
 8007b42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b46:	6829      	ldr	r1, [r5, #0]
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b4e:	6029      	str	r1, [r5, #0]
 8007b50:	061d      	lsls	r5, r3, #24
 8007b52:	d514      	bpl.n	8007b7e <_printf_i+0x1ae>
 8007b54:	07df      	lsls	r7, r3, #31
 8007b56:	bf44      	itt	mi
 8007b58:	f043 0320 	orrmi.w	r3, r3, #32
 8007b5c:	6023      	strmi	r3, [r4, #0]
 8007b5e:	b91e      	cbnz	r6, 8007b68 <_printf_i+0x198>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	f023 0320 	bic.w	r3, r3, #32
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	2310      	movs	r3, #16
 8007b6a:	e7af      	b.n	8007acc <_printf_i+0xfc>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	f043 0320 	orr.w	r3, r3, #32
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	2378      	movs	r3, #120	; 0x78
 8007b76:	4828      	ldr	r0, [pc, #160]	; (8007c18 <_printf_i+0x248>)
 8007b78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b7c:	e7e3      	b.n	8007b46 <_printf_i+0x176>
 8007b7e:	0659      	lsls	r1, r3, #25
 8007b80:	bf48      	it	mi
 8007b82:	b2b6      	uxthmi	r6, r6
 8007b84:	e7e6      	b.n	8007b54 <_printf_i+0x184>
 8007b86:	4615      	mov	r5, r2
 8007b88:	e7bb      	b.n	8007b02 <_printf_i+0x132>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	6826      	ldr	r6, [r4, #0]
 8007b8e:	1d18      	adds	r0, r3, #4
 8007b90:	6961      	ldr	r1, [r4, #20]
 8007b92:	6028      	str	r0, [r5, #0]
 8007b94:	0635      	lsls	r5, r6, #24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	d501      	bpl.n	8007b9e <_printf_i+0x1ce>
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <_printf_i+0x1d4>
 8007b9e:	0670      	lsls	r0, r6, #25
 8007ba0:	d5fb      	bpl.n	8007b9a <_printf_i+0x1ca>
 8007ba2:	8019      	strh	r1, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4615      	mov	r5, r2
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	e7ba      	b.n	8007b22 <_printf_i+0x152>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	2100      	movs	r1, #0
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	602a      	str	r2, [r5, #0]
 8007bb4:	681d      	ldr	r5, [r3, #0]
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 fb23 	bl	8008204 <memchr>
 8007bbe:	b108      	cbz	r0, 8007bc4 <_printf_i+0x1f4>
 8007bc0:	1b40      	subs	r0, r0, r5
 8007bc2:	6060      	str	r0, [r4, #4]
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bce:	e7a8      	b.n	8007b22 <_printf_i+0x152>
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	47d0      	blx	sl
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d0ab      	beq.n	8007b36 <_printf_i+0x166>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	079b      	lsls	r3, r3, #30
 8007be2:	d413      	bmi.n	8007c0c <_printf_i+0x23c>
 8007be4:	68e0      	ldr	r0, [r4, #12]
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	4298      	cmp	r0, r3
 8007bea:	bfb8      	it	lt
 8007bec:	4618      	movlt	r0, r3
 8007bee:	e7a4      	b.n	8007b3a <_printf_i+0x16a>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	47d0      	blx	sl
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d09b      	beq.n	8007b36 <_printf_i+0x166>
 8007bfe:	3501      	adds	r5, #1
 8007c00:	68e3      	ldr	r3, [r4, #12]
 8007c02:	9903      	ldr	r1, [sp, #12]
 8007c04:	1a5b      	subs	r3, r3, r1
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	dcf2      	bgt.n	8007bf0 <_printf_i+0x220>
 8007c0a:	e7eb      	b.n	8007be4 <_printf_i+0x214>
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	f104 0619 	add.w	r6, r4, #25
 8007c12:	e7f5      	b.n	8007c00 <_printf_i+0x230>
 8007c14:	0800a2a3 	.word	0x0800a2a3
 8007c18:	0800a2b4 	.word	0x0800a2b4

08007c1c <_sbrk_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4d05      	ldr	r5, [pc, #20]	; (8007c38 <_sbrk_r+0x1c>)
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	f7f9 fd60 	bl	80016ec <_sbrk>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_sbrk_r+0x1a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_sbrk_r+0x1a>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	2000049c 	.word	0x2000049c

08007c3c <__swbuf_r>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	460e      	mov	r6, r1
 8007c40:	4614      	mov	r4, r2
 8007c42:	4605      	mov	r5, r0
 8007c44:	b118      	cbz	r0, 8007c4e <__swbuf_r+0x12>
 8007c46:	6983      	ldr	r3, [r0, #24]
 8007c48:	b90b      	cbnz	r3, 8007c4e <__swbuf_r+0x12>
 8007c4a:	f000 f9d5 	bl	8007ff8 <__sinit>
 8007c4e:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <__swbuf_r+0x98>)
 8007c50:	429c      	cmp	r4, r3
 8007c52:	d12b      	bne.n	8007cac <__swbuf_r+0x70>
 8007c54:	686c      	ldr	r4, [r5, #4]
 8007c56:	69a3      	ldr	r3, [r4, #24]
 8007c58:	60a3      	str	r3, [r4, #8]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	071a      	lsls	r2, r3, #28
 8007c5e:	d52f      	bpl.n	8007cc0 <__swbuf_r+0x84>
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	b36b      	cbz	r3, 8007cc0 <__swbuf_r+0x84>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	6820      	ldr	r0, [r4, #0]
 8007c68:	b2f6      	uxtb	r6, r6
 8007c6a:	1ac0      	subs	r0, r0, r3
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	4637      	mov	r7, r6
 8007c70:	4283      	cmp	r3, r0
 8007c72:	dc04      	bgt.n	8007c7e <__swbuf_r+0x42>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 f92a 	bl	8007ed0 <_fflush_r>
 8007c7c:	bb30      	cbnz	r0, 8007ccc <__swbuf_r+0x90>
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	3001      	adds	r0, #1
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	701e      	strb	r6, [r3, #0]
 8007c8e:	6963      	ldr	r3, [r4, #20]
 8007c90:	4283      	cmp	r3, r0
 8007c92:	d004      	beq.n	8007c9e <__swbuf_r+0x62>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	07db      	lsls	r3, r3, #31
 8007c98:	d506      	bpl.n	8007ca8 <__swbuf_r+0x6c>
 8007c9a:	2e0a      	cmp	r6, #10
 8007c9c:	d104      	bne.n	8007ca8 <__swbuf_r+0x6c>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 f915 	bl	8007ed0 <_fflush_r>
 8007ca6:	b988      	cbnz	r0, 8007ccc <__swbuf_r+0x90>
 8007ca8:	4638      	mov	r0, r7
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <__swbuf_r+0x9c>)
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d101      	bne.n	8007cb6 <__swbuf_r+0x7a>
 8007cb2:	68ac      	ldr	r4, [r5, #8]
 8007cb4:	e7cf      	b.n	8007c56 <__swbuf_r+0x1a>
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <__swbuf_r+0xa0>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	bf08      	it	eq
 8007cbc:	68ec      	ldreq	r4, [r5, #12]
 8007cbe:	e7ca      	b.n	8007c56 <__swbuf_r+0x1a>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f80c 	bl	8007ce0 <__swsetup_r>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0cb      	beq.n	8007c64 <__swbuf_r+0x28>
 8007ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8007cd0:	e7ea      	b.n	8007ca8 <__swbuf_r+0x6c>
 8007cd2:	bf00      	nop
 8007cd4:	0800a2e8 	.word	0x0800a2e8
 8007cd8:	0800a308 	.word	0x0800a308
 8007cdc:	0800a2c8 	.word	0x0800a2c8

08007ce0 <__swsetup_r>:
 8007ce0:	4b32      	ldr	r3, [pc, #200]	; (8007dac <__swsetup_r+0xcc>)
 8007ce2:	b570      	push	{r4, r5, r6, lr}
 8007ce4:	681d      	ldr	r5, [r3, #0]
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460c      	mov	r4, r1
 8007cea:	b125      	cbz	r5, 8007cf6 <__swsetup_r+0x16>
 8007cec:	69ab      	ldr	r3, [r5, #24]
 8007cee:	b913      	cbnz	r3, 8007cf6 <__swsetup_r+0x16>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f981 	bl	8007ff8 <__sinit>
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <__swsetup_r+0xd0>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d10f      	bne.n	8007d1c <__swsetup_r+0x3c>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d04:	0719      	lsls	r1, r3, #28
 8007d06:	d42c      	bmi.n	8007d62 <__swsetup_r+0x82>
 8007d08:	06dd      	lsls	r5, r3, #27
 8007d0a:	d411      	bmi.n	8007d30 <__swsetup_r+0x50>
 8007d0c:	2309      	movs	r3, #9
 8007d0e:	6033      	str	r3, [r6, #0]
 8007d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	e03e      	b.n	8007d9a <__swsetup_r+0xba>
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <__swsetup_r+0xd4>)
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d101      	bne.n	8007d26 <__swsetup_r+0x46>
 8007d22:	68ac      	ldr	r4, [r5, #8]
 8007d24:	e7eb      	b.n	8007cfe <__swsetup_r+0x1e>
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <__swsetup_r+0xd8>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	bf08      	it	eq
 8007d2c:	68ec      	ldreq	r4, [r5, #12]
 8007d2e:	e7e6      	b.n	8007cfe <__swsetup_r+0x1e>
 8007d30:	0758      	lsls	r0, r3, #29
 8007d32:	d512      	bpl.n	8007d5a <__swsetup_r+0x7a>
 8007d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d36:	b141      	cbz	r1, 8007d4a <__swsetup_r+0x6a>
 8007d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	d002      	beq.n	8007d46 <__swsetup_r+0x66>
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff fba1 	bl	8007488 <_free_r>
 8007d46:	2300      	movs	r3, #0
 8007d48:	6363      	str	r3, [r4, #52]	; 0x34
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	2300      	movs	r3, #0
 8007d54:	6063      	str	r3, [r4, #4]
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f043 0308 	orr.w	r3, r3, #8
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	b94b      	cbnz	r3, 8007d7a <__swsetup_r+0x9a>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d70:	d003      	beq.n	8007d7a <__swsetup_r+0x9a>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 fa05 	bl	8008184 <__smakebuf_r>
 8007d7a:	89a0      	ldrh	r0, [r4, #12]
 8007d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d80:	f010 0301 	ands.w	r3, r0, #1
 8007d84:	d00a      	beq.n	8007d9c <__swsetup_r+0xbc>
 8007d86:	2300      	movs	r3, #0
 8007d88:	60a3      	str	r3, [r4, #8]
 8007d8a:	6963      	ldr	r3, [r4, #20]
 8007d8c:	425b      	negs	r3, r3
 8007d8e:	61a3      	str	r3, [r4, #24]
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	b943      	cbnz	r3, 8007da6 <__swsetup_r+0xc6>
 8007d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d98:	d1ba      	bne.n	8007d10 <__swsetup_r+0x30>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	0781      	lsls	r1, r0, #30
 8007d9e:	bf58      	it	pl
 8007da0:	6963      	ldrpl	r3, [r4, #20]
 8007da2:	60a3      	str	r3, [r4, #8]
 8007da4:	e7f4      	b.n	8007d90 <__swsetup_r+0xb0>
 8007da6:	2000      	movs	r0, #0
 8007da8:	e7f7      	b.n	8007d9a <__swsetup_r+0xba>
 8007daa:	bf00      	nop
 8007dac:	20000014 	.word	0x20000014
 8007db0:	0800a2e8 	.word	0x0800a2e8
 8007db4:	0800a308 	.word	0x0800a308
 8007db8:	0800a2c8 	.word	0x0800a2c8

08007dbc <abort>:
 8007dbc:	2006      	movs	r0, #6
 8007dbe:	b508      	push	{r3, lr}
 8007dc0:	f000 fa62 	bl	8008288 <raise>
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f7f9 fc1e 	bl	8001606 <_exit>
	...

08007dcc <__sflush_r>:
 8007dcc:	898a      	ldrh	r2, [r1, #12]
 8007dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	0710      	lsls	r0, r2, #28
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	d457      	bmi.n	8007e88 <__sflush_r+0xbc>
 8007dd8:	684b      	ldr	r3, [r1, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dc04      	bgt.n	8007de8 <__sflush_r+0x1c>
 8007dde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc01      	bgt.n	8007de8 <__sflush_r+0x1c>
 8007de4:	2000      	movs	r0, #0
 8007de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	d0fa      	beq.n	8007de4 <__sflush_r+0x18>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007df4:	682f      	ldr	r7, [r5, #0]
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	d032      	beq.n	8007e60 <__sflush_r+0x94>
 8007dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	075a      	lsls	r2, r3, #29
 8007e00:	d505      	bpl.n	8007e0e <__sflush_r+0x42>
 8007e02:	6863      	ldr	r3, [r4, #4]
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e08:	b10b      	cbz	r3, 8007e0e <__sflush_r+0x42>
 8007e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e0c:	1ac0      	subs	r0, r0, r3
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4602      	mov	r2, r0
 8007e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e14:	4628      	mov	r0, r5
 8007e16:	6a21      	ldr	r1, [r4, #32]
 8007e18:	47b0      	blx	r6
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	d106      	bne.n	8007e2e <__sflush_r+0x62>
 8007e20:	6829      	ldr	r1, [r5, #0]
 8007e22:	291d      	cmp	r1, #29
 8007e24:	d82c      	bhi.n	8007e80 <__sflush_r+0xb4>
 8007e26:	4a29      	ldr	r2, [pc, #164]	; (8007ecc <__sflush_r+0x100>)
 8007e28:	40ca      	lsrs	r2, r1
 8007e2a:	07d6      	lsls	r6, r2, #31
 8007e2c:	d528      	bpl.n	8007e80 <__sflush_r+0xb4>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	6062      	str	r2, [r4, #4]
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	04d9      	lsls	r1, r3, #19
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	d504      	bpl.n	8007e44 <__sflush_r+0x78>
 8007e3a:	1c42      	adds	r2, r0, #1
 8007e3c:	d101      	bne.n	8007e42 <__sflush_r+0x76>
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	b903      	cbnz	r3, 8007e44 <__sflush_r+0x78>
 8007e42:	6560      	str	r0, [r4, #84]	; 0x54
 8007e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e46:	602f      	str	r7, [r5, #0]
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	d0cb      	beq.n	8007de4 <__sflush_r+0x18>
 8007e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <__sflush_r+0x8e>
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fb17 	bl	8007488 <_free_r>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e5e:	e7c2      	b.n	8007de6 <__sflush_r+0x1a>
 8007e60:	6a21      	ldr	r1, [r4, #32]
 8007e62:	2301      	movs	r3, #1
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b0      	blx	r6
 8007e68:	1c41      	adds	r1, r0, #1
 8007e6a:	d1c7      	bne.n	8007dfc <__sflush_r+0x30>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0c4      	beq.n	8007dfc <__sflush_r+0x30>
 8007e72:	2b1d      	cmp	r3, #29
 8007e74:	d001      	beq.n	8007e7a <__sflush_r+0xae>
 8007e76:	2b16      	cmp	r3, #22
 8007e78:	d101      	bne.n	8007e7e <__sflush_r+0xb2>
 8007e7a:	602f      	str	r7, [r5, #0]
 8007e7c:	e7b2      	b.n	8007de4 <__sflush_r+0x18>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	e7ae      	b.n	8007de6 <__sflush_r+0x1a>
 8007e88:	690f      	ldr	r7, [r1, #16]
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d0aa      	beq.n	8007de4 <__sflush_r+0x18>
 8007e8e:	0793      	lsls	r3, r2, #30
 8007e90:	bf18      	it	ne
 8007e92:	2300      	movne	r3, #0
 8007e94:	680e      	ldr	r6, [r1, #0]
 8007e96:	bf08      	it	eq
 8007e98:	694b      	ldreq	r3, [r1, #20]
 8007e9a:	1bf6      	subs	r6, r6, r7
 8007e9c:	600f      	str	r7, [r1, #0]
 8007e9e:	608b      	str	r3, [r1, #8]
 8007ea0:	2e00      	cmp	r6, #0
 8007ea2:	dd9f      	ble.n	8007de4 <__sflush_r+0x18>
 8007ea4:	4633      	mov	r3, r6
 8007ea6:	463a      	mov	r2, r7
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	6a21      	ldr	r1, [r4, #32]
 8007eac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007eb0:	47e0      	blx	ip
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	dc06      	bgt.n	8007ec4 <__sflush_r+0xf8>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	e790      	b.n	8007de6 <__sflush_r+0x1a>
 8007ec4:	4407      	add	r7, r0
 8007ec6:	1a36      	subs	r6, r6, r0
 8007ec8:	e7ea      	b.n	8007ea0 <__sflush_r+0xd4>
 8007eca:	bf00      	nop
 8007ecc:	20400001 	.word	0x20400001

08007ed0 <_fflush_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	690b      	ldr	r3, [r1, #16]
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	b913      	cbnz	r3, 8007ee0 <_fflush_r+0x10>
 8007eda:	2500      	movs	r5, #0
 8007edc:	4628      	mov	r0, r5
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	b118      	cbz	r0, 8007eea <_fflush_r+0x1a>
 8007ee2:	6983      	ldr	r3, [r0, #24]
 8007ee4:	b90b      	cbnz	r3, 8007eea <_fflush_r+0x1a>
 8007ee6:	f000 f887 	bl	8007ff8 <__sinit>
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <_fflush_r+0x6c>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	d11b      	bne.n	8007f28 <_fflush_r+0x58>
 8007ef0:	686c      	ldr	r4, [r5, #4]
 8007ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0ef      	beq.n	8007eda <_fflush_r+0xa>
 8007efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007efc:	07d0      	lsls	r0, r2, #31
 8007efe:	d404      	bmi.n	8007f0a <_fflush_r+0x3a>
 8007f00:	0599      	lsls	r1, r3, #22
 8007f02:	d402      	bmi.n	8007f0a <_fflush_r+0x3a>
 8007f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f06:	f000 f915 	bl	8008134 <__retarget_lock_acquire_recursive>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f7ff ff5d 	bl	8007dcc <__sflush_r>
 8007f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f14:	4605      	mov	r5, r0
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d4e0      	bmi.n	8007edc <_fflush_r+0xc>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	d4dd      	bmi.n	8007edc <_fflush_r+0xc>
 8007f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f22:	f000 f908 	bl	8008136 <__retarget_lock_release_recursive>
 8007f26:	e7d9      	b.n	8007edc <_fflush_r+0xc>
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <_fflush_r+0x70>)
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	d101      	bne.n	8007f32 <_fflush_r+0x62>
 8007f2e:	68ac      	ldr	r4, [r5, #8]
 8007f30:	e7df      	b.n	8007ef2 <_fflush_r+0x22>
 8007f32:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <_fflush_r+0x74>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	bf08      	it	eq
 8007f38:	68ec      	ldreq	r4, [r5, #12]
 8007f3a:	e7da      	b.n	8007ef2 <_fflush_r+0x22>
 8007f3c:	0800a2e8 	.word	0x0800a2e8
 8007f40:	0800a308 	.word	0x0800a308
 8007f44:	0800a2c8 	.word	0x0800a2c8

08007f48 <std>:
 8007f48:	2300      	movs	r3, #0
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f56:	6083      	str	r3, [r0, #8]
 8007f58:	8181      	strh	r1, [r0, #12]
 8007f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f5c:	81c2      	strh	r2, [r0, #14]
 8007f5e:	6183      	str	r3, [r0, #24]
 8007f60:	4619      	mov	r1, r3
 8007f62:	2208      	movs	r2, #8
 8007f64:	305c      	adds	r0, #92	; 0x5c
 8007f66:	f7ff f9e3 	bl	8007330 <memset>
 8007f6a:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <std+0x38>)
 8007f6c:	6224      	str	r4, [r4, #32]
 8007f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <std+0x3c>)
 8007f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f74:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <std+0x40>)
 8007f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <std+0x44>)
 8007f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	080082c1 	.word	0x080082c1
 8007f84:	080082e3 	.word	0x080082e3
 8007f88:	0800831b 	.word	0x0800831b
 8007f8c:	0800833f 	.word	0x0800833f

08007f90 <_cleanup_r>:
 8007f90:	4901      	ldr	r1, [pc, #4]	; (8007f98 <_cleanup_r+0x8>)
 8007f92:	f000 b8af 	b.w	80080f4 <_fwalk_reent>
 8007f96:	bf00      	nop
 8007f98:	08007ed1 	.word	0x08007ed1

08007f9c <__sfmoreglue>:
 8007f9c:	2268      	movs	r2, #104	; 0x68
 8007f9e:	b570      	push	{r4, r5, r6, lr}
 8007fa0:	1e4d      	subs	r5, r1, #1
 8007fa2:	4355      	muls	r5, r2
 8007fa4:	460e      	mov	r6, r1
 8007fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007faa:	f7ff fad5 	bl	8007558 <_malloc_r>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	b140      	cbz	r0, 8007fc4 <__sfmoreglue+0x28>
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fb8:	300c      	adds	r0, #12
 8007fba:	60a0      	str	r0, [r4, #8]
 8007fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fc0:	f7ff f9b6 	bl	8007330 <memset>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}

08007fc8 <__sfp_lock_acquire>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__sfp_lock_acquire+0x8>)
 8007fca:	f000 b8b3 	b.w	8008134 <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20000499 	.word	0x20000499

08007fd4 <__sfp_lock_release>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_release+0x8>)
 8007fd6:	f000 b8ae 	b.w	8008136 <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20000499 	.word	0x20000499

08007fe0 <__sinit_lock_acquire>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__sinit_lock_acquire+0x8>)
 8007fe2:	f000 b8a7 	b.w	8008134 <__retarget_lock_acquire_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	2000049a 	.word	0x2000049a

08007fec <__sinit_lock_release>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__sinit_lock_release+0x8>)
 8007fee:	f000 b8a2 	b.w	8008136 <__retarget_lock_release_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	2000049a 	.word	0x2000049a

08007ff8 <__sinit>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f7ff fff0 	bl	8007fe0 <__sinit_lock_acquire>
 8008000:	69a3      	ldr	r3, [r4, #24]
 8008002:	b11b      	cbz	r3, 800800c <__sinit+0x14>
 8008004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008008:	f7ff bff0 	b.w	8007fec <__sinit_lock_release>
 800800c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008010:	6523      	str	r3, [r4, #80]	; 0x50
 8008012:	4b13      	ldr	r3, [pc, #76]	; (8008060 <__sinit+0x68>)
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <__sinit+0x6c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	62a2      	str	r2, [r4, #40]	; 0x28
 800801a:	42a3      	cmp	r3, r4
 800801c:	bf08      	it	eq
 800801e:	2301      	moveq	r3, #1
 8008020:	4620      	mov	r0, r4
 8008022:	bf08      	it	eq
 8008024:	61a3      	streq	r3, [r4, #24]
 8008026:	f000 f81f 	bl	8008068 <__sfp>
 800802a:	6060      	str	r0, [r4, #4]
 800802c:	4620      	mov	r0, r4
 800802e:	f000 f81b 	bl	8008068 <__sfp>
 8008032:	60a0      	str	r0, [r4, #8]
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f817 	bl	8008068 <__sfp>
 800803a:	2200      	movs	r2, #0
 800803c:	2104      	movs	r1, #4
 800803e:	60e0      	str	r0, [r4, #12]
 8008040:	6860      	ldr	r0, [r4, #4]
 8008042:	f7ff ff81 	bl	8007f48 <std>
 8008046:	2201      	movs	r2, #1
 8008048:	2109      	movs	r1, #9
 800804a:	68a0      	ldr	r0, [r4, #8]
 800804c:	f7ff ff7c 	bl	8007f48 <std>
 8008050:	2202      	movs	r2, #2
 8008052:	2112      	movs	r1, #18
 8008054:	68e0      	ldr	r0, [r4, #12]
 8008056:	f7ff ff77 	bl	8007f48 <std>
 800805a:	2301      	movs	r3, #1
 800805c:	61a3      	str	r3, [r4, #24]
 800805e:	e7d1      	b.n	8008004 <__sinit+0xc>
 8008060:	0800a1e0 	.word	0x0800a1e0
 8008064:	08007f91 	.word	0x08007f91

08008068 <__sfp>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	4607      	mov	r7, r0
 800806c:	f7ff ffac 	bl	8007fc8 <__sfp_lock_acquire>
 8008070:	4b1e      	ldr	r3, [pc, #120]	; (80080ec <__sfp+0x84>)
 8008072:	681e      	ldr	r6, [r3, #0]
 8008074:	69b3      	ldr	r3, [r6, #24]
 8008076:	b913      	cbnz	r3, 800807e <__sfp+0x16>
 8008078:	4630      	mov	r0, r6
 800807a:	f7ff ffbd 	bl	8007ff8 <__sinit>
 800807e:	3648      	adds	r6, #72	; 0x48
 8008080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008084:	3b01      	subs	r3, #1
 8008086:	d503      	bpl.n	8008090 <__sfp+0x28>
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	b30b      	cbz	r3, 80080d0 <__sfp+0x68>
 800808c:	6836      	ldr	r6, [r6, #0]
 800808e:	e7f7      	b.n	8008080 <__sfp+0x18>
 8008090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008094:	b9d5      	cbnz	r5, 80080cc <__sfp+0x64>
 8008096:	4b16      	ldr	r3, [pc, #88]	; (80080f0 <__sfp+0x88>)
 8008098:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800809c:	60e3      	str	r3, [r4, #12]
 800809e:	6665      	str	r5, [r4, #100]	; 0x64
 80080a0:	f000 f847 	bl	8008132 <__retarget_lock_init_recursive>
 80080a4:	f7ff ff96 	bl	8007fd4 <__sfp_lock_release>
 80080a8:	2208      	movs	r2, #8
 80080aa:	4629      	mov	r1, r5
 80080ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080b4:	6025      	str	r5, [r4, #0]
 80080b6:	61a5      	str	r5, [r4, #24]
 80080b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080bc:	f7ff f938 	bl	8007330 <memset>
 80080c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080c8:	4620      	mov	r0, r4
 80080ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080cc:	3468      	adds	r4, #104	; 0x68
 80080ce:	e7d9      	b.n	8008084 <__sfp+0x1c>
 80080d0:	2104      	movs	r1, #4
 80080d2:	4638      	mov	r0, r7
 80080d4:	f7ff ff62 	bl	8007f9c <__sfmoreglue>
 80080d8:	4604      	mov	r4, r0
 80080da:	6030      	str	r0, [r6, #0]
 80080dc:	2800      	cmp	r0, #0
 80080de:	d1d5      	bne.n	800808c <__sfp+0x24>
 80080e0:	f7ff ff78 	bl	8007fd4 <__sfp_lock_release>
 80080e4:	230c      	movs	r3, #12
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	e7ee      	b.n	80080c8 <__sfp+0x60>
 80080ea:	bf00      	nop
 80080ec:	0800a1e0 	.word	0x0800a1e0
 80080f0:	ffff0001 	.word	0xffff0001

080080f4 <_fwalk_reent>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4606      	mov	r6, r0
 80080fa:	4688      	mov	r8, r1
 80080fc:	2700      	movs	r7, #0
 80080fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008102:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008106:	f1b9 0901 	subs.w	r9, r9, #1
 800810a:	d505      	bpl.n	8008118 <_fwalk_reent+0x24>
 800810c:	6824      	ldr	r4, [r4, #0]
 800810e:	2c00      	cmp	r4, #0
 8008110:	d1f7      	bne.n	8008102 <_fwalk_reent+0xe>
 8008112:	4638      	mov	r0, r7
 8008114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008118:	89ab      	ldrh	r3, [r5, #12]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d907      	bls.n	800812e <_fwalk_reent+0x3a>
 800811e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008122:	3301      	adds	r3, #1
 8008124:	d003      	beq.n	800812e <_fwalk_reent+0x3a>
 8008126:	4629      	mov	r1, r5
 8008128:	4630      	mov	r0, r6
 800812a:	47c0      	blx	r8
 800812c:	4307      	orrs	r7, r0
 800812e:	3568      	adds	r5, #104	; 0x68
 8008130:	e7e9      	b.n	8008106 <_fwalk_reent+0x12>

08008132 <__retarget_lock_init_recursive>:
 8008132:	4770      	bx	lr

08008134 <__retarget_lock_acquire_recursive>:
 8008134:	4770      	bx	lr

08008136 <__retarget_lock_release_recursive>:
 8008136:	4770      	bx	lr

08008138 <__swhatbuf_r>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	460e      	mov	r6, r1
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	4614      	mov	r4, r2
 8008142:	2900      	cmp	r1, #0
 8008144:	461d      	mov	r5, r3
 8008146:	b096      	sub	sp, #88	; 0x58
 8008148:	da08      	bge.n	800815c <__swhatbuf_r+0x24>
 800814a:	2200      	movs	r2, #0
 800814c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	061a      	lsls	r2, r3, #24
 8008154:	d410      	bmi.n	8008178 <__swhatbuf_r+0x40>
 8008156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815a:	e00e      	b.n	800817a <__swhatbuf_r+0x42>
 800815c:	466a      	mov	r2, sp
 800815e:	f000 f915 	bl	800838c <_fstat_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	dbf1      	blt.n	800814a <__swhatbuf_r+0x12>
 8008166:	9a01      	ldr	r2, [sp, #4]
 8008168:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800816c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008170:	425a      	negs	r2, r3
 8008172:	415a      	adcs	r2, r3
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	e7ee      	b.n	8008156 <__swhatbuf_r+0x1e>
 8008178:	2340      	movs	r3, #64	; 0x40
 800817a:	2000      	movs	r0, #0
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	b016      	add	sp, #88	; 0x58
 8008180:	bd70      	pop	{r4, r5, r6, pc}
	...

08008184 <__smakebuf_r>:
 8008184:	898b      	ldrh	r3, [r1, #12]
 8008186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008188:	079d      	lsls	r5, r3, #30
 800818a:	4606      	mov	r6, r0
 800818c:	460c      	mov	r4, r1
 800818e:	d507      	bpl.n	80081a0 <__smakebuf_r+0x1c>
 8008190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	6123      	str	r3, [r4, #16]
 8008198:	2301      	movs	r3, #1
 800819a:	6163      	str	r3, [r4, #20]
 800819c:	b002      	add	sp, #8
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	466a      	mov	r2, sp
 80081a2:	ab01      	add	r3, sp, #4
 80081a4:	f7ff ffc8 	bl	8008138 <__swhatbuf_r>
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	4605      	mov	r5, r0
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7ff f9d3 	bl	8007558 <_malloc_r>
 80081b2:	b948      	cbnz	r0, 80081c8 <__smakebuf_r+0x44>
 80081b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d4ef      	bmi.n	800819c <__smakebuf_r+0x18>
 80081bc:	f023 0303 	bic.w	r3, r3, #3
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	e7e3      	b.n	8008190 <__smakebuf_r+0xc>
 80081c8:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <__smakebuf_r+0x7c>)
 80081ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	6020      	str	r0, [r4, #0]
 80081d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	9b00      	ldr	r3, [sp, #0]
 80081d8:	6120      	str	r0, [r4, #16]
 80081da:	6163      	str	r3, [r4, #20]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	b15b      	cbz	r3, 80081f8 <__smakebuf_r+0x74>
 80081e0:	4630      	mov	r0, r6
 80081e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e6:	f000 f8e3 	bl	80083b0 <_isatty_r>
 80081ea:	b128      	cbz	r0, 80081f8 <__smakebuf_r+0x74>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	89a0      	ldrh	r0, [r4, #12]
 80081fa:	4305      	orrs	r5, r0
 80081fc:	81a5      	strh	r5, [r4, #12]
 80081fe:	e7cd      	b.n	800819c <__smakebuf_r+0x18>
 8008200:	08007f91 	.word	0x08007f91

08008204 <memchr>:
 8008204:	4603      	mov	r3, r0
 8008206:	b510      	push	{r4, lr}
 8008208:	b2c9      	uxtb	r1, r1
 800820a:	4402      	add	r2, r0
 800820c:	4293      	cmp	r3, r2
 800820e:	4618      	mov	r0, r3
 8008210:	d101      	bne.n	8008216 <memchr+0x12>
 8008212:	2000      	movs	r0, #0
 8008214:	e003      	b.n	800821e <memchr+0x1a>
 8008216:	7804      	ldrb	r4, [r0, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	428c      	cmp	r4, r1
 800821c:	d1f6      	bne.n	800820c <memchr+0x8>
 800821e:	bd10      	pop	{r4, pc}

08008220 <__malloc_lock>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__malloc_lock+0x8>)
 8008222:	f7ff bf87 	b.w	8008134 <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	20000498 	.word	0x20000498

0800822c <__malloc_unlock>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__malloc_unlock+0x8>)
 800822e:	f7ff bf82 	b.w	8008136 <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	20000498 	.word	0x20000498

08008238 <_raise_r>:
 8008238:	291f      	cmp	r1, #31
 800823a:	b538      	push	{r3, r4, r5, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	d904      	bls.n	800824c <_raise_r+0x14>
 8008242:	2316      	movs	r3, #22
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800824e:	b112      	cbz	r2, 8008256 <_raise_r+0x1e>
 8008250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008254:	b94b      	cbnz	r3, 800826a <_raise_r+0x32>
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f830 	bl	80082bc <_getpid_r>
 800825c:	462a      	mov	r2, r5
 800825e:	4601      	mov	r1, r0
 8008260:	4620      	mov	r0, r4
 8008262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008266:	f000 b817 	b.w	8008298 <_kill_r>
 800826a:	2b01      	cmp	r3, #1
 800826c:	d00a      	beq.n	8008284 <_raise_r+0x4c>
 800826e:	1c59      	adds	r1, r3, #1
 8008270:	d103      	bne.n	800827a <_raise_r+0x42>
 8008272:	2316      	movs	r3, #22
 8008274:	6003      	str	r3, [r0, #0]
 8008276:	2001      	movs	r0, #1
 8008278:	e7e7      	b.n	800824a <_raise_r+0x12>
 800827a:	2400      	movs	r4, #0
 800827c:	4628      	mov	r0, r5
 800827e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008282:	4798      	blx	r3
 8008284:	2000      	movs	r0, #0
 8008286:	e7e0      	b.n	800824a <_raise_r+0x12>

08008288 <raise>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <raise+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f7ff bfd3 	b.w	8008238 <_raise_r>
 8008292:	bf00      	nop
 8008294:	20000014 	.word	0x20000014

08008298 <_kill_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	2300      	movs	r3, #0
 800829c:	4d06      	ldr	r5, [pc, #24]	; (80082b8 <_kill_r+0x20>)
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	f7f9 f99e 	bl	80015e6 <_kill>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d102      	bne.n	80082b4 <_kill_r+0x1c>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b103      	cbz	r3, 80082b4 <_kill_r+0x1c>
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	2000049c 	.word	0x2000049c

080082bc <_getpid_r>:
 80082bc:	f7f9 b98c 	b.w	80015d8 <_getpid>

080082c0 <__sread>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	f000 f894 	bl	80083f4 <_read_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bfab      	itete	ge
 80082d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082d2:	89a3      	ldrhlt	r3, [r4, #12]
 80082d4:	181b      	addge	r3, r3, r0
 80082d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082da:	bfac      	ite	ge
 80082dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082de:	81a3      	strhlt	r3, [r4, #12]
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <__swrite>:
 80082e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	461f      	mov	r7, r3
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	4605      	mov	r5, r0
 80082ec:	05db      	lsls	r3, r3, #23
 80082ee:	460c      	mov	r4, r1
 80082f0:	4616      	mov	r6, r2
 80082f2:	d505      	bpl.n	8008300 <__swrite+0x1e>
 80082f4:	2302      	movs	r3, #2
 80082f6:	2200      	movs	r2, #0
 80082f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fc:	f000 f868 	bl	80083d0 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	4632      	mov	r2, r6
 8008304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	4628      	mov	r0, r5
 800830c:	463b      	mov	r3, r7
 800830e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	f000 b817 	b.w	8008348 <_write_r>

0800831a <__sseek>:
 800831a:	b510      	push	{r4, lr}
 800831c:	460c      	mov	r4, r1
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 f855 	bl	80083d0 <_lseek_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	bf15      	itete	ne
 800832c:	6560      	strne	r0, [r4, #84]	; 0x54
 800832e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strheq	r3, [r4, #12]
 8008338:	bf18      	it	ne
 800833a:	81a3      	strhne	r3, [r4, #12]
 800833c:	bd10      	pop	{r4, pc}

0800833e <__sclose>:
 800833e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008342:	f000 b813 	b.w	800836c <_close_r>
	...

08008348 <_write_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	2200      	movs	r2, #0
 8008352:	4d05      	ldr	r5, [pc, #20]	; (8008368 <_write_r+0x20>)
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7f9 f97c 	bl	8001654 <_write>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_write_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_write_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	2000049c 	.word	0x2000049c

0800836c <_close_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	2300      	movs	r3, #0
 8008370:	4d05      	ldr	r5, [pc, #20]	; (8008388 <_close_r+0x1c>)
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	f7f9 f988 	bl	800168c <_close>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_close_r+0x1a>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_close_r+0x1a>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	2000049c 	.word	0x2000049c

0800838c <_fstat_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	2300      	movs	r3, #0
 8008390:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_fstat_r+0x20>)
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	f7f9 f982 	bl	80016a2 <_fstat>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	d102      	bne.n	80083a8 <_fstat_r+0x1c>
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b103      	cbz	r3, 80083a8 <_fstat_r+0x1c>
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	2000049c 	.word	0x2000049c

080083b0 <_isatty_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4d05      	ldr	r5, [pc, #20]	; (80083cc <_isatty_r+0x1c>)
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7f9 f980 	bl	80016c0 <_isatty>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_isatty_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_isatty_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	2000049c 	.word	0x2000049c

080083d0 <_lseek_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	4d05      	ldr	r5, [pc, #20]	; (80083f0 <_lseek_r+0x20>)
 80083dc:	602a      	str	r2, [r5, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f9 f978 	bl	80016d4 <_lseek>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_lseek_r+0x1e>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_lseek_r+0x1e>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	2000049c 	.word	0x2000049c

080083f4 <_read_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	2200      	movs	r2, #0
 80083fe:	4d05      	ldr	r5, [pc, #20]	; (8008414 <_read_r+0x20>)
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7f9 f909 	bl	800161a <_read>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_read_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_read_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	2000049c 	.word	0x2000049c

08008418 <cos>:
 8008418:	b530      	push	{r4, r5, lr}
 800841a:	4a20      	ldr	r2, [pc, #128]	; (800849c <cos+0x84>)
 800841c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008420:	4293      	cmp	r3, r2
 8008422:	b087      	sub	sp, #28
 8008424:	dc06      	bgt.n	8008434 <cos+0x1c>
 8008426:	2200      	movs	r2, #0
 8008428:	2300      	movs	r3, #0
 800842a:	b007      	add	sp, #28
 800842c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008430:	f001 b8ca 	b.w	80095c8 <__kernel_cos>
 8008434:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <cos+0x88>)
 8008436:	4293      	cmp	r3, r2
 8008438:	dd05      	ble.n	8008446 <cos+0x2e>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	f7f7 fe8b 	bl	8000158 <__aeabi_dsub>
 8008442:	b007      	add	sp, #28
 8008444:	bd30      	pop	{r4, r5, pc}
 8008446:	aa02      	add	r2, sp, #8
 8008448:	f000 fe16 	bl	8009078 <__ieee754_rem_pio2>
 800844c:	f000 0003 	and.w	r0, r0, #3
 8008450:	2801      	cmp	r0, #1
 8008452:	d009      	beq.n	8008468 <cos+0x50>
 8008454:	2802      	cmp	r0, #2
 8008456:	d011      	beq.n	800847c <cos+0x64>
 8008458:	b9b8      	cbnz	r0, 800848a <cos+0x72>
 800845a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	f001 f8b1 	bl	80095c8 <__kernel_cos>
 8008466:	e7ec      	b.n	8008442 <cos+0x2a>
 8008468:	9000      	str	r0, [sp, #0]
 800846a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	f001 fca9 	bl	8009dc8 <__kernel_sin>
 8008476:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800847a:	e7e2      	b.n	8008442 <cos+0x2a>
 800847c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008484:	f001 f8a0 	bl	80095c8 <__kernel_cos>
 8008488:	e7f5      	b.n	8008476 <cos+0x5e>
 800848a:	2301      	movs	r3, #1
 800848c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	f001 fc97 	bl	8009dc8 <__kernel_sin>
 800849a:	e7d2      	b.n	8008442 <cos+0x2a>
 800849c:	3fe921fb 	.word	0x3fe921fb
 80084a0:	7fefffff 	.word	0x7fefffff

080084a4 <sin>:
 80084a4:	b530      	push	{r4, r5, lr}
 80084a6:	4a20      	ldr	r2, [pc, #128]	; (8008528 <sin+0x84>)
 80084a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084ac:	4293      	cmp	r3, r2
 80084ae:	b087      	sub	sp, #28
 80084b0:	dc06      	bgt.n	80084c0 <sin+0x1c>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2200      	movs	r2, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	f001 fc85 	bl	8009dc8 <__kernel_sin>
 80084be:	e006      	b.n	80084ce <sin+0x2a>
 80084c0:	4a1a      	ldr	r2, [pc, #104]	; (800852c <sin+0x88>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	dd05      	ble.n	80084d2 <sin+0x2e>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	f7f7 fe45 	bl	8000158 <__aeabi_dsub>
 80084ce:	b007      	add	sp, #28
 80084d0:	bd30      	pop	{r4, r5, pc}
 80084d2:	aa02      	add	r2, sp, #8
 80084d4:	f000 fdd0 	bl	8009078 <__ieee754_rem_pio2>
 80084d8:	f000 0003 	and.w	r0, r0, #3
 80084dc:	2801      	cmp	r0, #1
 80084de:	d009      	beq.n	80084f4 <sin+0x50>
 80084e0:	2802      	cmp	r0, #2
 80084e2:	d00e      	beq.n	8008502 <sin+0x5e>
 80084e4:	b9c0      	cbnz	r0, 8008518 <sin+0x74>
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	2301      	movs	r3, #1
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f2:	e7e2      	b.n	80084ba <sin+0x16>
 80084f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084fc:	f001 f864 	bl	80095c8 <__kernel_cos>
 8008500:	e7e5      	b.n	80084ce <sin+0x2a>
 8008502:	2301      	movs	r3, #1
 8008504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850e:	f001 fc5b 	bl	8009dc8 <__kernel_sin>
 8008512:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008516:	e7da      	b.n	80084ce <sin+0x2a>
 8008518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800851c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008520:	f001 f852 	bl	80095c8 <__kernel_cos>
 8008524:	e7f5      	b.n	8008512 <sin+0x6e>
 8008526:	bf00      	nop
 8008528:	3fe921fb 	.word	0x3fe921fb
 800852c:	7fefffff 	.word	0x7fefffff

08008530 <pow>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	4680      	mov	r8, r0
 800853a:	4689      	mov	r9, r1
 800853c:	f000 f884 	bl	8008648 <__ieee754_pow>
 8008540:	4622      	mov	r2, r4
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	462b      	mov	r3, r5
 8008548:	4620      	mov	r0, r4
 800854a:	4629      	mov	r1, r5
 800854c:	f7f8 fa56 	bl	80009fc <__aeabi_dcmpun>
 8008550:	bbc8      	cbnz	r0, 80085c6 <pow+0x96>
 8008552:	2200      	movs	r2, #0
 8008554:	2300      	movs	r3, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 fa1d 	bl	8000998 <__aeabi_dcmpeq>
 800855e:	b1b8      	cbz	r0, 8008590 <pow+0x60>
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 fa16 	bl	8000998 <__aeabi_dcmpeq>
 800856c:	2800      	cmp	r0, #0
 800856e:	d141      	bne.n	80085f4 <pow+0xc4>
 8008570:	4620      	mov	r0, r4
 8008572:	4629      	mov	r1, r5
 8008574:	f001 fd0d 	bl	8009f92 <finite>
 8008578:	b328      	cbz	r0, 80085c6 <pow+0x96>
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f8 fa13 	bl	80009ac <__aeabi_dcmplt>
 8008586:	b1f0      	cbz	r0, 80085c6 <pow+0x96>
 8008588:	f7fe fea8 	bl	80072dc <__errno>
 800858c:	2322      	movs	r3, #34	; 0x22
 800858e:	e019      	b.n	80085c4 <pow+0x94>
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f001 fcfd 	bl	8009f92 <finite>
 8008598:	b9c8      	cbnz	r0, 80085ce <pow+0x9e>
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f001 fcf8 	bl	8009f92 <finite>
 80085a2:	b1a0      	cbz	r0, 80085ce <pow+0x9e>
 80085a4:	4620      	mov	r0, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	f001 fcf3 	bl	8009f92 <finite>
 80085ac:	b178      	cbz	r0, 80085ce <pow+0x9e>
 80085ae:	4632      	mov	r2, r6
 80085b0:	463b      	mov	r3, r7
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f8 fa21 	bl	80009fc <__aeabi_dcmpun>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0e4      	beq.n	8008588 <pow+0x58>
 80085be:	f7fe fe8d 	bl	80072dc <__errno>
 80085c2:	2321      	movs	r3, #33	; 0x21
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	2200      	movs	r2, #0
 80085d0:	2300      	movs	r3, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 f9df 	bl	8000998 <__aeabi_dcmpeq>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d0f3      	beq.n	80085c6 <pow+0x96>
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f001 fcd6 	bl	8009f92 <finite>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d0ed      	beq.n	80085c6 <pow+0x96>
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f001 fcd0 	bl	8009f92 <finite>
 80085f2:	e7c8      	b.n	8008586 <pow+0x56>
 80085f4:	2600      	movs	r6, #0
 80085f6:	4f01      	ldr	r7, [pc, #4]	; (80085fc <pow+0xcc>)
 80085f8:	e7e5      	b.n	80085c6 <pow+0x96>
 80085fa:	bf00      	nop
 80085fc:	3ff00000 	.word	0x3ff00000

08008600 <sqrt>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	4606      	mov	r6, r0
 8008604:	460f      	mov	r7, r1
 8008606:	f000 ff2f 	bl	8009468 <__ieee754_sqrt>
 800860a:	4632      	mov	r2, r6
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	463b      	mov	r3, r7
 8008612:	4630      	mov	r0, r6
 8008614:	4639      	mov	r1, r7
 8008616:	f7f8 f9f1 	bl	80009fc <__aeabi_dcmpun>
 800861a:	b990      	cbnz	r0, 8008642 <sqrt+0x42>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f8 f9c2 	bl	80009ac <__aeabi_dcmplt>
 8008628:	b158      	cbz	r0, 8008642 <sqrt+0x42>
 800862a:	f7fe fe57 	bl	80072dc <__errno>
 800862e:	2321      	movs	r3, #33	; 0x21
 8008630:	2200      	movs	r2, #0
 8008632:	6003      	str	r3, [r0, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	4610      	mov	r0, r2
 8008638:	4619      	mov	r1, r3
 800863a:	f7f8 f86f 	bl	800071c <__aeabi_ddiv>
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008648 <__ieee754_pow>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	b093      	sub	sp, #76	; 0x4c
 800864e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008652:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008656:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800865a:	4689      	mov	r9, r1
 800865c:	ea56 0102 	orrs.w	r1, r6, r2
 8008660:	4680      	mov	r8, r0
 8008662:	d111      	bne.n	8008688 <__ieee754_pow+0x40>
 8008664:	1803      	adds	r3, r0, r0
 8008666:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800866a:	4152      	adcs	r2, r2
 800866c:	4299      	cmp	r1, r3
 800866e:	4b82      	ldr	r3, [pc, #520]	; (8008878 <__ieee754_pow+0x230>)
 8008670:	4193      	sbcs	r3, r2
 8008672:	f080 84b9 	bcs.w	8008fe8 <__ieee754_pow+0x9a0>
 8008676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	f7f7 fd6d 	bl	800015c <__adddf3>
 8008682:	4683      	mov	fp, r0
 8008684:	468c      	mov	ip, r1
 8008686:	e06f      	b.n	8008768 <__ieee754_pow+0x120>
 8008688:	4b7c      	ldr	r3, [pc, #496]	; (800887c <__ieee754_pow+0x234>)
 800868a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800868e:	429c      	cmp	r4, r3
 8008690:	464d      	mov	r5, r9
 8008692:	4682      	mov	sl, r0
 8008694:	dc06      	bgt.n	80086a4 <__ieee754_pow+0x5c>
 8008696:	d101      	bne.n	800869c <__ieee754_pow+0x54>
 8008698:	2800      	cmp	r0, #0
 800869a:	d1ec      	bne.n	8008676 <__ieee754_pow+0x2e>
 800869c:	429e      	cmp	r6, r3
 800869e:	dc01      	bgt.n	80086a4 <__ieee754_pow+0x5c>
 80086a0:	d10f      	bne.n	80086c2 <__ieee754_pow+0x7a>
 80086a2:	b172      	cbz	r2, 80086c2 <__ieee754_pow+0x7a>
 80086a4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80086a8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80086ac:	ea55 050a 	orrs.w	r5, r5, sl
 80086b0:	d1e1      	bne.n	8008676 <__ieee754_pow+0x2e>
 80086b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80086b6:	18db      	adds	r3, r3, r3
 80086b8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80086bc:	4152      	adcs	r2, r2
 80086be:	429d      	cmp	r5, r3
 80086c0:	e7d5      	b.n	800866e <__ieee754_pow+0x26>
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	da39      	bge.n	800873a <__ieee754_pow+0xf2>
 80086c6:	4b6e      	ldr	r3, [pc, #440]	; (8008880 <__ieee754_pow+0x238>)
 80086c8:	429e      	cmp	r6, r3
 80086ca:	dc52      	bgt.n	8008772 <__ieee754_pow+0x12a>
 80086cc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80086d0:	429e      	cmp	r6, r3
 80086d2:	f340 849c 	ble.w	800900e <__ieee754_pow+0x9c6>
 80086d6:	1533      	asrs	r3, r6, #20
 80086d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086dc:	2b14      	cmp	r3, #20
 80086de:	dd0f      	ble.n	8008700 <__ieee754_pow+0xb8>
 80086e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80086e4:	fa22 f103 	lsr.w	r1, r2, r3
 80086e8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ec:	4293      	cmp	r3, r2
 80086ee:	f040 848e 	bne.w	800900e <__ieee754_pow+0x9c6>
 80086f2:	f001 0101 	and.w	r1, r1, #1
 80086f6:	f1c1 0302 	rsb	r3, r1, #2
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	b182      	cbz	r2, 8008720 <__ieee754_pow+0xd8>
 80086fe:	e05d      	b.n	80087bc <__ieee754_pow+0x174>
 8008700:	2a00      	cmp	r2, #0
 8008702:	d159      	bne.n	80087b8 <__ieee754_pow+0x170>
 8008704:	f1c3 0314 	rsb	r3, r3, #20
 8008708:	fa46 f103 	asr.w	r1, r6, r3
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	42b3      	cmp	r3, r6
 8008712:	f040 8479 	bne.w	8009008 <__ieee754_pow+0x9c0>
 8008716:	f001 0101 	and.w	r1, r1, #1
 800871a:	f1c1 0302 	rsb	r3, r1, #2
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4b58      	ldr	r3, [pc, #352]	; (8008884 <__ieee754_pow+0x23c>)
 8008722:	429e      	cmp	r6, r3
 8008724:	d132      	bne.n	800878c <__ieee754_pow+0x144>
 8008726:	2f00      	cmp	r7, #0
 8008728:	f280 846a 	bge.w	8009000 <__ieee754_pow+0x9b8>
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	2000      	movs	r0, #0
 8008732:	4954      	ldr	r1, [pc, #336]	; (8008884 <__ieee754_pow+0x23c>)
 8008734:	f7f7 fff2 	bl	800071c <__aeabi_ddiv>
 8008738:	e7a3      	b.n	8008682 <__ieee754_pow+0x3a>
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	2a00      	cmp	r2, #0
 8008740:	d13c      	bne.n	80087bc <__ieee754_pow+0x174>
 8008742:	4b4e      	ldr	r3, [pc, #312]	; (800887c <__ieee754_pow+0x234>)
 8008744:	429e      	cmp	r6, r3
 8008746:	d1eb      	bne.n	8008720 <__ieee754_pow+0xd8>
 8008748:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800874c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008750:	ea53 030a 	orrs.w	r3, r3, sl
 8008754:	f000 8448 	beq.w	8008fe8 <__ieee754_pow+0x9a0>
 8008758:	4b4b      	ldr	r3, [pc, #300]	; (8008888 <__ieee754_pow+0x240>)
 800875a:	429c      	cmp	r4, r3
 800875c:	dd0b      	ble.n	8008776 <__ieee754_pow+0x12e>
 800875e:	2f00      	cmp	r7, #0
 8008760:	f2c0 8448 	blt.w	8008ff4 <__ieee754_pow+0x9ac>
 8008764:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008768:	4658      	mov	r0, fp
 800876a:	4661      	mov	r1, ip
 800876c:	b013      	add	sp, #76	; 0x4c
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	2302      	movs	r3, #2
 8008774:	e7e2      	b.n	800873c <__ieee754_pow+0xf4>
 8008776:	2f00      	cmp	r7, #0
 8008778:	f04f 0b00 	mov.w	fp, #0
 800877c:	f04f 0c00 	mov.w	ip, #0
 8008780:	daf2      	bge.n	8008768 <__ieee754_pow+0x120>
 8008782:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008786:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800878a:	e7ed      	b.n	8008768 <__ieee754_pow+0x120>
 800878c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008790:	d106      	bne.n	80087a0 <__ieee754_pow+0x158>
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7f7 fe95 	bl	80004c8 <__aeabi_dmul>
 800879e:	e770      	b.n	8008682 <__ieee754_pow+0x3a>
 80087a0:	4b3a      	ldr	r3, [pc, #232]	; (800888c <__ieee754_pow+0x244>)
 80087a2:	429f      	cmp	r7, r3
 80087a4:	d10a      	bne.n	80087bc <__ieee754_pow+0x174>
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	db08      	blt.n	80087bc <__ieee754_pow+0x174>
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	b013      	add	sp, #76	; 0x4c
 80087b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	f000 be58 	b.w	8009468 <__ieee754_sqrt>
 80087b8:	2300      	movs	r3, #0
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f001 fbe4 	bl	8009f8c <fabs>
 80087c4:	4683      	mov	fp, r0
 80087c6:	468c      	mov	ip, r1
 80087c8:	f1ba 0f00 	cmp.w	sl, #0
 80087cc:	d128      	bne.n	8008820 <__ieee754_pow+0x1d8>
 80087ce:	b124      	cbz	r4, 80087da <__ieee754_pow+0x192>
 80087d0:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <__ieee754_pow+0x23c>)
 80087d2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d122      	bne.n	8008820 <__ieee754_pow+0x1d8>
 80087da:	2f00      	cmp	r7, #0
 80087dc:	da07      	bge.n	80087ee <__ieee754_pow+0x1a6>
 80087de:	465a      	mov	r2, fp
 80087e0:	4663      	mov	r3, ip
 80087e2:	2000      	movs	r0, #0
 80087e4:	4927      	ldr	r1, [pc, #156]	; (8008884 <__ieee754_pow+0x23c>)
 80087e6:	f7f7 ff99 	bl	800071c <__aeabi_ddiv>
 80087ea:	4683      	mov	fp, r0
 80087ec:	468c      	mov	ip, r1
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	daba      	bge.n	8008768 <__ieee754_pow+0x120>
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80087f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80087fc:	4323      	orrs	r3, r4
 80087fe:	d108      	bne.n	8008812 <__ieee754_pow+0x1ca>
 8008800:	465a      	mov	r2, fp
 8008802:	4663      	mov	r3, ip
 8008804:	4658      	mov	r0, fp
 8008806:	4661      	mov	r1, ip
 8008808:	f7f7 fca6 	bl	8000158 <__aeabi_dsub>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	e790      	b.n	8008734 <__ieee754_pow+0xec>
 8008812:	9b00      	ldr	r3, [sp, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d1a7      	bne.n	8008768 <__ieee754_pow+0x120>
 8008818:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800881c:	469c      	mov	ip, r3
 800881e:	e7a3      	b.n	8008768 <__ieee754_pow+0x120>
 8008820:	0feb      	lsrs	r3, r5, #31
 8008822:	3b01      	subs	r3, #1
 8008824:	930c      	str	r3, [sp, #48]	; 0x30
 8008826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008828:	9b00      	ldr	r3, [sp, #0]
 800882a:	4313      	orrs	r3, r2
 800882c:	d104      	bne.n	8008838 <__ieee754_pow+0x1f0>
 800882e:	4642      	mov	r2, r8
 8008830:	464b      	mov	r3, r9
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	e7e7      	b.n	8008808 <__ieee754_pow+0x1c0>
 8008838:	4b15      	ldr	r3, [pc, #84]	; (8008890 <__ieee754_pow+0x248>)
 800883a:	429e      	cmp	r6, r3
 800883c:	f340 80f6 	ble.w	8008a2c <__ieee754_pow+0x3e4>
 8008840:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008844:	429e      	cmp	r6, r3
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <__ieee754_pow+0x240>)
 8008848:	dd09      	ble.n	800885e <__ieee754_pow+0x216>
 800884a:	429c      	cmp	r4, r3
 800884c:	dc0c      	bgt.n	8008868 <__ieee754_pow+0x220>
 800884e:	2f00      	cmp	r7, #0
 8008850:	da0c      	bge.n	800886c <__ieee754_pow+0x224>
 8008852:	2000      	movs	r0, #0
 8008854:	b013      	add	sp, #76	; 0x4c
 8008856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f001 bb92 	b.w	8009f82 <__math_oflow>
 800885e:	429c      	cmp	r4, r3
 8008860:	dbf5      	blt.n	800884e <__ieee754_pow+0x206>
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <__ieee754_pow+0x23c>)
 8008864:	429c      	cmp	r4, r3
 8008866:	dd15      	ble.n	8008894 <__ieee754_pow+0x24c>
 8008868:	2f00      	cmp	r7, #0
 800886a:	dcf2      	bgt.n	8008852 <__ieee754_pow+0x20a>
 800886c:	2000      	movs	r0, #0
 800886e:	b013      	add	sp, #76	; 0x4c
 8008870:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	f001 bb80 	b.w	8009f78 <__math_uflow>
 8008878:	fff00000 	.word	0xfff00000
 800887c:	7ff00000 	.word	0x7ff00000
 8008880:	433fffff 	.word	0x433fffff
 8008884:	3ff00000 	.word	0x3ff00000
 8008888:	3fefffff 	.word	0x3fefffff
 800888c:	3fe00000 	.word	0x3fe00000
 8008890:	41e00000 	.word	0x41e00000
 8008894:	4661      	mov	r1, ip
 8008896:	2200      	movs	r2, #0
 8008898:	4658      	mov	r0, fp
 800889a:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <__ieee754_pow+0x3d0>)
 800889c:	f7f7 fc5c 	bl	8000158 <__aeabi_dsub>
 80088a0:	a355      	add	r3, pc, #340	; (adr r3, 80089f8 <__ieee754_pow+0x3b0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	4604      	mov	r4, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	f7f7 fe0d 	bl	80004c8 <__aeabi_dmul>
 80088ae:	a354      	add	r3, pc, #336	; (adr r3, 8008a00 <__ieee754_pow+0x3b8>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fe04 	bl	80004c8 <__aeabi_dmul>
 80088c0:	2200      	movs	r2, #0
 80088c2:	4682      	mov	sl, r0
 80088c4:	468b      	mov	fp, r1
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	4b54      	ldr	r3, [pc, #336]	; (8008a1c <__ieee754_pow+0x3d4>)
 80088cc:	f7f7 fdfc 	bl	80004c8 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	a14c      	add	r1, pc, #304	; (adr r1, 8008a08 <__ieee754_pow+0x3c0>)
 80088d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088da:	f7f7 fc3d 	bl	8000158 <__aeabi_dsub>
 80088de:	4622      	mov	r2, r4
 80088e0:	462b      	mov	r3, r5
 80088e2:	f7f7 fdf1 	bl	80004c8 <__aeabi_dmul>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	2000      	movs	r0, #0
 80088ec:	494c      	ldr	r1, [pc, #304]	; (8008a20 <__ieee754_pow+0x3d8>)
 80088ee:	f7f7 fc33 	bl	8000158 <__aeabi_dsub>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	4680      	mov	r8, r0
 80088f8:	4689      	mov	r9, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f7 fde3 	bl	80004c8 <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	f7f7 fddd 	bl	80004c8 <__aeabi_dmul>
 800890e:	a340      	add	r3, pc, #256	; (adr r3, 8008a10 <__ieee754_pow+0x3c8>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fdd8 	bl	80004c8 <__aeabi_dmul>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	f7f7 fc1a 	bl	8000158 <__aeabi_dsub>
 8008924:	f04f 0a00 	mov.w	sl, #0
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f7 fc12 	bl	800015c <__adddf3>
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	4650      	mov	r0, sl
 800893e:	468b      	mov	fp, r1
 8008940:	f7f7 fc0a 	bl	8000158 <__aeabi_dsub>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4620      	mov	r0, r4
 800894a:	4629      	mov	r1, r5
 800894c:	f7f7 fc04 	bl	8000158 <__aeabi_dsub>
 8008950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008958:	3b01      	subs	r3, #1
 800895a:	4313      	orrs	r3, r2
 800895c:	f04f 0600 	mov.w	r6, #0
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	bf0c      	ite	eq
 8008966:	4b2f      	ldreq	r3, [pc, #188]	; (8008a24 <__ieee754_pow+0x3dc>)
 8008968:	4b2b      	ldrne	r3, [pc, #172]	; (8008a18 <__ieee754_pow+0x3d0>)
 800896a:	4604      	mov	r4, r0
 800896c:	460d      	mov	r5, r1
 800896e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008972:	e9cd 2300 	strd	r2, r3, [sp]
 8008976:	4632      	mov	r2, r6
 8008978:	463b      	mov	r3, r7
 800897a:	f7f7 fbed 	bl	8000158 <__aeabi_dsub>
 800897e:	4652      	mov	r2, sl
 8008980:	465b      	mov	r3, fp
 8008982:	f7f7 fda1 	bl	80004c8 <__aeabi_dmul>
 8008986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800898a:	4680      	mov	r8, r0
 800898c:	4689      	mov	r9, r1
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f7 fd99 	bl	80004c8 <__aeabi_dmul>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f7 fbdd 	bl	800015c <__adddf3>
 80089a2:	4632      	mov	r2, r6
 80089a4:	463b      	mov	r3, r7
 80089a6:	4680      	mov	r8, r0
 80089a8:	4689      	mov	r9, r1
 80089aa:	4650      	mov	r0, sl
 80089ac:	4659      	mov	r1, fp
 80089ae:	f7f7 fd8b 	bl	80004c8 <__aeabi_dmul>
 80089b2:	4604      	mov	r4, r0
 80089b4:	460d      	mov	r5, r1
 80089b6:	460b      	mov	r3, r1
 80089b8:	4602      	mov	r2, r0
 80089ba:	4649      	mov	r1, r9
 80089bc:	4640      	mov	r0, r8
 80089be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089c2:	f7f7 fbcb 	bl	800015c <__adddf3>
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <__ieee754_pow+0x3e0>)
 80089c8:	4682      	mov	sl, r0
 80089ca:	4299      	cmp	r1, r3
 80089cc:	460f      	mov	r7, r1
 80089ce:	460e      	mov	r6, r1
 80089d0:	f340 82e5 	ble.w	8008f9e <__ieee754_pow+0x956>
 80089d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80089d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80089dc:	4303      	orrs	r3, r0
 80089de:	f000 81df 	beq.w	8008da0 <__ieee754_pow+0x758>
 80089e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2300      	movs	r3, #0
 80089ea:	f7f7 ffdf 	bl	80009ac <__aeabi_dcmplt>
 80089ee:	3800      	subs	r0, #0
 80089f0:	bf18      	it	ne
 80089f2:	2001      	movne	r0, #1
 80089f4:	e72e      	b.n	8008854 <__ieee754_pow+0x20c>
 80089f6:	bf00      	nop
 80089f8:	60000000 	.word	0x60000000
 80089fc:	3ff71547 	.word	0x3ff71547
 8008a00:	f85ddf44 	.word	0xf85ddf44
 8008a04:	3e54ae0b 	.word	0x3e54ae0b
 8008a08:	55555555 	.word	0x55555555
 8008a0c:	3fd55555 	.word	0x3fd55555
 8008a10:	652b82fe 	.word	0x652b82fe
 8008a14:	3ff71547 	.word	0x3ff71547
 8008a18:	3ff00000 	.word	0x3ff00000
 8008a1c:	3fd00000 	.word	0x3fd00000
 8008a20:	3fe00000 	.word	0x3fe00000
 8008a24:	bff00000 	.word	0xbff00000
 8008a28:	408fffff 	.word	0x408fffff
 8008a2c:	4bd2      	ldr	r3, [pc, #840]	; (8008d78 <__ieee754_pow+0x730>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	402b      	ands	r3, r5
 8008a32:	b943      	cbnz	r3, 8008a46 <__ieee754_pow+0x3fe>
 8008a34:	4658      	mov	r0, fp
 8008a36:	4661      	mov	r1, ip
 8008a38:	4bd0      	ldr	r3, [pc, #832]	; (8008d7c <__ieee754_pow+0x734>)
 8008a3a:	f7f7 fd45 	bl	80004c8 <__aeabi_dmul>
 8008a3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a42:	4683      	mov	fp, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	1523      	asrs	r3, r4, #20
 8008a48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a4c:	4413      	add	r3, r2
 8008a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a50:	4bcb      	ldr	r3, [pc, #812]	; (8008d80 <__ieee754_pow+0x738>)
 8008a52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a60:	dd08      	ble.n	8008a74 <__ieee754_pow+0x42c>
 8008a62:	4bc8      	ldr	r3, [pc, #800]	; (8008d84 <__ieee754_pow+0x73c>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	f340 8199 	ble.w	8008d9c <__ieee754_pow+0x754>
 8008a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008a70:	3301      	adds	r3, #1
 8008a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a74:	2600      	movs	r6, #0
 8008a76:	00f3      	lsls	r3, r6, #3
 8008a78:	930d      	str	r3, [sp, #52]	; 0x34
 8008a7a:	4bc3      	ldr	r3, [pc, #780]	; (8008d88 <__ieee754_pow+0x740>)
 8008a7c:	4658      	mov	r0, fp
 8008a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a86:	4629      	mov	r1, r5
 8008a88:	461a      	mov	r2, r3
 8008a8a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008a8e:	4623      	mov	r3, r4
 8008a90:	f7f7 fb62 	bl	8000158 <__aeabi_dsub>
 8008a94:	46da      	mov	sl, fp
 8008a96:	462b      	mov	r3, r5
 8008a98:	4652      	mov	r2, sl
 8008a9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008aa2:	f7f7 fb5b 	bl	800015c <__adddf3>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	2000      	movs	r0, #0
 8008aac:	49b7      	ldr	r1, [pc, #732]	; (8008d8c <__ieee754_pow+0x744>)
 8008aae:	f7f7 fe35 	bl	800071c <__aeabi_ddiv>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008abe:	f7f7 fd03 	bl	80004c8 <__aeabi_dmul>
 8008ac2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ac6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008aca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	46ab      	mov	fp, r5
 8008ad4:	106d      	asrs	r5, r5, #1
 8008ad6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008ae0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ae4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4649      	mov	r1, r9
 8008aec:	4614      	mov	r4, r2
 8008aee:	461d      	mov	r5, r3
 8008af0:	f7f7 fcea 	bl	80004c8 <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008afc:	f7f7 fb2c 	bl	8000158 <__aeabi_dsub>
 8008b00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b04:	4606      	mov	r6, r0
 8008b06:	460f      	mov	r7, r1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7f7 fb24 	bl	8000158 <__aeabi_dsub>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fb1e 	bl	8000158 <__aeabi_dsub>
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	f7f7 fcd2 	bl	80004c8 <__aeabi_dmul>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f7 fb14 	bl	8000158 <__aeabi_dsub>
 8008b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b34:	f7f7 fcc8 	bl	80004c8 <__aeabi_dmul>
 8008b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f7f7 fcc0 	bl	80004c8 <__aeabi_dmul>
 8008b48:	a379      	add	r3, pc, #484	; (adr r3, 8008d30 <__ieee754_pow+0x6e8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	4604      	mov	r4, r0
 8008b50:	460d      	mov	r5, r1
 8008b52:	f7f7 fcb9 	bl	80004c8 <__aeabi_dmul>
 8008b56:	a378      	add	r3, pc, #480	; (adr r3, 8008d38 <__ieee754_pow+0x6f0>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fafe 	bl	800015c <__adddf3>
 8008b60:	4622      	mov	r2, r4
 8008b62:	462b      	mov	r3, r5
 8008b64:	f7f7 fcb0 	bl	80004c8 <__aeabi_dmul>
 8008b68:	a375      	add	r3, pc, #468	; (adr r3, 8008d40 <__ieee754_pow+0x6f8>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 faf5 	bl	800015c <__adddf3>
 8008b72:	4622      	mov	r2, r4
 8008b74:	462b      	mov	r3, r5
 8008b76:	f7f7 fca7 	bl	80004c8 <__aeabi_dmul>
 8008b7a:	a373      	add	r3, pc, #460	; (adr r3, 8008d48 <__ieee754_pow+0x700>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 faec 	bl	800015c <__adddf3>
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	f7f7 fc9e 	bl	80004c8 <__aeabi_dmul>
 8008b8c:	a370      	add	r3, pc, #448	; (adr r3, 8008d50 <__ieee754_pow+0x708>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fae3 	bl	800015c <__adddf3>
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	f7f7 fc95 	bl	80004c8 <__aeabi_dmul>
 8008b9e:	a36e      	add	r3, pc, #440	; (adr r3, 8008d58 <__ieee754_pow+0x710>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fada 	bl	800015c <__adddf3>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	462b      	mov	r3, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	f7f7 fc88 	bl	80004c8 <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fc82 	bl	80004c8 <__aeabi_dmul>
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	f7f7 fac4 	bl	800015c <__adddf3>
 8008bd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bd8:	f7f7 fc76 	bl	80004c8 <__aeabi_dmul>
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	f7f7 fabc 	bl	800015c <__adddf3>
 8008be4:	4642      	mov	r2, r8
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	464b      	mov	r3, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	4649      	mov	r1, r9
 8008bf0:	f7f7 fc6a 	bl	80004c8 <__aeabi_dmul>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4b66      	ldr	r3, [pc, #408]	; (8008d90 <__ieee754_pow+0x748>)
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	f7f7 faae 	bl	800015c <__adddf3>
 8008c00:	4632      	mov	r2, r6
 8008c02:	463b      	mov	r3, r7
 8008c04:	f7f7 faaa 	bl	800015c <__adddf3>
 8008c08:	2400      	movs	r4, #0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4640      	mov	r0, r8
 8008c12:	4649      	mov	r1, r9
 8008c14:	f7f7 fc58 	bl	80004c8 <__aeabi_dmul>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	4b5b      	ldr	r3, [pc, #364]	; (8008d90 <__ieee754_pow+0x748>)
 8008c24:	f7f7 fa98 	bl	8000158 <__aeabi_dsub>
 8008c28:	4652      	mov	r2, sl
 8008c2a:	465b      	mov	r3, fp
 8008c2c:	f7f7 fa94 	bl	8000158 <__aeabi_dsub>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fa8e 	bl	8000158 <__aeabi_dsub>
 8008c3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c40:	f7f7 fc42 	bl	80004c8 <__aeabi_dmul>
 8008c44:	4622      	mov	r2, r4
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c4e:	462b      	mov	r3, r5
 8008c50:	f7f7 fc3a 	bl	80004c8 <__aeabi_dmul>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fa7e 	bl	800015c <__adddf3>
 8008c60:	2400      	movs	r4, #0
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 fa75 	bl	800015c <__adddf3>
 8008c72:	a33b      	add	r3, pc, #236	; (adr r3, 8008d60 <__ieee754_pow+0x718>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	f7f7 fc24 	bl	80004c8 <__aeabi_dmul>
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	f7f7 fa64 	bl	8000158 <__aeabi_dsub>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 fa5e 	bl	8000158 <__aeabi_dsub>
 8008c9c:	a332      	add	r3, pc, #200	; (adr r3, 8008d68 <__ieee754_pow+0x720>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fc11 	bl	80004c8 <__aeabi_dmul>
 8008ca6:	a332      	add	r3, pc, #200	; (adr r3, 8008d70 <__ieee754_pow+0x728>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7f7 fc08 	bl	80004c8 <__aeabi_dmul>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 fa4c 	bl	800015c <__adddf3>
 8008cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <__ieee754_pow+0x74c>)
 8008cc8:	f04f 0a00 	mov.w	sl, #0
 8008ccc:	4413      	add	r3, r2
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fa43 	bl	800015c <__adddf3>
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cda:	4689      	mov	r9, r1
 8008cdc:	f7f7 fb8a 	bl	80003f4 <__aeabi_i2d>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ce6:	4b2c      	ldr	r3, [pc, #176]	; (8008d98 <__ieee754_pow+0x750>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008cee:	4642      	mov	r2, r8
 8008cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	f7f7 fa31 	bl	800015c <__adddf3>
 8008cfa:	4632      	mov	r2, r6
 8008cfc:	463b      	mov	r3, r7
 8008cfe:	f7f7 fa2d 	bl	800015c <__adddf3>
 8008d02:	4622      	mov	r2, r4
 8008d04:	462b      	mov	r3, r5
 8008d06:	f7f7 fa29 	bl	800015c <__adddf3>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	4650      	mov	r0, sl
 8008d10:	468b      	mov	fp, r1
 8008d12:	f7f7 fa21 	bl	8000158 <__aeabi_dsub>
 8008d16:	4632      	mov	r2, r6
 8008d18:	463b      	mov	r3, r7
 8008d1a:	f7f7 fa1d 	bl	8000158 <__aeabi_dsub>
 8008d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d22:	f7f7 fa19 	bl	8000158 <__aeabi_dsub>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	e60d      	b.n	800894c <__ieee754_pow+0x304>
 8008d30:	4a454eef 	.word	0x4a454eef
 8008d34:	3fca7e28 	.word	0x3fca7e28
 8008d38:	93c9db65 	.word	0x93c9db65
 8008d3c:	3fcd864a 	.word	0x3fcd864a
 8008d40:	a91d4101 	.word	0xa91d4101
 8008d44:	3fd17460 	.word	0x3fd17460
 8008d48:	518f264d 	.word	0x518f264d
 8008d4c:	3fd55555 	.word	0x3fd55555
 8008d50:	db6fabff 	.word	0xdb6fabff
 8008d54:	3fdb6db6 	.word	0x3fdb6db6
 8008d58:	33333303 	.word	0x33333303
 8008d5c:	3fe33333 	.word	0x3fe33333
 8008d60:	e0000000 	.word	0xe0000000
 8008d64:	3feec709 	.word	0x3feec709
 8008d68:	dc3a03fd 	.word	0xdc3a03fd
 8008d6c:	3feec709 	.word	0x3feec709
 8008d70:	145b01f5 	.word	0x145b01f5
 8008d74:	be3e2fe0 	.word	0xbe3e2fe0
 8008d78:	7ff00000 	.word	0x7ff00000
 8008d7c:	43400000 	.word	0x43400000
 8008d80:	0003988e 	.word	0x0003988e
 8008d84:	000bb679 	.word	0x000bb679
 8008d88:	0800a328 	.word	0x0800a328
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	40080000 	.word	0x40080000
 8008d94:	0800a348 	.word	0x0800a348
 8008d98:	0800a338 	.word	0x0800a338
 8008d9c:	2601      	movs	r6, #1
 8008d9e:	e66a      	b.n	8008a76 <__ieee754_pow+0x42e>
 8008da0:	a39d      	add	r3, pc, #628	; (adr r3, 8009018 <__ieee754_pow+0x9d0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	4640      	mov	r0, r8
 8008da8:	4649      	mov	r1, r9
 8008daa:	f7f7 f9d7 	bl	800015c <__adddf3>
 8008dae:	4622      	mov	r2, r4
 8008db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db4:	462b      	mov	r3, r5
 8008db6:	4650      	mov	r0, sl
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 f9cd 	bl	8000158 <__aeabi_dsub>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc6:	f7f7 fe0f 	bl	80009e8 <__aeabi_dcmpgt>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f47f ae09 	bne.w	80089e2 <__ieee754_pow+0x39a>
 8008dd0:	4aa3      	ldr	r2, [pc, #652]	; (8009060 <__ieee754_pow+0xa18>)
 8008dd2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	f340 8101 	ble.w	8008fde <__ieee754_pow+0x996>
 8008ddc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008de0:	2000      	movs	r0, #0
 8008de2:	151b      	asrs	r3, r3, #20
 8008de4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008de8:	fa4a f303 	asr.w	r3, sl, r3
 8008dec:	4433      	add	r3, r6
 8008dee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008df2:	4f9c      	ldr	r7, [pc, #624]	; (8009064 <__ieee754_pow+0xa1c>)
 8008df4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008df8:	4117      	asrs	r7, r2
 8008dfa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008dfe:	ea23 0107 	bic.w	r1, r3, r7
 8008e02:	f1c2 0214 	rsb	r2, r2, #20
 8008e06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	fa4a fa02 	asr.w	sl, sl, r2
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	4602      	mov	r2, r0
 8008e14:	4629      	mov	r1, r5
 8008e16:	4620      	mov	r0, r4
 8008e18:	bfb8      	it	lt
 8008e1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e1e:	f7f7 f99b 	bl	8000158 <__aeabi_dsub>
 8008e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	f7f7 f994 	bl	800015c <__adddf3>
 8008e34:	a37a      	add	r3, pc, #488	; (adr r3, 8009020 <__ieee754_pow+0x9d8>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	f7f7 fb43 	bl	80004c8 <__aeabi_dmul>
 8008e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 f983 	bl	8000158 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 f97d 	bl	8000158 <__aeabi_dsub>
 8008e5e:	a372      	add	r3, pc, #456	; (adr r3, 8009028 <__ieee754_pow+0x9e0>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fb30 	bl	80004c8 <__aeabi_dmul>
 8008e68:	a371      	add	r3, pc, #452	; (adr r3, 8009030 <__ieee754_pow+0x9e8>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 fb27 	bl	80004c8 <__aeabi_dmul>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 f96b 	bl	800015c <__adddf3>
 8008e86:	4604      	mov	r4, r0
 8008e88:	460d      	mov	r5, r1
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4630      	mov	r0, r6
 8008e90:	4639      	mov	r1, r7
 8008e92:	f7f7 f963 	bl	800015c <__adddf3>
 8008e96:	4632      	mov	r2, r6
 8008e98:	463b      	mov	r3, r7
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	f7f7 f95b 	bl	8000158 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 f955 	bl	8000158 <__aeabi_dsub>
 8008eae:	4642      	mov	r2, r8
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	460f      	mov	r7, r1
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fb05 	bl	80004c8 <__aeabi_dmul>
 8008ebe:	a35e      	add	r3, pc, #376	; (adr r3, 8009038 <__ieee754_pow+0x9f0>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	f7f7 fafe 	bl	80004c8 <__aeabi_dmul>
 8008ecc:	a35c      	add	r3, pc, #368	; (adr r3, 8009040 <__ieee754_pow+0x9f8>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 f941 	bl	8000158 <__aeabi_dsub>
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	462b      	mov	r3, r5
 8008eda:	f7f7 faf5 	bl	80004c8 <__aeabi_dmul>
 8008ede:	a35a      	add	r3, pc, #360	; (adr r3, 8009048 <__ieee754_pow+0xa00>)
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f7f7 f93a 	bl	800015c <__adddf3>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	462b      	mov	r3, r5
 8008eec:	f7f7 faec 	bl	80004c8 <__aeabi_dmul>
 8008ef0:	a357      	add	r3, pc, #348	; (adr r3, 8009050 <__ieee754_pow+0xa08>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 f92f 	bl	8000158 <__aeabi_dsub>
 8008efa:	4622      	mov	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	f7f7 fae3 	bl	80004c8 <__aeabi_dmul>
 8008f02:	a355      	add	r3, pc, #340	; (adr r3, 8009058 <__ieee754_pow+0xa10>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 f928 	bl	800015c <__adddf3>
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	462b      	mov	r3, r5
 8008f10:	f7f7 fada 	bl	80004c8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 f91c 	bl	8000158 <__aeabi_dsub>
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4640      	mov	r0, r8
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	f7f7 facc 	bl	80004c8 <__aeabi_dmul>
 8008f30:	2200      	movs	r2, #0
 8008f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7f7 f90b 	bl	8000158 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4a:	f7f7 fbe7 	bl	800071c <__aeabi_ddiv>
 8008f4e:	4632      	mov	r2, r6
 8008f50:	4604      	mov	r4, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	463b      	mov	r3, r7
 8008f56:	4640      	mov	r0, r8
 8008f58:	4649      	mov	r1, r9
 8008f5a:	f7f7 fab5 	bl	80004c8 <__aeabi_dmul>
 8008f5e:	4632      	mov	r2, r6
 8008f60:	463b      	mov	r3, r7
 8008f62:	f7f7 f8fb 	bl	800015c <__adddf3>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 f8f3 	bl	8000158 <__aeabi_dsub>
 8008f72:	4642      	mov	r2, r8
 8008f74:	464b      	mov	r3, r9
 8008f76:	f7f7 f8ef 	bl	8000158 <__aeabi_dsub>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4939      	ldr	r1, [pc, #228]	; (8009068 <__ieee754_pow+0xa20>)
 8008f82:	f7f7 f8e9 	bl	8000158 <__aeabi_dsub>
 8008f86:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008f8a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f8e:	da29      	bge.n	8008fe4 <__ieee754_pow+0x99c>
 8008f90:	4652      	mov	r2, sl
 8008f92:	f001 f885 	bl	800a0a0 <scalbn>
 8008f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f9a:	f7ff bbfe 	b.w	800879a <__ieee754_pow+0x152>
 8008f9e:	4b33      	ldr	r3, [pc, #204]	; (800906c <__ieee754_pow+0xa24>)
 8008fa0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008fa4:	429f      	cmp	r7, r3
 8008fa6:	f77f af13 	ble.w	8008dd0 <__ieee754_pow+0x788>
 8008faa:	4b31      	ldr	r3, [pc, #196]	; (8009070 <__ieee754_pow+0xa28>)
 8008fac:	440b      	add	r3, r1
 8008fae:	4303      	orrs	r3, r0
 8008fb0:	d009      	beq.n	8008fc6 <__ieee754_pow+0x97e>
 8008fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f7f7 fcf7 	bl	80009ac <__aeabi_dcmplt>
 8008fbe:	3800      	subs	r0, #0
 8008fc0:	bf18      	it	ne
 8008fc2:	2001      	movne	r0, #1
 8008fc4:	e453      	b.n	800886e <__ieee754_pow+0x226>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	f7f7 f8c5 	bl	8000158 <__aeabi_dsub>
 8008fce:	4642      	mov	r2, r8
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	f7f7 fcff 	bl	80009d4 <__aeabi_dcmpge>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f aefa 	beq.w	8008dd0 <__ieee754_pow+0x788>
 8008fdc:	e7e9      	b.n	8008fb2 <__ieee754_pow+0x96a>
 8008fde:	f04f 0a00 	mov.w	sl, #0
 8008fe2:	e720      	b.n	8008e26 <__ieee754_pow+0x7de>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	e7d6      	b.n	8008f96 <__ieee754_pow+0x94e>
 8008fe8:	f04f 0b00 	mov.w	fp, #0
 8008fec:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009068 <__ieee754_pow+0xa20>
 8008ff0:	f7ff bbba 	b.w	8008768 <__ieee754_pow+0x120>
 8008ff4:	f04f 0b00 	mov.w	fp, #0
 8008ff8:	f04f 0c00 	mov.w	ip, #0
 8008ffc:	f7ff bbb4 	b.w	8008768 <__ieee754_pow+0x120>
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7ff bb3d 	b.w	8008682 <__ieee754_pow+0x3a>
 8009008:	9200      	str	r2, [sp, #0]
 800900a:	f7ff bb89 	b.w	8008720 <__ieee754_pow+0xd8>
 800900e:	2300      	movs	r3, #0
 8009010:	f7ff bb73 	b.w	80086fa <__ieee754_pow+0xb2>
 8009014:	f3af 8000 	nop.w
 8009018:	652b82fe 	.word	0x652b82fe
 800901c:	3c971547 	.word	0x3c971547
 8009020:	00000000 	.word	0x00000000
 8009024:	3fe62e43 	.word	0x3fe62e43
 8009028:	fefa39ef 	.word	0xfefa39ef
 800902c:	3fe62e42 	.word	0x3fe62e42
 8009030:	0ca86c39 	.word	0x0ca86c39
 8009034:	be205c61 	.word	0xbe205c61
 8009038:	72bea4d0 	.word	0x72bea4d0
 800903c:	3e663769 	.word	0x3e663769
 8009040:	c5d26bf1 	.word	0xc5d26bf1
 8009044:	3ebbbd41 	.word	0x3ebbbd41
 8009048:	af25de2c 	.word	0xaf25de2c
 800904c:	3f11566a 	.word	0x3f11566a
 8009050:	16bebd93 	.word	0x16bebd93
 8009054:	3f66c16c 	.word	0x3f66c16c
 8009058:	5555553e 	.word	0x5555553e
 800905c:	3fc55555 	.word	0x3fc55555
 8009060:	3fe00000 	.word	0x3fe00000
 8009064:	000fffff 	.word	0x000fffff
 8009068:	3ff00000 	.word	0x3ff00000
 800906c:	4090cbff 	.word	0x4090cbff
 8009070:	3f6f3400 	.word	0x3f6f3400
 8009074:	00000000 	.word	0x00000000

08009078 <__ieee754_rem_pio2>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	4614      	mov	r4, r2
 800907e:	4ac4      	ldr	r2, [pc, #784]	; (8009390 <__ieee754_rem_pio2+0x318>)
 8009080:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009084:	b08d      	sub	sp, #52	; 0x34
 8009086:	4592      	cmp	sl, r2
 8009088:	9104      	str	r1, [sp, #16]
 800908a:	dc07      	bgt.n	800909c <__ieee754_rem_pio2+0x24>
 800908c:	2200      	movs	r2, #0
 800908e:	2300      	movs	r3, #0
 8009090:	e9c4 0100 	strd	r0, r1, [r4]
 8009094:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009098:	2500      	movs	r5, #0
 800909a:	e024      	b.n	80090e6 <__ieee754_rem_pio2+0x6e>
 800909c:	4abd      	ldr	r2, [pc, #756]	; (8009394 <__ieee754_rem_pio2+0x31c>)
 800909e:	4592      	cmp	sl, r2
 80090a0:	dc72      	bgt.n	8009188 <__ieee754_rem_pio2+0x110>
 80090a2:	9b04      	ldr	r3, [sp, #16]
 80090a4:	4dbc      	ldr	r5, [pc, #752]	; (8009398 <__ieee754_rem_pio2+0x320>)
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8009358 <__ieee754_rem_pio2+0x2e0>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	dd36      	ble.n	800911e <__ieee754_rem_pio2+0xa6>
 80090b0:	f7f7 f852 	bl	8000158 <__aeabi_dsub>
 80090b4:	45aa      	cmp	sl, r5
 80090b6:	4606      	mov	r6, r0
 80090b8:	460f      	mov	r7, r1
 80090ba:	d018      	beq.n	80090ee <__ieee754_rem_pio2+0x76>
 80090bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2e8>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 f849 	bl	8000158 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	e9c4 2300 	strd	r2, r3, [r4]
 80090d0:	4639      	mov	r1, r7
 80090d2:	f7f7 f841 	bl	8000158 <__aeabi_dsub>
 80090d6:	a3a2      	add	r3, pc, #648	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2e8>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 f83c 	bl	8000158 <__aeabi_dsub>
 80090e0:	2501      	movs	r5, #1
 80090e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090e6:	4628      	mov	r0, r5
 80090e8:	b00d      	add	sp, #52	; 0x34
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	a39e      	add	r3, pc, #632	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f0>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 f830 	bl	8000158 <__aeabi_dsub>
 80090f8:	a39d      	add	r3, pc, #628	; (adr r3, 8009370 <__ieee754_rem_pio2+0x2f8>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	f7f7 f829 	bl	8000158 <__aeabi_dsub>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4630      	mov	r0, r6
 800910c:	e9c4 2300 	strd	r2, r3, [r4]
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 f821 	bl	8000158 <__aeabi_dsub>
 8009116:	a396      	add	r3, pc, #600	; (adr r3, 8009370 <__ieee754_rem_pio2+0x2f8>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	e7de      	b.n	80090dc <__ieee754_rem_pio2+0x64>
 800911e:	f7f7 f81d 	bl	800015c <__adddf3>
 8009122:	45aa      	cmp	sl, r5
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	d016      	beq.n	8009158 <__ieee754_rem_pio2+0xe0>
 800912a:	a38d      	add	r3, pc, #564	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2e8>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f814 	bl	800015c <__adddf3>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4630      	mov	r0, r6
 800913a:	e9c4 2300 	strd	r2, r3, [r4]
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 f80a 	bl	8000158 <__aeabi_dsub>
 8009144:	a386      	add	r3, pc, #536	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2e8>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f807 	bl	800015c <__adddf3>
 800914e:	f04f 35ff 	mov.w	r5, #4294967295
 8009152:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009156:	e7c6      	b.n	80090e6 <__ieee754_rem_pio2+0x6e>
 8009158:	a383      	add	r3, pc, #524	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f6 fffd 	bl	800015c <__adddf3>
 8009162:	a383      	add	r3, pc, #524	; (adr r3, 8009370 <__ieee754_rem_pio2+0x2f8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	4606      	mov	r6, r0
 800916a:	460f      	mov	r7, r1
 800916c:	f7f6 fff6 	bl	800015c <__adddf3>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4630      	mov	r0, r6
 8009176:	e9c4 2300 	strd	r2, r3, [r4]
 800917a:	4639      	mov	r1, r7
 800917c:	f7f6 ffec 	bl	8000158 <__aeabi_dsub>
 8009180:	a37b      	add	r3, pc, #492	; (adr r3, 8009370 <__ieee754_rem_pio2+0x2f8>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	e7e0      	b.n	800914a <__ieee754_rem_pio2+0xd2>
 8009188:	4a84      	ldr	r2, [pc, #528]	; (800939c <__ieee754_rem_pio2+0x324>)
 800918a:	4592      	cmp	sl, r2
 800918c:	f300 80d5 	bgt.w	800933a <__ieee754_rem_pio2+0x2c2>
 8009190:	f000 fefc 	bl	8009f8c <fabs>
 8009194:	a378      	add	r3, pc, #480	; (adr r3, 8009378 <__ieee754_rem_pio2+0x300>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	f7f7 f993 	bl	80004c8 <__aeabi_dmul>
 80091a2:	2200      	movs	r2, #0
 80091a4:	4b7e      	ldr	r3, [pc, #504]	; (80093a0 <__ieee754_rem_pio2+0x328>)
 80091a6:	f7f6 ffd9 	bl	800015c <__adddf3>
 80091aa:	f7f7 fc3d 	bl	8000a28 <__aeabi_d2iz>
 80091ae:	4605      	mov	r5, r0
 80091b0:	f7f7 f920 	bl	80003f4 <__aeabi_i2d>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091bc:	a366      	add	r3, pc, #408	; (adr r3, 8009358 <__ieee754_rem_pio2+0x2e0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f981 	bl	80004c8 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4630      	mov	r0, r6
 80091cc:	4639      	mov	r1, r7
 80091ce:	f7f6 ffc3 	bl	8000158 <__aeabi_dsub>
 80091d2:	a363      	add	r3, pc, #396	; (adr r3, 8009360 <__ieee754_rem_pio2+0x2e8>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	4680      	mov	r8, r0
 80091da:	4689      	mov	r9, r1
 80091dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e0:	f7f7 f972 	bl	80004c8 <__aeabi_dmul>
 80091e4:	2d1f      	cmp	r5, #31
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	dc0e      	bgt.n	800920a <__ieee754_rem_pio2+0x192>
 80091ec:	4b6d      	ldr	r3, [pc, #436]	; (80093a4 <__ieee754_rem_pio2+0x32c>)
 80091ee:	1e6a      	subs	r2, r5, #1
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	4553      	cmp	r3, sl
 80091f6:	d008      	beq.n	800920a <__ieee754_rem_pio2+0x192>
 80091f8:	4632      	mov	r2, r6
 80091fa:	463b      	mov	r3, r7
 80091fc:	4640      	mov	r0, r8
 80091fe:	4649      	mov	r1, r9
 8009200:	f7f6 ffaa 	bl	8000158 <__aeabi_dsub>
 8009204:	e9c4 0100 	strd	r0, r1, [r4]
 8009208:	e013      	b.n	8009232 <__ieee754_rem_pio2+0x1ba>
 800920a:	463b      	mov	r3, r7
 800920c:	4632      	mov	r2, r6
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f6 ffa1 	bl	8000158 <__aeabi_dsub>
 8009216:	ea4f 532a 	mov.w	r3, sl, asr #20
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009220:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8009224:	f1ba 0f10 	cmp.w	sl, #16
 8009228:	dc1f      	bgt.n	800926a <__ieee754_rem_pio2+0x1f2>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	e9c4 2300 	strd	r2, r3, [r4]
 8009232:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009236:	4640      	mov	r0, r8
 8009238:	4653      	mov	r3, sl
 800923a:	4649      	mov	r1, r9
 800923c:	f7f6 ff8c 	bl	8000158 <__aeabi_dsub>
 8009240:	4632      	mov	r2, r6
 8009242:	463b      	mov	r3, r7
 8009244:	f7f6 ff88 	bl	8000158 <__aeabi_dsub>
 8009248:	460b      	mov	r3, r1
 800924a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4602      	mov	r2, r0
 8009252:	2900      	cmp	r1, #0
 8009254:	f6bf af47 	bge.w	80090e6 <__ieee754_rem_pio2+0x6e>
 8009258:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800925c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009260:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009264:	60e3      	str	r3, [r4, #12]
 8009266:	426d      	negs	r5, r5
 8009268:	e73d      	b.n	80090e6 <__ieee754_rem_pio2+0x6e>
 800926a:	a33f      	add	r3, pc, #252	; (adr r3, 8009368 <__ieee754_rem_pio2+0x2f0>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009274:	f7f7 f928 	bl	80004c8 <__aeabi_dmul>
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f6 ff68 	bl	8000158 <__aeabi_dsub>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4682      	mov	sl, r0
 800928e:	468b      	mov	fp, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f6 ff60 	bl	8000158 <__aeabi_dsub>
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	f7f6 ff5c 	bl	8000158 <__aeabi_dsub>
 80092a0:	a333      	add	r3, pc, #204	; (adr r3, 8009370 <__ieee754_rem_pio2+0x2f8>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ae:	f7f7 f90b 	bl	80004c8 <__aeabi_dmul>
 80092b2:	4632      	mov	r2, r6
 80092b4:	463b      	mov	r3, r7
 80092b6:	f7f6 ff4f 	bl	8000158 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f6 ff47 	bl	8000158 <__aeabi_dsub>
 80092ca:	9a05      	ldr	r2, [sp, #20]
 80092cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b31      	cmp	r3, #49	; 0x31
 80092d4:	dc06      	bgt.n	80092e4 <__ieee754_rem_pio2+0x26c>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	46d0      	mov	r8, sl
 80092dc:	46d9      	mov	r9, fp
 80092de:	e9c4 2300 	strd	r2, r3, [r4]
 80092e2:	e7a6      	b.n	8009232 <__ieee754_rem_pio2+0x1ba>
 80092e4:	a326      	add	r3, pc, #152	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ee:	f7f7 f8eb 	bl	80004c8 <__aeabi_dmul>
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4650      	mov	r0, sl
 80092fc:	4659      	mov	r1, fp
 80092fe:	f7f6 ff2b 	bl	8000158 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	4650      	mov	r0, sl
 800930c:	4659      	mov	r1, fp
 800930e:	f7f6 ff23 	bl	8000158 <__aeabi_dsub>
 8009312:	4632      	mov	r2, r6
 8009314:	463b      	mov	r3, r7
 8009316:	f7f6 ff1f 	bl	8000158 <__aeabi_dsub>
 800931a:	a31b      	add	r3, pc, #108	; (adr r3, 8009388 <__ieee754_rem_pio2+0x310>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4606      	mov	r6, r0
 8009322:	460f      	mov	r7, r1
 8009324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009328:	f7f7 f8ce 	bl	80004c8 <__aeabi_dmul>
 800932c:	4632      	mov	r2, r6
 800932e:	463b      	mov	r3, r7
 8009330:	f7f6 ff12 	bl	8000158 <__aeabi_dsub>
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1
 8009338:	e75e      	b.n	80091f8 <__ieee754_rem_pio2+0x180>
 800933a:	4a1b      	ldr	r2, [pc, #108]	; (80093a8 <__ieee754_rem_pio2+0x330>)
 800933c:	4592      	cmp	sl, r2
 800933e:	dd35      	ble.n	80093ac <__ieee754_rem_pio2+0x334>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	f7f6 ff08 	bl	8000158 <__aeabi_dsub>
 8009348:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800934c:	e9c4 0100 	strd	r0, r1, [r4]
 8009350:	e6a2      	b.n	8009098 <__ieee754_rem_pio2+0x20>
 8009352:	bf00      	nop
 8009354:	f3af 8000 	nop.w
 8009358:	54400000 	.word	0x54400000
 800935c:	3ff921fb 	.word	0x3ff921fb
 8009360:	1a626331 	.word	0x1a626331
 8009364:	3dd0b461 	.word	0x3dd0b461
 8009368:	1a600000 	.word	0x1a600000
 800936c:	3dd0b461 	.word	0x3dd0b461
 8009370:	2e037073 	.word	0x2e037073
 8009374:	3ba3198a 	.word	0x3ba3198a
 8009378:	6dc9c883 	.word	0x6dc9c883
 800937c:	3fe45f30 	.word	0x3fe45f30
 8009380:	2e000000 	.word	0x2e000000
 8009384:	3ba3198a 	.word	0x3ba3198a
 8009388:	252049c1 	.word	0x252049c1
 800938c:	397b839a 	.word	0x397b839a
 8009390:	3fe921fb 	.word	0x3fe921fb
 8009394:	4002d97b 	.word	0x4002d97b
 8009398:	3ff921fb 	.word	0x3ff921fb
 800939c:	413921fb 	.word	0x413921fb
 80093a0:	3fe00000 	.word	0x3fe00000
 80093a4:	0800a358 	.word	0x0800a358
 80093a8:	7fefffff 	.word	0x7fefffff
 80093ac:	ea4f 552a 	mov.w	r5, sl, asr #20
 80093b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80093b4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80093b8:	460f      	mov	r7, r1
 80093ba:	4606      	mov	r6, r0
 80093bc:	f7f7 fb34 	bl	8000a28 <__aeabi_d2iz>
 80093c0:	f7f7 f818 	bl	80003f4 <__aeabi_i2d>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093d0:	f7f6 fec2 	bl	8000158 <__aeabi_dsub>
 80093d4:	2200      	movs	r2, #0
 80093d6:	4b22      	ldr	r3, [pc, #136]	; (8009460 <__ieee754_rem_pio2+0x3e8>)
 80093d8:	f7f7 f876 	bl	80004c8 <__aeabi_dmul>
 80093dc:	460f      	mov	r7, r1
 80093de:	4606      	mov	r6, r0
 80093e0:	f7f7 fb22 	bl	8000a28 <__aeabi_d2iz>
 80093e4:	f7f7 f806 	bl	80003f4 <__aeabi_i2d>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4630      	mov	r0, r6
 80093ee:	4639      	mov	r1, r7
 80093f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093f4:	f7f6 feb0 	bl	8000158 <__aeabi_dsub>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b19      	ldr	r3, [pc, #100]	; (8009460 <__ieee754_rem_pio2+0x3e8>)
 80093fc:	f7f7 f864 	bl	80004c8 <__aeabi_dmul>
 8009400:	f04f 0803 	mov.w	r8, #3
 8009404:	2600      	movs	r6, #0
 8009406:	2700      	movs	r7, #0
 8009408:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800940c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009410:	4632      	mov	r2, r6
 8009412:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8009416:	463b      	mov	r3, r7
 8009418:	46c2      	mov	sl, r8
 800941a:	f108 38ff 	add.w	r8, r8, #4294967295
 800941e:	f7f7 fabb 	bl	8000998 <__aeabi_dcmpeq>
 8009422:	2800      	cmp	r0, #0
 8009424:	d1f4      	bne.n	8009410 <__ieee754_rem_pio2+0x398>
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <__ieee754_rem_pio2+0x3ec>)
 8009428:	462a      	mov	r2, r5
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	2302      	movs	r3, #2
 800942e:	4621      	mov	r1, r4
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	a806      	add	r0, sp, #24
 8009434:	4653      	mov	r3, sl
 8009436:	f000 f985 	bl	8009744 <__kernel_rem_pio2>
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	4605      	mov	r5, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	f6bf ae51 	bge.w	80090e6 <__ieee754_rem_pio2+0x6e>
 8009444:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800944c:	e9c4 2300 	strd	r2, r3, [r4]
 8009450:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009458:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800945c:	e703      	b.n	8009266 <__ieee754_rem_pio2+0x1ee>
 800945e:	bf00      	nop
 8009460:	41700000 	.word	0x41700000
 8009464:	0800a3d8 	.word	0x0800a3d8

08009468 <__ieee754_sqrt>:
 8009468:	f8df c158 	ldr.w	ip, [pc, #344]	; 80095c4 <__ieee754_sqrt+0x15c>
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	ea3c 0c01 	bics.w	ip, ip, r1
 8009474:	4606      	mov	r6, r0
 8009476:	460d      	mov	r5, r1
 8009478:	460c      	mov	r4, r1
 800947a:	460a      	mov	r2, r1
 800947c:	4607      	mov	r7, r0
 800947e:	4603      	mov	r3, r0
 8009480:	d10f      	bne.n	80094a2 <__ieee754_sqrt+0x3a>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	f7f7 f81f 	bl	80004c8 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4630      	mov	r0, r6
 8009490:	4629      	mov	r1, r5
 8009492:	f7f6 fe63 	bl	800015c <__adddf3>
 8009496:	4606      	mov	r6, r0
 8009498:	460d      	mov	r5, r1
 800949a:	4630      	mov	r0, r6
 800949c:	4629      	mov	r1, r5
 800949e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a2:	2900      	cmp	r1, #0
 80094a4:	dc0e      	bgt.n	80094c4 <__ieee754_sqrt+0x5c>
 80094a6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80094aa:	ea5c 0707 	orrs.w	r7, ip, r7
 80094ae:	d0f4      	beq.n	800949a <__ieee754_sqrt+0x32>
 80094b0:	b141      	cbz	r1, 80094c4 <__ieee754_sqrt+0x5c>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	f7f6 fe4f 	bl	8000158 <__aeabi_dsub>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	f7f7 f92d 	bl	800071c <__aeabi_ddiv>
 80094c2:	e7e8      	b.n	8009496 <__ieee754_sqrt+0x2e>
 80094c4:	1521      	asrs	r1, r4, #20
 80094c6:	d075      	beq.n	80095b4 <__ieee754_sqrt+0x14c>
 80094c8:	07cc      	lsls	r4, r1, #31
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80094d2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80094d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80094da:	bf5e      	ittt	pl
 80094dc:	0fd9      	lsrpl	r1, r3, #31
 80094de:	005b      	lslpl	r3, r3, #1
 80094e0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80094e4:	0fd9      	lsrs	r1, r3, #31
 80094e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80094ea:	2516      	movs	r5, #22
 80094ec:	4620      	mov	r0, r4
 80094ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094f2:	107f      	asrs	r7, r7, #1
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	1846      	adds	r6, r0, r1
 80094f8:	4296      	cmp	r6, r2
 80094fa:	bfde      	ittt	le
 80094fc:	1b92      	suble	r2, r2, r6
 80094fe:	1870      	addle	r0, r6, r1
 8009500:	1864      	addle	r4, r4, r1
 8009502:	0052      	lsls	r2, r2, #1
 8009504:	3d01      	subs	r5, #1
 8009506:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800950a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800950e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009512:	d1f0      	bne.n	80094f6 <__ieee754_sqrt+0x8e>
 8009514:	4629      	mov	r1, r5
 8009516:	f04f 0e20 	mov.w	lr, #32
 800951a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800951e:	4282      	cmp	r2, r0
 8009520:	eb06 0c05 	add.w	ip, r6, r5
 8009524:	dc02      	bgt.n	800952c <__ieee754_sqrt+0xc4>
 8009526:	d113      	bne.n	8009550 <__ieee754_sqrt+0xe8>
 8009528:	459c      	cmp	ip, r3
 800952a:	d811      	bhi.n	8009550 <__ieee754_sqrt+0xe8>
 800952c:	f1bc 0f00 	cmp.w	ip, #0
 8009530:	eb0c 0506 	add.w	r5, ip, r6
 8009534:	da43      	bge.n	80095be <__ieee754_sqrt+0x156>
 8009536:	2d00      	cmp	r5, #0
 8009538:	db41      	blt.n	80095be <__ieee754_sqrt+0x156>
 800953a:	f100 0801 	add.w	r8, r0, #1
 800953e:	1a12      	subs	r2, r2, r0
 8009540:	4640      	mov	r0, r8
 8009542:	459c      	cmp	ip, r3
 8009544:	bf88      	it	hi
 8009546:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800954a:	eba3 030c 	sub.w	r3, r3, ip
 800954e:	4431      	add	r1, r6
 8009550:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009554:	f1be 0e01 	subs.w	lr, lr, #1
 8009558:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800955c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009560:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009564:	d1db      	bne.n	800951e <__ieee754_sqrt+0xb6>
 8009566:	4313      	orrs	r3, r2
 8009568:	d006      	beq.n	8009578 <__ieee754_sqrt+0x110>
 800956a:	1c48      	adds	r0, r1, #1
 800956c:	bf0b      	itete	eq
 800956e:	4671      	moveq	r1, lr
 8009570:	3101      	addne	r1, #1
 8009572:	3401      	addeq	r4, #1
 8009574:	f021 0101 	bicne.w	r1, r1, #1
 8009578:	1063      	asrs	r3, r4, #1
 800957a:	0849      	lsrs	r1, r1, #1
 800957c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009580:	07e2      	lsls	r2, r4, #31
 8009582:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009586:	bf48      	it	mi
 8009588:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800958c:	460e      	mov	r6, r1
 800958e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009592:	e782      	b.n	800949a <__ieee754_sqrt+0x32>
 8009594:	0ada      	lsrs	r2, r3, #11
 8009596:	3815      	subs	r0, #21
 8009598:	055b      	lsls	r3, r3, #21
 800959a:	2a00      	cmp	r2, #0
 800959c:	d0fa      	beq.n	8009594 <__ieee754_sqrt+0x12c>
 800959e:	02d5      	lsls	r5, r2, #11
 80095a0:	d50a      	bpl.n	80095b8 <__ieee754_sqrt+0x150>
 80095a2:	f1c1 0420 	rsb	r4, r1, #32
 80095a6:	fa23 f404 	lsr.w	r4, r3, r4
 80095aa:	1e4d      	subs	r5, r1, #1
 80095ac:	408b      	lsls	r3, r1
 80095ae:	4322      	orrs	r2, r4
 80095b0:	1b41      	subs	r1, r0, r5
 80095b2:	e789      	b.n	80094c8 <__ieee754_sqrt+0x60>
 80095b4:	4608      	mov	r0, r1
 80095b6:	e7f0      	b.n	800959a <__ieee754_sqrt+0x132>
 80095b8:	0052      	lsls	r2, r2, #1
 80095ba:	3101      	adds	r1, #1
 80095bc:	e7ef      	b.n	800959e <__ieee754_sqrt+0x136>
 80095be:	4680      	mov	r8, r0
 80095c0:	e7bd      	b.n	800953e <__ieee754_sqrt+0xd6>
 80095c2:	bf00      	nop
 80095c4:	7ff00000 	.word	0x7ff00000

080095c8 <__kernel_cos>:
 80095c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80095d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80095d4:	4680      	mov	r8, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	e9cd 2300 	strd	r2, r3, [sp]
 80095dc:	da04      	bge.n	80095e8 <__kernel_cos+0x20>
 80095de:	f7f7 fa23 	bl	8000a28 <__aeabi_d2iz>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f000 8086 	beq.w	80096f4 <__kernel_cos+0x12c>
 80095e8:	4642      	mov	r2, r8
 80095ea:	463b      	mov	r3, r7
 80095ec:	4640      	mov	r0, r8
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f6 ff6a 	bl	80004c8 <__aeabi_dmul>
 80095f4:	2200      	movs	r2, #0
 80095f6:	4b4e      	ldr	r3, [pc, #312]	; (8009730 <__kernel_cos+0x168>)
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	f7f6 ff64 	bl	80004c8 <__aeabi_dmul>
 8009600:	a33f      	add	r3, pc, #252	; (adr r3, 8009700 <__kernel_cos+0x138>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	4682      	mov	sl, r0
 8009608:	468b      	mov	fp, r1
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f6 ff5b 	bl	80004c8 <__aeabi_dmul>
 8009612:	a33d      	add	r3, pc, #244	; (adr r3, 8009708 <__kernel_cos+0x140>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fda0 	bl	800015c <__adddf3>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f6 ff52 	bl	80004c8 <__aeabi_dmul>
 8009624:	a33a      	add	r3, pc, #232	; (adr r3, 8009710 <__kernel_cos+0x148>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fd95 	bl	8000158 <__aeabi_dsub>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	f7f6 ff49 	bl	80004c8 <__aeabi_dmul>
 8009636:	a338      	add	r3, pc, #224	; (adr r3, 8009718 <__kernel_cos+0x150>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fd8e 	bl	800015c <__adddf3>
 8009640:	4622      	mov	r2, r4
 8009642:	462b      	mov	r3, r5
 8009644:	f7f6 ff40 	bl	80004c8 <__aeabi_dmul>
 8009648:	a335      	add	r3, pc, #212	; (adr r3, 8009720 <__kernel_cos+0x158>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fd83 	bl	8000158 <__aeabi_dsub>
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	f7f6 ff37 	bl	80004c8 <__aeabi_dmul>
 800965a:	a333      	add	r3, pc, #204	; (adr r3, 8009728 <__kernel_cos+0x160>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fd7c 	bl	800015c <__adddf3>
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	f7f6 ff2e 	bl	80004c8 <__aeabi_dmul>
 800966c:	4622      	mov	r2, r4
 800966e:	462b      	mov	r3, r5
 8009670:	f7f6 ff2a 	bl	80004c8 <__aeabi_dmul>
 8009674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
 800967c:	4640      	mov	r0, r8
 800967e:	4639      	mov	r1, r7
 8009680:	f7f6 ff22 	bl	80004c8 <__aeabi_dmul>
 8009684:	460b      	mov	r3, r1
 8009686:	4602      	mov	r2, r0
 8009688:	4629      	mov	r1, r5
 800968a:	4620      	mov	r0, r4
 800968c:	f7f6 fd64 	bl	8000158 <__aeabi_dsub>
 8009690:	4b28      	ldr	r3, [pc, #160]	; (8009734 <__kernel_cos+0x16c>)
 8009692:	4680      	mov	r8, r0
 8009694:	429e      	cmp	r6, r3
 8009696:	4689      	mov	r9, r1
 8009698:	dc0e      	bgt.n	80096b8 <__kernel_cos+0xf0>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4650      	mov	r0, sl
 80096a0:	4659      	mov	r1, fp
 80096a2:	f7f6 fd59 	bl	8000158 <__aeabi_dsub>
 80096a6:	4602      	mov	r2, r0
 80096a8:	2000      	movs	r0, #0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4922      	ldr	r1, [pc, #136]	; (8009738 <__kernel_cos+0x170>)
 80096ae:	f7f6 fd53 	bl	8000158 <__aeabi_dsub>
 80096b2:	b003      	add	sp, #12
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	2400      	movs	r4, #0
 80096ba:	4b20      	ldr	r3, [pc, #128]	; (800973c <__kernel_cos+0x174>)
 80096bc:	4622      	mov	r2, r4
 80096be:	429e      	cmp	r6, r3
 80096c0:	bfcc      	ite	gt
 80096c2:	4d1f      	ldrgt	r5, [pc, #124]	; (8009740 <__kernel_cos+0x178>)
 80096c4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80096c8:	462b      	mov	r3, r5
 80096ca:	2000      	movs	r0, #0
 80096cc:	491a      	ldr	r1, [pc, #104]	; (8009738 <__kernel_cos+0x170>)
 80096ce:	f7f6 fd43 	bl	8000158 <__aeabi_dsub>
 80096d2:	4622      	mov	r2, r4
 80096d4:	4606      	mov	r6, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	462b      	mov	r3, r5
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f7f6 fd3b 	bl	8000158 <__aeabi_dsub>
 80096e2:	4642      	mov	r2, r8
 80096e4:	464b      	mov	r3, r9
 80096e6:	f7f6 fd37 	bl	8000158 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	e7dc      	b.n	80096ae <__kernel_cos+0xe6>
 80096f4:	2000      	movs	r0, #0
 80096f6:	4910      	ldr	r1, [pc, #64]	; (8009738 <__kernel_cos+0x170>)
 80096f8:	e7db      	b.n	80096b2 <__kernel_cos+0xea>
 80096fa:	bf00      	nop
 80096fc:	f3af 8000 	nop.w
 8009700:	be8838d4 	.word	0xbe8838d4
 8009704:	bda8fae9 	.word	0xbda8fae9
 8009708:	bdb4b1c4 	.word	0xbdb4b1c4
 800970c:	3e21ee9e 	.word	0x3e21ee9e
 8009710:	809c52ad 	.word	0x809c52ad
 8009714:	3e927e4f 	.word	0x3e927e4f
 8009718:	19cb1590 	.word	0x19cb1590
 800971c:	3efa01a0 	.word	0x3efa01a0
 8009720:	16c15177 	.word	0x16c15177
 8009724:	3f56c16c 	.word	0x3f56c16c
 8009728:	5555554c 	.word	0x5555554c
 800972c:	3fa55555 	.word	0x3fa55555
 8009730:	3fe00000 	.word	0x3fe00000
 8009734:	3fd33332 	.word	0x3fd33332
 8009738:	3ff00000 	.word	0x3ff00000
 800973c:	3fe90000 	.word	0x3fe90000
 8009740:	3fd20000 	.word	0x3fd20000

08009744 <__kernel_rem_pio2>:
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800974c:	9308      	str	r3, [sp, #32]
 800974e:	9106      	str	r1, [sp, #24]
 8009750:	4bb6      	ldr	r3, [pc, #728]	; (8009a2c <__kernel_rem_pio2+0x2e8>)
 8009752:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009754:	f112 0f14 	cmn.w	r2, #20
 8009758:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800975c:	bfa8      	it	ge
 800975e:	1ed4      	subge	r4, r2, #3
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	9b08      	ldr	r3, [sp, #32]
 8009764:	bfb8      	it	lt
 8009766:	2400      	movlt	r4, #0
 8009768:	f103 33ff 	add.w	r3, r3, #4294967295
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	bfa4      	itt	ge
 8009770:	2318      	movge	r3, #24
 8009772:	fb94 f4f3 	sdivge	r4, r4, r3
 8009776:	f06f 0317 	mvn.w	r3, #23
 800977a:	fb04 3303 	mla	r3, r4, r3, r3
 800977e:	eb03 0b02 	add.w	fp, r3, r2
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	9b02      	ldr	r3, [sp, #8]
 8009786:	1aa7      	subs	r7, r4, r2
 8009788:	eb03 0802 	add.w	r8, r3, r2
 800978c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800978e:	2500      	movs	r5, #0
 8009790:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	9009      	str	r0, [sp, #36]	; 0x24
 800979a:	ae20      	add	r6, sp, #128	; 0x80
 800979c:	4545      	cmp	r5, r8
 800979e:	dd14      	ble.n	80097ca <__kernel_rem_pio2+0x86>
 80097a0:	f04f 0800 	mov.w	r8, #0
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	ab20      	add	r3, sp, #128	; 0x80
 80097a8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80097ac:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	4598      	cmp	r8, r3
 80097b4:	dc35      	bgt.n	8009822 <__kernel_rem_pio2+0xde>
 80097b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b8:	2200      	movs	r2, #0
 80097ba:	f1a3 0908 	sub.w	r9, r3, #8
 80097be:	2300      	movs	r3, #0
 80097c0:	462f      	mov	r7, r5
 80097c2:	2600      	movs	r6, #0
 80097c4:	e9cd 2300 	strd	r2, r3, [sp]
 80097c8:	e01f      	b.n	800980a <__kernel_rem_pio2+0xc6>
 80097ca:	42ef      	cmn	r7, r5
 80097cc:	d40b      	bmi.n	80097e6 <__kernel_rem_pio2+0xa2>
 80097ce:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80097d2:	e9cd 2300 	strd	r2, r3, [sp]
 80097d6:	f7f6 fe0d 	bl	80003f4 <__aeabi_i2d>
 80097da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097de:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097e2:	3501      	adds	r5, #1
 80097e4:	e7da      	b.n	800979c <__kernel_rem_pio2+0x58>
 80097e6:	4610      	mov	r0, r2
 80097e8:	4619      	mov	r1, r3
 80097ea:	e7f8      	b.n	80097de <__kernel_rem_pio2+0x9a>
 80097ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80097f4:	f7f6 fe68 	bl	80004c8 <__aeabi_dmul>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009800:	f7f6 fcac 	bl	800015c <__adddf3>
 8009804:	e9cd 0100 	strd	r0, r1, [sp]
 8009808:	3601      	adds	r6, #1
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	3f08      	subs	r7, #8
 800980e:	429e      	cmp	r6, r3
 8009810:	ddec      	ble.n	80097ec <__kernel_rem_pio2+0xa8>
 8009812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009816:	f108 0801 	add.w	r8, r8, #1
 800981a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800981e:	3508      	adds	r5, #8
 8009820:	e7c6      	b.n	80097b0 <__kernel_rem_pio2+0x6c>
 8009822:	9b02      	ldr	r3, [sp, #8]
 8009824:	aa0c      	add	r2, sp, #48	; 0x30
 8009826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800982a:	930b      	str	r3, [sp, #44]	; 0x2c
 800982c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800982e:	9e02      	ldr	r6, [sp, #8]
 8009830:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009834:	930a      	str	r3, [sp, #40]	; 0x28
 8009836:	ab98      	add	r3, sp, #608	; 0x260
 8009838:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800983c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009840:	ab70      	add	r3, sp, #448	; 0x1c0
 8009842:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8009846:	46d0      	mov	r8, sl
 8009848:	46b1      	mov	r9, r6
 800984a:	af0c      	add	r7, sp, #48	; 0x30
 800984c:	9700      	str	r7, [sp, #0]
 800984e:	f1b9 0f00 	cmp.w	r9, #0
 8009852:	f1a8 0808 	sub.w	r8, r8, #8
 8009856:	dc71      	bgt.n	800993c <__kernel_rem_pio2+0x1f8>
 8009858:	465a      	mov	r2, fp
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f000 fc1f 	bl	800a0a0 <scalbn>
 8009862:	2200      	movs	r2, #0
 8009864:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	f7f6 fe2c 	bl	80004c8 <__aeabi_dmul>
 8009870:	f000 fb96 	bl	8009fa0 <floor>
 8009874:	2200      	movs	r2, #0
 8009876:	4b6e      	ldr	r3, [pc, #440]	; (8009a30 <__kernel_rem_pio2+0x2ec>)
 8009878:	f7f6 fe26 	bl	80004c8 <__aeabi_dmul>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 fc68 	bl	8000158 <__aeabi_dsub>
 8009888:	460d      	mov	r5, r1
 800988a:	4604      	mov	r4, r0
 800988c:	f7f7 f8cc 	bl	8000a28 <__aeabi_d2iz>
 8009890:	9004      	str	r0, [sp, #16]
 8009892:	f7f6 fdaf 	bl	80003f4 <__aeabi_i2d>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f6 fc5b 	bl	8000158 <__aeabi_dsub>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	4680      	mov	r8, r0
 80098a8:	4689      	mov	r9, r1
 80098aa:	dd70      	ble.n	800998e <__kernel_rem_pio2+0x24a>
 80098ac:	1e72      	subs	r2, r6, #1
 80098ae:	ab0c      	add	r3, sp, #48	; 0x30
 80098b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80098b4:	9c04      	ldr	r4, [sp, #16]
 80098b6:	f1cb 0118 	rsb	r1, fp, #24
 80098ba:	fa40 f301 	asr.w	r3, r0, r1
 80098be:	441c      	add	r4, r3
 80098c0:	408b      	lsls	r3, r1
 80098c2:	1ac0      	subs	r0, r0, r3
 80098c4:	ab0c      	add	r3, sp, #48	; 0x30
 80098c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80098ca:	f1cb 0317 	rsb	r3, fp, #23
 80098ce:	9404      	str	r4, [sp, #16]
 80098d0:	fa40 f303 	asr.w	r3, r0, r3
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	9b00      	ldr	r3, [sp, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dd66      	ble.n	80099aa <__kernel_rem_pio2+0x266>
 80098dc:	2200      	movs	r2, #0
 80098de:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80098e2:	4614      	mov	r4, r2
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	3301      	adds	r3, #1
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	4296      	cmp	r6, r2
 80098ec:	f300 80ac 	bgt.w	8009a48 <__kernel_rem_pio2+0x304>
 80098f0:	f1bb 0f00 	cmp.w	fp, #0
 80098f4:	dd07      	ble.n	8009906 <__kernel_rem_pio2+0x1c2>
 80098f6:	f1bb 0f01 	cmp.w	fp, #1
 80098fa:	f000 80b4 	beq.w	8009a66 <__kernel_rem_pio2+0x322>
 80098fe:	f1bb 0f02 	cmp.w	fp, #2
 8009902:	f000 80ba 	beq.w	8009a7a <__kernel_rem_pio2+0x336>
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d14e      	bne.n	80099aa <__kernel_rem_pio2+0x266>
 800990c:	4642      	mov	r2, r8
 800990e:	464b      	mov	r3, r9
 8009910:	2000      	movs	r0, #0
 8009912:	4948      	ldr	r1, [pc, #288]	; (8009a34 <__kernel_rem_pio2+0x2f0>)
 8009914:	f7f6 fc20 	bl	8000158 <__aeabi_dsub>
 8009918:	4680      	mov	r8, r0
 800991a:	4689      	mov	r9, r1
 800991c:	2c00      	cmp	r4, #0
 800991e:	d044      	beq.n	80099aa <__kernel_rem_pio2+0x266>
 8009920:	465a      	mov	r2, fp
 8009922:	2000      	movs	r0, #0
 8009924:	4943      	ldr	r1, [pc, #268]	; (8009a34 <__kernel_rem_pio2+0x2f0>)
 8009926:	f000 fbbb 	bl	800a0a0 <scalbn>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4640      	mov	r0, r8
 8009930:	4649      	mov	r1, r9
 8009932:	f7f6 fc11 	bl	8000158 <__aeabi_dsub>
 8009936:	4680      	mov	r8, r0
 8009938:	4689      	mov	r9, r1
 800993a:	e036      	b.n	80099aa <__kernel_rem_pio2+0x266>
 800993c:	2200      	movs	r2, #0
 800993e:	4b3e      	ldr	r3, [pc, #248]	; (8009a38 <__kernel_rem_pio2+0x2f4>)
 8009940:	4620      	mov	r0, r4
 8009942:	4629      	mov	r1, r5
 8009944:	f7f6 fdc0 	bl	80004c8 <__aeabi_dmul>
 8009948:	f7f7 f86e 	bl	8000a28 <__aeabi_d2iz>
 800994c:	f7f6 fd52 	bl	80003f4 <__aeabi_i2d>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009958:	2200      	movs	r2, #0
 800995a:	4b38      	ldr	r3, [pc, #224]	; (8009a3c <__kernel_rem_pio2+0x2f8>)
 800995c:	f7f6 fdb4 	bl	80004c8 <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fbf6 	bl	8000158 <__aeabi_dsub>
 800996c:	f7f7 f85c 	bl	8000a28 <__aeabi_d2iz>
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	f109 39ff 	add.w	r9, r9, #4294967295
 8009976:	f843 0b04 	str.w	r0, [r3], #4
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009980:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009984:	f7f6 fbea 	bl	800015c <__adddf3>
 8009988:	4604      	mov	r4, r0
 800998a:	460d      	mov	r5, r1
 800998c:	e75f      	b.n	800984e <__kernel_rem_pio2+0x10a>
 800998e:	d105      	bne.n	800999c <__kernel_rem_pio2+0x258>
 8009990:	1e73      	subs	r3, r6, #1
 8009992:	aa0c      	add	r2, sp, #48	; 0x30
 8009994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009998:	15c3      	asrs	r3, r0, #23
 800999a:	e79b      	b.n	80098d4 <__kernel_rem_pio2+0x190>
 800999c:	2200      	movs	r2, #0
 800999e:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <__kernel_rem_pio2+0x2fc>)
 80099a0:	f7f7 f818 	bl	80009d4 <__aeabi_dcmpge>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d13e      	bne.n	8009a26 <__kernel_rem_pio2+0x2e2>
 80099a8:	9000      	str	r0, [sp, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	4640      	mov	r0, r8
 80099b0:	4649      	mov	r1, r9
 80099b2:	f7f6 fff1 	bl	8000998 <__aeabi_dcmpeq>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	f000 80b1 	beq.w	8009b1e <__kernel_rem_pio2+0x3da>
 80099bc:	1e74      	subs	r4, r6, #1
 80099be:	4623      	mov	r3, r4
 80099c0:	2200      	movs	r2, #0
 80099c2:	9902      	ldr	r1, [sp, #8]
 80099c4:	428b      	cmp	r3, r1
 80099c6:	da5f      	bge.n	8009a88 <__kernel_rem_pio2+0x344>
 80099c8:	2a00      	cmp	r2, #0
 80099ca:	d074      	beq.n	8009ab6 <__kernel_rem_pio2+0x372>
 80099cc:	ab0c      	add	r3, sp, #48	; 0x30
 80099ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80099d2:	f1ab 0b18 	sub.w	fp, fp, #24
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 809f 	beq.w	8009b1a <__kernel_rem_pio2+0x3d6>
 80099dc:	465a      	mov	r2, fp
 80099de:	2000      	movs	r0, #0
 80099e0:	4914      	ldr	r1, [pc, #80]	; (8009a34 <__kernel_rem_pio2+0x2f0>)
 80099e2:	f000 fb5d 	bl	800a0a0 <scalbn>
 80099e6:	46a2      	mov	sl, r4
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	f04f 0800 	mov.w	r8, #0
 80099f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80099f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009a38 <__kernel_rem_pio2+0x2f4>
 80099f6:	00e5      	lsls	r5, r4, #3
 80099f8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80099fc:	f1ba 0f00 	cmp.w	sl, #0
 8009a00:	f280 80c3 	bge.w	8009b8a <__kernel_rem_pio2+0x446>
 8009a04:	4626      	mov	r6, r4
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	f2c0 80f5 	blt.w	8009bf6 <__kernel_rem_pio2+0x4b2>
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <__kernel_rem_pio2+0x300>)
 8009a0e:	f04f 0a00 	mov.w	sl, #0
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	ab70      	add	r3, sp, #448	; 0x1c0
 8009a16:	f04f 0b00 	mov.w	fp, #0
 8009a1a:	f04f 0800 	mov.w	r8, #0
 8009a1e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009a22:	1ba7      	subs	r7, r4, r6
 8009a24:	e0db      	b.n	8009bde <__kernel_rem_pio2+0x49a>
 8009a26:	2302      	movs	r3, #2
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	e757      	b.n	80098dc <__kernel_rem_pio2+0x198>
 8009a2c:	0800a520 	.word	0x0800a520
 8009a30:	40200000 	.word	0x40200000
 8009a34:	3ff00000 	.word	0x3ff00000
 8009a38:	3e700000 	.word	0x3e700000
 8009a3c:	41700000 	.word	0x41700000
 8009a40:	3fe00000 	.word	0x3fe00000
 8009a44:	0800a4e0 	.word	0x0800a4e0
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	b944      	cbnz	r4, 8009a5e <__kernel_rem_pio2+0x31a>
 8009a4c:	b11b      	cbz	r3, 8009a56 <__kernel_rem_pio2+0x312>
 8009a4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	2301      	movs	r3, #1
 8009a56:	461c      	mov	r4, r3
 8009a58:	3201      	adds	r2, #1
 8009a5a:	3704      	adds	r7, #4
 8009a5c:	e745      	b.n	80098ea <__kernel_rem_pio2+0x1a6>
 8009a5e:	1acb      	subs	r3, r1, r3
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4623      	mov	r3, r4
 8009a64:	e7f7      	b.n	8009a56 <__kernel_rem_pio2+0x312>
 8009a66:	1e72      	subs	r2, r6, #1
 8009a68:	ab0c      	add	r3, sp, #48	; 0x30
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a72:	a90c      	add	r1, sp, #48	; 0x30
 8009a74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a78:	e745      	b.n	8009906 <__kernel_rem_pio2+0x1c2>
 8009a7a:	1e72      	subs	r2, r6, #1
 8009a7c:	ab0c      	add	r3, sp, #48	; 0x30
 8009a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a86:	e7f4      	b.n	8009a72 <__kernel_rem_pio2+0x32e>
 8009a88:	a90c      	add	r1, sp, #48	; 0x30
 8009a8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	430a      	orrs	r2, r1
 8009a92:	e796      	b.n	80099c2 <__kernel_rem_pio2+0x27e>
 8009a94:	3401      	adds	r4, #1
 8009a96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	d0fa      	beq.n	8009a94 <__kernel_rem_pio2+0x350>
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	f106 0801 	add.w	r8, r6, #1
 8009aa4:	18f5      	adds	r5, r6, r3
 8009aa6:	ab20      	add	r3, sp, #128	; 0x80
 8009aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009aac:	4434      	add	r4, r6
 8009aae:	4544      	cmp	r4, r8
 8009ab0:	da04      	bge.n	8009abc <__kernel_rem_pio2+0x378>
 8009ab2:	4626      	mov	r6, r4
 8009ab4:	e6bf      	b.n	8009836 <__kernel_rem_pio2+0xf2>
 8009ab6:	2401      	movs	r4, #1
 8009ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aba:	e7ec      	b.n	8009a96 <__kernel_rem_pio2+0x352>
 8009abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abe:	f04f 0900 	mov.w	r9, #0
 8009ac2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009ac6:	f7f6 fc95 	bl	80003f4 <__aeabi_i2d>
 8009aca:	2600      	movs	r6, #0
 8009acc:	2700      	movs	r7, #0
 8009ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8009ad4:	3b08      	subs	r3, #8
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	9504      	str	r5, [sp, #16]
 8009ada:	9b07      	ldr	r3, [sp, #28]
 8009adc:	4599      	cmp	r9, r3
 8009ade:	dd05      	ble.n	8009aec <__kernel_rem_pio2+0x3a8>
 8009ae0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8009ae4:	f108 0801 	add.w	r8, r8, #1
 8009ae8:	3508      	adds	r5, #8
 8009aea:	e7e0      	b.n	8009aae <__kernel_rem_pio2+0x36a>
 8009aec:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009af0:	9900      	ldr	r1, [sp, #0]
 8009af2:	f109 0901 	add.w	r9, r9, #1
 8009af6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009afa:	9100      	str	r1, [sp, #0]
 8009afc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8009b00:	f8cd c010 	str.w	ip, [sp, #16]
 8009b04:	f7f6 fce0 	bl	80004c8 <__aeabi_dmul>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	f7f6 fb24 	bl	800015c <__adddf3>
 8009b14:	4606      	mov	r6, r0
 8009b16:	460f      	mov	r7, r1
 8009b18:	e7df      	b.n	8009ada <__kernel_rem_pio2+0x396>
 8009b1a:	3c01      	subs	r4, #1
 8009b1c:	e756      	b.n	80099cc <__kernel_rem_pio2+0x288>
 8009b1e:	f1cb 0200 	rsb	r2, fp, #0
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	f000 fabb 	bl	800a0a0 <scalbn>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4ba4      	ldr	r3, [pc, #656]	; (8009dc0 <__kernel_rem_pio2+0x67c>)
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	f7f6 ff4f 	bl	80009d4 <__aeabi_dcmpge>
 8009b36:	b1f8      	cbz	r0, 8009b78 <__kernel_rem_pio2+0x434>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4ba2      	ldr	r3, [pc, #648]	; (8009dc4 <__kernel_rem_pio2+0x680>)
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	4629      	mov	r1, r5
 8009b40:	f7f6 fcc2 	bl	80004c8 <__aeabi_dmul>
 8009b44:	f7f6 ff70 	bl	8000a28 <__aeabi_d2iz>
 8009b48:	4607      	mov	r7, r0
 8009b4a:	f7f6 fc53 	bl	80003f4 <__aeabi_i2d>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	4b9b      	ldr	r3, [pc, #620]	; (8009dc0 <__kernel_rem_pio2+0x67c>)
 8009b52:	f7f6 fcb9 	bl	80004c8 <__aeabi_dmul>
 8009b56:	460b      	mov	r3, r1
 8009b58:	4602      	mov	r2, r0
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7f6 fafb 	bl	8000158 <__aeabi_dsub>
 8009b62:	f7f6 ff61 	bl	8000a28 <__aeabi_d2iz>
 8009b66:	1c74      	adds	r4, r6, #1
 8009b68:	ab0c      	add	r3, sp, #48	; 0x30
 8009b6a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009b6e:	f10b 0b18 	add.w	fp, fp, #24
 8009b72:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8009b76:	e731      	b.n	80099dc <__kernel_rem_pio2+0x298>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 ff54 	bl	8000a28 <__aeabi_d2iz>
 8009b80:	ab0c      	add	r3, sp, #48	; 0x30
 8009b82:	4634      	mov	r4, r6
 8009b84:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009b88:	e728      	b.n	80099dc <__kernel_rem_pio2+0x298>
 8009b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8009b8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009b90:	f7f6 fc30 	bl	80003f4 <__aeabi_i2d>
 8009b94:	4632      	mov	r2, r6
 8009b96:	463b      	mov	r3, r7
 8009b98:	f7f6 fc96 	bl	80004c8 <__aeabi_dmul>
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fc8e 	bl	80004c8 <__aeabi_dmul>
 8009bac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	e722      	b.n	80099fc <__kernel_rem_pio2+0x2b8>
 8009bb6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009bba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009bbe:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8009bc2:	f8cd c01c 	str.w	ip, [sp, #28]
 8009bc6:	f7f6 fc7f 	bl	80004c8 <__aeabi_dmul>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4650      	mov	r0, sl
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	f7f6 fac3 	bl	800015c <__adddf3>
 8009bd6:	4682      	mov	sl, r0
 8009bd8:	468b      	mov	fp, r1
 8009bda:	f108 0801 	add.w	r8, r8, #1
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	4598      	cmp	r8, r3
 8009be2:	dc01      	bgt.n	8009be8 <__kernel_rem_pio2+0x4a4>
 8009be4:	45b8      	cmp	r8, r7
 8009be6:	dde6      	ble.n	8009bb6 <__kernel_rem_pio2+0x472>
 8009be8:	ab48      	add	r3, sp, #288	; 0x120
 8009bea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009bee:	e9c7 ab00 	strd	sl, fp, [r7]
 8009bf2:	3e01      	subs	r6, #1
 8009bf4:	e707      	b.n	8009a06 <__kernel_rem_pio2+0x2c2>
 8009bf6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	dc09      	bgt.n	8009c10 <__kernel_rem_pio2+0x4cc>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dc32      	bgt.n	8009c66 <__kernel_rem_pio2+0x522>
 8009c00:	d05a      	beq.n	8009cb8 <__kernel_rem_pio2+0x574>
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	f003 0007 	and.w	r0, r3, #7
 8009c08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d1f5      	bne.n	8009c02 <__kernel_rem_pio2+0x4be>
 8009c16:	ab48      	add	r3, sp, #288	; 0x120
 8009c18:	441d      	add	r5, r3
 8009c1a:	46aa      	mov	sl, r5
 8009c1c:	46a3      	mov	fp, r4
 8009c1e:	f1bb 0f00 	cmp.w	fp, #0
 8009c22:	dc76      	bgt.n	8009d12 <__kernel_rem_pio2+0x5ce>
 8009c24:	46aa      	mov	sl, r5
 8009c26:	46a3      	mov	fp, r4
 8009c28:	f1bb 0f01 	cmp.w	fp, #1
 8009c2c:	f300 8090 	bgt.w	8009d50 <__kernel_rem_pio2+0x60c>
 8009c30:	2700      	movs	r7, #0
 8009c32:	463e      	mov	r6, r7
 8009c34:	2c01      	cmp	r4, #1
 8009c36:	f300 80aa 	bgt.w	8009d8e <__kernel_rem_pio2+0x64a>
 8009c3a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009c3e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f040 80ac 	bne.w	8009da2 <__kernel_rem_pio2+0x65e>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	462a      	mov	r2, r5
 8009c4e:	9806      	ldr	r0, [sp, #24]
 8009c50:	e9c0 2300 	strd	r2, r3, [r0]
 8009c54:	4622      	mov	r2, r4
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009c5c:	463a      	mov	r2, r7
 8009c5e:	4633      	mov	r3, r6
 8009c60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009c64:	e7cd      	b.n	8009c02 <__kernel_rem_pio2+0x4be>
 8009c66:	2000      	movs	r0, #0
 8009c68:	46a0      	mov	r8, r4
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	ab48      	add	r3, sp, #288	; 0x120
 8009c6e:	441d      	add	r5, r3
 8009c70:	f1b8 0f00 	cmp.w	r8, #0
 8009c74:	da3a      	bge.n	8009cec <__kernel_rem_pio2+0x5a8>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d03e      	beq.n	8009cfa <__kernel_rem_pio2+0x5b6>
 8009c7c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009c80:	4602      	mov	r2, r0
 8009c82:	462b      	mov	r3, r5
 8009c84:	9d06      	ldr	r5, [sp, #24]
 8009c86:	2601      	movs	r6, #1
 8009c88:	e9c5 2300 	strd	r2, r3, [r5]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009c92:	f7f6 fa61 	bl	8000158 <__aeabi_dsub>
 8009c96:	4684      	mov	ip, r0
 8009c98:	460f      	mov	r7, r1
 8009c9a:	ad48      	add	r5, sp, #288	; 0x120
 8009c9c:	42b4      	cmp	r4, r6
 8009c9e:	f105 0508 	add.w	r5, r5, #8
 8009ca2:	da2c      	bge.n	8009cfe <__kernel_rem_pio2+0x5ba>
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	b10b      	cbz	r3, 8009cac <__kernel_rem_pio2+0x568>
 8009ca8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009cac:	4662      	mov	r2, ip
 8009cae:	463b      	mov	r3, r7
 8009cb0:	9906      	ldr	r1, [sp, #24]
 8009cb2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009cb6:	e7a4      	b.n	8009c02 <__kernel_rem_pio2+0x4be>
 8009cb8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009cba:	ab48      	add	r3, sp, #288	; 0x120
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	441d      	add	r5, r3
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	da09      	bge.n	8009cd8 <__kernel_rem_pio2+0x594>
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	b10b      	cbz	r3, 8009ccc <__kernel_rem_pio2+0x588>
 8009cc8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	9906      	ldr	r1, [sp, #24]
 8009cd2:	e9c1 2300 	strd	r2, r3, [r1]
 8009cd6:	e794      	b.n	8009c02 <__kernel_rem_pio2+0x4be>
 8009cd8:	4630      	mov	r0, r6
 8009cda:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fa3c 	bl	800015c <__adddf3>
 8009ce4:	3c01      	subs	r4, #1
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	e7e9      	b.n	8009cc0 <__kernel_rem_pio2+0x57c>
 8009cec:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009cf0:	f7f6 fa34 	bl	800015c <__adddf3>
 8009cf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cf8:	e7ba      	b.n	8009c70 <__kernel_rem_pio2+0x52c>
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	e7c0      	b.n	8009c80 <__kernel_rem_pio2+0x53c>
 8009cfe:	4660      	mov	r0, ip
 8009d00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 fa29 	bl	800015c <__adddf3>
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	4684      	mov	ip, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	e7c4      	b.n	8009c9c <__kernel_rem_pio2+0x558>
 8009d12:	e9da 6700 	ldrd	r6, r7, [sl]
 8009d16:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009d1a:	4632      	mov	r2, r6
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 fa1b 	bl	800015c <__adddf3>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fa11 	bl	8000158 <__aeabi_dsub>
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	f7f6 fa0f 	bl	800015c <__adddf3>
 8009d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d42:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d4a:	e9ca 2300 	strd	r2, r3, [sl]
 8009d4e:	e766      	b.n	8009c1e <__kernel_rem_pio2+0x4da>
 8009d50:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d54:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 f9fc 	bl	800015c <__adddf3>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 f9f2 	bl	8000158 <__aeabi_dsub>
 8009d74:	4642      	mov	r2, r8
 8009d76:	464b      	mov	r3, r9
 8009d78:	f7f6 f9f0 	bl	800015c <__adddf3>
 8009d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d80:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d88:	e9ca 2300 	strd	r2, r3, [sl]
 8009d8c:	e74c      	b.n	8009c28 <__kernel_rem_pio2+0x4e4>
 8009d8e:	4638      	mov	r0, r7
 8009d90:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009d94:	4631      	mov	r1, r6
 8009d96:	f7f6 f9e1 	bl	800015c <__adddf3>
 8009d9a:	3c01      	subs	r4, #1
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	460e      	mov	r6, r1
 8009da0:	e748      	b.n	8009c34 <__kernel_rem_pio2+0x4f0>
 8009da2:	9b06      	ldr	r3, [sp, #24]
 8009da4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009da8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009dac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009db0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009db4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009db8:	601d      	str	r5, [r3, #0]
 8009dba:	615e      	str	r6, [r3, #20]
 8009dbc:	e721      	b.n	8009c02 <__kernel_rem_pio2+0x4be>
 8009dbe:	bf00      	nop
 8009dc0:	41700000 	.word	0x41700000
 8009dc4:	3e700000 	.word	0x3e700000

08009dc8 <__kernel_sin>:
 8009dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	b086      	sub	sp, #24
 8009dce:	e9cd 2300 	strd	r2, r3, [sp]
 8009dd2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009dda:	4682      	mov	sl, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009de0:	da03      	bge.n	8009dea <__kernel_sin+0x22>
 8009de2:	f7f6 fe21 	bl	8000a28 <__aeabi_d2iz>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d050      	beq.n	8009e8c <__kernel_sin+0xc4>
 8009dea:	4652      	mov	r2, sl
 8009dec:	4623      	mov	r3, r4
 8009dee:	4650      	mov	r0, sl
 8009df0:	4621      	mov	r1, r4
 8009df2:	f7f6 fb69 	bl	80004c8 <__aeabi_dmul>
 8009df6:	4606      	mov	r6, r0
 8009df8:	460f      	mov	r7, r1
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4650      	mov	r0, sl
 8009e00:	4621      	mov	r1, r4
 8009e02:	f7f6 fb61 	bl	80004c8 <__aeabi_dmul>
 8009e06:	a33e      	add	r3, pc, #248	; (adr r3, 8009f00 <__kernel_sin+0x138>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4689      	mov	r9, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fb58 	bl	80004c8 <__aeabi_dmul>
 8009e18:	a33b      	add	r3, pc, #236	; (adr r3, 8009f08 <__kernel_sin+0x140>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 f99b 	bl	8000158 <__aeabi_dsub>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 fb4f 	bl	80004c8 <__aeabi_dmul>
 8009e2a:	a339      	add	r3, pc, #228	; (adr r3, 8009f10 <__kernel_sin+0x148>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 f994 	bl	800015c <__adddf3>
 8009e34:	4632      	mov	r2, r6
 8009e36:	463b      	mov	r3, r7
 8009e38:	f7f6 fb46 	bl	80004c8 <__aeabi_dmul>
 8009e3c:	a336      	add	r3, pc, #216	; (adr r3, 8009f18 <__kernel_sin+0x150>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 f989 	bl	8000158 <__aeabi_dsub>
 8009e46:	4632      	mov	r2, r6
 8009e48:	463b      	mov	r3, r7
 8009e4a:	f7f6 fb3d 	bl	80004c8 <__aeabi_dmul>
 8009e4e:	a334      	add	r3, pc, #208	; (adr r3, 8009f20 <__kernel_sin+0x158>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 f982 	bl	800015c <__adddf3>
 8009e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e5c:	b9dd      	cbnz	r5, 8009e96 <__kernel_sin+0xce>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4630      	mov	r0, r6
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fb2f 	bl	80004c8 <__aeabi_dmul>
 8009e6a:	a32f      	add	r3, pc, #188	; (adr r3, 8009f28 <__kernel_sin+0x160>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 f972 	bl	8000158 <__aeabi_dsub>
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	f7f6 fb26 	bl	80004c8 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4650      	mov	r0, sl
 8009e82:	4621      	mov	r1, r4
 8009e84:	f7f6 f96a 	bl	800015c <__adddf3>
 8009e88:	4682      	mov	sl, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	4621      	mov	r1, r4
 8009e90:	b006      	add	sp, #24
 8009e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e96:	2200      	movs	r2, #0
 8009e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e9c:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <__kernel_sin+0x168>)
 8009e9e:	f7f6 fb13 	bl	80004c8 <__aeabi_dmul>
 8009ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fb0b 	bl	80004c8 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eba:	f7f6 f94d 	bl	8000158 <__aeabi_dsub>
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	463b      	mov	r3, r7
 8009ec2:	f7f6 fb01 	bl	80004c8 <__aeabi_dmul>
 8009ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eca:	f7f6 f945 	bl	8000158 <__aeabi_dsub>
 8009ece:	a316      	add	r3, pc, #88	; (adr r3, 8009f28 <__kernel_sin+0x160>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 faf4 	bl	80004c8 <__aeabi_dmul>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 f938 	bl	800015c <__adddf3>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	f7f6 f930 	bl	8000158 <__aeabi_dsub>
 8009ef8:	e7c6      	b.n	8009e88 <__kernel_sin+0xc0>
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w
 8009f00:	5acfd57c 	.word	0x5acfd57c
 8009f04:	3de5d93a 	.word	0x3de5d93a
 8009f08:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009f10:	57b1fe7d 	.word	0x57b1fe7d
 8009f14:	3ec71de3 	.word	0x3ec71de3
 8009f18:	19c161d5 	.word	0x19c161d5
 8009f1c:	3f2a01a0 	.word	0x3f2a01a0
 8009f20:	1110f8a6 	.word	0x1110f8a6
 8009f24:	3f811111 	.word	0x3f811111
 8009f28:	55555549 	.word	0x55555549
 8009f2c:	3fc55555 	.word	0x3fc55555
 8009f30:	3fe00000 	.word	0x3fe00000

08009f34 <with_errno>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4604      	mov	r4, r0
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4616      	mov	r6, r2
 8009f3c:	f7fd f9ce 	bl	80072dc <__errno>
 8009f40:	4629      	mov	r1, r5
 8009f42:	6006      	str	r6, [r0, #0]
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}

08009f48 <xflow>:
 8009f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f4a:	4615      	mov	r5, r2
 8009f4c:	461c      	mov	r4, r3
 8009f4e:	b180      	cbz	r0, 8009f72 <xflow+0x2a>
 8009f50:	4610      	mov	r0, r2
 8009f52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f56:	e9cd 0100 	strd	r0, r1, [sp]
 8009f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7f6 fab1 	bl	80004c8 <__aeabi_dmul>
 8009f66:	2222      	movs	r2, #34	; 0x22
 8009f68:	b003      	add	sp, #12
 8009f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f6e:	f7ff bfe1 	b.w	8009f34 <with_errno>
 8009f72:	4610      	mov	r0, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	e7ee      	b.n	8009f56 <xflow+0xe>

08009f78 <__math_uflow>:
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f7e:	f7ff bfe3 	b.w	8009f48 <xflow>

08009f82 <__math_oflow>:
 8009f82:	2200      	movs	r2, #0
 8009f84:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009f88:	f7ff bfde 	b.w	8009f48 <xflow>

08009f8c <fabs>:
 8009f8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009f90:	4770      	bx	lr

08009f92 <finite>:
 8009f92:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009f96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f9a:	0fc0      	lsrs	r0, r0, #31
 8009f9c:	4770      	bx	lr
	...

08009fa0 <floor>:
 8009fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009fa8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009fac:	2e13      	cmp	r6, #19
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	dc33      	bgt.n	800a022 <floor+0x82>
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	da14      	bge.n	8009fe8 <floor+0x48>
 8009fbe:	a334      	add	r3, pc, #208	; (adr r3, 800a090 <floor+0xf0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 f8ca 	bl	800015c <__adddf3>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f7f6 fd0c 	bl	80009e8 <__aeabi_dcmpgt>
 8009fd0:	b138      	cbz	r0, 8009fe2 <floor+0x42>
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	da58      	bge.n	800a088 <floor+0xe8>
 8009fd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009fda:	431d      	orrs	r5, r3
 8009fdc:	d001      	beq.n	8009fe2 <floor+0x42>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	4c2d      	ldr	r4, [pc, #180]	; (800a098 <floor+0xf8>)
 8009fe2:	4623      	mov	r3, r4
 8009fe4:	462f      	mov	r7, r5
 8009fe6:	e025      	b.n	800a034 <floor+0x94>
 8009fe8:	4a2c      	ldr	r2, [pc, #176]	; (800a09c <floor+0xfc>)
 8009fea:	fa42 f806 	asr.w	r8, r2, r6
 8009fee:	ea01 0208 	and.w	r2, r1, r8
 8009ff2:	4302      	orrs	r2, r0
 8009ff4:	d01e      	beq.n	800a034 <floor+0x94>
 8009ff6:	a326      	add	r3, pc, #152	; (adr r3, 800a090 <floor+0xf0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f8ae 	bl	800015c <__adddf3>
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	f7f6 fcf0 	bl	80009e8 <__aeabi_dcmpgt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0ea      	beq.n	8009fe2 <floor+0x42>
 800a00c:	2c00      	cmp	r4, #0
 800a00e:	bfbe      	ittt	lt
 800a010:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a014:	fa43 f606 	asrlt.w	r6, r3, r6
 800a018:	19a4      	addlt	r4, r4, r6
 800a01a:	2500      	movs	r5, #0
 800a01c:	ea24 0408 	bic.w	r4, r4, r8
 800a020:	e7df      	b.n	8009fe2 <floor+0x42>
 800a022:	2e33      	cmp	r6, #51	; 0x33
 800a024:	dd0a      	ble.n	800a03c <floor+0x9c>
 800a026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a02a:	d103      	bne.n	800a034 <floor+0x94>
 800a02c:	f7f6 f896 	bl	800015c <__adddf3>
 800a030:	4607      	mov	r7, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4638      	mov	r0, r7
 800a036:	4619      	mov	r1, r3
 800a038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a044:	fa22 f808 	lsr.w	r8, r2, r8
 800a048:	ea18 0f00 	tst.w	r8, r0
 800a04c:	d0f2      	beq.n	800a034 <floor+0x94>
 800a04e:	a310      	add	r3, pc, #64	; (adr r3, 800a090 <floor+0xf0>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 f882 	bl	800015c <__adddf3>
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	f7f6 fcc4 	bl	80009e8 <__aeabi_dcmpgt>
 800a060:	2800      	cmp	r0, #0
 800a062:	d0be      	beq.n	8009fe2 <floor+0x42>
 800a064:	2c00      	cmp	r4, #0
 800a066:	da02      	bge.n	800a06e <floor+0xce>
 800a068:	2e14      	cmp	r6, #20
 800a06a:	d103      	bne.n	800a074 <floor+0xd4>
 800a06c:	3401      	adds	r4, #1
 800a06e:	ea25 0508 	bic.w	r5, r5, r8
 800a072:	e7b6      	b.n	8009fe2 <floor+0x42>
 800a074:	2301      	movs	r3, #1
 800a076:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a07a:	fa03 f606 	lsl.w	r6, r3, r6
 800a07e:	4435      	add	r5, r6
 800a080:	42bd      	cmp	r5, r7
 800a082:	bf38      	it	cc
 800a084:	18e4      	addcc	r4, r4, r3
 800a086:	e7f2      	b.n	800a06e <floor+0xce>
 800a088:	2500      	movs	r5, #0
 800a08a:	462c      	mov	r4, r5
 800a08c:	e7a9      	b.n	8009fe2 <floor+0x42>
 800a08e:	bf00      	nop
 800a090:	8800759c 	.word	0x8800759c
 800a094:	7e37e43c 	.word	0x7e37e43c
 800a098:	bff00000 	.word	0xbff00000
 800a09c:	000fffff 	.word	0x000fffff

0800a0a0 <scalbn>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	4617      	mov	r7, r2
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	b996      	cbnz	r6, 800a0d6 <scalbn+0x36>
 800a0b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0b4:	4303      	orrs	r3, r0
 800a0b6:	d039      	beq.n	800a12c <scalbn+0x8c>
 800a0b8:	4b33      	ldr	r3, [pc, #204]	; (800a188 <scalbn+0xe8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7f6 fa04 	bl	80004c8 <__aeabi_dmul>
 800a0c0:	4b32      	ldr	r3, [pc, #200]	; (800a18c <scalbn+0xec>)
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	429f      	cmp	r7, r3
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	da0f      	bge.n	800a0ea <scalbn+0x4a>
 800a0ca:	a32b      	add	r3, pc, #172	; (adr r3, 800a178 <scalbn+0xd8>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f9fa 	bl	80004c8 <__aeabi_dmul>
 800a0d4:	e006      	b.n	800a0e4 <scalbn+0x44>
 800a0d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a0da:	4296      	cmp	r6, r2
 800a0dc:	d10a      	bne.n	800a0f4 <scalbn+0x54>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	f7f6 f83c 	bl	800015c <__adddf3>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	e020      	b.n	800a12c <scalbn+0x8c>
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a0f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a0f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a0f8:	19b9      	adds	r1, r7, r6
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	dd0e      	ble.n	800a11c <scalbn+0x7c>
 800a0fe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a102:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a106:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a10a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a10e:	4820      	ldr	r0, [pc, #128]	; (800a190 <scalbn+0xf0>)
 800a110:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a114:	a31a      	add	r3, pc, #104	; (adr r3, 800a180 <scalbn+0xe0>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	e7d9      	b.n	800a0d0 <scalbn+0x30>
 800a11c:	2900      	cmp	r1, #0
 800a11e:	dd08      	ble.n	800a132 <scalbn+0x92>
 800a120:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a124:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a128:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a132:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a136:	da12      	bge.n	800a15e <scalbn+0xbe>
 800a138:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a13c:	429f      	cmp	r7, r3
 800a13e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a142:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a146:	dcdc      	bgt.n	800a102 <scalbn+0x62>
 800a148:	a30b      	add	r3, pc, #44	; (adr r3, 800a178 <scalbn+0xd8>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a152:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a156:	480f      	ldr	r0, [pc, #60]	; (800a194 <scalbn+0xf4>)
 800a158:	f041 011f 	orr.w	r1, r1, #31
 800a15c:	e7b8      	b.n	800a0d0 <scalbn+0x30>
 800a15e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a162:	3136      	adds	r1, #54	; 0x36
 800a164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a168:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	2200      	movs	r2, #0
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <scalbn+0xf8>)
 800a174:	e7ac      	b.n	800a0d0 <scalbn+0x30>
 800a176:	bf00      	nop
 800a178:	c2f8f359 	.word	0xc2f8f359
 800a17c:	01a56e1f 	.word	0x01a56e1f
 800a180:	8800759c 	.word	0x8800759c
 800a184:	7e37e43c 	.word	0x7e37e43c
 800a188:	43500000 	.word	0x43500000
 800a18c:	ffff3cb0 	.word	0xffff3cb0
 800a190:	8800759c 	.word	0x8800759c
 800a194:	c2f8f359 	.word	0xc2f8f359
 800a198:	3c900000 	.word	0x3c900000

0800a19c <_init>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_fini>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr
